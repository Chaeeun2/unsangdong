{"ast":null,"code":"import * as util from \"./util.js\";\nimport ColorSpace from \"./space.js\";\nimport defaults from \"./defaults.js\";\nimport getColor from \"./getColor.js\";\nimport checkInGamut from \"./inGamut.js\";\nimport toGamut from \"./toGamut.js\";\nimport clone from \"./clone.js\";\n\n/**\n * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space\n * @param {Object} options\n * @param {number} options.precision - Significant digits\n * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\n */\nexport default function serialize(color, {\n  precision = defaults.precision,\n  format = \"default\",\n  inGamut = true,\n  ...customOptions\n} = {}) {\n  let ret;\n  color = getColor(color);\n  let formatId = format;\n  format = color.space.getFormat(format) ?? color.space.getFormat(\"default\") ?? ColorSpace.DEFAULT_FORMAT;\n\n  // The assignment to coords and inGamut needs to stay in the order they are now\n  // The order of the assignment was changed as a workaround for a bug in Next.js\n  // See this issue for details: https://github.com/color-js/color.js/issues/260\n\n  let coords = color.coords.slice(); // clone so we can manipulate it\n\n  inGamut ||= format.toGamut;\n  if (inGamut && !checkInGamut(color)) {\n    // FIXME what happens if the color contains NaNs?\n    coords = toGamut(clone(color), inGamut === true ? undefined : inGamut).coords;\n  }\n  if (format.type === \"custom\") {\n    customOptions.precision = precision;\n    if (format.serialize) {\n      ret = format.serialize(coords, color.alpha, customOptions);\n    } else {\n      throw new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);\n    }\n  } else {\n    // Functional syntax\n    let name = format.name || \"color\";\n    if (format.serializeCoords) {\n      coords = format.serializeCoords(coords, precision);\n    } else {\n      if (precision !== null) {\n        coords = coords.map(c => {\n          return util.serializeNumber(c, {\n            precision\n          });\n        });\n      }\n    }\n    let args = [...coords];\n    if (name === \"color\") {\n      // If output is a color() function, add colorspace id as first argument\n      let cssId = format.id || format.ids?.[0] || color.space.id;\n      args.unshift(cssId);\n    }\n    let alpha = color.alpha;\n    if (precision !== null) {\n      alpha = util.serializeNumber(alpha, {\n        precision\n      });\n    }\n    let strAlpha = color.alpha >= 1 || format.noAlpha ? \"\" : `${format.commas ? \",\" : \" /\"} ${alpha}`;\n    ret = `${name}(${args.join(format.commas ? \", \" : \" \")}${strAlpha})`;\n  }\n  return ret;\n}","map":{"version":3,"names":["util","ColorSpace","defaults","getColor","checkInGamut","toGamut","clone","serialize","color","precision","format","inGamut","customOptions","ret","formatId","space","getFormat","DEFAULT_FORMAT","coords","slice","undefined","type","alpha","TypeError","name","serializeCoords","map","c","serializeNumber","args","cssId","id","ids","unshift","strAlpha","noAlpha","commas","join"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/serialize.js"],"sourcesContent":["import * as util from \"./util.js\";\nimport ColorSpace from \"./space.js\";\nimport defaults from \"./defaults.js\";\nimport getColor from \"./getColor.js\";\nimport checkInGamut from \"./inGamut.js\";\nimport toGamut from \"./toGamut.js\";\nimport clone from \"./clone.js\";\n\n/**\n * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space\n * @param {Object} options\n * @param {number} options.precision - Significant digits\n * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\n */\nexport default function serialize (color, {\n\tprecision = defaults.precision,\n\tformat = \"default\",\n\tinGamut = true,\n\t...customOptions\n} = {}) {\n\tlet ret;\n\n\tcolor = getColor(color);\n\n\tlet formatId = format;\n\tformat = color.space.getFormat(format)\n\t       ?? color.space.getFormat(\"default\")\n\t       ?? ColorSpace.DEFAULT_FORMAT;\n\n\t// The assignment to coords and inGamut needs to stay in the order they are now\n\t// The order of the assignment was changed as a workaround for a bug in Next.js\n\t// See this issue for details: https://github.com/color-js/color.js/issues/260\n\n\tlet coords = color.coords.slice(); // clone so we can manipulate it\n\n\tinGamut ||= format.toGamut;\n\n\tif (inGamut && !checkInGamut(color)) {\n\t\t// FIXME what happens if the color contains NaNs?\n\t\tcoords = toGamut(clone(color), inGamut === true ? undefined : inGamut).coords;\n\t}\n\n\tif (format.type === \"custom\") {\n\t\tcustomOptions.precision = precision;\n\n\t\tif (format.serialize) {\n\t\t\tret = format.serialize(coords, color.alpha, customOptions);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);\n\t\t}\n\t}\n\telse {\n\t\t// Functional syntax\n\t\tlet name = format.name || \"color\";\n\n\t\tif (format.serializeCoords) {\n\t\t\tcoords = format.serializeCoords(coords, precision);\n\t\t}\n\t\telse {\n\t\t\tif (precision !== null) {\n\t\t\t\tcoords = coords.map(c => {\n\t\t\t\t\treturn util.serializeNumber(c, {precision});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet args = [...coords];\n\n\t\tif (name === \"color\") {\n\t\t\t// If output is a color() function, add colorspace id as first argument\n\t\t\tlet cssId = format.id || format.ids?.[0] || color.space.id;\n\t\t\targs.unshift(cssId);\n\t\t}\n\n\t\tlet alpha = color.alpha;\n\t\tif (precision !== null) {\n\t\t\talpha = util.serializeNumber(alpha, {precision});\n\t\t}\n\n\t\tlet strAlpha = color.alpha >= 1 || format.noAlpha ? \"\" : `${format.commas ? \",\" : \" /\"} ${alpha}`;\n\t\tret = `${name}(${args.join(format.commas ? \", \" : \" \")}${strAlpha})`;\n\t}\n\n\treturn ret;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}