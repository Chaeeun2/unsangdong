{"ast":null,"code":"import { f as TWO_PI } from '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @requires constants\n */\n\n/// HELPERS FOR REMAINDER METHOD\nconst calculateRemainder2D = function (xComponent, yComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  return this;\n};\nconst calculateRemainder3D = function (xComponent, yComponent, zComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  if (zComponent !== 0) {\n    this.z = this.z % zComponent;\n  }\n  return this;\n};\nclass Vector {\n  // This is how it comes in with createVector()\n  // This check if the first argument is a function\n  constructor(...args) {\n    let values = args.map(arg => arg || 0);\n    if (typeof args[0] === \"function\") {\n      this.isPInst = true;\n      this._fromRadians = args[0];\n      this._toRadians = args[1];\n      values = args.slice(2).map(arg => arg || 0);\n    }\n    let dimensions = values.length; // TODO: make default 3 if no arguments\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = values;\n    }\n  }\n\n  /**\n   * Gets the values of the N-dimensional vector.\n   *\n   * This method returns an array of numbers that represent the vector.\n   * Each number in the array corresponds to a different component of the vector,\n   * like its position in different directions (e.g., x, y, z).\n   *\n   * @returns {Array<number>} The array of values representing the vector.\n   */\n  get values() {\n    return this._values;\n  }\n\n  /**\n   * Sets the values of the vector.\n   *\n   * This method allows you to update the entire vector with a new set of values.\n   * You need to provide an array of numbers, where each number represents a component\n   * of the vector (e.g., x, y, z). The length of the array should match the number of\n   * dimensions of the vector. If the array is shorter, the missing components will be\n   * set to 0. If the array is longer, the extra values will be ignored.\n   *\n   * @param {Array<number>} newValues - An array of numbers representing the new values for the vector.\n   *\n   */\n  set values(newValues) {\n    let dimensions = newValues.length;\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = newValues.slice();\n    }\n  }\n\n  /**\n   * Gets the x component of the vector.\n   *\n   * This method returns the value of the x component of the vector.\n   * Think of the x component as the horizontal position or the first number in the vector.\n   * If the x component is not defined, it will return 0.\n   *\n   * @returns {Number} The x component of the vector. Returns 0 if the value is not defined.\n   */\n  get x() {\n    return this._values[0] || 0;\n  }\n\n  /**\n   * Retrieves the value at the specified index from the vector.\n   *\n   * This method allows you to get the value of a specific component of the vector\n   * by providing its index. Think of the vector as a list of numbers, where each\n   * number represents a different direction (like x, y, or z). The index is just\n   * the position of the number in that list.\n   *\n   * For example, if you have a vector with values 10, 20, 30 the index 0 would\n   * give you the first value 10, index 1 would give you the second value 20,\n   * and so on.\n   *\n   * @param {Number} index - The position of the value you want to get from the vector.\n   * @returns {Number} The value at the specified position in the vector.\n   * @throws Will throw an error if the index is out of bounds, meaning if you try to\n   *          get a value from a position that doesn't exist in the vector.\n   */\n  getValue(index) {\n    if (index < this._values.length) {\n      return this._values[index];\n    } else {\n      p5._friendlyError(\"The index parameter is trying to set a value outside the bounds of the vector\", \"p5.Vector.setValue\");\n    }\n  }\n\n  /**\n   * Sets the value at the specified index of the vector.\n   *\n   * This method allows you to change a specific component of the vector by providing its index and the new value you want to set.\n   * Think of the vector as a list of numbers, where each number represents a different direction (like x, y, or z).\n   * The index is just the position of the number in that list.\n   *\n   * For example, if you have a vector with values [0, 20, 30], and you want to change the second value (20) to 50,\n   * you would use this method with index 1 (since indexes start at 0) and value 50.\n   *\n   * @param {Number} index - The position in the vector where you want to set the new value.\n   * @param {Number} value - The new value you want to set at the specified position.\n   * @throws Will throw an error if the index is outside the bounds of the vector, meaning if you try to set a value at a position that doesn't exist in the vector.\n   */\n  setValue(index, value) {\n    if (index < this._values.length) {\n      this._values[index] = value;\n    } else {\n      p5._friendlyError(\"The index parameter is trying to set a value outside the bounds of the vector\", \"p5.Vector.setValue\");\n    }\n  }\n\n  /**\n   * Gets the y component of the vector.\n   *\n   * This method returns the value of the y component of the vector.\n   * Think of the y component as the vertical position or the second number in the vector.\n   * If the y component is not defined, it will return 0.\n   *\n   * @returns {Number} The y component of the vector. Returns 0 if the value is not defined.\n   */\n  get y() {\n    return this._values[1] || 0;\n  }\n\n  /**\n   * Gets the z component of the vector.\n   *\n   * This method returns the value of the z component of the vector.\n   * Think of the z component as the depth or the third number in the vector.\n   * If the z component is not defined, it will return 0.\n   *\n   * @returns {Number} The z component of the vector. Returns 0 if the value is not defined.\n   */\n  get z() {\n    return this._values[2] || 0;\n  }\n\n  /**\n   * Gets the w component of the vector.\n   *\n   * This method returns the value of the w component of the vector.\n   * Think of the w component as the fourth number in the vector.\n   * If the w component is not defined, it will return 0.\n   *\n   * @returns {Number} The w component of the vector. Returns 0 if the value is not defined.\n   */\n  get w() {\n    return this._values[3] || 0;\n  }\n\n  /**\n   * Sets the x component of the vector.\n   *\n   * This method allows you to change the x value of the vector.\n   * The x value is the first number in the vector, representing the horizontal position.\n   * By calling this method, you can update the x value to a new number.\n   *\n   * @param {Number} xVal - The new value for the x component.\n   */\n  set x(xVal) {\n    if (this._values.length > 1) {\n      this._values[0] = xVal;\n    }\n  }\n\n  /**\n   * Sets the y component of the vector.\n   *\n   * This method allows you to change the y value of the vector.\n   * The y value is the second number in the vector, representing the vertical position.\n   * By calling this method, you can update the y value to a new number.\n   *\n   * @param {Number} yVal - The new value for the y component.\n   */\n  set y(yVal) {\n    if (this._values.length > 1) {\n      this._values[1] = yVal;\n    }\n  }\n\n  /**\n   * Sets the z component of the vector.\n   *\n   * This method allows you to change the z value of the vector.\n   * The z value is the third number in the vector, representing the depth or the third dimension.\n   * By calling this method, you can update the z value to a new number.\n   *\n   * @param {Number} zVal - The new value for the z component.\n   */\n  set z(zVal) {\n    if (this._values.length > 2) {\n      this._values[2] = zVal;\n    }\n  }\n\n  /**\n   * Sets the w component of the vector.\n   *\n   * This method allows you to change the w value of the vector.\n   * The w value is the fourth number in the vector, representing the fourth dimension.\n   * By calling this method, you can update the w value to a new number.\n   *\n   * @param {Number} wVal - The new value for the w component.\n   */\n  set w(wVal) {\n    if (this._values.length > 3) {\n      this._values[3] = wVal;\n    }\n  }\n\n  /**\n   * Returns a string representation of a vector.\n   *\n   * Calling `toString()` is useful for printing vectors to the console while\n   * debugging.\n   *\n   * @return {String} string representation of the vector.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints 'p5.Vector Object : [20, 30, 0]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  toString() {\n    return `[${this.values.join(\", \")}]`;\n  }\n\n  /**\n   * Sets the vector's `x`, `y`, and `z` components.\n   *\n   * `set()` can use separate numbers, as in `v.set(1, 2, 3)`, a\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.set(v2)`, or an\n   * array of numbers, as in `v.set([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it will be set to 0. For\n   * example, `v.set(4, 5)` sets `v.x` to 4, `v.y` to 5, and `v.z` to 0.\n   * Calling `set()` with no arguments, as in `v.set()`, sets all the vector's\n   * components to 0.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // set() with numbers.\n   *   pos.set(75, 25);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // set() with a p5.Vector.\n   *   let p2 = createVector(75, 75);\n   *   pos.set(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // set() with an array.\n   *   let arr = [25, 75];\n   *   pos.set(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Number[]} value vector to set.\n   * @chainable\n   */\n  set(...args) {\n    if (args[0] instanceof Vector) {\n      this.values = args[0].values.slice();\n    } else if (Array.isArray(args[0])) {\n      this.values = args[0].map(arg => arg || 0);\n    } else {\n      this.values = args.map(arg => arg || 0);\n    }\n    this.dimensions = this.values.length;\n    return this;\n  }\n\n  /**\n   * Returns a copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @return {p5.Vector} copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100 ,100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let pos = createVector(50, 50);\n   *\n   *   // Make a copy.\n   *   let pc = pos.copy();\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(pc);\n   *\n   *   describe('A black point drawn in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  copy() {\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, ...this.values);\n    } else {\n      return new Vector(...this.values);\n    }\n  }\n\n  /**\n   * Adds to a vector's components.\n   *\n   * `add()` can use separate numbers, as in `v.add(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.add(v2)`, or\n   * an array of numbers, as in `v.add([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.add(4, 5)` adds 4 to `v.x`, 5 to `v.y`, and 0 to `v.z`.\n   * Calling `add()` with no arguments, as in `v.add()`, has no effect.\n   *\n   * This method supports N-dimensional vectors.\n   *\n   * The static version of `add()`, as in `p5.Vector.add(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number|Array} x   x component of the vector to be added or an array of components.\n   * @param  {Number} [y] y component of the vector to be added.\n   * @param  {Number} [z] z component of the vector to be added.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Add numbers.\n   *   pos.add(50, 0);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // Add a p5.Vector.\n   *   let p2 = createVector(0, 50);\n   *   pos.add(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Add an array.\n   *   let arr = [-50, 0];\n   *   pos.add(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top left.\n   *   let p1 = createVector(25, 25);\n   *\n   *   // Center.\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Bottom right.\n   *   // Add p1 and p2.\n   *   let p3 = p5.Vector.add(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red arrow extends from the top left corner to the center. A blue arrow extends from the tip of the red arrow. A purple arrow extends from the origin to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(-30, 20);\n   *   drawArrow(v1, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.add(v1, v2);\n   *   drawArrow(origin, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value The vector to add\n   * @chainable\n   */\n  add(...args) {\n    if (args[0] instanceof Vector) {\n      args = args[0].values;\n    } else if (Array.isArray(args[0])) {\n      args = args[0];\n    }\n    args.forEach((value, index) => {\n      this.values[index] = (this.values[index] || 0) + (value || 0);\n    });\n    return this;\n  }\n\n  /**\n   * Performs modulo (remainder) division with a vector's `x`, `y`, and `z`\n   * components.\n   *\n   * `rem()` can use separate numbers, as in `v.rem(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.rem(v2)`, or\n   * an array of numbers, as in `v.rem([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.rem(2)`, then all the components\n   * will be set to their values modulo 2. If two values are provided, as in\n   * `v.rem(2, 3)`, then `v.z` won't change. Calling `rem()` with no\n   * arguments, as in `v.rem()`, has no effect.\n   *\n   * The static version of `rem()`, as in `p5.Vector.rem(v2, v1)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param {Number} x x component of divisor vector.\n   * @param {Number} y y component of divisor vector.\n   * @param {Number} z z component of divisor vector.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 0, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 5]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3, 4);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide a p5.Vector.\n   *   v1.rem(v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide an array.\n   *   let arr = [2, 3, 4];\n   *   v.rem(arr);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide without modifying the original vectors.\n   *   let v3 = p5.Vector.rem(v1, v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v3.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector | Number[]}  value  divisor vector.\n   * @chainable\n   */\n  rem(x, y, z) {\n    if (x instanceof Vector) {\n      if ([x.x, x.y, x.z].every(Number.isFinite)) {\n        const xComponent = parseFloat(x.x);\n        const yComponent = parseFloat(x.y);\n        const zComponent = parseFloat(x.z);\n        return calculateRemainder3D.call(this, xComponent, yComponent, zComponent);\n      }\n    } else if (Array.isArray(x)) {\n      if (x.every(element => Number.isFinite(element))) {\n        if (x.length === 2) {\n          return calculateRemainder2D.call(this, x[0], x[1]);\n        }\n        if (x.length === 3) {\n          return calculateRemainder3D.call(this, x[0], x[1], x[2]);\n        }\n      }\n    } else if (arguments.length === 1) {\n      if (Number.isFinite(arguments[0]) && arguments[0] !== 0) {\n        this.x = this.x % arguments[0];\n        this.y = this.y % arguments[0];\n        this.z = this.z % arguments[0];\n        return this;\n      }\n    } else if (arguments.length === 2) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every(element => Number.isFinite(element))) {\n        if (vectorComponents.length === 2) {\n          return calculateRemainder2D.call(this, vectorComponents[0], vectorComponents[1]);\n        }\n      }\n    } else if (arguments.length === 3) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every(element => Number.isFinite(element))) {\n        if (vectorComponents.length === 3) {\n          return calculateRemainder3D.call(this, vectorComponents[0], vectorComponents[1], vectorComponents[2]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Subtracts from a vector's `x`, `y`, and `z` components.\n   *\n   * `sub()` can use separate numbers, as in `v.sub(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.sub(v2)`, or an array\n   * of numbers, as in `v.sub([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.sub(4, 5)` subtracts 4 from `v.x`, 5 from `v.y`, and 0 from `v.z`.\n   * Calling `sub()` with no arguments, as in `v.sub()`, has no effect.\n   *\n   * The static version of `sub()`, as in `p5.Vector.sub(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number} x   x component of the vector to subtract.\n   * @param  {Number} [y] y component of the vector to subtract.\n   * @param  {Number} [z] z component of the vector to subtract.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom right.\n   *   let pos = createVector(75, 75);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Subtract numbers.\n   *   pos.sub(0, 50);\n   *   point(pos);\n   *\n   *   // Top left.\n   *   // Subtract a p5.Vector.\n   *   let p2 = createVector(50, 0);\n   *   pos.sub(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Subtract an array.\n   *   let arr = [0, -50];\n   *   pos.sub(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(75, 75);\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Subtract with modifying the original vectors.\n   *   let p3 = p5.Vector.sub(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value the vector to subtract\n   * @chainable\n   */\n  sub(...args) {\n    if (args[0] instanceof Vector) {\n      args[0].values.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else if (Array.isArray(args[0])) {\n      args[0].forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else {\n      args.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Multiplies a vector's `x`, `y`, and `z` components.\n   *\n   * `mult()` can use separate numbers, as in `v.mult(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.mult(v2)`, or an array\n   * of numbers, as in `v.mult([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.mult(2)`, then all the components\n   * will be multiplied by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.mult(4, 5)` multiplies `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `mult()` with no arguments, as in `v.mult()`, has\n   * no effect.\n   *\n   * The static version of `mult()`, as in `p5.Vector.mult(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @method mult\n   * @param  {Number} n The number to multiply with the vector\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Center.\n   *   // Multiply all components by 2.\n   *   p.mult(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   p.mult(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   let arr = [2, 3];\n   *   p.mult(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * p2.x and p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   p.mult(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x * p2.x\n   *   // p3.y = p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.mult(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is twice the length of the red arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(25, 25);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.mult(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to multiply with the x component of the vector.\n   * @param  {Number} y number to multiply with the y component of the vector.\n   * @param  {Number} [z] number to multiply with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to multiply with the components of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to multiply with the components of the original vector.\n   * @chainable\n   */\n  mult(...args) {\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      const maxLen = Math.min(this.values.length, v.values.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(v.values[i]) && typeof v.values[i] === \"number\") {\n          this._values[i] *= v.values[i];\n        } else {\n          console.warn(\"p5.Vector.prototype.mult:\", \"v contains components that are either undefined or not finite numbers\");\n          return this;\n        }\n      }\n    } else if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      const maxLen = Math.min(this.values.length, arr.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(arr[i]) && typeof arr[i] === \"number\") {\n          this._values[i] *= arr[i];\n        } else {\n          console.warn(\"p5.Vector.prototype.mult:\", \"arr contains elements that are either undefined or not finite numbers\");\n          return this;\n        }\n      }\n    } else if (args.length === 1 && typeof args[0] === \"number\" && Number.isFinite(args[0])) {\n      for (let i = 0; i < this._values.length; i++) {\n        this._values[i] *= args[0];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Divides a vector's `x`, `y`, and `z` components.\n   *\n   * `div()` can use separate numbers, as in `v.div(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.div(v2)`, or an array\n   * of numbers, as in `v.div([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.div(2)`, then all the components\n   * will be divided by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.div(4, 5)` divides `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `div()` with no arguments, as in `v.div()`, has\n   * no effect.\n   *\n   * The static version of `div()`, as in `p5.Vector.div(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number}    n The number to divide the vector by\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Center.\n   *   let p = createVector(50, 50);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 2\n   *   p.div(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   p.div(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let arr = [2, 3];\n   *   p.div(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let p2 = createVector(2, 3);\n   *   p.div(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x / p2.x\n   *   // p3.y = p.y / p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.div(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.div(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is half the length of the red arrow.');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to divide with the x component of the vector.\n   * @param  {Number} y number to divide with the y component of the vector.\n   * @param  {Number} [z] number to divide with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to divide the components of the vector by.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to divide the components of the original vector by.\n   * @chainable\n   */\n  div(...args) {\n    if (args.length === 0) return this;\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      if (v._values.every(val => Number.isFinite(val) && typeof val === \"number\")) {\n        if (v._values.some(val => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / v._values[i]);\n      } else {\n        console.warn(\"p5.Vector.prototype.div:\", \"vector contains components that are either undefined or not finite numbers\");\n      }\n      return this;\n    }\n    if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      if (arr.every(val => Number.isFinite(val) && typeof val === \"number\")) {\n        if (arr.some(val => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / arr[i]);\n      } else {\n        console.warn(\"p5.Vector.prototype.div:\", \"array contains components that are either undefined or not finite numbers\");\n      }\n      return this;\n    }\n    if (args.every(val => Number.isFinite(val) && typeof val === \"number\")) {\n      if (args.some(val => val === 0)) {\n        console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n        return this;\n      }\n      this._values = this._values.map((val, i) => val / args[0]);\n    } else {\n      console.warn(\"p5.Vector.prototype.div:\", \"arguments contain components that are either undefined or not finite numbers\");\n    }\n    return this;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector.\n   *\n   * Use <a href=\"#/p5/mag\">mag()</a> to calculate the magnitude of a 2D vector\n   * using components as in `mag(x, y)`.\n   *\n   * @return {Number} magnitude of the vector.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude.\n   *   let m = p.mag();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 50 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  mag() {\n    return Math.sqrt(this.magSq());\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector squared.\n   *\n   * @return {Number} squared magnitude of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude squared.\n   *   let m = p.magSq();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 2500 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  magSq() {\n    return this._values.reduce((sum, component) => sum + component * component, 0);\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   *\n   * The dot product is a number that describes the overlap between two vectors.\n   * Visually, the dot product can be thought of as the \"shadow\" one vector\n   * casts on another. The dot product's magnitude is largest when two vectors\n   * point in the same or opposite directions. Its magnitude is 0 when two\n   * vectors form a right angle.\n   *\n   * The version of `dot()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `dot()` with multiple parameters interprets them as the\n   * `x`, `y`, and `z` components of another vector.\n   *\n   * The static version of `dot()`, as in `p5.Vector.dot(v1, v2)`, is the same\n   * as calling `v1.dot(v2)`.\n   *\n   * @param  {Number} x   x component of the vector.\n   * @param  {Number} [y] y component of the vector.\n   * @param  {Number} [z] z component of the vector.\n   * @return {Number}     dot product.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4);\n   *   let v2 = createVector(3, 0);\n   *\n   *   // Calculate the dot product.\n   *   let dp = v1.dot(v2);\n   *\n   *   // Prints \"9\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the dot product.\n   *   let dp = p5.Vector.dot(v1, v2);\n   *\n   *   // Prints \"0\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows drawn on a gray square. A black arrow points to the right and a red arrow follows the mouse. The text \"v1 • v2 = something\" changes as the mouse moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   let v1 = createVector(30, 0);\n   *   drawArrow(v0, v1, 'black');\n   *\n   *   // Draw the red arrow.\n   *   let v2 = createVector(mouseX - 50, mouseY - 50);\n   *   drawArrow(v0, v2, 'red');\n   *\n   *   // Display the dot product.\n   *   let dp = v2.dot(v1);\n   *   text(`v2 • v1 = ${dp}`, 10, 20);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be dotted.\n   * @return {Number}\n   */\n  dot(...args) {\n    if (args[0] instanceof Vector) {\n      return this.dot(...args[0]._values);\n    }\n    return this._values.reduce((sum, component, index) => {\n      return sum + component * (args[index] || 0);\n    }, 0);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   *\n   * The cross product is a vector that points straight out of the plane created\n   * by two vectors. The cross product's magnitude is the area of the parallelogram\n   * formed by the original two vectors.\n   *\n   * The static version of `cross()`, as in `p5.Vector.cross(v1, v2)`, is the same\n   * as calling `v1.cross(v2)`.\n   *\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed.\n   * @return {p5.Vector}   cross product as a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = v1.cross(v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = p5.Vector.cross(v1, v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  cross(v) {\n    const x = this.y * v.z - this.z * v.y;\n    const y = this.z * v.x - this.x * v.z;\n    const z = this.x * v.y - this.y * v.x;\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, x, y, z);\n    } else {\n      return new Vector(x, y, z);\n    }\n  }\n\n  /**\n   * Calculates the distance between two points represented by vectors.\n   *\n   * A point's coordinates can be represented by the components of a vector\n   * that extends from the origin to the point.\n   *\n   * The static version of `dist()`, as in `p5.Vector.dist(v1, v2)`, is the same\n   * as calling `v1.dist(v2)`.\n   *\n   * Use <a href=\"#/p5/dist\">dist()</a> to calculate the distance between points\n   * using coordinates as in `dist(x1, y1, x2, y2)`.\n   *\n   * @method dist\n   * @submodule p5.Vector\n   * @param  {p5.Vector} v x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}      distance.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = v1.dist(v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = p5.Vector.dist(v1, v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow. The number 36 is written in black near the purple arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display the magnitude. The same as floor(v3.mag());\n   *   let m = floor(p5.Vector.dist(v1, v2));\n   *   text(m, 50, 75);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  dist(v) {\n    return v.copy().sub(this).mag();\n  }\n\n  /**\n   * Scales the components of a <a href=\"#/p5.Vector\">p5.Vector</a> object so\n   * that its magnitude is 1.\n   *\n   * The static version of `normalize()`,  as in `p5.Vector.normalize(v)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @return {p5.Vector} normalized <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Normalize.\n   *   v.normalize();\n   *\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a normalized copy.\n   *   let v1 = p5.Vector.normalize(v0);\n   *\n   *   // Prints \"p5.Vector Object : [10, 20, 2]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow's length is fixed to the circle's radius.\");\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   v1.normalize();\n   *   drawArrow(v0, v1.mult(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  normalize() {\n    const len = this.mag();\n    // here we multiply by the reciprocal instead of calling 'div()'\n    // since div duplicates this zero check.\n    if (len !== 0) this.mult(1 / len);\n    return this;\n  }\n\n  /**\n   * Limits a vector's magnitude to a maximum value.\n   *\n   * The static version of `limit()`, as in `p5.Vector.limit(v, 5)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    max maximum magnitude for the vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Limit its magnitude.\n   *   v.limit(5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a copy an limit its magintude.\n   *   let v1 = p5.Vector.limit(v0, 5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow never crosses the circle's edge.\");\n   * }\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1.limit(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  limit(max) {\n    const mSq = this.magSq();\n    if (mSq > max * max) {\n      this.div(Math.sqrt(mSq)) //normalize it\n      .mult(max);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a vector's magnitude to a given value.\n   *\n   * The static version of `setMag()`, as in `p5.Vector.setMag(v, 10)`, returns\n   * a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    len new length for this vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 0);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v.mag());\n   *\n   *   // Set its magnitude to 10.\n   *   v.setMag(10);\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 4, 0);\n   *\n   *   // Create a copy with a magnitude of 10.\n   *   let v1 = p5.Vector.setMag(v0, 10);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the top left corner of a square toward its center. The red arrow reaches the center and the blue arrow only extends part of the way.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(origin, v, 'red');\n   *\n   *   // Set v's magnitude to 30.\n   *   v.setMag(30);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(origin, v, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setMag(n) {\n    return this.normalize().mult(n);\n  }\n\n  /**\n   * Calculates the angle a 2D vector makes with the positive x-axis.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `heading()` returns angles\n   * in the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `heading()`, as in `p5.Vector.heading(v)`, works the\n   * same way.\n   *\n   * @return {Number} angle of rotation.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(p5.Vector.heading(v));\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(p5.Vector.heading(v));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the top left of a square to its center. The text \"Radians: 0.79\" and \"Degrees: 45\" is written near the tip of the arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(origin, v, 'black');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the heading in radians.\n   *   let h = round(v.heading(), 2);\n   *   text(`Radians: ${h}`, 20, 70);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the heading in degrees.\n   *   h = v.heading();\n   *   text(`Degrees: ${h}`, 20, 85);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  heading() {\n    const h = Math.atan2(this.y, this.x);\n    if (this.isPInst) return this._fromRadians(h);\n    return h;\n  }\n\n  /**\n   * Rotates a 2D vector to a specific angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `setHeading()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(PI);\n   *\n   *   // Prints \"3.141...\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(180);\n   *\n   *   // Prints \"180\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. The red arrow points to the right and the blue arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Point down.\n   *   v1.setHeading(HALF_PI);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setHeading(a) {\n    if (this.isPInst) a = this._toRadians(a);\n    let m = this.mag();\n    this.x = m * Math.cos(a);\n    this.y = m * Math.sin(a);\n    return this;\n  }\n\n  /**\n   * Rotates a 2D vector by an angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `rotate()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `rotate()`, as in `p5.Vector.rotate(v, PI)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(90);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, 90);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let v0;\n   * let v1;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   v0 = createVector(50, 50);\n   *   v1 = createVector(30, 0);\n   *\n   *   describe('A black arrow extends from the center of a gray square. The arrow rotates clockwise.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Rotate v1.\n   *   v1.rotate(0.01);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  rotate(a) {\n    let newHeading = this.heading() + a;\n    if (this.isPInst) newHeading = this._toRadians(newHeading);\n    const mag = this.mag();\n    this.x = Math.cos(newHeading) * mag;\n    this.y = Math.sin(newHeading) * mag;\n    return this;\n  }\n\n  /**\n   * Calculates the angle between two vectors.\n   *\n   * The angles returned are signed, which means that\n   * `v1.angleBetween(v2) === -v2.angleBetween(v1)`.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `angleBetween()` returns\n   * angles in the units of the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {p5.Vector}    value x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}       angle between the vectors.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. A red arrow points to the right and a blue arrow points down. The text \"Radians: 1.57\" and \"Degrees: 90\" is written above the arrows.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the angle in radians.\n   *   let angle = round(v1.angleBetween(v2), 2);\n   *   text(`Radians: ${angle}`, 20, 20);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the angle in degrees.\n   *   angle = round(v1.angleBetween(v2), 2);\n   *   text(`Degrees: ${angle}`, 20, 35);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  angleBetween(v) {\n    const magSqMult = this.magSq() * v.magSq();\n    // Returns NaN if either vector is the zero vector.\n    if (magSqMult === 0) {\n      return NaN;\n    }\n    const u = this.cross(v);\n    // The dot product computes the cos value, and the cross product computes\n    // the sin value. Find the angle based on them. In addition, in the case of\n    // 2D vectors, a sign is added according to the direction of the vector.\n    let angle = Math.atan2(u.mag(), this.dot(v)) * Math.sign(u.z || 1);\n    if (this.isPInst) {\n      angle = this._fromRadians(angle);\n    }\n    return angle;\n  }\n\n  /**\n   * Calculates new `x`, `y`, and `z` components that are proportionally the\n   * same distance between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps all components equal to the old vector's, 0.5 is\n   * halfway between, and 1.0 sets all components equal to the new vector's.\n   *\n   * The static version of `lerp()`, as in `p5.Vector.lerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    x   x component.\n   * @param  {Number}    y   y component.\n   * @param  {Number}    z   z component.\n   * @param  {Number}    amt amount of interpolation between 0.0 (old vector)\n   *                         and 1.0 (new vector). 0.5 is halfway between.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   v0.lerp(v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v0.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1, 1);\n   *\n   *   // Interpolate.\n   *   v.lerp(3, 3, 3, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   let v2 = p5.Vector.lerp(v0, v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v2.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points down, and a purple arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Interpolate.\n   *   let v3 = p5.Vector.lerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v  <a href=\"#/p5.Vector\">p5.Vector</a> to lerp toward.\n   * @param  {Number}    amt\n   * @chainable\n   */\n  lerp(x, y, z, amt) {\n    if (x instanceof Vector) {\n      return this.lerp(x.x, x.y, x.z, y);\n    }\n    this.x += (x - this.x) * amt || 0;\n    this.y += (y - this.y) * amt || 0;\n    this.z += (z - this.z) * amt || 0;\n    return this;\n  }\n\n  /**\n   * Calculates a new heading and magnitude that are between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps the heading and magnitude equal to the old\n   * vector's, 0.5 sets them halfway between, and 1.0 sets the heading and\n   * magnitude equal to the new vector's.\n   *\n   * `slerp()` differs from <a href=\"#/p5.Vector/lerp\">lerp()</a> because\n   * it interpolates magnitude. Calling `v0.slerp(v1, 0.5)` sets `v0`'s\n   * magnitude to a value halfway between its original magnitude and `v1`'s.\n   * Calling `v0.lerp(v1, 0.5)` makes no such guarantee.\n   *\n   * The static version of `slerp()`, as in `p5.Vector.slerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to slerp toward.\n   * @param {Number} amt  amount of interpolation between 0.0 (old vector)\n   *                      and 1.0 (new vector). 0.5 is halfway between.\n   * @return {p5.Vector}\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Interpolate halfway between v0 and v1.\n   *   v0.slerp(v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v0.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Create a p5.Vector that's halfway between v0 and v1.\n   *   let v3 = p5.Vector.slerp(v0, v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v3.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v3.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points to the left, and a purple arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(20, 0);\n   *   let v2 = createVector(-40, 0);\n   *\n   *   // Create a p5.Vector that's halfway between v1 and v2.\n   *   let v3 = p5.Vector.slerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  slerp(v, amt) {\n    // edge cases.\n    if (amt === 0) {\n      return this;\n    }\n    if (amt === 1) {\n      return this.set(v);\n    }\n\n    // calculate magnitudes\n    const selfMag = this.mag();\n    const vMag = v.mag();\n    const magmag = selfMag * vMag;\n    // if either is a zero vector, linearly interpolate by these vectors\n    if (magmag === 0) {\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    }\n    // the cross product of 'this' and 'v' is the axis of rotation\n    const axis = this.cross(v);\n    const axisMag = axis.mag();\n    // Calculates the angle between 'this' and 'v'\n    const theta = Math.atan2(axisMag, this.dot(v));\n\n    // However, if the norm of axis is 0, normalization cannot be performed,\n    // so we will divide the cases\n    if (axisMag > 0) {\n      axis.x /= axisMag;\n      axis.y /= axisMag;\n      axis.z /= axisMag;\n    } else if (theta < Math.PI * 0.5) {\n      // if the norm is 0 and the angle is less than PI/2,\n      // the angle is very close to 0, so do linear interpolation.\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    } else {\n      // If the norm is 0 and the angle is more than PI/2, the angle is\n      // very close to PI.\n      // In this case v can be regarded as '-this', so take any vector\n      // that is orthogonal to 'this' and use that as the axis.\n      if (this.z === 0 && v.z === 0) {\n        // if both this and v are 2D vectors, use (0,0,1)\n        // this makes the result also a 2D vector.\n        axis.set(0, 0, 1);\n      } else if (this.x !== 0) {\n        // if the x components is not 0, use (y, -x, 0)\n        axis.set(this.y, -this.x, 0).normalize();\n      } else {\n        // if the x components is 0, use (1,0,0)\n        axis.set(1, 0, 0);\n      }\n    }\n\n    // Since 'axis' is a unit vector, ey is a vector of the same length as 'this'.\n    const ey = axis.cross(this);\n    // interpolate the length with 'this' and 'v'.\n    const lerpedMagFactor = 1 - amt + amt * vMag / selfMag;\n    // imagine a situation where 'axis', 'this', and 'ey' are pointing\n    // along the z, x, and y axes, respectively.\n    // rotates 'this' around 'axis' by amt * theta towards 'ey'.\n    const cosMultiplier = lerpedMagFactor * Math.cos(amt * theta);\n    const sinMultiplier = lerpedMagFactor * Math.sin(amt * theta);\n    // then, calculate 'result'.\n    this.x = this.x * cosMultiplier + ey.x * sinMultiplier;\n    this.y = this.y * cosMultiplier + ey.y * sinMultiplier;\n    this.z = this.z * cosMultiplier + ey.z * sinMultiplier;\n    return this;\n  }\n\n  /**\n   * Reflects a vector about a line in 2D or a plane in 3D.\n   *\n   * The orientation of the line or plane is described by a normal vector that\n   * points away from the shape.\n   *\n   * The static version of `reflect()`, as in `p5.Vector.reflect(v, n)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {p5.Vector} surfaceNormal  <a href=\"#/p5.Vector\">p5.Vector</a>\n   *                                    to reflect about.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *   // Create a vector to reflect.\n   *   let v = createVector(4, 6);\n   *\n   *   // Reflect v about n.\n   *   v.reflect(n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *\n   *   // Create a vector to reflect.\n   *   let v0 = createVector(4, 6);\n   *\n   *   // Create a reflected vector.\n   *   let v1 = p5.Vector.reflect(v0, n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square with a vertical line down its middle. A black arrow points to the right, a blue arrow points to the bottom left, and a red arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a vertical line.\n   *   line(50, 0, 50, 100);\n   *\n   *   // Create a normal vector.\n   *   let n = createVector(1, 0);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a vector to reflect.\n   *   let v1 = createVector(30, 40);\n   *\n   *   // Create a reflected vector.\n   *   let v2 = p5.Vector.reflect(v1, n);\n   *\n   *   // Scale the normal vector for drawing.\n   *   n.setMag(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, n, 'black');\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  reflect(surfaceNormal) {\n    const surfaceNormalCopy = Vector.normalize(surfaceNormal);\n    return this.sub(surfaceNormalCopy.mult(2 * this.dot(surfaceNormalCopy)));\n  }\n\n  /**\n   * Returns the vector's components as an array of numbers.\n   *\n   * @return {Number[]} array with the vector's components.\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints \"[20, 30, 0]\" to the console.\n   *   print(v.array());\n   * }\n   * </code>\n   * </div>\n   */\n  array() {\n    return [this.x || 0, this.y || 0, this.z || 0];\n  }\n\n  /**\n   * Checks whether all the vector's components are equal to another vector's.\n   *\n   * `equals()` returns `true` if the vector's components are all the same as another\n   * vector's and `false` if not.\n   *\n   * The version of `equals()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `equals()` with multiple parameters interprets them as the\n   * components of another vector. Any missing parameters are assigned the value\n   * 0.\n   *\n   * The static version of `equals()`, as in `p5.Vector.equals(v0, v1)`,\n   * interprets both parameters as <a href=\"#/p5.Vector\">p5.Vector</a> objects.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @return {Boolean} whether the vectors are equal.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(5, 10, 20);\n   *   let v1 = createVector(5, 10, 20);\n   *   let v2 = createVector(13, 10, 19);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1.x, v1.y, v1.z));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2.x, v2.y, v2.z));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(p5.Vector.equals(v0, v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(p5.Vector.equals(v0, v2));\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Array} value vector to compare.\n   * @return {Boolean}\n   */\n  equals(...args) {\n    let values;\n    if (args[0] instanceof Vector) {\n      values = args[0]._values;\n    } else if (Array.isArray(args[0])) {\n      values = args[0];\n    } else {\n      values = args;\n    }\n    for (let i = 0; i < this._values.length; i++) {\n      if (this._values[i] !== (values[i] || 0)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Replaces the components of a <a href=\"#/p5.Vector\">p5.Vector</a> that are very close to zero with zero.\n   *\n   * In computers, handling numbers with decimals can give slightly imprecise answers due to the way those numbers are represented.\n   * This can make it hard to check if a number is zero, as it may be close but not exactly zero.\n   * This method rounds very close numbers to zero to make those checks easier\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n   *\n   * @method clampToZero\n   * @return {p5.Vector} with components very close to zero replaced with zero.\n   * @chainable\n   */\n  clampToZero() {\n    for (let i = 0; i < this._values.length; i++) {\n      this._values[i] = this._clampToZero(this._values[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Helper function for clampToZero\n   * @private\n   */\n  _clampToZero(val) {\n    return Math.abs((val || 0) - 0) <= Number.EPSILON ? 0 : val;\n  }\n\n  // Static Methods\n\n  /**\n   * Creates a new 2D vector from an angle.\n   *\n   * @static\n   * @param {Number}     angle desired angle, in radians. Unaffected by <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}       new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Prints \"p5.Vector Object : [30, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the center of a gray square. It points to the right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a p5.Vector with an angle 0 and magnitude 30.\n   *   let v1 = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngle(angle, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    return new Vector(length * Math.cos(angle), length * Math.sin(angle), 0);\n  }\n\n  /**\n   * Creates a new 3D vector from a pair of ISO spherical angles.\n   *\n   * @static\n   * @param {Number}     theta    polar angle in radians (zero is up).\n   * @param {Number}     phi      azimuthal angle in radians\n   *                               (zero is out of the screen).\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}          new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(0, 0);\n   *\n   *   // Prints \"p5.Vector Object : [0, -1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A light shines on a pink sphere as it orbits.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Calculate the ISO angles.\n   *   let theta = frameCount *  0.05;\n   *   let phi = 0;\n   *\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(theta, phi, 100);\n   *\n   *   // Create a point light using the p5.Vector.\n   *   let c = color('deeppink');\n   *   pointLight(c, v);\n   *\n   *   // Style the sphere.\n   *   fill(255);\n   *   noStroke();\n   *\n   *   // Draw the sphere.\n   *   sphere(35);\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngles(theta, phi, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    const cosPhi = Math.cos(phi);\n    const sinPhi = Math.sin(phi);\n    const cosTheta = Math.cos(theta);\n    const sinTheta = Math.sin(theta);\n    return new Vector(length * sinTheta * sinPhi, -length * cosTheta, length * sinTheta * cosPhi);\n  }\n\n  /**\n   * Creates a new 2D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random2D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, 0]\" to the console\n   *   // where x and y are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(1);\n   *\n   *   describe('A black arrow in extends from the center of a gray square. It changes direction once per second.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a random p5.Vector.\n   *   let v1 = p5.Vector.random2D();\n   *\n   *   // Scale v1 for drawing.\n   *   v1.mult(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static random2D() {\n    return this.fromAngle(Math.random() * TWO_PI);\n  }\n\n  /**\n   * Creates a new 3D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random3D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, z]\" to the console\n   *   // where x, y, and z are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  static random3D() {\n    const angle = Math.random() * TWO_PI;\n    const vz = Math.random() * 2 - 1;\n    const vzBase = Math.sqrt(1 - vz * vz);\n    const vx = vzBase * Math.cos(angle);\n    const vy = vzBase * Math.sin(angle);\n    return new Vector(vx, vy, vz);\n  }\n\n  // Returns a copy of a vector.\n  /**\n   * @static\n   * @param  {p5.Vector} v the <a href=\"#/p5.Vector\">p5.Vector</a> to create a copy of\n   * @return {p5.Vector} the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object\n   */\n  static copy(v) {\n    return v.copy(v);\n  }\n\n  // Adds two vectors together and returns a new one.\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} resulting <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  static add(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.add\");\n      }\n    } else {\n      target.set(v1);\n    }\n    target.add(v2);\n    return target;\n  }\n\n  // Returns a vector remainder when it is divided by another vector\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The dividend <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The divisor <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} v2\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static rem(v1, v2) {\n    if (v1 instanceof Vector && v2 instanceof Vector) {\n      let target = v1.copy();\n      target.rem(v2);\n      return target;\n    }\n  }\n\n  /*\n   * Subtracts one <a href=\"#/p5.Vector\">p5.Vector</a> from another and returns a new one.  The second\n   * vector (`v2`) is subtracted from the first (`v1`), resulting in `v1-v2`.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static sub(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.sub\");\n      }\n    } else {\n      target.set(v1);\n    }\n    target.sub(v2);\n    return target;\n  }\n\n  /**\n   * Multiplies a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} resulting new <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] vector to receive the result.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static mult(v, n, target) {\n    if (!target) {\n      target = v.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.mult\");\n      }\n    } else {\n      target.set(v);\n    }\n    target.mult(n);\n    return target;\n  }\n\n  /**\n   * Rotates the vector (only 2D vectors) by the given angle; magnitude remains the same. Returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number} angle\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  static rotate(v, a, target) {\n    if (arguments.length === 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.rotate\");\n      }\n      target.set(v);\n    }\n    target.rotate(a);\n    return target;\n  }\n\n  /**\n   * Divides a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static div(v, n, target) {\n    if (!target) {\n      target = v.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.div\");\n      }\n    } else {\n      target.set(v);\n    }\n    target.div(n);\n    return target;\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     dot product.\n   */\n  static dot(v1, v2) {\n    return v1.dot(v2);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     cross product.\n   */\n  static cross(v1, v2) {\n    return v1.cross(v2);\n  }\n\n  /**\n   * Calculates the Euclidean distance between two points (considering a\n   * point as a vector object).\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The first <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The second <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @return {Number}     The distance\n   */\n  static dist(v1, v2) {\n    return v1.dist(v2);\n  }\n\n  /**\n   * Linear interpolate a vector to another vector and return the result as a\n   * new vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1\n   * @param {p5.Vector} v2\n   * @param {Number} amt\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}      The lerped value\n   */\n  static lerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.lerp\");\n      }\n    } else {\n      target.set(v1);\n    }\n    target.lerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Performs spherical linear interpolation with the other vector\n   * and returns the resulting vector.\n   * This works in both 3D and 2D. As for 2D, the result of slerping\n   * between 2D vectors is always a 2D vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1 old vector.\n   * @param {p5.Vector} v2 new vector.\n   * @param {Number} amt\n   * @param {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} slerped vector between v1 and v2\n   */\n  static slerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.slerp\");\n      }\n    } else {\n      target.set(v1);\n    }\n    target.slerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector and returns the result as\n   * a float (this is simply the equation `sqrt(x*x + y*y + z*z)`.)\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT The vector to return the magnitude of\n   * @return {Number}        The magnitude of vecT\n   */\n  static mag(vecT) {\n    return vecT.mag();\n  }\n\n  /**\n   * Calculates the squared magnitude of the vector and returns the result\n   * as a float (this is simply the equation <em>(x\\*x + y\\*y + z\\*z)</em>.)\n   * Faster if the real length is not required in the\n   * case of comparing vectors, etc.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT the vector to return the squared magnitude of\n   * @return {Number}        the squared magnitude of vecT\n   */\n  static magSq(vecT) {\n    return vecT.magSq();\n  }\n\n  /**\n   * Normalize the vector to length 1 (make it a unit vector).\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  The vector to normalize\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}   The vector v, normalized to a length of 1\n   */\n  static normalize(v, target) {\n    if (arguments.length < 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.normalize\");\n      }\n      target.set(v);\n    }\n    return target.normalize();\n  }\n\n  /**\n   * Limit the magnitude of the vector to the value used for the <b>max</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to limit\n   * @param {Number}    max\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude limited to max\n   */\n  static limit(v, max, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.limit\");\n      }\n      target.set(v);\n    }\n    return target.limit(max);\n  }\n\n  /**\n   * Set the magnitude of the vector to the value used for the <b>len</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to set the magnitude of\n   * @param {Number}    len\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude set to len\n   */\n  static setMag(v, len, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.setMag\");\n      }\n      target.set(v);\n    }\n    return target.setMag(len);\n  }\n\n  /**\n   * Calculate the angle of rotation for this vector (only 2D vectors).\n   * p5.Vectors created using <a href=\"#/p5/createVector\">createVector()</a>\n   * will take the current <a href=\"#/p5/angleMode\">angleMode</a> into\n   * consideration, and give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v the vector to find the angle of\n   * @return {Number} the angle of rotation\n   */\n  static heading(v) {\n    return v.heading();\n  }\n\n  /**\n   * Calculates and returns the angle between two vectors. This function will take\n   * the <a href=\"#/p5/angleMode\">angleMode</a> on v1 into consideration, and\n   * give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector}    v1 the first vector.\n   * @param  {p5.Vector}    v2 the second vector.\n   * @return {Number}       angle between the two vectors.\n   */\n  static angleBetween(v1, v2) {\n    return v1.angleBetween(v2);\n  }\n\n  /**\n   * Reflect a vector about a normal to a line in 2D, or about a normal to a\n   * plane in 3D.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} incidentVector vector to be reflected.\n   * @param  {p5.Vector} surfaceNormal\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} the reflected vector\n   */\n  static reflect(incidentVector, surfaceNormal, target) {\n    if (arguments.length < 3) {\n      target = incidentVector.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.reflect\");\n      }\n      target.set(incidentVector);\n    }\n    return target.reflect(surfaceNormal);\n  }\n\n  /**\n   * Return a representation of this vector as a float array. This is only\n   * for temporary use. If used in any other fashion, the contents should be\n   * copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b>\n   * method to copy into your own vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v the vector to convert to an array\n   * @return {Number[]} an Array with the 3 values\n   */\n  static array(v) {\n    return v.array();\n  }\n\n  /**\n   * Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param {p5.Vector|Array} v1 the first vector to compare\n   * @param {p5.Vector|Array} v2 the second vector to compare\n   * @return {Boolean}\n   */\n  static equals(v1, v2) {\n    let v;\n    if (v1 instanceof Vector) {\n      v = v1;\n    } else if (v1 instanceof Array) {\n      v = new Vector().set(v1);\n    } else {\n      p5._friendlyError(\"The v1 parameter should be of type Array or p5.Vector\", \"p5.Vector.equals\");\n    }\n    return v.equals(v2);\n  }\n}\nfunction vector(p5, fn) {\n  /**\n   * A class to describe a two or three-dimensional vector.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction.\n   *\n   * `p5.Vector` objects are often used to program motion because they simplify\n   * the math. For example, a moving ball has a position and a velocity.\n   * Position describes where the ball is in space. The ball's position vector\n   * extends from the origin to the ball's center. Velocity describes the ball's\n   * speed and the direction it's moving. If the ball is moving straight up, its\n   * velocity vector points straight up. Adding the ball's velocity vector to\n   * its position vector moves it, as in `pos.add(vel)`. Vector math relies on\n   * methods inside the `p5.Vector` class.\n   *\n   * Note: <a href=\"#/p5/createVector\">createVector()</a> is the recommended way\n   * to make an instance of this class.\n   *\n   * @class p5.Vector\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(75, 75);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Draw the first point using a p5.Vector.\n   *   point(p1);\n   *\n   *   // Draw the second point using a p5.Vector's components.\n   *   point(p2.x, p2.y);\n   *\n   *   describe('Two black dots on a gray square, one at the top left and the other at the bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Vector = Vector;\n\n  /**\n   * The x component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property x\n   * @name x\n   */\n\n  /**\n   * The y component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property y\n   * @name y\n   */\n\n  /**\n   * The z component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property z\n   * @name z\n   */\n}\nif (typeof p5 !== \"undefined\") {\n  vector(p5, p5.prototype);\n}\nexport { Vector, vector as default };","map":{"version":3,"names":["f","TWO_PI","calculateRemainder2D","xComponent","yComponent","x","y","calculateRemainder3D","zComponent","z","Vector","constructor","args","values","map","arg","isPInst","_fromRadians","_toRadians","slice","dimensions","length","_values","newValues","getValue","index","p5","_friendlyError","setValue","value","w","xVal","yVal","zVal","wVal","toString","join","set","Array","isArray","copy","add","forEach","rem","every","Number","isFinite","parseFloat","call","element","arguments","vectorComponents","sub","mult","v","maxLen","Math","min","i","console","warn","arr","div","val","some","mag","sqrt","magSq","reduce","sum","component","dot","cross","dist","normalize","len","limit","max","mSq","setMag","n","heading","h","atan2","setHeading","a","m","cos","sin","rotate","newHeading","angleBetween","magSqMult","NaN","u","angle","sign","lerp","amt","slerp","selfMag","vMag","magmag","axis","axisMag","theta","PI","ey","lerpedMagFactor","cosMultiplier","sinMultiplier","reflect","surfaceNormal","surfaceNormalCopy","array","equals","clampToZero","_clampToZero","abs","EPSILON","fromAngle","fromAngles","phi","cosPhi","sinPhi","cosTheta","sinTheta","random2D","random","random3D","vz","vzBase","vx","vy","v1","v2","target","vecT","incidentVector","vector","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/p5.Vector.js"],"sourcesContent":["import { f as TWO_PI } from '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @requires constants\n */\n\n\n/// HELPERS FOR REMAINDER METHOD\nconst calculateRemainder2D = function (xComponent, yComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  return this;\n};\n\nconst calculateRemainder3D = function (xComponent, yComponent, zComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  if (zComponent !== 0) {\n    this.z = this.z % zComponent;\n  }\n  return this;\n};\n\nclass Vector {\n  // This is how it comes in with createVector()\n  // This check if the first argument is a function\n  constructor(...args) {\n    let values = args.map((arg) => arg || 0);\n    if (typeof args[0] === \"function\") {\n      this.isPInst = true;\n      this._fromRadians = args[0];\n      this._toRadians = args[1];\n      values = args.slice(2).map((arg) => arg || 0);\n    }\n    let dimensions = values.length; // TODO: make default 3 if no arguments\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = values;\n    }\n  }\n\n  /**\n   * Gets the values of the N-dimensional vector.\n   *\n   * This method returns an array of numbers that represent the vector.\n   * Each number in the array corresponds to a different component of the vector,\n   * like its position in different directions (e.g., x, y, z).\n   *\n   * @returns {Array<number>} The array of values representing the vector.\n   */\n  get values() {\n    return this._values;\n  }\n\n  /**\n   * Sets the values of the vector.\n   *\n   * This method allows you to update the entire vector with a new set of values.\n   * You need to provide an array of numbers, where each number represents a component\n   * of the vector (e.g., x, y, z). The length of the array should match the number of\n   * dimensions of the vector. If the array is shorter, the missing components will be\n   * set to 0. If the array is longer, the extra values will be ignored.\n   *\n   * @param {Array<number>} newValues - An array of numbers representing the new values for the vector.\n   *\n   */\n  set values(newValues) {\n    let dimensions = newValues.length;\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = newValues.slice();\n    }\n  }\n\n  /**\n   * Gets the x component of the vector.\n   *\n   * This method returns the value of the x component of the vector.\n   * Think of the x component as the horizontal position or the first number in the vector.\n   * If the x component is not defined, it will return 0.\n   *\n   * @returns {Number} The x component of the vector. Returns 0 if the value is not defined.\n   */\n  get x() {\n    return this._values[0] || 0;\n  }\n\n  /**\n   * Retrieves the value at the specified index from the vector.\n   *\n   * This method allows you to get the value of a specific component of the vector\n   * by providing its index. Think of the vector as a list of numbers, where each\n   * number represents a different direction (like x, y, or z). The index is just\n   * the position of the number in that list.\n   *\n   * For example, if you have a vector with values 10, 20, 30 the index 0 would\n   * give you the first value 10, index 1 would give you the second value 20,\n   * and so on.\n   *\n   * @param {Number} index - The position of the value you want to get from the vector.\n   * @returns {Number} The value at the specified position in the vector.\n   * @throws Will throw an error if the index is out of bounds, meaning if you try to\n   *          get a value from a position that doesn't exist in the vector.\n   */\n  getValue(index) {\n    if (index < this._values.length) {\n      return this._values[index];\n    } else {\n      p5._friendlyError(\n        \"The index parameter is trying to set a value outside the bounds of the vector\",\n        \"p5.Vector.setValue\"\n      );\n    }\n  }\n\n  /**\n   * Sets the value at the specified index of the vector.\n   *\n   * This method allows you to change a specific component of the vector by providing its index and the new value you want to set.\n   * Think of the vector as a list of numbers, where each number represents a different direction (like x, y, or z).\n   * The index is just the position of the number in that list.\n   *\n   * For example, if you have a vector with values [0, 20, 30], and you want to change the second value (20) to 50,\n   * you would use this method with index 1 (since indexes start at 0) and value 50.\n   *\n   * @param {Number} index - The position in the vector where you want to set the new value.\n   * @param {Number} value - The new value you want to set at the specified position.\n   * @throws Will throw an error if the index is outside the bounds of the vector, meaning if you try to set a value at a position that doesn't exist in the vector.\n   */\n  setValue(index, value) {\n    if (index < this._values.length) {\n      this._values[index] = value;\n    } else {\n      p5._friendlyError(\n        \"The index parameter is trying to set a value outside the bounds of the vector\",\n        \"p5.Vector.setValue\"\n      );\n    }\n  }\n\n  /**\n   * Gets the y component of the vector.\n   *\n   * This method returns the value of the y component of the vector.\n   * Think of the y component as the vertical position or the second number in the vector.\n   * If the y component is not defined, it will return 0.\n   *\n   * @returns {Number} The y component of the vector. Returns 0 if the value is not defined.\n   */\n  get y() {\n    return this._values[1] || 0;\n  }\n\n  /**\n   * Gets the z component of the vector.\n   *\n   * This method returns the value of the z component of the vector.\n   * Think of the z component as the depth or the third number in the vector.\n   * If the z component is not defined, it will return 0.\n   *\n   * @returns {Number} The z component of the vector. Returns 0 if the value is not defined.\n   */\n  get z() {\n    return this._values[2] || 0;\n  }\n\n  /**\n   * Gets the w component of the vector.\n   *\n   * This method returns the value of the w component of the vector.\n   * Think of the w component as the fourth number in the vector.\n   * If the w component is not defined, it will return 0.\n   *\n   * @returns {Number} The w component of the vector. Returns 0 if the value is not defined.\n   */\n  get w() {\n    return this._values[3] || 0;\n  }\n\n  /**\n   * Sets the x component of the vector.\n   *\n   * This method allows you to change the x value of the vector.\n   * The x value is the first number in the vector, representing the horizontal position.\n   * By calling this method, you can update the x value to a new number.\n   *\n   * @param {Number} xVal - The new value for the x component.\n   */\n  set x(xVal) {\n    if (this._values.length > 1) {\n      this._values[0] = xVal;\n    }\n  }\n\n  /**\n   * Sets the y component of the vector.\n   *\n   * This method allows you to change the y value of the vector.\n   * The y value is the second number in the vector, representing the vertical position.\n   * By calling this method, you can update the y value to a new number.\n   *\n   * @param {Number} yVal - The new value for the y component.\n   */\n  set y(yVal) {\n    if (this._values.length > 1) {\n      this._values[1] = yVal;\n    }\n  }\n\n  /**\n   * Sets the z component of the vector.\n   *\n   * This method allows you to change the z value of the vector.\n   * The z value is the third number in the vector, representing the depth or the third dimension.\n   * By calling this method, you can update the z value to a new number.\n   *\n   * @param {Number} zVal - The new value for the z component.\n   */\n  set z(zVal) {\n    if (this._values.length > 2) {\n      this._values[2] = zVal;\n    }\n  }\n\n  /**\n   * Sets the w component of the vector.\n   *\n   * This method allows you to change the w value of the vector.\n   * The w value is the fourth number in the vector, representing the fourth dimension.\n   * By calling this method, you can update the w value to a new number.\n   *\n   * @param {Number} wVal - The new value for the w component.\n   */\n  set w(wVal) {\n    if (this._values.length > 3) {\n      this._values[3] = wVal;\n    }\n  }\n\n  /**\n   * Returns a string representation of a vector.\n   *\n   * Calling `toString()` is useful for printing vectors to the console while\n   * debugging.\n   *\n   * @return {String} string representation of the vector.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints 'p5.Vector Object : [20, 30, 0]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  toString() {\n    return `[${this.values.join(\", \")}]`;\n  }\n\n  /**\n   * Sets the vector's `x`, `y`, and `z` components.\n   *\n   * `set()` can use separate numbers, as in `v.set(1, 2, 3)`, a\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.set(v2)`, or an\n   * array of numbers, as in `v.set([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it will be set to 0. For\n   * example, `v.set(4, 5)` sets `v.x` to 4, `v.y` to 5, and `v.z` to 0.\n   * Calling `set()` with no arguments, as in `v.set()`, sets all the vector's\n   * components to 0.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // set() with numbers.\n   *   pos.set(75, 25);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // set() with a p5.Vector.\n   *   let p2 = createVector(75, 75);\n   *   pos.set(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // set() with an array.\n   *   let arr = [25, 75];\n   *   pos.set(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Number[]} value vector to set.\n   * @chainable\n   */\n  set(...args) {\n    if (args[0] instanceof Vector) {\n      this.values = args[0].values.slice();\n    } else if (Array.isArray(args[0])) {\n      this.values = args[0].map((arg) => arg || 0);\n    } else {\n      this.values = args.map((arg) => arg || 0);\n    }\n    this.dimensions = this.values.length;\n    return this;\n  }\n\n  /**\n   * Returns a copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @return {p5.Vector} copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100 ,100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let pos = createVector(50, 50);\n   *\n   *   // Make a copy.\n   *   let pc = pos.copy();\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(pc);\n   *\n   *   describe('A black point drawn in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  copy() {\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, ...this.values);\n    } else {\n      return new Vector(...this.values);\n    }\n  }\n\n  /**\n   * Adds to a vector's components.\n   *\n   * `add()` can use separate numbers, as in `v.add(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.add(v2)`, or\n   * an array of numbers, as in `v.add([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.add(4, 5)` adds 4 to `v.x`, 5 to `v.y`, and 0 to `v.z`.\n   * Calling `add()` with no arguments, as in `v.add()`, has no effect.\n   *\n   * This method supports N-dimensional vectors.\n   *\n   * The static version of `add()`, as in `p5.Vector.add(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number|Array} x   x component of the vector to be added or an array of components.\n   * @param  {Number} [y] y component of the vector to be added.\n   * @param  {Number} [z] z component of the vector to be added.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Add numbers.\n   *   pos.add(50, 0);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // Add a p5.Vector.\n   *   let p2 = createVector(0, 50);\n   *   pos.add(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Add an array.\n   *   let arr = [-50, 0];\n   *   pos.add(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top left.\n   *   let p1 = createVector(25, 25);\n   *\n   *   // Center.\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Bottom right.\n   *   // Add p1 and p2.\n   *   let p3 = p5.Vector.add(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red arrow extends from the top left corner to the center. A blue arrow extends from the tip of the red arrow. A purple arrow extends from the origin to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(-30, 20);\n   *   drawArrow(v1, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.add(v1, v2);\n   *   drawArrow(origin, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value The vector to add\n   * @chainable\n   */\n  add(...args) {\n    if (args[0] instanceof Vector) {\n      args = args[0].values;\n    } else if (Array.isArray(args[0])) {\n      args = args[0];\n    }\n    args.forEach((value, index) => {\n      this.values[index] = (this.values[index] || 0) + (value || 0);\n    });\n    return this;\n  }\n\n  /**\n   * Performs modulo (remainder) division with a vector's `x`, `y`, and `z`\n   * components.\n   *\n   * `rem()` can use separate numbers, as in `v.rem(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.rem(v2)`, or\n   * an array of numbers, as in `v.rem([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.rem(2)`, then all the components\n   * will be set to their values modulo 2. If two values are provided, as in\n   * `v.rem(2, 3)`, then `v.z` won't change. Calling `rem()` with no\n   * arguments, as in `v.rem()`, has no effect.\n   *\n   * The static version of `rem()`, as in `p5.Vector.rem(v2, v1)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param {Number} x x component of divisor vector.\n   * @param {Number} y y component of divisor vector.\n   * @param {Number} z z component of divisor vector.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 0, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 5]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3, 4);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide a p5.Vector.\n   *   v1.rem(v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide an array.\n   *   let arr = [2, 3, 4];\n   *   v.rem(arr);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide without modifying the original vectors.\n   *   let v3 = p5.Vector.rem(v1, v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v3.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector | Number[]}  value  divisor vector.\n   * @chainable\n   */\n  rem(x, y, z) {\n    if (x instanceof Vector) {\n      if ([x.x, x.y, x.z].every(Number.isFinite)) {\n        const xComponent = parseFloat(x.x);\n        const yComponent = parseFloat(x.y);\n        const zComponent = parseFloat(x.z);\n        return calculateRemainder3D.call(\n          this,\n          xComponent,\n          yComponent,\n          zComponent\n        );\n      }\n    } else if (Array.isArray(x)) {\n      if (x.every((element) => Number.isFinite(element))) {\n        if (x.length === 2) {\n          return calculateRemainder2D.call(this, x[0], x[1]);\n        }\n        if (x.length === 3) {\n          return calculateRemainder3D.call(this, x[0], x[1], x[2]);\n        }\n      }\n    } else if (arguments.length === 1) {\n      if (Number.isFinite(arguments[0]) && arguments[0] !== 0) {\n        this.x = this.x % arguments[0];\n        this.y = this.y % arguments[0];\n        this.z = this.z % arguments[0];\n        return this;\n      }\n    } else if (arguments.length === 2) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every((element) => Number.isFinite(element))) {\n        if (vectorComponents.length === 2) {\n          return calculateRemainder2D.call(\n            this,\n            vectorComponents[0],\n            vectorComponents[1]\n          );\n        }\n      }\n    } else if (arguments.length === 3) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every((element) => Number.isFinite(element))) {\n        if (vectorComponents.length === 3) {\n          return calculateRemainder3D.call(\n            this,\n            vectorComponents[0],\n            vectorComponents[1],\n            vectorComponents[2]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Subtracts from a vector's `x`, `y`, and `z` components.\n   *\n   * `sub()` can use separate numbers, as in `v.sub(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.sub(v2)`, or an array\n   * of numbers, as in `v.sub([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.sub(4, 5)` subtracts 4 from `v.x`, 5 from `v.y`, and 0 from `v.z`.\n   * Calling `sub()` with no arguments, as in `v.sub()`, has no effect.\n   *\n   * The static version of `sub()`, as in `p5.Vector.sub(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number} x   x component of the vector to subtract.\n   * @param  {Number} [y] y component of the vector to subtract.\n   * @param  {Number} [z] z component of the vector to subtract.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom right.\n   *   let pos = createVector(75, 75);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Subtract numbers.\n   *   pos.sub(0, 50);\n   *   point(pos);\n   *\n   *   // Top left.\n   *   // Subtract a p5.Vector.\n   *   let p2 = createVector(50, 0);\n   *   pos.sub(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Subtract an array.\n   *   let arr = [0, -50];\n   *   pos.sub(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(75, 75);\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Subtract with modifying the original vectors.\n   *   let p3 = p5.Vector.sub(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value the vector to subtract\n   * @chainable\n   */\n  sub(...args) {\n    if (args[0] instanceof Vector) {\n      args[0].values.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else if (Array.isArray(args[0])) {\n      args[0].forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else {\n      args.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Multiplies a vector's `x`, `y`, and `z` components.\n   *\n   * `mult()` can use separate numbers, as in `v.mult(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.mult(v2)`, or an array\n   * of numbers, as in `v.mult([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.mult(2)`, then all the components\n   * will be multiplied by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.mult(4, 5)` multiplies `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `mult()` with no arguments, as in `v.mult()`, has\n   * no effect.\n   *\n   * The static version of `mult()`, as in `p5.Vector.mult(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @method mult\n   * @param  {Number} n The number to multiply with the vector\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Center.\n   *   // Multiply all components by 2.\n   *   p.mult(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   p.mult(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   let arr = [2, 3];\n   *   p.mult(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * p2.x and p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   p.mult(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x * p2.x\n   *   // p3.y = p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.mult(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is twice the length of the red arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(25, 25);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.mult(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to multiply with the x component of the vector.\n   * @param  {Number} y number to multiply with the y component of the vector.\n   * @param  {Number} [z] number to multiply with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to multiply with the components of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to multiply with the components of the original vector.\n   * @chainable\n   */\n  mult(...args) {\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      const maxLen = Math.min(this.values.length, v.values.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(v.values[i]) && typeof v.values[i] === \"number\") {\n          this._values[i] *= v.values[i];\n        } else {\n          console.warn(\n            \"p5.Vector.prototype.mult:\",\n            \"v contains components that are either undefined or not finite numbers\"\n          );\n          return this;\n        }\n      }\n    } else if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      const maxLen = Math.min(this.values.length, arr.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(arr[i]) && typeof arr[i] === \"number\") {\n          this._values[i] *= arr[i];\n        } else {\n          console.warn(\n            \"p5.Vector.prototype.mult:\",\n            \"arr contains elements that are either undefined or not finite numbers\"\n          );\n          return this;\n        }\n      }\n    } else if (\n      args.length === 1 &&\n      typeof args[0] === \"number\" &&\n      Number.isFinite(args[0])\n    ) {\n      for (let i = 0; i < this._values.length; i++) {\n        this._values[i] *= args[0];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Divides a vector's `x`, `y`, and `z` components.\n   *\n   * `div()` can use separate numbers, as in `v.div(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.div(v2)`, or an array\n   * of numbers, as in `v.div([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.div(2)`, then all the components\n   * will be divided by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.div(4, 5)` divides `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `div()` with no arguments, as in `v.div()`, has\n   * no effect.\n   *\n   * The static version of `div()`, as in `p5.Vector.div(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number}    n The number to divide the vector by\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Center.\n   *   let p = createVector(50, 50);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 2\n   *   p.div(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   p.div(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let arr = [2, 3];\n   *   p.div(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let p2 = createVector(2, 3);\n   *   p.div(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x / p2.x\n   *   // p3.y = p.y / p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.div(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.div(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is half the length of the red arrow.');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to divide with the x component of the vector.\n   * @param  {Number} y number to divide with the y component of the vector.\n   * @param  {Number} [z] number to divide with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to divide the components of the vector by.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to divide the components of the original vector by.\n   * @chainable\n   */\n  div(...args) {\n    if (args.length === 0) return this;\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      if (\n        v._values.every(\n          (val) => Number.isFinite(val) && typeof val === \"number\"\n        )\n      ) {\n        if (v._values.some((val) => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / v._values[i]);\n      } else {\n        console.warn(\n          \"p5.Vector.prototype.div:\",\n          \"vector contains components that are either undefined or not finite numbers\"\n        );\n      }\n      return this;\n    }\n\n    if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      if (arr.every((val) => Number.isFinite(val) && typeof val === \"number\")) {\n        if (arr.some((val) => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / arr[i]);\n      } else {\n        console.warn(\n          \"p5.Vector.prototype.div:\",\n          \"array contains components that are either undefined or not finite numbers\"\n        );\n      }\n      return this;\n    }\n\n    if (args.every((val) => Number.isFinite(val) && typeof val === \"number\")) {\n      if (args.some((val) => val === 0)) {\n        console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n        return this;\n      }\n      this._values = this._values.map((val, i) => val / args[0]);\n    } else {\n      console.warn(\n        \"p5.Vector.prototype.div:\",\n        \"arguments contain components that are either undefined or not finite numbers\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector.\n   *\n   * Use <a href=\"#/p5/mag\">mag()</a> to calculate the magnitude of a 2D vector\n   * using components as in `mag(x, y)`.\n   *\n   * @return {Number} magnitude of the vector.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude.\n   *   let m = p.mag();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 50 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  mag() {\n    return Math.sqrt(this.magSq());\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector squared.\n   *\n   * @return {Number} squared magnitude of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude squared.\n   *   let m = p.magSq();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 2500 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  magSq() {\n    return this._values.reduce(\n      (sum, component) => sum + component * component,\n      0\n    );\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   *\n   * The dot product is a number that describes the overlap between two vectors.\n   * Visually, the dot product can be thought of as the \"shadow\" one vector\n   * casts on another. The dot product's magnitude is largest when two vectors\n   * point in the same or opposite directions. Its magnitude is 0 when two\n   * vectors form a right angle.\n   *\n   * The version of `dot()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `dot()` with multiple parameters interprets them as the\n   * `x`, `y`, and `z` components of another vector.\n   *\n   * The static version of `dot()`, as in `p5.Vector.dot(v1, v2)`, is the same\n   * as calling `v1.dot(v2)`.\n   *\n   * @param  {Number} x   x component of the vector.\n   * @param  {Number} [y] y component of the vector.\n   * @param  {Number} [z] z component of the vector.\n   * @return {Number}     dot product.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4);\n   *   let v2 = createVector(3, 0);\n   *\n   *   // Calculate the dot product.\n   *   let dp = v1.dot(v2);\n   *\n   *   // Prints \"9\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the dot product.\n   *   let dp = p5.Vector.dot(v1, v2);\n   *\n   *   // Prints \"0\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows drawn on a gray square. A black arrow points to the right and a red arrow follows the mouse. The text \"v1 • v2 = something\" changes as the mouse moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   let v1 = createVector(30, 0);\n   *   drawArrow(v0, v1, 'black');\n   *\n   *   // Draw the red arrow.\n   *   let v2 = createVector(mouseX - 50, mouseY - 50);\n   *   drawArrow(v0, v2, 'red');\n   *\n   *   // Display the dot product.\n   *   let dp = v2.dot(v1);\n   *   text(`v2 • v1 = ${dp}`, 10, 20);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be dotted.\n   * @return {Number}\n   */\n  dot(...args) {\n    if (args[0] instanceof Vector) {\n      return this.dot(...args[0]._values);\n    }\n    return this._values.reduce((sum, component, index) => {\n      return sum + component * (args[index] || 0);\n    }, 0);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   *\n   * The cross product is a vector that points straight out of the plane created\n   * by two vectors. The cross product's magnitude is the area of the parallelogram\n   * formed by the original two vectors.\n   *\n   * The static version of `cross()`, as in `p5.Vector.cross(v1, v2)`, is the same\n   * as calling `v1.cross(v2)`.\n   *\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed.\n   * @return {p5.Vector}   cross product as a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = v1.cross(v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = p5.Vector.cross(v1, v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  cross(v) {\n    const x = this.y * v.z - this.z * v.y;\n    const y = this.z * v.x - this.x * v.z;\n    const z = this.x * v.y - this.y * v.x;\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, x, y, z);\n    } else {\n      return new Vector(x, y, z);\n    }\n  }\n\n  /**\n   * Calculates the distance between two points represented by vectors.\n   *\n   * A point's coordinates can be represented by the components of a vector\n   * that extends from the origin to the point.\n   *\n   * The static version of `dist()`, as in `p5.Vector.dist(v1, v2)`, is the same\n   * as calling `v1.dist(v2)`.\n   *\n   * Use <a href=\"#/p5/dist\">dist()</a> to calculate the distance between points\n   * using coordinates as in `dist(x1, y1, x2, y2)`.\n   *\n   * @method dist\n   * @submodule p5.Vector\n   * @param  {p5.Vector} v x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}      distance.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = v1.dist(v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = p5.Vector.dist(v1, v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow. The number 36 is written in black near the purple arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display the magnitude. The same as floor(v3.mag());\n   *   let m = floor(p5.Vector.dist(v1, v2));\n   *   text(m, 50, 75);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  dist(v) {\n    return v.copy().sub(this).mag();\n  }\n\n  /**\n   * Scales the components of a <a href=\"#/p5.Vector\">p5.Vector</a> object so\n   * that its magnitude is 1.\n   *\n   * The static version of `normalize()`,  as in `p5.Vector.normalize(v)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @return {p5.Vector} normalized <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Normalize.\n   *   v.normalize();\n   *\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a normalized copy.\n   *   let v1 = p5.Vector.normalize(v0);\n   *\n   *   // Prints \"p5.Vector Object : [10, 20, 2]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow's length is fixed to the circle's radius.\");\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   v1.normalize();\n   *   drawArrow(v0, v1.mult(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  normalize() {\n    const len = this.mag();\n    // here we multiply by the reciprocal instead of calling 'div()'\n    // since div duplicates this zero check.\n    if (len !== 0) this.mult(1 / len);\n    return this;\n  }\n\n  /**\n   * Limits a vector's magnitude to a maximum value.\n   *\n   * The static version of `limit()`, as in `p5.Vector.limit(v, 5)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    max maximum magnitude for the vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Limit its magnitude.\n   *   v.limit(5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a copy an limit its magintude.\n   *   let v1 = p5.Vector.limit(v0, 5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow never crosses the circle's edge.\");\n   * }\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1.limit(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  limit(max) {\n    const mSq = this.magSq();\n    if (mSq > max * max) {\n      this.div(Math.sqrt(mSq)) //normalize it\n        .mult(max);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a vector's magnitude to a given value.\n   *\n   * The static version of `setMag()`, as in `p5.Vector.setMag(v, 10)`, returns\n   * a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    len new length for this vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 0);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v.mag());\n   *\n   *   // Set its magnitude to 10.\n   *   v.setMag(10);\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 4, 0);\n   *\n   *   // Create a copy with a magnitude of 10.\n   *   let v1 = p5.Vector.setMag(v0, 10);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the top left corner of a square toward its center. The red arrow reaches the center and the blue arrow only extends part of the way.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(origin, v, 'red');\n   *\n   *   // Set v's magnitude to 30.\n   *   v.setMag(30);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(origin, v, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setMag(n) {\n    return this.normalize().mult(n);\n  }\n\n  /**\n   * Calculates the angle a 2D vector makes with the positive x-axis.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `heading()` returns angles\n   * in the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `heading()`, as in `p5.Vector.heading(v)`, works the\n   * same way.\n   *\n   * @return {Number} angle of rotation.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(p5.Vector.heading(v));\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(p5.Vector.heading(v));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the top left of a square to its center. The text \"Radians: 0.79\" and \"Degrees: 45\" is written near the tip of the arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(origin, v, 'black');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the heading in radians.\n   *   let h = round(v.heading(), 2);\n   *   text(`Radians: ${h}`, 20, 70);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the heading in degrees.\n   *   h = v.heading();\n   *   text(`Degrees: ${h}`, 20, 85);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  heading() {\n    const h = Math.atan2(this.y, this.x);\n    if (this.isPInst) return this._fromRadians(h);\n    return h;\n  }\n\n  /**\n   * Rotates a 2D vector to a specific angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `setHeading()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(PI);\n   *\n   *   // Prints \"3.141...\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(180);\n   *\n   *   // Prints \"180\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. The red arrow points to the right and the blue arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Point down.\n   *   v1.setHeading(HALF_PI);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setHeading(a) {\n    if (this.isPInst) a = this._toRadians(a);\n    let m = this.mag();\n    this.x = m * Math.cos(a);\n    this.y = m * Math.sin(a);\n    return this;\n  }\n\n  /**\n   * Rotates a 2D vector by an angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `rotate()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `rotate()`, as in `p5.Vector.rotate(v, PI)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(90);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, 90);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let v0;\n   * let v1;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   v0 = createVector(50, 50);\n   *   v1 = createVector(30, 0);\n   *\n   *   describe('A black arrow extends from the center of a gray square. The arrow rotates clockwise.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Rotate v1.\n   *   v1.rotate(0.01);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  rotate(a) {\n    let newHeading = this.heading() + a;\n    if (this.isPInst) newHeading = this._toRadians(newHeading);\n    const mag = this.mag();\n    this.x = Math.cos(newHeading) * mag;\n    this.y = Math.sin(newHeading) * mag;\n    return this;\n  }\n\n  /**\n   * Calculates the angle between two vectors.\n   *\n   * The angles returned are signed, which means that\n   * `v1.angleBetween(v2) === -v2.angleBetween(v1)`.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `angleBetween()` returns\n   * angles in the units of the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {p5.Vector}    value x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}       angle between the vectors.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. A red arrow points to the right and a blue arrow points down. The text \"Radians: 1.57\" and \"Degrees: 90\" is written above the arrows.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the angle in radians.\n   *   let angle = round(v1.angleBetween(v2), 2);\n   *   text(`Radians: ${angle}`, 20, 20);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the angle in degrees.\n   *   angle = round(v1.angleBetween(v2), 2);\n   *   text(`Degrees: ${angle}`, 20, 35);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  angleBetween(v) {\n    const magSqMult = this.magSq() * v.magSq();\n    // Returns NaN if either vector is the zero vector.\n    if (magSqMult === 0) {\n      return NaN;\n    }\n    const u = this.cross(v);\n    // The dot product computes the cos value, and the cross product computes\n    // the sin value. Find the angle based on them. In addition, in the case of\n    // 2D vectors, a sign is added according to the direction of the vector.\n    let angle = Math.atan2(u.mag(), this.dot(v)) * Math.sign(u.z || 1);\n    if (this.isPInst) {\n      angle = this._fromRadians(angle);\n    }\n    return angle;\n  }\n\n  /**\n   * Calculates new `x`, `y`, and `z` components that are proportionally the\n   * same distance between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps all components equal to the old vector's, 0.5 is\n   * halfway between, and 1.0 sets all components equal to the new vector's.\n   *\n   * The static version of `lerp()`, as in `p5.Vector.lerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    x   x component.\n   * @param  {Number}    y   y component.\n   * @param  {Number}    z   z component.\n   * @param  {Number}    amt amount of interpolation between 0.0 (old vector)\n   *                         and 1.0 (new vector). 0.5 is halfway between.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   v0.lerp(v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v0.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1, 1);\n   *\n   *   // Interpolate.\n   *   v.lerp(3, 3, 3, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   let v2 = p5.Vector.lerp(v0, v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v2.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points down, and a purple arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Interpolate.\n   *   let v3 = p5.Vector.lerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v  <a href=\"#/p5.Vector\">p5.Vector</a> to lerp toward.\n   * @param  {Number}    amt\n   * @chainable\n   */\n  lerp(x, y, z, amt) {\n    if (x instanceof Vector) {\n      return this.lerp(x.x, x.y, x.z, y);\n    }\n    this.x += (x - this.x) * amt || 0;\n    this.y += (y - this.y) * amt || 0;\n    this.z += (z - this.z) * amt || 0;\n    return this;\n  }\n\n  /**\n   * Calculates a new heading and magnitude that are between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps the heading and magnitude equal to the old\n   * vector's, 0.5 sets them halfway between, and 1.0 sets the heading and\n   * magnitude equal to the new vector's.\n   *\n   * `slerp()` differs from <a href=\"#/p5.Vector/lerp\">lerp()</a> because\n   * it interpolates magnitude. Calling `v0.slerp(v1, 0.5)` sets `v0`'s\n   * magnitude to a value halfway between its original magnitude and `v1`'s.\n   * Calling `v0.lerp(v1, 0.5)` makes no such guarantee.\n   *\n   * The static version of `slerp()`, as in `p5.Vector.slerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to slerp toward.\n   * @param {Number} amt  amount of interpolation between 0.0 (old vector)\n   *                      and 1.0 (new vector). 0.5 is halfway between.\n   * @return {p5.Vector}\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Interpolate halfway between v0 and v1.\n   *   v0.slerp(v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v0.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Create a p5.Vector that's halfway between v0 and v1.\n   *   let v3 = p5.Vector.slerp(v0, v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v3.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v3.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points to the left, and a purple arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(20, 0);\n   *   let v2 = createVector(-40, 0);\n   *\n   *   // Create a p5.Vector that's halfway between v1 and v2.\n   *   let v3 = p5.Vector.slerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  slerp(v, amt) {\n    // edge cases.\n    if (amt === 0) {\n      return this;\n    }\n    if (amt === 1) {\n      return this.set(v);\n    }\n\n    // calculate magnitudes\n    const selfMag = this.mag();\n    const vMag = v.mag();\n    const magmag = selfMag * vMag;\n    // if either is a zero vector, linearly interpolate by these vectors\n    if (magmag === 0) {\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    }\n    // the cross product of 'this' and 'v' is the axis of rotation\n    const axis = this.cross(v);\n    const axisMag = axis.mag();\n    // Calculates the angle between 'this' and 'v'\n    const theta = Math.atan2(axisMag, this.dot(v));\n\n    // However, if the norm of axis is 0, normalization cannot be performed,\n    // so we will divide the cases\n    if (axisMag > 0) {\n      axis.x /= axisMag;\n      axis.y /= axisMag;\n      axis.z /= axisMag;\n    } else if (theta < Math.PI * 0.5) {\n      // if the norm is 0 and the angle is less than PI/2,\n      // the angle is very close to 0, so do linear interpolation.\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    } else {\n      // If the norm is 0 and the angle is more than PI/2, the angle is\n      // very close to PI.\n      // In this case v can be regarded as '-this', so take any vector\n      // that is orthogonal to 'this' and use that as the axis.\n      if (this.z === 0 && v.z === 0) {\n        // if both this and v are 2D vectors, use (0,0,1)\n        // this makes the result also a 2D vector.\n        axis.set(0, 0, 1);\n      } else if (this.x !== 0) {\n        // if the x components is not 0, use (y, -x, 0)\n        axis.set(this.y, -this.x, 0).normalize();\n      } else {\n        // if the x components is 0, use (1,0,0)\n        axis.set(1, 0, 0);\n      }\n    }\n\n    // Since 'axis' is a unit vector, ey is a vector of the same length as 'this'.\n    const ey = axis.cross(this);\n    // interpolate the length with 'this' and 'v'.\n    const lerpedMagFactor = 1 - amt + (amt * vMag) / selfMag;\n    // imagine a situation where 'axis', 'this', and 'ey' are pointing\n    // along the z, x, and y axes, respectively.\n    // rotates 'this' around 'axis' by amt * theta towards 'ey'.\n    const cosMultiplier = lerpedMagFactor * Math.cos(amt * theta);\n    const sinMultiplier = lerpedMagFactor * Math.sin(amt * theta);\n    // then, calculate 'result'.\n    this.x = this.x * cosMultiplier + ey.x * sinMultiplier;\n    this.y = this.y * cosMultiplier + ey.y * sinMultiplier;\n    this.z = this.z * cosMultiplier + ey.z * sinMultiplier;\n\n    return this;\n  }\n\n  /**\n   * Reflects a vector about a line in 2D or a plane in 3D.\n   *\n   * The orientation of the line or plane is described by a normal vector that\n   * points away from the shape.\n   *\n   * The static version of `reflect()`, as in `p5.Vector.reflect(v, n)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {p5.Vector} surfaceNormal  <a href=\"#/p5.Vector\">p5.Vector</a>\n   *                                    to reflect about.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *   // Create a vector to reflect.\n   *   let v = createVector(4, 6);\n   *\n   *   // Reflect v about n.\n   *   v.reflect(n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *\n   *   // Create a vector to reflect.\n   *   let v0 = createVector(4, 6);\n   *\n   *   // Create a reflected vector.\n   *   let v1 = p5.Vector.reflect(v0, n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square with a vertical line down its middle. A black arrow points to the right, a blue arrow points to the bottom left, and a red arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a vertical line.\n   *   line(50, 0, 50, 100);\n   *\n   *   // Create a normal vector.\n   *   let n = createVector(1, 0);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a vector to reflect.\n   *   let v1 = createVector(30, 40);\n   *\n   *   // Create a reflected vector.\n   *   let v2 = p5.Vector.reflect(v1, n);\n   *\n   *   // Scale the normal vector for drawing.\n   *   n.setMag(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, n, 'black');\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  reflect(surfaceNormal) {\n    const surfaceNormalCopy = Vector.normalize(surfaceNormal);\n    return this.sub(surfaceNormalCopy.mult(2 * this.dot(surfaceNormalCopy)));\n  }\n\n  /**\n   * Returns the vector's components as an array of numbers.\n   *\n   * @return {Number[]} array with the vector's components.\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints \"[20, 30, 0]\" to the console.\n   *   print(v.array());\n   * }\n   * </code>\n   * </div>\n   */\n  array() {\n    return [this.x || 0, this.y || 0, this.z || 0];\n  }\n\n  /**\n   * Checks whether all the vector's components are equal to another vector's.\n   *\n   * `equals()` returns `true` if the vector's components are all the same as another\n   * vector's and `false` if not.\n   *\n   * The version of `equals()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `equals()` with multiple parameters interprets them as the\n   * components of another vector. Any missing parameters are assigned the value\n   * 0.\n   *\n   * The static version of `equals()`, as in `p5.Vector.equals(v0, v1)`,\n   * interprets both parameters as <a href=\"#/p5.Vector\">p5.Vector</a> objects.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @return {Boolean} whether the vectors are equal.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(5, 10, 20);\n   *   let v1 = createVector(5, 10, 20);\n   *   let v2 = createVector(13, 10, 19);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1.x, v1.y, v1.z));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2.x, v2.y, v2.z));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(p5.Vector.equals(v0, v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(p5.Vector.equals(v0, v2));\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Array} value vector to compare.\n   * @return {Boolean}\n   */\n  equals(...args) {\n    let values;\n    if (args[0] instanceof Vector) {\n      values = args[0]._values;\n    } else if (Array.isArray(args[0])) {\n      values = args[0];\n    } else {\n      values = args;\n    }\n\n    for (let i = 0; i < this._values.length; i++) {\n      if (this._values[i] !== (values[i] || 0)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Replaces the components of a <a href=\"#/p5.Vector\">p5.Vector</a> that are very close to zero with zero.\n   *\n   * In computers, handling numbers with decimals can give slightly imprecise answers due to the way those numbers are represented.\n   * This can make it hard to check if a number is zero, as it may be close but not exactly zero.\n   * This method rounds very close numbers to zero to make those checks easier\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n   *\n   * @method clampToZero\n   * @return {p5.Vector} with components very close to zero replaced with zero.\n   * @chainable\n   */\n  clampToZero() {\n    for (let i = 0; i < this._values.length; i++) {\n      this._values[i] = this._clampToZero(this._values[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Helper function for clampToZero\n   * @private\n   */\n  _clampToZero(val) {\n    return Math.abs((val || 0) - 0) <= Number.EPSILON ? 0 : val;\n  }\n\n  // Static Methods\n\n  /**\n   * Creates a new 2D vector from an angle.\n   *\n   * @static\n   * @param {Number}     angle desired angle, in radians. Unaffected by <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}       new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Prints \"p5.Vector Object : [30, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the center of a gray square. It points to the right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a p5.Vector with an angle 0 and magnitude 30.\n   *   let v1 = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngle(angle, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    return new Vector(length * Math.cos(angle), length * Math.sin(angle), 0);\n  }\n\n  /**\n   * Creates a new 3D vector from a pair of ISO spherical angles.\n   *\n   * @static\n   * @param {Number}     theta    polar angle in radians (zero is up).\n   * @param {Number}     phi      azimuthal angle in radians\n   *                               (zero is out of the screen).\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}          new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(0, 0);\n   *\n   *   // Prints \"p5.Vector Object : [0, -1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A light shines on a pink sphere as it orbits.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Calculate the ISO angles.\n   *   let theta = frameCount *  0.05;\n   *   let phi = 0;\n   *\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(theta, phi, 100);\n   *\n   *   // Create a point light using the p5.Vector.\n   *   let c = color('deeppink');\n   *   pointLight(c, v);\n   *\n   *   // Style the sphere.\n   *   fill(255);\n   *   noStroke();\n   *\n   *   // Draw the sphere.\n   *   sphere(35);\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngles(theta, phi, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    const cosPhi = Math.cos(phi);\n    const sinPhi = Math.sin(phi);\n    const cosTheta = Math.cos(theta);\n    const sinTheta = Math.sin(theta);\n\n    return new Vector(\n      length * sinTheta * sinPhi,\n      -length * cosTheta,\n      length * sinTheta * cosPhi\n    );\n  }\n\n  /**\n   * Creates a new 2D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random2D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, 0]\" to the console\n   *   // where x and y are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(1);\n   *\n   *   describe('A black arrow in extends from the center of a gray square. It changes direction once per second.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a random p5.Vector.\n   *   let v1 = p5.Vector.random2D();\n   *\n   *   // Scale v1 for drawing.\n   *   v1.mult(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static random2D() {\n    return this.fromAngle(Math.random() * TWO_PI);\n  }\n\n  /**\n   * Creates a new 3D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random3D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, z]\" to the console\n   *   // where x, y, and z are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  static random3D() {\n    const angle = Math.random() * TWO_PI;\n    const vz = Math.random() * 2 - 1;\n    const vzBase = Math.sqrt(1 - vz * vz);\n    const vx = vzBase * Math.cos(angle);\n    const vy = vzBase * Math.sin(angle);\n    return new Vector(vx, vy, vz);\n  }\n\n  // Returns a copy of a vector.\n  /**\n   * @static\n   * @param  {p5.Vector} v the <a href=\"#/p5.Vector\">p5.Vector</a> to create a copy of\n   * @return {p5.Vector} the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object\n   */\n  static copy(v) {\n    return v.copy(v);\n  }\n\n  // Adds two vectors together and returns a new one.\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} resulting <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  static add(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.add\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.add(v2);\n    return target;\n  }\n\n  // Returns a vector remainder when it is divided by another vector\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The dividend <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The divisor <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} v2\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static rem(v1, v2) {\n    if (v1 instanceof Vector && v2 instanceof Vector) {\n      let target = v1.copy();\n      target.rem(v2);\n      return target;\n    }\n  }\n\n  /*\n   * Subtracts one <a href=\"#/p5.Vector\">p5.Vector</a> from another and returns a new one.  The second\n   * vector (`v2`) is subtracted from the first (`v1`), resulting in `v1-v2`.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static sub(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.sub\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.sub(v2);\n    return target;\n  }\n\n  /**\n   * Multiplies a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} resulting new <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] vector to receive the result.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static mult(v, n, target) {\n    if (!target) {\n      target = v.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.mult\"\n        );\n      }\n    } else {\n      target.set(v);\n    }\n    target.mult(n);\n    return target;\n  }\n\n  /**\n   * Rotates the vector (only 2D vectors) by the given angle; magnitude remains the same. Returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number} angle\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  static rotate(v, a, target) {\n    if (arguments.length === 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.rotate\"\n        );\n      }\n      target.set(v);\n    }\n    target.rotate(a);\n    return target;\n  }\n\n  /**\n   * Divides a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static div(v, n, target) {\n    if (!target) {\n      target = v.copy();\n\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.div\"\n        );\n      }\n    } else {\n      target.set(v);\n    }\n    target.div(n);\n    return target;\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     dot product.\n   */\n  static dot(v1, v2) {\n    return v1.dot(v2);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     cross product.\n   */\n  static cross(v1, v2) {\n    return v1.cross(v2);\n  }\n\n  /**\n   * Calculates the Euclidean distance between two points (considering a\n   * point as a vector object).\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The first <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The second <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @return {Number}     The distance\n   */\n  static dist(v1, v2) {\n    return v1.dist(v2);\n  }\n\n  /**\n   * Linear interpolate a vector to another vector and return the result as a\n   * new vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1\n   * @param {p5.Vector} v2\n   * @param {Number} amt\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}      The lerped value\n   */\n  static lerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.lerp\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.lerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Performs spherical linear interpolation with the other vector\n   * and returns the resulting vector.\n   * This works in both 3D and 2D. As for 2D, the result of slerping\n   * between 2D vectors is always a 2D vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1 old vector.\n   * @param {p5.Vector} v2 new vector.\n   * @param {Number} amt\n   * @param {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} slerped vector between v1 and v2\n   */\n  static slerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.slerp\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.slerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector and returns the result as\n   * a float (this is simply the equation `sqrt(x*x + y*y + z*z)`.)\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT The vector to return the magnitude of\n   * @return {Number}        The magnitude of vecT\n   */\n  static mag(vecT) {\n    return vecT.mag();\n  }\n\n  /**\n   * Calculates the squared magnitude of the vector and returns the result\n   * as a float (this is simply the equation <em>(x\\*x + y\\*y + z\\*z)</em>.)\n   * Faster if the real length is not required in the\n   * case of comparing vectors, etc.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT the vector to return the squared magnitude of\n   * @return {Number}        the squared magnitude of vecT\n   */\n  static magSq(vecT) {\n    return vecT.magSq();\n  }\n\n  /**\n   * Normalize the vector to length 1 (make it a unit vector).\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  The vector to normalize\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}   The vector v, normalized to a length of 1\n   */\n  static normalize(v, target) {\n    if (arguments.length < 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.normalize\"\n        );\n      }\n      target.set(v);\n    }\n    return target.normalize();\n  }\n\n  /**\n   * Limit the magnitude of the vector to the value used for the <b>max</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to limit\n   * @param {Number}    max\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude limited to max\n   */\n  static limit(v, max, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.limit\"\n        );\n      }\n      target.set(v);\n    }\n    return target.limit(max);\n  }\n\n  /**\n   * Set the magnitude of the vector to the value used for the <b>len</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to set the magnitude of\n   * @param {Number}    len\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude set to len\n   */\n  static setMag(v, len, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.setMag\"\n        );\n      }\n      target.set(v);\n    }\n    return target.setMag(len);\n  }\n\n  /**\n   * Calculate the angle of rotation for this vector (only 2D vectors).\n   * p5.Vectors created using <a href=\"#/p5/createVector\">createVector()</a>\n   * will take the current <a href=\"#/p5/angleMode\">angleMode</a> into\n   * consideration, and give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v the vector to find the angle of\n   * @return {Number} the angle of rotation\n   */\n  static heading(v) {\n    return v.heading();\n  }\n\n  /**\n   * Calculates and returns the angle between two vectors. This function will take\n   * the <a href=\"#/p5/angleMode\">angleMode</a> on v1 into consideration, and\n   * give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector}    v1 the first vector.\n   * @param  {p5.Vector}    v2 the second vector.\n   * @return {Number}       angle between the two vectors.\n   */\n  static angleBetween(v1, v2) {\n    return v1.angleBetween(v2);\n  }\n\n  /**\n   * Reflect a vector about a normal to a line in 2D, or about a normal to a\n   * plane in 3D.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} incidentVector vector to be reflected.\n   * @param  {p5.Vector} surfaceNormal\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} the reflected vector\n   */\n  static reflect(incidentVector, surfaceNormal, target) {\n    if (arguments.length < 3) {\n      target = incidentVector.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.reflect\"\n        );\n      }\n      target.set(incidentVector);\n    }\n    return target.reflect(surfaceNormal);\n  }\n\n  /**\n   * Return a representation of this vector as a float array. This is only\n   * for temporary use. If used in any other fashion, the contents should be\n   * copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b>\n   * method to copy into your own vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v the vector to convert to an array\n   * @return {Number[]} an Array with the 3 values\n   */\n  static array(v) {\n    return v.array();\n  }\n\n  /**\n   * Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param {p5.Vector|Array} v1 the first vector to compare\n   * @param {p5.Vector|Array} v2 the second vector to compare\n   * @return {Boolean}\n   */\n  static equals(v1, v2) {\n    let v;\n    if (v1 instanceof Vector) {\n      v = v1;\n    } else if (v1 instanceof Array) {\n      v = new Vector().set(v1);\n    } else {\n      p5._friendlyError(\n        \"The v1 parameter should be of type Array or p5.Vector\",\n        \"p5.Vector.equals\"\n      );\n    }\n    return v.equals(v2);\n  }\n}\n\nfunction vector(p5, fn) {\n  /**\n   * A class to describe a two or three-dimensional vector.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction.\n   *\n   * `p5.Vector` objects are often used to program motion because they simplify\n   * the math. For example, a moving ball has a position and a velocity.\n   * Position describes where the ball is in space. The ball's position vector\n   * extends from the origin to the ball's center. Velocity describes the ball's\n   * speed and the direction it's moving. If the ball is moving straight up, its\n   * velocity vector points straight up. Adding the ball's velocity vector to\n   * its position vector moves it, as in `pos.add(vel)`. Vector math relies on\n   * methods inside the `p5.Vector` class.\n   *\n   * Note: <a href=\"#/p5/createVector\">createVector()</a> is the recommended way\n   * to make an instance of this class.\n   *\n   * @class p5.Vector\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(75, 75);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Draw the first point using a p5.Vector.\n   *   point(p1);\n   *\n   *   // Draw the second point using a p5.Vector's components.\n   *   point(p2.x, p2.y);\n   *\n   *   describe('Two black dots on a gray square, one at the top left and the other at the bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Vector = Vector;\n\n  /**\n   * The x component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property x\n   * @name x\n   */\n\n  /**\n   * The y component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property y\n   * @name y\n   */\n\n  /**\n   * The z component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property z\n   * @name z\n   */\n}\n\nif (typeof p5 !== \"undefined\") {\n  vector(p5, p5.prototype);\n}\n\nexport { Vector, vector as default };\n"],"mappings":"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A,CAACI,IAAI,EAAE;IACV,IAAI,IAAI,CAACZ,OAAO,CAACD,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,GAAGY,IAAI;IACxB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,IAAI,CAACtB,MAAM,CAACuB,IAAI,CAAC,IAAI,CAAC,GAAG;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEC,GAAGA,CAAC,GAAGzB,IAAI,EAAE;IACX,IAAIA,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAC7B,IAAI,CAACG,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACM,KAAK,CAAC,CAAC;IACtC,CAAC,MAAM,IAAImB,KAAK,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MACjC,IAAI,CAACC,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACE,GAAG,CAAEC,GAAG,IAAKA,GAAG,IAAI,CAAC,CAAC;IAC9C,CAAC,MAAM;MACL,IAAI,CAACF,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAEC,GAAG,IAAKA,GAAG,IAAI,CAAC,CAAC;IAC3C;IACA,IAAI,CAACK,UAAU,GAAG,IAAI,CAACP,MAAM,CAACQ,MAAM;IACpC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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,CAACP,KAAK,CAAEK,OAAO,IAAKJ,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC,CAAC,EAAE;QACjE,IAAIE,gBAAgB,CAAC9B,MAAM,KAAK,CAAC,EAAE;UACjC,OAAOd,oBAAoB,CAACyC,IAAI,CAC9B,IAAI,EACJG,gBAAgB,CAAC,CAAC,CAAC,EACnBA,gBAAgB,CAAC,CAAC,CAAC,EACnBA,gBAAgB,CAAC,CAAC,CACpB,CAAC;QACH;MACF;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEC,GAAGA,CAAC,GAAGxC,IAAI,EAAE;IACX,IAAIA,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAC7BE,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC6B,OAAO,CAAC,CAACb,KAAK,EAAEJ,KAAK,KAAK;QACvC,IAAI,CAACZ,MAAM,CAACY,KAAK,CAAC,IAAII,KAAK,IAAI,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIS,KAAK,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MACjCA,IAAI,CAAC,CAAC,CAAC,CAAC8B,OAAO,CAAC,CAACb,KAAK,EAAEJ,KAAK,KAAK;QAChC,IAAI,CAACZ,MAAM,CAACY,KAAK,CAAC,IAAII,KAAK,IAAI,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,MAAM;MACLjB,IAAI,CAAC8B,OAAO,CAAC,CAACb,KAAK,EAAEJ,KAAK,KAAK;QAC7B,IAAI,CAACZ,MAAM,CAACY,KAAK,CAAC,IAAII,KAAK,IAAI,CAAC;MAClC,CAAC,CAAC;IACJ;IACA,OAAO,IAAI;EACbwB,IAAIA,CAAC,GAAGzC,IAAI,EAAE;IACZ,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,IAAIT,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAClD,MAAM4C,CAAC,GAAG1C,IAAI,CAAC,CAAC,CAAC;MACjB,MAAM2C,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC5C,MAAM,CAACQ,MAAM,EAAEiC,CAAC,CAACzC,MAAM,CAACQ,MAAM,CAAC;MAC5D,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC/B,IAAIb,MAAM,CAACC,QAAQ,CAACQ,CAAC,CAACzC,MAAM,CAAC6C,CAAC,CAAC,CAAC,IAAI,OAAOJ,CAAC,CAACzC,MAAM,CAAC6C,CAAC,CAAC,KAAK,QAAQ,EAAE;UACnE,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,IAAIJ,CAAC,CAACzC,MAAM,CAAC6C,CAAC,CAAC;QAChC,CAAC,MAAM;UACLC,OAAO,CAACC,IAAI,CACV,2BAA2B,EAC3B,uEACF,CAAC;UACD,OAAO,IAAI;QACb;MACF;IACF,CAAC,MAAM,IAAIhD,IAAI,CAACS,MAAM,KAAK,CAAC,IAAIiB,KAAK,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MACtD,MAAMiD,GAAG,GAAGjD,IAAI,CAAC,CAAC,CAAC;MACnB,MAAM2C,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC5C,MAAM,CAACQ,MAAM,EAAEwC,GAAG,CAACxC,MAAM,CAAC;MACvD,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC/B,IAAIb,MAAM,CAACC,QAAQ,CAACe,GAAG,CAACH,CAAC,CAAC,CAAC,IAAI,OAAOG,GAAG,CAACH,CAAC,CAAC,KAAK,QAAQ,EAAE;UACzD,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,IAAIG,GAAG,CAACH,CAAC,CAAC;QAC3B,CAAC,MAAM;UACLC,OAAO,CAACC,IAAI,CACV,2BAA2B,EAC3B,uEACF,CAAC;UACD,OAAO,IAAI;QACb;MACF;IACF,CAAC,MAAM,IACLhD,IAAI,CAACS,MAAM,KAAK,CAAC,IACjB,OAAOT,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAC3BiC,MAAM,CAACC,QAAQ,CAAClC,IAAI,CAAC,CAAC,CAAC,CAAC,EACxB;MACA,KAAK,IAAI8C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpC,OAAO,CAACD,MAAM,EAAEqC,CAAC,EAAE,EAAE;QAC5C,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,IAAI9C,IAAI,CAAC,CAAC,CAAC;MAC5B;IACF;IACA,OAAO,IAAI;EACbkD,GAAGA,CAAC,GAAGlD,IAAI,EAAE;IACX,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAClC,IAAIT,IAAI,CAACS,MAAM,KAAK,CAAC,IAAIT,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAClD,MAAM4C,CAAC,GAAG1C,IAAI,CAAC,CAAC,CAAC;MACjB,IACE0C,CAAC,CAAChC,OAAO,CAACsB,KAAK,CACZmB,GAAG,IAAKlB,MAAM,CAACC,QAAQ,CAACiB,GAAG,CAAC,IAAI,OAAOA,GAAG,KAAK,QAClD,CAAC,EACD;QACA,IAAIT,CAAC,CAAChC,OAAO,CAAC0C,IAAI,CAAED,GAAG,IAAKA,GAAG,KAAK,CAAC,CAAC,EAAE;UACtCJ,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAE,aAAa,CAAC;UACvD,OAAO,IAAI;QACb;QACA,IAAI,CAACtC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACR,GAAG,CAAC,CAACiD,GAAG,EAAEL,CAAC,KAAKK,GAAG,GAAGT,CAAC,CAAChC,OAAO,CAACoC,CAAC,CAAC,CAAC;MACjE,CAAC,MAAM;QACLC,OAAO,CAACC,IAAI,CACV,0BAA0B,EAC1B,4EACF,CAAC;MACH;MACA,OAAO,IAAI;IACb;IAEA,IAAIhD,IAAI,CAACS,MAAM,KAAK,CAAC,IAAIiB,KAAK,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC/C,MAAMiD,GAAG,GAAGjD,IAAI,CAAC,CAAC,CAAC;MACnB,IAAIiD,GAAG,CAACjB,KAAK,CAAEmB,GAAG,IAAKlB,MAAM,CAACC,QAAQ,CAACiB,GAAG,CAAC,IAAI,OAAOA,GAAG,KAAK,QAAQ,CAAC,EAAE;QACvE,IAAIF,GAAG,CAACG,IAAI,CAAED,GAAG,IAAKA,GAAG,KAAK,CAAC,CAAC,EAAE;UAChCJ,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAE,aAAa,CAAC;UACvD,OAAO,IAAI;QACb;QACA,IAAI,CAACtC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACR,GAAG,CAAC,CAACiD,GAAG,EAAEL,CAAC,KAAKK,GAAG,GAAGF,GAAG,CAACH,CAAC,CAAC,CAAC;MAC3D,CAAC,MAAM;QACLC,OAAO,CAACC,IAAI,CACV,0BAA0B,EAC1B,2EACF,CAAC;MACH;MACA,OAAO,IAAI;IACb;IAEA,IAAIhD,IAAI,CAACgC,KAAK,CAAEmB,GAAG,IAAKlB,MAAM,CAACC,QAAQ,CAACiB,GAAG,CAAC,IAAI,OAAOA,GAAG,KAAK,QAAQ,CAAC,EAAE;MACxE,IAAInD,IAAI,CAACoD,IAAI,CAAED,GAAG,IAAKA,GAAG,KAAK,CAAC,CAAC,EAAE;QACjCJ,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAE,aAAa,CAAC;QACvD,OAAO,IAAI;MACb;MACA,IAAI,CAACtC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACR,GAAG,CAAC,CAACiD,GAAG,EAAEL,CAAC,KAAKK,GAAG,GAAGnD,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,MAAM;MACL+C,OAAO,CAACC,IAAI,CACV,0BAA0B,EAC1B,8EACF,CAAC;IACH;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,GAAGA,CAAA,EAAG;IACJ,OAAOT,IAAI,CAACU,IAAI,CAAC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC7C,OAAO,CAAC8C,MAAM,CACxB,CAACC,GAAG,EAAEC,SAAS,KAAKD,GAAG,GAAGC,SAAS,GAAGA,SAAS,EAC/C,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEC,GAAGA,CAAC,GAAG3D,IAAI,EAAE;IACX,IAAIA,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAC7B,OAAO,IAAI,CAAC6D,GAAG,CAAC,GAAG3D,IAAI,CAAC,CAAC,CAAC,CAACU,OAAO,CAAC;IACrC;IACA,OAAO,IAAI,CAACA,OAAO,CAAC8C,MAAM,CAAC,CAACC,GAAG,EAAEC,SAAS,EAAE7C,KAAK,KAAK;MACpD,OAAO4C,GAAG,GAAGC,SAAS,IAAI1D,IAAI,CAACa,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC,EAAE,CAAC,CAAC;EACP;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+C,KAAKA,CAAClB,CAAC,EAAE;IACP,MAAMjD,CAAC,GAAG,IAAI,CAACC,CAAC,GAAGgD,CAAC,CAAC7C,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG6C,CAAC,CAAChD,CAAC;IACrC,MAAMA,CAAC,GAAG,IAAI,CAACG,CAAC,GAAG6C,CAAC,CAACjD,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGiD,CAAC,CAAC7C,CAAC;IACrC,MAAMA,CAAC,GAAG,IAAI,CAACJ,CAAC,GAAGiD,CAAC,CAAChD,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGgD,CAAC,CAACjD,CAAC;IACrC,IAAI,IAAI,CAACW,OAAO,EAAE;MAChB,OAAO,IAAIN,MAAM,CAAC,IAAI,CAACO,YAAY,EAAE,IAAI,CAACC,UAAU,EAAEb,CAAC,EAAEC,CAAC,EAAEG,CAAC,CAAC;IAChE,CAAC,MAAM;MACL,OAAO,IAAIC,MAAM,CAACL,CAAC,EAAEC,CAAC,EAAEG,CAAC,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgE,IAAIA,CAACnB,CAAC,EAAE;IACN,OAAOA,CAAC,CAACd,IAAI,CAAC,CAAC,CAACY,GAAG,CAAC,IAAI,CAAC,CAACa,GAAG,CAAC,CAAC;EACjtB;IACA;IACA,IAAIU,GAAG,KAAK,CAAC,EAAE,IAAI,CAACtB,IAAI,CAAC,CAAC,GAAGsB,GAAG,CAAC;IACjC,OAAO,IAAI;EACbxB,IAAIW,GAAG,GAAGD,GAAG,GAAGA,GAAG,EAAE;MACnB,IAAI,CAACf,GAAG,CAACN,IAAI,CAACU,IAAI,CAACY,GAAG,CAAC,CAAC,CAAC;MAAA,CACtBzB,IAAI,CAACwB,GAAG,CAAC;IACd;IACA,OAAO,IAAI;EACbrB,IAAI,CAAC2B,CAAC,CAAC;EACjpC,IAAI,IAAI,CAACW,OAAO,EAAE,OAAO,IAAI,CAACC,YAAY,CAACiE,CAAC,CAAC;IAC7C,OAAOA,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,UAAUA,CAACC,CAAC,EAAE;IACZ,IAAI,IAAI,CAACrE,OAAO,EAAEqE,CAAC,GAAG,IAAI,CAACnE,UAAU,CAACmE,CAAC,CAAC;IACxC,IAAIC,CAAC,GAAG,IAAI,CAACrB,GAAG,CAAC,CAAC;IAClB,IAAI,CAAC5D,CAAC,GAAGiF,CAAC,GAAG9B,IAAI,CAAC+B,GAAG,CAACF,CAAC,CAAC;IACxB,IAAI,CAAC/E,CAAC,GAAGgF,CAAC,GAAG9B,IAAI,CAACgC,GAAG,CAACH,CAAC,CAAC;IACxB,OAAO,IAAI;EACbnC,IAAI,IAAI,CAACrE,OAAO,EAAE0E,UAAU,GAAG,IAAI,CAACxE,UAAU,CAACwE,UAAU,CAAC;IAC1D,MAAMzB,GAAG,GAAG,IAAI,CAACA,GAAG,CAAC,CAAC;IACtB,IAAI,CAAC5D,CAAC,GAAGmD,IAAI,CAAC+B,GAAG,CAACG,UAAU,CAAC,GAAGzB,GAAG;IACnC,IAAI,CAAC3D,CAAC,GAAGkD,IAAI,CAACgC,GAAG,CAACE,UAAU,CAAC,GAAGzB,GAAG;IACnC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0B,YAAYA,CAACrC,CAAC,EAAE;IACd,MAAMsC,SAAS,GAAG,IAAI,CAACzB,KAAK,CAAC,CAAC,GAAGb,CAAC,CAACa,KAAK,CAAC,CAAC;IAC1C;IACA,IAAIyB,SAAS,KAAK,CAAC,EAAE;MACnB,OAAOC,GAAG;IACZ;IACA,MAAMC,CAAC,GAAG,IAAI,CAACtB,KAAK,CAAClB,CAAC,CAAC;IACvB;IACA;IACA;IACA,IAAIyC,KAAK,GAAGvC,IAAI,CAAC2B,KAAK,CAACW,CAAC,CAAC7B,GAAG,CAAC,CAAC,EAAE,IAAI,CAACM,GAAG,CAACjB,CAAC,CAAC,CAAC,GAAGE,IAAI,CAACwC,IAAI,CAACF,CAAC,CAACrF,CAAC,IAAI,CAAC,CAAC;IAClE,IAAI,IAAI,CAACO,OAAO,EAAE;MAChB+E,KAAK,GAAG,IAAI,CAAC9E,YAAY,CAAC8E,KAAK,CAAC;IAClC;IACA,OAAOA,KAAK;EACdyF,GAAG,EAAE;IACjB,IAAI7F,CAAC,YAAYK,MAAM,EAAE;MACvB,OAAO,IAAI,CAACuF,IAAI,CAAC5F,CAAC,CAACA,CAAC,EAAEA,CAAC,CAACC,CAAC,EAAED,CAAC,CAACI,CAAC,EAAEH,CAAC,CAAC;IACpC;IACA,IAAI,CAACD,CAAC,IAAI,CAACA,CAAC,GAAG,IAAI,CAACA,CAAC,IAAI6F,GAAG,IAAI,CAAC;IACjC,IAA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;IACzD,OAAO,IAAI,CAAC5D,GAAG,CAAC6D,iBAAiB,CAAC5D,IAAI,CAAC,CAAC,GAAG,IAAI,CAACkB,GAAG,CAAC0C,iBAAiB,CAAC,CAAC,CAAC;EAC1E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,OAAO,CAAC,IAAI,CAAC7G,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,CAAC,IAAI,CAAC,EAAE,IAAI,CAACG,CAAC,IAAI,CAAC,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACE0G,MAAMA,CAAC,GAAGvG,IAAI,EAAE;IACd,IAAIC,MAAM;IACV,IAAID,IAAI,CAAC,CAAC,CAAC,YAAYF,MAAM,EAAE;MAC7BG,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACU,OAAO;IAC1B,CAAC,MAAM,IAAIgB,KAAK,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MACjCC,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,MAAM;MACLC,MAAM,GAAGD,IAAI;IACf;IAEA,KAAK,IAAI8C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpC,OAAO,CAACD,MAAM,EAAEqC,CAAC,EAAE,EAAE;MAC5C,IAAI,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,MAAM7C,MAAM,CAAC6C,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACxC,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0D,WAAWA,CAAA,EAAG;IACZ,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpC,OAAO,CAACD,MAAM,EAAEqC,CAAC,EAAE,EAAE;MAC5C,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,GAAG,IAAI,CAAC2D,YAAY,CAAC,IAAI,CAAC/F,OAAO,CAACoC,CAAC,CAAC,CAAC;IACtD;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACE2D,YAAYA,CAACtD,GAAG,EAAE;IAChB,OAAOP,IAAI,CAAC8D,GAAG,CAAC,CAACvD,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAIlB,MAAM,CAAC0E,OAAO,GAAG,CAAC,GAAGxD,GAAG;EAC7D;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOyD,SAASA,CAACzB,KAAK,EAAE1E,MAAM,EAAE;IAC9B,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,GAAG,CAAC;IACZ;IACA,OAAO,IAAIX,MAAM,CAACW,MAAM,GAAGmC,IAAI,CAAC+B,GAAG,CAACQ,KAAK,CAAC,EAAE1E,MAAM,GAAGmC,IAAI,CAACgC,GAAG,CAACO,KAAK,CAAC,EAAE,CAAC,CAAC;EAC1E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO0B,UAAUA,CAAChB,KAAK,EAAEiB,GAAG,EAAErG,MAAM,EAAE;IACpC,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,GAAG,CAAC;IACZ;IACA,MAAMsG,MAAM,GAAGnE,IAAI,CAAC+B,GAAG,CAACmC,GAAG,CAAC;IAC5B,MAAME,MAAM,GAAGpE,IAAI,CAACgC,GAAG,CAACkC,GAAG,CAAC;IAC5B,MAAMG,QAAQ,GAAGrE,IAAI,CAAC+B,GAAG,CAACkB,KAAK,CAAC;IAChC,MAAMqB,QAAQ,GAAGtE,IAAI,CAACgC,GAAG,CAACiB,KAAK,CAAC;IAEhC,OAAO,IAAI/F,MAAM,CACfW,MAAM,GAAGyG,QAAQ,GAAGF,MAAM,EAC1B,CAACvG,MAAM,GAAGwG,QAAQ,EAClBxG,MAAM,GAAGyG,QAAQ,GAAGH,MACtB,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,QAAQA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACP,SAAS,CAAChE,IAAI,CAACwE,MAAM,CAAC,CAAC,GAAG/H,MAAM,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AA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,MAAMA,CAACjH,EAAE,EAAEkH,EAAE,EAAE;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElH,EAAE,CAAChB,MAAM,GAAGA,MAAM;;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAI,OAAOgB,EAAE,KAAK,WAAW,EAAE;EAC7BiH,MAAM,CAACjH,EAAE,EAAEA,EAAE,CAACmH,SAAS,CAAC;AAC1B;AAEA,SAASnI,MAAM,EAAEiI,MAAM,IAAIG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}