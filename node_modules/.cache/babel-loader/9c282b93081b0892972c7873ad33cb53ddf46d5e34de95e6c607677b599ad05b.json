{"ast":null,"code":"import ColorSpace from \"../space.js\";\nimport { multiplyMatrices, interpolate, copySign, spow, zdiv, bisectLeft } from \"../util.js\";\nimport { constrain } from \"../angles.js\";\nimport xyz_d65 from \"./xyz-d65.js\";\nimport { WHITES } from \"../adapt.js\";\nconst white = WHITES.D65;\nconst adaptedCoef = 0.42;\nconst adaptedCoefInv = 1 / adaptedCoef;\nconst tau = 2 * Math.PI;\nconst cat16 = [[0.401288, 0.650173, -0.051461], [-0.250268, 1.204414, 0.045854], [-0.002079, 0.048952, 0.953127]];\nconst cat16Inv = [[1.8620678550872327, -1.0112546305316843, 0.14918677544445175], [0.38752654323613717, 0.6214474419314753, -0.008973985167612518], [-0.015841498849333856, -0.03412293802851557, 1.0499644368778496]];\nconst m1 = [[460.0, 451.0, 288.0], [460.0, -891.0, -261.0], [460.0, -220.0, -6300.0]];\nconst surroundMap = {\n  dark: [0.8, 0.525, 0.8],\n  dim: [0.9, 0.59, 0.9],\n  average: [1, 0.69, 1]\n};\nconst hueQuadMap = {\n  // Red, Yellow, Green, Blue, Red\n  h: [20.14, 90.00, 164.25, 237.53, 380.14],\n  e: [0.8, 0.7, 1.0, 1.2, 0.8],\n  H: [0.0, 100.0, 200.0, 300.0, 400.0]\n};\nconst rad2deg = 180 / Math.PI;\nconst deg2rad = Math.PI / 180;\nexport function adapt(coords, fl) {\n  const temp = coords.map(c => {\n    const x = spow(fl * Math.abs(c) * 0.01, adaptedCoef);\n    return 400 * copySign(x, c) / (x + 27.13);\n  });\n  return temp;\n}\nexport function unadapt(adapted, fl) {\n  const constant = 100 / fl * 27.13 ** adaptedCoefInv;\n  return adapted.map(c => {\n    const cabs = Math.abs(c);\n    return copySign(constant * spow(cabs / (400 - cabs), adaptedCoefInv), c);\n  });\n}\nexport function hueQuadrature(h) {\n  let hp = constrain(h);\n  if (hp <= hueQuadMap.h[0]) {\n    hp += 360;\n  }\n  const i = bisectLeft(hueQuadMap.h, hp) - 1;\n  const [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n  const [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n  const Hi = hueQuadMap.H[i];\n  const t = (hp - hi) / ei;\n  return Hi + 100 * t / (t + (hii - hp) / eii);\n}\nexport function invHueQuadrature(H) {\n  let Hp = (H % 400 + 400) % 400;\n  const i = Math.floor(0.01 * Hp);\n  Hp = Hp % 100;\n  const [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n  const [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n  return constrain((Hp * (eii * hi - ei * hii) - 100 * hi * eii) / (Hp * (eii - ei) - 100 * eii));\n}\nexport function environment(refWhite, adaptingLuminance, backgroundLuminance, surround, discounting) {\n  const env = {};\n  env.discounting = discounting;\n  env.refWhite = refWhite;\n  env.surround = surround;\n  const xyzW = refWhite.map(c => {\n    return c * 100;\n  });\n\n  // The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)\n  env.la = adaptingLuminance;\n  // The relative luminance of the nearby background\n  env.yb = backgroundLuminance;\n  // Absolute luminance of the reference white.\n  const yw = xyzW[1];\n\n  // Cone response for reference white\n  const rgbW = multiplyMatrices(cat16, xyzW);\n\n  // Surround: dark, dim, and average\n  surround = surroundMap[env.surround];\n  const f = surround[0];\n  env.c = surround[1];\n  env.nc = surround[2];\n  const k = 1 / (5 * env.la + 1);\n  const k4 = k ** 4;\n\n  // Factor of luminance level adaptation\n  env.fl = k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la);\n  env.flRoot = env.fl ** 0.25;\n  env.n = env.yb / yw;\n  env.z = 1.48 + Math.sqrt(env.n);\n  env.nbb = 0.725 * env.n ** -0.2;\n  env.ncb = env.nbb;\n\n  // Degree of adaptation calculating if not discounting\n  // illuminant (assumed eye is fully adapted)\n  const d = discounting ? 1 : Math.max(Math.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1), 0);\n  env.dRgb = rgbW.map(c => {\n    return interpolate(1, yw / c, d);\n  });\n  env.dRgbInv = env.dRgb.map(c => {\n    return 1 / c;\n  });\n\n  // Achromatic response\n  const rgbCW = rgbW.map((c, i) => {\n    return c * env.dRgb[i];\n  });\n  const rgbAW = adapt(rgbCW, env.fl);\n  env.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);\n\n  // console.log(env);\n\n  return env;\n}\n\n// Pre-calculate everything we can with the viewing conditions\nconst viewingConditions = environment(white, 64 / Math.PI * 0.2, 20, \"average\", false);\nexport function fromCam16(cam16, env) {\n  // These check ensure one, and only one attribute for a\n  // given category is provided.\n  if (!(cam16.J !== undefined ^ cam16.Q !== undefined)) {\n    throw new Error(\"Conversion requires one and only one: 'J' or 'Q'\");\n  }\n  if (!(cam16.C !== undefined ^ cam16.M !== undefined ^ cam16.s !== undefined)) {\n    throw new Error(\"Conversion requires one and only one: 'C', 'M' or 's'\");\n  }\n\n  // Hue is absolutely required\n  if (!(cam16.h !== undefined ^ cam16.H !== undefined)) {\n    throw new Error(\"Conversion requires one and only one: 'h' or 'H'\");\n  }\n\n  // Black\n  if (cam16.J === 0.0 || cam16.Q === 0.0) {\n    return [0.0, 0.0, 0.0];\n  }\n\n  // Break hue into Cartesian components\n  let hRad = 0.0;\n  if (cam16.h !== undefined) {\n    hRad = constrain(cam16.h) * deg2rad;\n  } else {\n    hRad = invHueQuadrature(cam16.H) * deg2rad;\n  }\n  const cosh = Math.cos(hRad);\n  const sinh = Math.sin(hRad);\n\n  // Calculate `Jroot` from one of the lightness derived coordinates.\n  let Jroot = 0.0;\n  if (cam16.J !== undefined) {\n    Jroot = spow(cam16.J, 1 / 2) * 0.1;\n  } else if (cam16.Q !== undefined) {\n    Jroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);\n  }\n\n  // Calculate the `t` value from one of the chroma derived coordinates\n  let alpha = 0.0;\n  if (cam16.C !== undefined) {\n    alpha = cam16.C / Jroot;\n  } else if (cam16.M !== undefined) {\n    alpha = cam16.M / env.flRoot / Jroot;\n  } else if (cam16.s !== undefined) {\n    alpha = 0.0004 * cam16.s ** 2 * (env.aW + 4) / env.c;\n  }\n  const t = spow(alpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73), 10 / 9);\n\n  // Eccentricity\n  const et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n  // Achromatic response\n  const A = env.aW * spow(Jroot, 2 / env.c / env.z);\n\n  // Calculate red-green and yellow-blue components\n  const p1 = 5e4 / 13 * env.nc * env.ncb * et;\n  const p2 = A / env.nbb;\n  const r = 23 * (p2 + 0.305) * zdiv(t, 23 * p1 + t * (11 * cosh + 108 * sinh));\n  const a = r * cosh;\n  const b = r * sinh;\n\n  // Calculate back from cone response to XYZ\n  const rgb_c = unadapt(multiplyMatrices(m1, [p2, a, b]).map(c => {\n    return c * 1 / 1403;\n  }), env.fl);\n  return multiplyMatrices(cat16Inv, rgb_c.map((c, i) => {\n    return c * env.dRgbInv[i];\n  })).map(c => {\n    return c / 100;\n  });\n}\nexport function toCam16(xyzd65, env) {\n  // Cone response\n  const xyz100 = xyzd65.map(c => {\n    return c * 100;\n  });\n  const rgbA = adapt(multiplyMatrices(cat16, xyz100).map((c, i) => {\n    return c * env.dRgb[i];\n  }), env.fl);\n\n  // Calculate hue from red-green and yellow-blue components\n  const a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;\n  const b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;\n  const hRad = (Math.atan2(b, a) % tau + tau) % tau;\n\n  // Eccentricity\n  const et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n  const t = 5e4 / 13 * env.nc * env.ncb * zdiv(et * Math.sqrt(a ** 2 + b ** 2), rgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305);\n  const alpha = spow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);\n\n  // Achromatic response\n  const A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);\n  const Jroot = spow(A / env.aW, 0.5 * env.c * env.z);\n\n  // Lightness\n  const J = 100 * spow(Jroot, 2);\n\n  // Brightness\n  const Q = 4 / env.c * Jroot * (env.aW + 4) * env.flRoot;\n\n  // Chroma\n  const C = alpha * Jroot;\n\n  // Colorfulness\n  const M = C * env.flRoot;\n\n  // Hue\n  const h = constrain(hRad * rad2deg);\n\n  // Hue quadrature\n  const H = hueQuadrature(h);\n\n  // Saturation\n  const s = 50 * spow(env.c * alpha / (env.aW + 4), 1 / 2);\n\n  // console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});\n\n  return {\n    J: J,\n    C: C,\n    h: h,\n    s: s,\n    Q: Q,\n    M: M,\n    H: H\n  };\n}\n\n// Provided as a way to directly evaluate the CAM16 model\n// https://observablehq.com/@jrus/cam16: reference implementation\n// https://arxiv.org/pdf/1802.06067.pdf: Nico Schl√∂mer\n// https://onlinelibrary.wiley.com/doi/pdf/10.1002/col.22324: hue quadrature\n// https://www.researchgate.net/publication/318152296_Comprehensive_color_solutions_CAM16_CAT16_and_CAM16-UCS\n// Results compared against: https://github.com/colour-science/colour\nexport default new ColorSpace({\n  id: \"cam16-jmh\",\n  cssId: \"--cam16-jmh\",\n  name: \"CAM16-JMh\",\n  coords: {\n    j: {\n      refRange: [0, 100],\n      name: \"J\"\n    },\n    m: {\n      refRange: [0, 105.0],\n      name: \"Colorfulness\"\n    },\n    h: {\n      refRange: [0, 360],\n      type: \"angle\",\n      name: \"Hue\"\n    }\n  },\n  base: xyz_d65,\n  fromBase(xyz) {\n    const cam16 = toCam16(xyz, viewingConditions);\n    return [cam16.J, cam16.M, cam16.h];\n  },\n  toBase(cam16) {\n    return fromCam16({\n      J: cam16[0],\n      M: cam16[1],\n      h: cam16[2]\n    }, viewingConditions);\n  }\n});","map":{"version":3,"names":["ColorSpace","multiplyMatrices","interpolate","copySign","spow","zdiv","bisectLeft","constrain","xyz_d65","WHITES","white","D65","adaptedCoef","adaptedCoefInv","tau","Math","PI","cat16","cat16Inv","m1","surroundMap","dark","dim","average","hueQuadMap","h","e","H","rad2deg","deg2rad","adapt","coords","fl","temp","map","c","x","abs","unadapt","adapted","constant","cabs","hueQuadrature","hp","i","hi","hii","slice","ei","eii","Hi","t","invHueQuadrature","Hp","floor","environment","refWhite","adaptingLuminance","backgroundLuminance","surround","discounting","env","xyzW","la","yb","yw","rgbW","f","nc","k","k4","cbrt","flRoot","n","z","sqrt","nbb","ncb","d","max","min","exp","dRgb","dRgbInv","rgbCW","rgbAW","aW","viewingConditions","fromCam16","cam16","J","undefined","Q","Error","C","M","s","hRad","cosh","cos","sinh","sin","Jroot","alpha","pow","et","A","p1","p2","r","a","b","rgb_c","toCam16","xyzd65","xyz100","rgbA","atan2","id","cssId","name","j","refRange","m","type","base","fromBase","xyz","toBase"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/spaces/cam16.js"],"sourcesContent":["import ColorSpace from \"../space.js\";\nimport {multiplyMatrices, interpolate, copySign, spow, zdiv, bisectLeft} from \"../util.js\";\nimport {constrain} from \"../angles.js\";\nimport xyz_d65 from \"./xyz-d65.js\";\nimport {WHITES} from \"../adapt.js\";\n\nconst white = WHITES.D65;\nconst adaptedCoef = 0.42;\nconst adaptedCoefInv = 1 / adaptedCoef;\nconst tau = 2 * Math.PI;\n\nconst cat16 = [\n\t[  0.401288,  0.650173, -0.051461 ],\n\t[ -0.250268,  1.204414,  0.045854 ],\n\t[ -0.002079,  0.048952,  0.953127 ],\n];\n\nconst cat16Inv = [\n\t[1.8620678550872327, -1.0112546305316843, 0.14918677544445175],\n\t[0.38752654323613717, 0.6214474419314753, -0.008973985167612518],\n\t[-0.015841498849333856, -0.03412293802851557, 1.0499644368778496],\n];\n\nconst m1 = [\n\t[460.0, 451.0, 288.0],\n\t[460.0, -891.0, -261.0],\n\t[460.0, -220.0, -6300.0],\n];\n\nconst surroundMap = {\n\tdark: [0.8, 0.525, 0.8],\n\tdim: [0.9, 0.59, 0.9],\n\taverage: [1, 0.69, 1],\n};\n\nconst hueQuadMap = {\n\t// Red, Yellow, Green, Blue, Red\n\th: [20.14, 90.00, 164.25, 237.53, 380.14],\n\te: [0.8, 0.7, 1.0, 1.2, 0.8],\n\tH: [0.0, 100.0, 200.0, 300.0, 400.0],\n};\n\nconst rad2deg = 180 / Math.PI;\nconst deg2rad = Math.PI / 180;\n\nexport function adapt (coords, fl) {\n\tconst temp = coords.map(c => {\n\t\tconst x = spow(fl * Math.abs(c) * 0.01, adaptedCoef);\n\t\treturn 400 * copySign(x, c) / (x + 27.13);\n\t});\n\treturn temp;\n}\n\nexport function unadapt (adapted, fl) {\n\tconst constant = 100 / fl * (27.13 ** adaptedCoefInv);\n\treturn adapted.map(c => {\n\t\tconst cabs = Math.abs(c);\n\t\treturn copySign(constant * spow(cabs / (400 - cabs), adaptedCoefInv), c);\n\t});\n}\n\nexport function hueQuadrature (h) {\n\tlet hp = constrain(h);\n\tif (hp <= hueQuadMap.h[0]) {\n\t\thp += 360;\n\t}\n\n\tconst i = bisectLeft(hueQuadMap.h, hp) - 1;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\tconst Hi = hueQuadMap.H[i];\n\n\tconst t = (hp - hi) / ei;\n\treturn Hi + (100 * t) / (t + (hii - hp) / eii);\n}\n\nexport function invHueQuadrature (H) {\n\tlet Hp = ((H % 400 + 400) % 400);\n\tconst i = Math.floor(0.01 * Hp);\n\tHp = Hp % 100;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\n\treturn constrain(\n\t\t(Hp * (eii * hi - ei * hii) - 100 * hi * eii) /\n\t\t(Hp * (eii - ei) - 100 * eii),\n\t);\n}\n\nexport function environment (\n\trefWhite,\n\tadaptingLuminance,\n\tbackgroundLuminance,\n\tsurround,\n\tdiscounting,\n) {\n\n\tconst env = {};\n\n\tenv.discounting = discounting;\n\tenv.refWhite = refWhite;\n\tenv.surround = surround;\n\tconst xyzW = refWhite.map(c => {\n\t\treturn c * 100;\n\t});\n\n\t// The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)\n\tenv.la = adaptingLuminance;\n\t// The relative luminance of the nearby background\n\tenv.yb = backgroundLuminance;\n\t// Absolute luminance of the reference white.\n\tconst yw = xyzW[1];\n\n\t// Cone response for reference white\n\tconst rgbW = multiplyMatrices(cat16, xyzW);\n\n\t// Surround: dark, dim, and average\n\tsurround = surroundMap[env.surround];\n\tconst f = surround[0];\n\tenv.c = surround[1];\n\tenv.nc = surround[2];\n\n\tconst k = 1 / (5 * env.la + 1);\n\tconst k4 = k ** 4;\n\n\t// Factor of luminance level adaptation\n\tenv.fl = (k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la));\n\tenv.flRoot = env.fl ** 0.25;\n\n\tenv.n = env.yb / yw;\n\tenv.z = 1.48 + Math.sqrt(env.n);\n\tenv.nbb = 0.725 * (env.n ** -0.2);\n\tenv.ncb = env.nbb;\n\n\t// Degree of adaptation calculating if not discounting\n\t// illuminant (assumed eye is fully adapted)\n\tconst d = (discounting) ?\n\t\t1 :\n\t\tMath.max(\n\t\t\tMath.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1),\n\t\t\t0,\n\t\t);\n\tenv.dRgb = rgbW.map(c => {\n\t\treturn interpolate(1, yw / c, d);\n\t});\n\tenv.dRgbInv = env.dRgb.map(c => {\n\t\treturn 1 / c;\n\t});\n\n\t// Achromatic response\n\tconst rgbCW = rgbW.map((c, i) => {\n\t\treturn c * env.dRgb[i];\n\t});\n\tconst rgbAW = adapt(rgbCW, env.fl);\n\tenv.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);\n\n\t// console.log(env);\n\n\treturn env;\n}\n\n// Pre-calculate everything we can with the viewing conditions\nconst viewingConditions = environment(\n\twhite,\n\t64 / Math.PI * 0.2, 20,\n\t\"average\",\n\tfalse,\n);\n\nexport function fromCam16 (cam16, env) {\n\n\t// These check ensure one, and only one attribute for a\n\t// given category is provided.\n\tif (!((cam16.J !== undefined) ^ (cam16.Q !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'J' or 'Q'\");\n\t}\n\n\tif (!((cam16.C !== undefined) ^ (cam16.M !== undefined) ^ (cam16.s !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'C', 'M' or 's'\");\n\t}\n\n\t// Hue is absolutely required\n\tif (!((cam16.h !== undefined) ^ (cam16.H !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'h' or 'H'\");\n\t}\n\n\t// Black\n\tif (cam16.J === 0.0 || cam16.Q === 0.0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\n\t// Break hue into Cartesian components\n\tlet hRad = 0.0;\n\tif (cam16.h !== undefined) {\n\t\thRad = constrain(cam16.h) * deg2rad;\n\t}\n\telse {\n\t\thRad = invHueQuadrature(cam16.H) * deg2rad;\n\t}\n\n\tconst cosh = Math.cos(hRad);\n\tconst sinh = Math.sin(hRad);\n\n\t// Calculate `Jroot` from one of the lightness derived coordinates.\n\tlet Jroot = 0.0;\n\tif (cam16.J !== undefined) {\n\t\tJroot = spow(cam16.J, 1 / 2) * 0.1;\n\t}\n\telse if (cam16.Q !== undefined) {\n\t\tJroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);\n\t}\n\n\t// Calculate the `t` value from one of the chroma derived coordinates\n\tlet alpha = 0.0;\n\tif (cam16.C !== undefined) {\n\t\talpha = cam16.C / Jroot;\n\t}\n\telse if (cam16.M !== undefined) {\n\t\talpha = (cam16.M / env.flRoot) / Jroot;\n\t}\n\telse if (cam16.s !== undefined) {\n\t\talpha = 0.0004 * (cam16.s ** 2) * (env.aW + 4) / env.c;\n\t}\n\tconst t = spow(\n\t\talpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73),\n\t\t10 / 9,\n\t);\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\t// Achromatic response\n\tconst A = env.aW * spow(Jroot, 2 / env.c / env.z);\n\n\t// Calculate red-green and yellow-blue components\n\tconst p1 = 5e4 / 13 * env.nc * env.ncb * et;\n\tconst p2 = A / env.nbb;\n\tconst r = (\n\t\t23 * (p2 + 0.305) *\n\t\tzdiv(t, 23 * p1 + t * (11 * cosh + 108 * sinh))\n\t);\n\tconst a = r * cosh;\n\tconst b = r * sinh;\n\n\t// Calculate back from cone response to XYZ\n\tconst rgb_c = unadapt(\n\t\tmultiplyMatrices(m1, [p2, a, b]).map(c => {\n\t\t\treturn c * 1 / 1403;\n\t\t}),\n\t\tenv.fl,\n\t);\n\treturn multiplyMatrices(\n\t\tcat16Inv,\n\t\trgb_c.map((c, i) => {\n\t\t\treturn c * env.dRgbInv[i];\n\t\t}),\n\t).map(c => {\n\t\treturn c / 100;\n\t});\n}\n\n\nexport function toCam16 (xyzd65, env) {\n\t// Cone response\n\tconst xyz100 = xyzd65.map(c => {\n\t\treturn c * 100;\n\t});\n\tconst rgbA = adapt(\n\t\tmultiplyMatrices(cat16, xyz100).map((c, i) => {\n\t\t\treturn c * env.dRgb[i];\n\t\t}),\n\t\tenv.fl,\n\t);\n\n\t// Calculate hue from red-green and yellow-blue components\n\tconst a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;\n\tconst b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;\n\tconst hRad = ((Math.atan2(b, a) % tau) + tau) % tau;\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\tconst t = (\n\t\t5e4 / 13 * env.nc * env.ncb *\n\t\tzdiv(\n\t\t\tet * Math.sqrt(a ** 2 + b ** 2),\n\t\t\trgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305,\n\t\t)\n\t);\n\tconst alpha = spow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);\n\n\t// Achromatic response\n\tconst A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);\n\n\tconst Jroot = spow(A / env.aW, 0.5 * env.c * env.z);\n\n\t// Lightness\n\tconst J = 100 * spow(Jroot, 2);\n\n\t// Brightness\n\tconst Q = (4 / env.c * Jroot * (env.aW + 4) * env.flRoot);\n\n\t// Chroma\n\tconst C = alpha * Jroot;\n\n\t// Colorfulness\n\tconst M = C * env.flRoot;\n\n\t// Hue\n\tconst h = constrain(hRad * rad2deg);\n\n\t// Hue quadrature\n\tconst H = hueQuadrature(h);\n\n\t// Saturation\n\tconst s = 50 * spow(env.c * alpha / (env.aW + 4), 1 / 2);\n\n\t// console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});\n\n\treturn {J: J, C: C, h: h, s: s, Q: Q, M: M, H: H};\n}\n\n\n// Provided as a way to directly evaluate the CAM16 model\n// https://observablehq.com/@jrus/cam16: reference implementation\n// https://arxiv.org/pdf/1802.06067.pdf: Nico Schl√∂mer\n// https://onlinelibrary.wiley.com/doi/pdf/10.1002/col.22324: hue quadrature\n// https://www.researchgate.net/publication/318152296_Comprehensive_color_solutions_CAM16_CAT16_and_CAM16-UCS\n// Results compared against: https://github.com/colour-science/colour\nexport default new ColorSpace({\n\tid: \"cam16-jmh\",\n\tcssId: \"--cam16-jmh\",\n\tname: \"CAM16-JMh\",\n\tcoords: {\n\t\tj: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"J\",\n\t\t},\n\t\tm: {\n\t\t\trefRange: [0, 105.0],\n\t\t\tname: \"Colorfulness\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\n\tfromBase (xyz) {\n\t\tconst cam16 = toCam16(xyz, viewingConditions);\n\t\treturn [cam16.J, cam16.M, cam16.h];\n\t},\n\ttoBase (cam16) {\n\t\treturn fromCam16(\n\t\t\t{J: cam16[0], M: cam16[1], h: cam16[2]},\n\t\t\tviewingConditions,\n\t\t);\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}