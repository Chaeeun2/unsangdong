{"ast":null,"code":"import { G as GRID, A as AXES } from '../constants-BRcElHU3.js';\nimport { Vector } from '../math/p5.Vector.js';\n\n/**\n * @module 3D\n * @submodule Interaction\n * @for p5\n * @requires core\n */\n\nfunction interaction(p5, fn) {\n  /**\n   * Allows the user to orbit around a 3D sketch using a mouse, trackpad, or\n   * touchscreen.\n   *\n   * 3D sketches are viewed through an imaginary camera. Calling\n   * `orbitControl()` within the <a href=\"#/p5/draw\">draw()</a> function allows\n   * the user to change the camera’s position:\n   *\n   * ```js\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rest of sketch.\n   * }\n   * ```\n   *\n   * Left-clicking and dragging or swipe motion will rotate the camera position\n   * about the center of the sketch. Right-clicking and dragging or multi-swipe\n   * will pan the camera position without rotation. Using the mouse wheel\n   * (scrolling) or pinch in/out will move the camera further or closer from the\n   * center of the sketch.\n   *\n   * The first three parameters, `sensitivityX`, `sensitivityY`, and\n   * `sensitivityZ`, are optional. They’re numbers that set the sketch’s\n   * sensitivity to movement along each axis. For example, calling\n   * `orbitControl(1, 2, -1)` keeps movement along the x-axis at its default\n   * value, makes the sketch twice as sensitive to movement along the y-axis,\n   * and reverses motion along the z-axis. By default, all sensitivity values\n   * are 1.\n   *\n   * The fourth parameter, `options`, is also optional. It’s an object that\n   * changes the behavior of orbiting. For example, calling\n   * `orbitControl(1, 1, 1, options)` keeps the default sensitivity values while\n   * changing the behaviors set with `options`. The object can have the\n   * following properties:\n   *\n   * ```js\n   * let options = {\n   *   // Setting this to false makes mobile interactions smoother by\n   *   // preventing accidental interactions with the page while orbiting.\n   *   // By default, it's true.\n   *   disableTouchActions: true,\n   *\n   *   // Setting this to true makes the camera always rotate in the\n   *   // direction the mouse/touch is moving.\n   *   // By default, it's false.\n   *   freeRotation: false\n   * };\n   *\n   * orbitControl(1, 1, 1, options);\n   * ```\n   *\n   * @method orbitControl\n   * @for p5\n   * @param  {Number} [sensitivityX] sensitivity to movement along the x-axis. Defaults to 1.\n   * @param  {Number} [sensitivityY] sensitivity to movement along the y-axis. Defaults to 1.\n   * @param  {Number} [sensitivityZ] sensitivity to movement along the z-axis. Defaults to 1.\n   * @param  {Object} [options] object with two optional properties, `disableTouchActions`\n   *                            and `freeRotation`. Both are `Boolean`s. `disableTouchActions`\n   *                            defaults to `true` and `freeRotation` defaults to `false`.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   // Make the interactions 3X sensitive.\n   *   orbitControl(3, 3, 3);\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create an options object.\n   *   let options = {\n   *     disableTouchActions: false,\n   *     freeRotation: true\n   *   };\n   *\n   *   // Enable orbiting with the mouse.\n   *   // Prevent accidental touch actions on touchscreen devices\n   *   // and enable free rotation.\n   *   orbitControl(1, 1, 1, options);\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   */\n\n  // implementation based on three.js 'orbitControls':\n  // https://github.com/mrdoob/three.js/blob/6afb8595c0bf8b2e72818e42b64e6fe22707d896/examples/jsm/controls/OrbitControls.js#L22\n  fn.orbitControl = function (sensitivityX, sensitivityY, sensitivityZ, options) {\n    this._assert3d('orbitControl');\n    // p5._validateParameters('orbitControl', arguments);\n\n    const cam = this._renderer.states.curCamera;\n    if (typeof sensitivityX === 'undefined') {\n      sensitivityX = 1;\n    }\n    if (typeof sensitivityY === 'undefined') {\n      sensitivityY = sensitivityX;\n    }\n    if (typeof sensitivityZ === 'undefined') {\n      sensitivityZ = 1;\n    }\n    if (typeof options !== 'object') {\n      options = {};\n    }\n\n    // default right-mouse and mouse-wheel behaviors (context menu and scrolling,\n    // respectively) are disabled here to allow use of those events for panning and\n    // zooming. However, whether or not to disable touch actions is an option.\n\n    // disable context menu for canvas element and add 'contextMenuDisabled'\n    // flag to p5 instance\n    if (this.contextMenuDisabled !== true) {\n      this.canvas.oncontextmenu = () => false;\n      this.contextMenuDisabled = true;\n    }\n\n    // disable default scrolling behavior on the canvas element and add\n    // 'wheelDefaultDisabled' flag to p5 instance\n    if (this.wheelDefaultDisabled !== true) {\n      this.canvas.onwheel = () => false;\n      this.wheelDefaultDisabled = true;\n    }\n\n    // disable default touch behavior on the canvas element and add\n    // 'touchActionsDisabled' flag to p5 instance\n    const {\n      disableTouchActions = true\n    } = options;\n    if (this.touchActionsDisabled !== true && disableTouchActions) {\n      this.canvas.style['touch-action'] = 'none';\n      this.touchActionsDisabled = true;\n    }\n\n    // If option.freeRotation is true, the camera always rotates freely in the direction\n    // the pointer moves. default value is false (normal behavior)\n    const {\n      freeRotation = false\n    } = options;\n\n    // get moved touches.\n    const movedTouches = [];\n    this.touches.forEach(curTouch => {\n      this._renderer.prevTouches.forEach(prevTouch => {\n        if (curTouch.id === prevTouch.id) {\n          const movedTouch = {\n            x: curTouch.x,\n            y: curTouch.y,\n            px: prevTouch.x,\n            py: prevTouch.y\n          };\n          movedTouches.push(movedTouch);\n        }\n      });\n    });\n    this._renderer.prevTouches = this.touches;\n\n    // The idea of using damping is based on the following website. thank you.\n    // https://github.com/freshfork/p5.EasyCam/blob/9782964680f6a5c4c9bee825c475d9f2021d5134/p5.easycam.js#L1124\n\n    // variables for interaction\n    let deltaRadius = 0;\n    let deltaTheta = 0;\n    let deltaPhi = 0;\n    let moveDeltaX = 0;\n    let moveDeltaY = 0;\n    // constants for dampingProcess\n    const damping = 0.85;\n    const rotateAccelerationFactor = 0.6;\n    const moveAccelerationFactor = 0.15;\n    // For touches, the appropriate scale is different\n    // because the distance difference is multiplied.\n    const mouseZoomScaleFactor = 0.01;\n    const touchZoomScaleFactor = 0.0004;\n    const scaleFactor = this.height < this.width ? this.height : this.width;\n    // Flag whether the mouse or touch pointer is inside the canvas\n    let pointersInCanvas = false;\n\n    // calculate and determine flags and variables.\n    if (movedTouches.length > 0) {\n      /* for touch */\n      // if length === 1, rotate\n      // if length > 1, zoom and move\n\n      // for touch, it is calculated based on one moved touch pointer position.\n      pointersInCanvas = movedTouches[0].x > 0 && movedTouches[0].x < this.width && movedTouches[0].y > 0 && movedTouches[0].y < this.height;\n      if (movedTouches.length === 1) {\n        const t = movedTouches[0];\n        deltaTheta = -sensitivityX * (t.x - t.px) / scaleFactor;\n        deltaPhi = sensitivityY * (t.y - t.py) / scaleFactor;\n      } else {\n        const t0 = movedTouches[0];\n        const t1 = movedTouches[1];\n        const distWithTouches = Math.hypot(t0.x - t1.x, t0.y - t1.y);\n        const prevDistWithTouches = Math.hypot(t0.px - t1.px, t0.py - t1.py);\n        const changeDist = distWithTouches - prevDistWithTouches;\n        // move the camera farther when the distance between the two touch points\n        // decreases, move the camera closer when it increases.\n        deltaRadius = -changeDist * sensitivityZ * touchZoomScaleFactor;\n        // Move the center of the camera along with the movement of\n        // the center of gravity of the two touch points.\n        moveDeltaX = 0.5 * (t0.x + t1.x) - 0.5 * (t0.px + t1.px);\n        moveDeltaY = 0.5 * (t0.y + t1.y) - 0.5 * (t0.py + t1.py);\n      }\n      if (this.touches.length > 0) {\n        if (pointersInCanvas) {\n          // Initiate an interaction if touched in the canvas\n          this._renderer.executeRotateAndMove = true;\n          this._renderer.executeZoom = true;\n        }\n      } else {\n        // End an interaction when the touch is released\n        this._renderer.executeRotateAndMove = false;\n        this._renderer.executeZoom = false;\n      }\n    } else {\n      /* for mouse */\n      // if wheelDeltaY !== 0, zoom\n      // if mouseLeftButton is down, rotate\n      // if mouseRightButton is down, move\n\n      // For mouse, it is calculated based on the mouse position.\n      pointersInCanvas = this.mouseX > 0 && this.mouseX < this.width && this.mouseY > 0 && this.mouseY < this.height;\n      if (this._mouseWheelDeltaY !== 0) {\n        // zoom the camera depending on the value of _mouseWheelDeltaY.\n        // move away if positive, move closer if negative\n        deltaRadius = Math.sign(this._mouseWheelDeltaY) * sensitivityZ;\n        deltaRadius *= mouseZoomScaleFactor;\n        this._mouseWheelDeltaY = 0;\n        // start zoom when the mouse is wheeled within the canvas.\n        if (pointersInCanvas) this._renderer.executeZoom = true;\n      } else {\n        // quit zoom when you stop wheeling.\n        this._renderer.executeZoom = false;\n      }\n      if (this.mouseIsPressed) {\n        if (this.mouseButton.left) {\n          deltaTheta = -sensitivityX * this.movedX / scaleFactor;\n          deltaPhi = sensitivityY * this.movedY / scaleFactor;\n        } else if (this.mouseButton.right) {\n          moveDeltaX = this.movedX;\n          moveDeltaY = this.movedY * cam.yScale;\n        }\n        // start rotate and move when mouse is pressed within the canvas.\n        if (pointersInCanvas) this._renderer.executeRotateAndMove = true;\n      } else {\n        // quit rotate and move if mouse is released.\n        this._renderer.executeRotateAndMove = false;\n      }\n    }\n\n    // interactions\n\n    // zoom process\n    if (deltaRadius !== 0 && this._renderer.executeZoom) {\n      // accelerate zoom velocity\n      this._renderer.zoomVelocity += deltaRadius;\n    }\n    if (Math.abs(this._renderer.zoomVelocity) > 0.001) {\n      // if freeRotation is true, we use _orbitFree() instead of _orbit()\n      if (freeRotation) {\n        cam._orbitFree(0, 0, this._renderer.zoomVelocity);\n      } else {\n        cam._orbit(0, 0, this._renderer.zoomVelocity);\n      }\n      // In orthogonal projection, the scale does not change even if\n      // the distance to the gaze point is changed, so the projection matrix\n      // needs to be modified.\n      if (cam.projMatrix.mat4[15] !== 0) {\n        cam.projMatrix.mat4[0] *= Math.pow(10, -this._renderer.zoomVelocity);\n        cam.projMatrix.mat4[5] *= Math.pow(10, -this._renderer.zoomVelocity);\n        // modify uPMatrix\n        this._renderer.states.setValue('uPMatrix', this._renderer.states.uPMatrix.clone());\n        this._renderer.states.uPMatrix.mat4[0] = cam.projMatrix.mat4[0];\n        this._renderer.states.uPMatrix.mat4[5] = cam.projMatrix.mat4[5];\n      }\n      // damping\n      this._renderer.zoomVelocity *= damping;\n    } else {\n      this._renderer.zoomVelocity = 0;\n    }\n\n    // rotate process\n    if ((deltaTheta !== 0 || deltaPhi !== 0) && this._renderer.executeRotateAndMove) {\n      // accelerate rotate velocity\n      this._renderer.rotateVelocity.add(deltaTheta * rotateAccelerationFactor, deltaPhi * rotateAccelerationFactor);\n    }\n    if (this._renderer.rotateVelocity.magSq() > 0.000001) {\n      // if freeRotation is true, the camera always rotates freely in the direction the pointer moves\n      if (freeRotation) {\n        cam._orbitFree(-this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0);\n      } else {\n        cam._orbit(this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0);\n      }\n      // damping\n      this._renderer.rotateVelocity.mult(damping);\n    } else {\n      this._renderer.rotateVelocity.set(0, 0);\n    }\n\n    // move process\n    if ((moveDeltaX !== 0 || moveDeltaY !== 0) && this._renderer.executeRotateAndMove) {\n      // Normalize movement distance\n      const ndcX = moveDeltaX * 2 / this.width;\n      const ndcY = -moveDeltaY * 2 / this.height;\n      // accelerate move velocity\n      this._renderer.moveVelocity.add(ndcX * moveAccelerationFactor, ndcY * moveAccelerationFactor);\n    }\n    if (this._renderer.moveVelocity.magSq() > 0.000001) {\n      // Translate the camera so that the entire object moves\n      // perpendicular to the line of sight when the mouse is moved\n      // or when the centers of gravity of the two touch pointers move.\n      const local = cam._getLocalAxes();\n\n      // Calculate the z coordinate in the view coordinates of\n      // the center, that is, the distance to the view point\n      const diffX = cam.eyeX - cam.centerX;\n      const diffY = cam.eyeY - cam.centerY;\n      const diffZ = cam.eyeZ - cam.centerZ;\n      const viewZ = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);\n\n      // position vector of the center.\n      let cv = new Vector(cam.centerX, cam.centerY, cam.centerZ);\n\n      // Calculate the normalized device coordinates of the center.\n      cv = cam.cameraMatrix.multiplyPoint(cv);\n      cv = this._renderer.states.uPMatrix.multiplyAndNormalizePoint(cv);\n\n      // Move the center by this distance\n      // in the normalized device coordinate system.\n      cv.x -= this._renderer.moveVelocity.x;\n      cv.y -= this._renderer.moveVelocity.y;\n\n      // Calculate the translation vector\n      // in the direction perpendicular to the line of sight of center.\n      let dx, dy;\n      const uP = this._renderer.states.uPMatrix.mat4;\n      if (uP[15] === 0) {\n        dx = (uP[8] + cv.x) / uP[0] * viewZ;\n        dy = (uP[9] + cv.y) / uP[5] * viewZ;\n      } else {\n        dx = (cv.x - uP[12]) / uP[0];\n        dy = (cv.y - uP[13]) / uP[5];\n      }\n\n      // translate the camera.\n      cam.setPosition(cam.eyeX + dx * local.x[0] + dy * local.y[0], cam.eyeY + dx * local.x[1] + dy * local.y[1], cam.eyeZ + dx * local.x[2] + dy * local.y[2]);\n      // damping\n      this._renderer.moveVelocity.mult(damping);\n    } else {\n      this._renderer.moveVelocity.set(0, 0);\n    }\n    return this;\n  };\n\n  /**\n   * Adds a grid and an axes icon to clarify orientation in 3D sketches.\n   *\n   * `debugMode()` adds a grid that shows where the “ground” is in a sketch. By\n   * default, the grid will run through the origin `(0, 0, 0)` of the sketch\n   * along the XZ plane. `debugMode()` also adds an axes icon that points along\n   * the positive x-, y-, and z-axes. Calling `debugMode()` displays the grid\n   * and axes icon with their default size and position.\n   *\n   * There are four ways to call `debugMode()` with optional parameters to\n   * customize the debugging environment.\n   *\n   * The first way to call `debugMode()` has one parameter, `mode`. If the\n   * system constant `GRID` is passed, as in `debugMode(GRID)`, then the grid\n   * will be displayed and the axes icon will be hidden. If the constant `AXES`\n   * is passed, as in `debugMode(AXES)`, then the axes icon will be displayed\n   * and the grid will be hidden.\n   *\n   * The second way to call `debugMode()` has six parameters. The first\n   * parameter, `mode`, selects either `GRID` or `AXES` to be displayed. The\n   * next five parameters, `gridSize`, `gridDivisions`, `xOff`, `yOff`, and\n   * `zOff` are optional. They’re numbers that set the appearance of the grid\n   * (`gridSize` and `gridDivisions`) and the placement of the axes icon\n   * (`xOff`, `yOff`, and `zOff`). For example, calling\n   * `debugMode(20, 5, 10, 10, 10)` sets the `gridSize` to 20 pixels, the number\n   * of `gridDivisions` to 5, and offsets the axes icon by 10 pixels along the\n   * x-, y-, and z-axes.\n   *\n   * The third way to call `debugMode()` has five parameters. The first\n   * parameter, `mode`, selects either `GRID` or `AXES` to be displayed. The\n   * next four parameters, `axesSize`, `xOff`, `yOff`, and `zOff` are optional.\n   * They’re numbers that set the appearance of the size of the axes icon\n   * (`axesSize`) and its placement (`xOff`, `yOff`, and `zOff`).\n   *\n   * The fourth way to call `debugMode()` has nine optional parameters. The\n   * first five parameters, `gridSize`, `gridDivisions`, `gridXOff`, `gridYOff`,\n   * and `gridZOff` are numbers that set the appearance of the grid. For\n   * example, calling `debugMode(100, 5, 0, 0, 0)` sets the `gridSize` to 100,\n   * the number of `gridDivisions` to 5, and sets all the offsets to 0 so that\n   * the grid is centered at the origin. The next four parameters, `axesSize`,\n   * `xOff`, `yOff`, and `zOff` are numbers that set the appearance of the size\n   * of the axes icon (`axesSize`) and its placement (`axesXOff`, `axesYOff`,\n   * and `axesZOff`). For example, calling\n   * `debugMode(100, 5, 0, 0, 0, 50, 10, 10, 10)` sets the `gridSize` to 100,\n   * the number of `gridDivisions` to 5, and sets all the offsets to 0 so that\n   * the grid is centered at the origin. It then sets the `axesSize` to 50 and\n   * offsets the icon 10 pixels along each axis.\n   *\n   * @method debugMode\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   debugMode();\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Only display the axes icon.\n   *   debugMode(AXES);\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Only display the grid and customize it:\n   *   // - size: 50\n   *   // - divisions: 10\n   *   // - offsets: 0, 20, 0\n   *   debugMode(GRID, 50, 10, 0, 20, 0);\n   *\n   *   describe('A multicolor box on a gray background. A grid is displayed below the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Display the grid and axes icon and customize them:\n   *   // Grid\n   *   // ----\n   *   // - size: 50\n   *   // - divisions: 10\n   *   // - offsets: 0, 20, 0\n   *   // Axes\n   *   // ----\n   *   // - size: 50\n   *   // - offsets: 0, 0, 0\n   *   debugMode(50, 10, 0, 20, 0, 50, 0, 0, 0);\n   *\n   *   describe('A multicolor box on a gray background. A grid is displayed below the box. An axes icon is displayed at the center of the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode either GRID or AXES\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode\n   * @param {Number} [gridSize] side length of the grid.\n   * @param {Number} [gridDivisions] number of divisions in the grid.\n   * @param {Number} [xOff] offset from origin along the x-axis.\n   * @param {Number} [yOff] offset from origin along the y-axis.\n   * @param {Number} [zOff] offset from origin along the z-axis.\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode\n   * @param {Number} [axesSize] length of axes icon markers.\n   * @param {Number} [xOff]\n   * @param {Number} [yOff]\n   * @param {Number} [zOff]\n   */\n\n  /**\n   * @method debugMode\n   * @param {Number} [gridSize]\n   * @param {Number} [gridDivisions]\n   * @param {Number} [gridXOff] grid offset from the origin along the x-axis.\n   * @param {Number} [gridYOff] grid offset from the origin along the y-axis.\n   * @param {Number} [gridZOff] grid offset from the origin along the z-axis.\n   * @param {Number} [axesSize]\n   * @param {Number} [axesXOff] axes icon offset from the origin along the x-axis.\n   * @param {Number} [axesYOff] axes icon offset from the origin along the y-axis.\n   * @param {Number} [axesZOff] axes icon offset from the origin along the z-axis.\n   */\n\n  fn.debugMode = function (...args) {\n    this._assert3d('debugMode');\n    // p5._validateParameters('debugMode', args);\n\n    // start by removing existing 'post' registered debug methods\n    for (let i = p5.lifecycleHooks.postdraw.length - 1; i >= 0; i--) {\n      // test for equality...\n      if (p5.lifecycleHooks.postdraw[i].toString() === this._grid().toString() || p5.lifecycleHooks.postdraw[i].toString() === this._axesIcon().toString()) {\n        p5.lifecycleHooks.postdraw.splice(i, 1);\n      }\n    }\n\n    // then add new debugMode functions according to the argument list\n    if (args[0] === GRID) {\n      p5.lifecycleHooks.postdraw.push(this._grid(args[1], args[2], args[3], args[4], args[5]));\n    } else if (args[0] === AXES) {\n      p5.lifecycleHooks.postdraw.push(this._axesIcon(args[1], args[2], args[3], args[4]));\n    } else {\n      p5.lifecycleHooks.postdraw.push(this._grid(args[0], args[1], args[2], args[3], args[4]));\n      p5.lifecycleHooks.postdraw.push(this._axesIcon(args[5], args[6], args[7], args[8]));\n    }\n  };\n\n  /**\n   * Turns off <a href=\"#/p5/debugMode\">debugMode()</a> in a 3D sketch.\n   *\n   * @method noDebugMode\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   debugMode();\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box. They disappear when the user double-clicks.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.  box(20, 40);\n   * }\n   *\n   * // Disable debug mode when the user double-clicks.\n   * function doubleClicked() {\n   *   noDebugMode();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noDebugMode = function () {\n    this._assert3d('noDebugMode');\n\n    // start by removing existing 'post' registered debug methods\n    for (let i = p5.lifecycleHooks.postdraw.length - 1; i >= 0; i--) {\n      // test for equality...\n      if (p5.lifecycleHooks.postdraw[i].toString() === this._grid().toString() || p5.lifecycleHooks.postdraw[i].toString() === this._axesIcon().toString()) {\n        p5.lifecycleHooks.postdraw.splice(i, 1);\n      }\n    }\n  };\n\n  /**\n   * For use with debugMode\n   * @private\n   * @method _grid\n   * @param {Number} [size] size of grid sides\n   * @param {Number} [div] number of grid divisions\n   * @param {Number} [xOff] offset of grid center from origin in X axis\n   * @param {Number} [yOff] offset of grid center from origin in Y axis\n   * @param {Number} [zOff] offset of grid center from origin in Z axis\n   */\n  fn._grid = function (size, numDivs, xOff, yOff, zOff) {\n    if (typeof size === 'undefined') {\n      size = this.width / 2;\n    }\n    if (typeof numDivs === 'undefined') {\n      // ensure at least 2 divisions\n      numDivs = Math.round(size / 30) < 4 ? 4 : Math.round(size / 30);\n    }\n    if (typeof xOff === 'undefined') {\n      xOff = 0;\n    }\n    if (typeof yOff === 'undefined') {\n      yOff = 0;\n    }\n    if (typeof zOff === 'undefined') {\n      zOff = 0;\n    }\n    const spacing = size / numDivs;\n    const halfSize = size / 2;\n    return function () {\n      this.push();\n      this.stroke(this._renderer.states.curStrokeColor[0] * 255, this._renderer.states.curStrokeColor[1] * 255, this._renderer.states.curStrokeColor[2] * 255);\n      this._renderer.states.setValue('uModelMatrix', this._renderer.states.uModelMatrix.clone());\n      this._renderer.states.uModelMatrix.reset();\n\n      // Lines along X axis\n      for (let q = 0; q <= numDivs; q++) {\n        this.beginShape(this.LINES);\n        this.vertex(-halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n        this.vertex(+halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n        this.endShape();\n      }\n\n      // Lines along Z axis\n      for (let i = 0; i <= numDivs; i++) {\n        this.beginShape(this.LINES);\n        this.vertex(i * spacing - halfSize + xOff, yOff, -halfSize + zOff);\n        this.vertex(i * spacing - halfSize + xOff, yOff, +halfSize + zOff);\n        this.endShape();\n      }\n      this.pop();\n    };\n  };\n\n  /**\n   * For use with debugMode\n   * @private\n   * @method _axesIcon\n   * @param {Number} [size] size of axes icon lines\n   * @param {Number} [xOff] offset of icon from origin in X axis\n   * @param {Number} [yOff] offset of icon from origin in Y axis\n   * @param {Number} [zOff] offset of icon from origin in Z axis\n   */\n  fn._axesIcon = function (size, xOff, yOff, zOff) {\n    if (typeof size === 'undefined') {\n      size = this.width / 20 > 40 ? this.width / 20 : 40;\n    }\n    if (typeof xOff === 'undefined') {\n      xOff = -this.width / 4;\n    }\n    if (typeof yOff === 'undefined') {\n      yOff = xOff;\n    }\n    if (typeof zOff === 'undefined') {\n      zOff = xOff;\n    }\n    return () => {\n      this.push();\n      this._renderer.states.setValue('uModelMatrix', this._renderer.states.uModelMatrix.clone());\n      this._renderer.states.uModelMatrix.reset();\n\n      // X axis\n      this.strokeWeight(2);\n      this.stroke(255, 0, 0);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff + size, yOff, zOff);\n      this.endShape();\n      // Y axis\n      this.stroke(0, 255, 0);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff, yOff + size, zOff);\n      this.endShape();\n      // Z axis\n      this.stroke(0, 0, 255);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff, yOff, zOff + size);\n      this.endShape();\n      this.pop();\n    };\n  };\n}\nif (typeof p5 !== 'undefined') {\n  interaction(p5, p5.prototype);\n}\nexport { interaction as default };","map":{"version":3,"names":["G","GRID","A","AXES","Vector","interaction","p5","fn","orbitControl","sensitivityX","sensitivityY","sensitivityZ","options","_assert3d","cam","_renderer","states","curCamera","contextMenuDisabled","canvas","oncontextmenu","wheelDefaultDisabled","onwheel","disableTouchActions","touchActionsDisabled","style","freeRotation","movedTouches","touches","forEach","curTouch","prevTouches","prevTouch","id","movedTouch","x","y","px","py","push","deltaRadius","deltaTheta","deltaPhi","moveDeltaX","moveDeltaY","damping","rotateAccelerationFactor","moveAccelerationFactor","mouseZoomScaleFactor","touchZoomScaleFactor","scaleFactor","height","width","pointersInCanvas","length","t","t0","t1","distWithTouches","Math","hypot","prevDistWithTouches","changeDist","executeRotateAndMove","executeZoom","mouseX","mouseY","_mouseWheelDeltaY","sign","mouseIsPressed","mouseButton","left","movedX","movedY","right","yScale","zoomVelocity","abs","_orbitFree","_orbit","projMatrix","mat4","pow","setValue","uPMatrix","clone","rotateVelocity","add","magSq","mult","set","ndcX","ndcY","moveVelocity","local","_getLocalAxes","diffX","eyeX","centerX","diffY","eyeY","centerY","diffZ","eyeZ","centerZ","viewZ","sqrt","cv","cameraMatrix","multiplyPoint","multiplyAndNormalizePoint","dx","dy","uP","setPosition","debugMode","args","i","lifecycleHooks","postdraw","toString","_grid","_axesIcon","splice","noDebugMode","size","numDivs","xOff","yOff","zOff","round","spacing","halfSize","stroke","curStrokeColor","uModelMatrix","reset","q","beginShape","LINES","vertex","endShape","pop","strokeWeight","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/webgl/interaction.js"],"sourcesContent":["import { G as GRID, A as AXES } from '../constants-BRcElHU3.js';\nimport { Vector } from '../math/p5.Vector.js';\n\n/**\n * @module 3D\n * @submodule Interaction\n * @for p5\n * @requires core\n */\n\n\nfunction interaction(p5, fn){\n  /**\n   * Allows the user to orbit around a 3D sketch using a mouse, trackpad, or\n   * touchscreen.\n   *\n   * 3D sketches are viewed through an imaginary camera. Calling\n   * `orbitControl()` within the <a href=\"#/p5/draw\">draw()</a> function allows\n   * the user to change the camera’s position:\n   *\n   * ```js\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rest of sketch.\n   * }\n   * ```\n   *\n   * Left-clicking and dragging or swipe motion will rotate the camera position\n   * about the center of the sketch. Right-clicking and dragging or multi-swipe\n   * will pan the camera position without rotation. Using the mouse wheel\n   * (scrolling) or pinch in/out will move the camera further or closer from the\n   * center of the sketch.\n   *\n   * The first three parameters, `sensitivityX`, `sensitivityY`, and\n   * `sensitivityZ`, are optional. They’re numbers that set the sketch’s\n   * sensitivity to movement along each axis. For example, calling\n   * `orbitControl(1, 2, -1)` keeps movement along the x-axis at its default\n   * value, makes the sketch twice as sensitive to movement along the y-axis,\n   * and reverses motion along the z-axis. By default, all sensitivity values\n   * are 1.\n   *\n   * The fourth parameter, `options`, is also optional. It’s an object that\n   * changes the behavior of orbiting. For example, calling\n   * `orbitControl(1, 1, 1, options)` keeps the default sensitivity values while\n   * changing the behaviors set with `options`. The object can have the\n   * following properties:\n   *\n   * ```js\n   * let options = {\n   *   // Setting this to false makes mobile interactions smoother by\n   *   // preventing accidental interactions with the page while orbiting.\n   *   // By default, it's true.\n   *   disableTouchActions: true,\n   *\n   *   // Setting this to true makes the camera always rotate in the\n   *   // direction the mouse/touch is moving.\n   *   // By default, it's false.\n   *   freeRotation: false\n   * };\n   *\n   * orbitControl(1, 1, 1, options);\n   * ```\n   *\n   * @method orbitControl\n   * @for p5\n   * @param  {Number} [sensitivityX] sensitivity to movement along the x-axis. Defaults to 1.\n   * @param  {Number} [sensitivityY] sensitivity to movement along the y-axis. Defaults to 1.\n   * @param  {Number} [sensitivityZ] sensitivity to movement along the z-axis. Defaults to 1.\n   * @param  {Object} [options] object with two optional properties, `disableTouchActions`\n   *                            and `freeRotation`. Both are `Boolean`s. `disableTouchActions`\n   *                            defaults to `true` and `freeRotation` defaults to `false`.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   // Make the interactions 3X sensitive.\n   *   orbitControl(3, 3, 3);\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A multicolor box on a gray background. The camera angle changes when the user interacts using a mouse, trackpad, or touchscreen.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create an options object.\n   *   let options = {\n   *     disableTouchActions: false,\n   *     freeRotation: true\n   *   };\n   *\n   *   // Enable orbiting with the mouse.\n   *   // Prevent accidental touch actions on touchscreen devices\n   *   // and enable free rotation.\n   *   orbitControl(1, 1, 1, options);\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(30, 50);\n   * }\n   * </code>\n   * </div>\n   */\n\n  // implementation based on three.js 'orbitControls':\n  // https://github.com/mrdoob/three.js/blob/6afb8595c0bf8b2e72818e42b64e6fe22707d896/examples/jsm/controls/OrbitControls.js#L22\n  fn.orbitControl = function(\n    sensitivityX,\n    sensitivityY,\n    sensitivityZ,\n    options\n  ) {\n    this._assert3d('orbitControl');\n    // p5._validateParameters('orbitControl', arguments);\n\n    const cam = this._renderer.states.curCamera;\n\n    if (typeof sensitivityX === 'undefined') {\n      sensitivityX = 1;\n    }\n    if (typeof sensitivityY === 'undefined') {\n      sensitivityY = sensitivityX;\n    }\n    if (typeof sensitivityZ === 'undefined') {\n      sensitivityZ = 1;\n    }\n    if (typeof options !== 'object') {\n      options = {};\n    }\n\n    // default right-mouse and mouse-wheel behaviors (context menu and scrolling,\n    // respectively) are disabled here to allow use of those events for panning and\n    // zooming. However, whether or not to disable touch actions is an option.\n\n    // disable context menu for canvas element and add 'contextMenuDisabled'\n    // flag to p5 instance\n    if (this.contextMenuDisabled !== true) {\n      this.canvas.oncontextmenu = () => false;\n      this.contextMenuDisabled = true;\n    }\n\n    // disable default scrolling behavior on the canvas element and add\n    // 'wheelDefaultDisabled' flag to p5 instance\n    if (this.wheelDefaultDisabled !== true) {\n      this.canvas.onwheel = () => false;\n      this.wheelDefaultDisabled = true;\n    }\n\n    // disable default touch behavior on the canvas element and add\n    // 'touchActionsDisabled' flag to p5 instance\n    const { disableTouchActions = true } = options;\n    if (this.touchActionsDisabled !== true && disableTouchActions) {\n      this.canvas.style['touch-action'] = 'none';\n      this.touchActionsDisabled = true;\n    }\n\n    // If option.freeRotation is true, the camera always rotates freely in the direction\n    // the pointer moves. default value is false (normal behavior)\n    const { freeRotation = false } = options;\n\n    // get moved touches.\n    const movedTouches = [];\n\n    this.touches.forEach(curTouch => {\n      this._renderer.prevTouches.forEach(prevTouch => {\n        if (curTouch.id === prevTouch.id) {\n          const movedTouch = {\n            x: curTouch.x,\n            y: curTouch.y,\n            px: prevTouch.x,\n            py: prevTouch.y\n          };\n          movedTouches.push(movedTouch);\n        }\n      });\n    });\n\n    this._renderer.prevTouches = this.touches;\n\n    // The idea of using damping is based on the following website. thank you.\n    // https://github.com/freshfork/p5.EasyCam/blob/9782964680f6a5c4c9bee825c475d9f2021d5134/p5.easycam.js#L1124\n\n    // variables for interaction\n    let deltaRadius = 0;\n    let deltaTheta = 0;\n    let deltaPhi = 0;\n    let moveDeltaX = 0;\n    let moveDeltaY = 0;\n    // constants for dampingProcess\n    const damping = 0.85;\n    const rotateAccelerationFactor = 0.6;\n    const moveAccelerationFactor = 0.15;\n    // For touches, the appropriate scale is different\n    // because the distance difference is multiplied.\n    const mouseZoomScaleFactor = 0.01;\n    const touchZoomScaleFactor = 0.0004;\n    const scaleFactor = this.height < this.width ? this.height : this.width;\n    // Flag whether the mouse or touch pointer is inside the canvas\n    let pointersInCanvas = false;\n\n    // calculate and determine flags and variables.\n    if (movedTouches.length > 0) {\n      /* for touch */\n      // if length === 1, rotate\n      // if length > 1, zoom and move\n\n      // for touch, it is calculated based on one moved touch pointer position.\n      pointersInCanvas =\n        movedTouches[0].x > 0 && movedTouches[0].x < this.width &&\n        movedTouches[0].y > 0 && movedTouches[0].y < this.height;\n\n      if (movedTouches.length === 1) {\n        const t = movedTouches[0];\n        deltaTheta = -sensitivityX * (t.x - t.px) / scaleFactor;\n        deltaPhi = sensitivityY * (t.y - t.py) / scaleFactor;\n      } else {\n        const t0 = movedTouches[0];\n        const t1 = movedTouches[1];\n        const distWithTouches = Math.hypot(t0.x - t1.x, t0.y - t1.y);\n        const prevDistWithTouches = Math.hypot(t0.px - t1.px, t0.py - t1.py);\n        const changeDist = distWithTouches - prevDistWithTouches;\n        // move the camera farther when the distance between the two touch points\n        // decreases, move the camera closer when it increases.\n        deltaRadius = -changeDist * sensitivityZ * touchZoomScaleFactor;\n        // Move the center of the camera along with the movement of\n        // the center of gravity of the two touch points.\n        moveDeltaX = 0.5 * (t0.x + t1.x) - 0.5 * (t0.px + t1.px);\n        moveDeltaY = 0.5 * (t0.y + t1.y) - 0.5 * (t0.py + t1.py);\n      }\n      if (this.touches.length > 0) {\n        if (pointersInCanvas) {\n          // Initiate an interaction if touched in the canvas\n          this._renderer.executeRotateAndMove = true;\n          this._renderer.executeZoom = true;\n        }\n      } else {\n        // End an interaction when the touch is released\n        this._renderer.executeRotateAndMove = false;\n        this._renderer.executeZoom = false;\n      }\n    } else {\n      /* for mouse */\n      // if wheelDeltaY !== 0, zoom\n      // if mouseLeftButton is down, rotate\n      // if mouseRightButton is down, move\n\n      // For mouse, it is calculated based on the mouse position.\n      pointersInCanvas =\n        (this.mouseX > 0 && this.mouseX < this.width) &&\n        (this.mouseY > 0 && this.mouseY < this.height);\n\n      if (this._mouseWheelDeltaY !== 0) {\n        // zoom the camera depending on the value of _mouseWheelDeltaY.\n        // move away if positive, move closer if negative\n        deltaRadius = Math.sign(this._mouseWheelDeltaY) * sensitivityZ;\n        deltaRadius *= mouseZoomScaleFactor;\n        this._mouseWheelDeltaY = 0;\n        // start zoom when the mouse is wheeled within the canvas.\n        if (pointersInCanvas) this._renderer.executeZoom = true;\n      } else {\n        // quit zoom when you stop wheeling.\n        this._renderer.executeZoom = false;\n      }\n      if (this.mouseIsPressed) {\n        if (this.mouseButton.left) {\n          deltaTheta = -sensitivityX * this.movedX / scaleFactor;\n          deltaPhi = sensitivityY * this.movedY / scaleFactor;\n        } else if (this.mouseButton.right) {\n          moveDeltaX = this.movedX;\n          moveDeltaY =  this.movedY * cam.yScale;\n        }\n        // start rotate and move when mouse is pressed within the canvas.\n        if (pointersInCanvas) this._renderer.executeRotateAndMove = true;\n      } else {\n        // quit rotate and move if mouse is released.\n        this._renderer.executeRotateAndMove = false;\n      }\n    }\n\n    // interactions\n\n    // zoom process\n    if (deltaRadius !== 0 && this._renderer.executeZoom) {\n      // accelerate zoom velocity\n      this._renderer.zoomVelocity += deltaRadius;\n    }\n    if (Math.abs(this._renderer.zoomVelocity) > 0.001) {\n      // if freeRotation is true, we use _orbitFree() instead of _orbit()\n      if (freeRotation) {\n        cam._orbitFree(\n          0, 0, this._renderer.zoomVelocity\n        );\n      } else {\n        cam._orbit(\n          0, 0, this._renderer.zoomVelocity\n        );\n      }\n      // In orthogonal projection, the scale does not change even if\n      // the distance to the gaze point is changed, so the projection matrix\n      // needs to be modified.\n      if (cam.projMatrix.mat4[15] !== 0) {\n        cam.projMatrix.mat4[0] *= Math.pow(\n          10, -this._renderer.zoomVelocity\n        );\n        cam.projMatrix.mat4[5] *= Math.pow(\n          10, -this._renderer.zoomVelocity\n        );\n        // modify uPMatrix\n        this._renderer.states.setValue('uPMatrix', this._renderer.states.uPMatrix.clone());\n        this._renderer.states.uPMatrix.mat4[0] = cam.projMatrix.mat4[0];\n        this._renderer.states.uPMatrix.mat4[5] = cam.projMatrix.mat4[5];\n      }\n      // damping\n      this._renderer.zoomVelocity *= damping;\n    } else {\n      this._renderer.zoomVelocity = 0;\n    }\n\n    // rotate process\n    if ((deltaTheta !== 0 || deltaPhi !== 0) &&\n    this._renderer.executeRotateAndMove) {\n      // accelerate rotate velocity\n      this._renderer.rotateVelocity.add(\n        deltaTheta * rotateAccelerationFactor,\n        deltaPhi * rotateAccelerationFactor\n      );\n    }\n    if (this._renderer.rotateVelocity.magSq() > 0.000001) {\n      // if freeRotation is true, the camera always rotates freely in the direction the pointer moves\n      if (freeRotation) {\n        cam._orbitFree(\n          -this._renderer.rotateVelocity.x,\n          this._renderer.rotateVelocity.y,\n          0\n        );\n      } else {\n        cam._orbit(\n          this._renderer.rotateVelocity.x,\n          this._renderer.rotateVelocity.y,\n          0\n        );\n      }\n      // damping\n      this._renderer.rotateVelocity.mult(damping);\n    } else {\n      this._renderer.rotateVelocity.set(0, 0);\n    }\n\n    // move process\n    if ((moveDeltaX !== 0 || moveDeltaY !== 0) &&\n    this._renderer.executeRotateAndMove) {\n      // Normalize movement distance\n      const ndcX = moveDeltaX * 2/this.width;\n      const ndcY = -moveDeltaY * 2/this.height;\n      // accelerate move velocity\n      this._renderer.moveVelocity.add(\n        ndcX * moveAccelerationFactor,\n        ndcY * moveAccelerationFactor\n      );\n    }\n    if (this._renderer.moveVelocity.magSq() > 0.000001) {\n      // Translate the camera so that the entire object moves\n      // perpendicular to the line of sight when the mouse is moved\n      // or when the centers of gravity of the two touch pointers move.\n      const local = cam._getLocalAxes();\n\n      // Calculate the z coordinate in the view coordinates of\n      // the center, that is, the distance to the view point\n      const diffX = cam.eyeX - cam.centerX;\n      const diffY = cam.eyeY - cam.centerY;\n      const diffZ = cam.eyeZ - cam.centerZ;\n      const viewZ = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);\n\n      // position vector of the center.\n      let cv = new Vector(cam.centerX, cam.centerY, cam.centerZ);\n\n      // Calculate the normalized device coordinates of the center.\n      cv = cam.cameraMatrix.multiplyPoint(cv);\n      cv = this._renderer.states.uPMatrix.multiplyAndNormalizePoint(cv);\n\n      // Move the center by this distance\n      // in the normalized device coordinate system.\n      cv.x -= this._renderer.moveVelocity.x;\n      cv.y -= this._renderer.moveVelocity.y;\n\n      // Calculate the translation vector\n      // in the direction perpendicular to the line of sight of center.\n      let dx, dy;\n      const uP = this._renderer.states.uPMatrix.mat4;\n\n      if (uP[15] === 0) {\n        dx = ((uP[8] + cv.x)/uP[0]) * viewZ;\n        dy = ((uP[9] + cv.y)/uP[5]) * viewZ;\n      } else {\n        dx = (cv.x - uP[12])/uP[0];\n        dy = (cv.y - uP[13])/uP[5];\n      }\n\n      // translate the camera.\n      cam.setPosition(\n        cam.eyeX + dx * local.x[0] + dy * local.y[0],\n        cam.eyeY + dx * local.x[1] + dy * local.y[1],\n        cam.eyeZ + dx * local.x[2] + dy * local.y[2]\n      );\n      // damping\n      this._renderer.moveVelocity.mult(damping);\n    } else {\n      this._renderer.moveVelocity.set(0, 0);\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Adds a grid and an axes icon to clarify orientation in 3D sketches.\n   *\n   * `debugMode()` adds a grid that shows where the “ground” is in a sketch. By\n   * default, the grid will run through the origin `(0, 0, 0)` of the sketch\n   * along the XZ plane. `debugMode()` also adds an axes icon that points along\n   * the positive x-, y-, and z-axes. Calling `debugMode()` displays the grid\n   * and axes icon with their default size and position.\n   *\n   * There are four ways to call `debugMode()` with optional parameters to\n   * customize the debugging environment.\n   *\n   * The first way to call `debugMode()` has one parameter, `mode`. If the\n   * system constant `GRID` is passed, as in `debugMode(GRID)`, then the grid\n   * will be displayed and the axes icon will be hidden. If the constant `AXES`\n   * is passed, as in `debugMode(AXES)`, then the axes icon will be displayed\n   * and the grid will be hidden.\n   *\n   * The second way to call `debugMode()` has six parameters. The first\n   * parameter, `mode`, selects either `GRID` or `AXES` to be displayed. The\n   * next five parameters, `gridSize`, `gridDivisions`, `xOff`, `yOff`, and\n   * `zOff` are optional. They’re numbers that set the appearance of the grid\n   * (`gridSize` and `gridDivisions`) and the placement of the axes icon\n   * (`xOff`, `yOff`, and `zOff`). For example, calling\n   * `debugMode(20, 5, 10, 10, 10)` sets the `gridSize` to 20 pixels, the number\n   * of `gridDivisions` to 5, and offsets the axes icon by 10 pixels along the\n   * x-, y-, and z-axes.\n   *\n   * The third way to call `debugMode()` has five parameters. The first\n   * parameter, `mode`, selects either `GRID` or `AXES` to be displayed. The\n   * next four parameters, `axesSize`, `xOff`, `yOff`, and `zOff` are optional.\n   * They’re numbers that set the appearance of the size of the axes icon\n   * (`axesSize`) and its placement (`xOff`, `yOff`, and `zOff`).\n   *\n   * The fourth way to call `debugMode()` has nine optional parameters. The\n   * first five parameters, `gridSize`, `gridDivisions`, `gridXOff`, `gridYOff`,\n   * and `gridZOff` are numbers that set the appearance of the grid. For\n   * example, calling `debugMode(100, 5, 0, 0, 0)` sets the `gridSize` to 100,\n   * the number of `gridDivisions` to 5, and sets all the offsets to 0 so that\n   * the grid is centered at the origin. The next four parameters, `axesSize`,\n   * `xOff`, `yOff`, and `zOff` are numbers that set the appearance of the size\n   * of the axes icon (`axesSize`) and its placement (`axesXOff`, `axesYOff`,\n   * and `axesZOff`). For example, calling\n   * `debugMode(100, 5, 0, 0, 0, 50, 10, 10, 10)` sets the `gridSize` to 100,\n   * the number of `gridDivisions` to 5, and sets all the offsets to 0 so that\n   * the grid is centered at the origin. It then sets the `axesSize` to 50 and\n   * offsets the icon 10 pixels along each axis.\n   *\n   * @method debugMode\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   debugMode();\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Only display the axes icon.\n   *   debugMode(AXES);\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Only display the grid and customize it:\n   *   // - size: 50\n   *   // - divisions: 10\n   *   // - offsets: 0, 20, 0\n   *   debugMode(GRID, 50, 10, 0, 20, 0);\n   *\n   *   describe('A multicolor box on a gray background. A grid is displayed below the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   // Display the grid and axes icon and customize them:\n   *   // Grid\n   *   // ----\n   *   // - size: 50\n   *   // - divisions: 10\n   *   // - offsets: 0, 20, 0\n   *   // Axes\n   *   // ----\n   *   // - size: 50\n   *   // - offsets: 0, 0, 0\n   *   debugMode(50, 10, 0, 20, 0, 50, 0, 0, 0);\n   *\n   *   describe('A multicolor box on a gray background. A grid is displayed below the box. An axes icon is displayed at the center of the box.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.\n   *   box(20, 40);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode either GRID or AXES\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode\n   * @param {Number} [gridSize] side length of the grid.\n   * @param {Number} [gridDivisions] number of divisions in the grid.\n   * @param {Number} [xOff] offset from origin along the x-axis.\n   * @param {Number} [yOff] offset from origin along the y-axis.\n   * @param {Number} [zOff] offset from origin along the z-axis.\n   */\n\n  /**\n   * @method debugMode\n   * @param {(GRID|AXES)} mode\n   * @param {Number} [axesSize] length of axes icon markers.\n   * @param {Number} [xOff]\n   * @param {Number} [yOff]\n   * @param {Number} [zOff]\n   */\n\n  /**\n   * @method debugMode\n   * @param {Number} [gridSize]\n   * @param {Number} [gridDivisions]\n   * @param {Number} [gridXOff] grid offset from the origin along the x-axis.\n   * @param {Number} [gridYOff] grid offset from the origin along the y-axis.\n   * @param {Number} [gridZOff] grid offset from the origin along the z-axis.\n   * @param {Number} [axesSize]\n   * @param {Number} [axesXOff] axes icon offset from the origin along the x-axis.\n   * @param {Number} [axesYOff] axes icon offset from the origin along the y-axis.\n   * @param {Number} [axesZOff] axes icon offset from the origin along the z-axis.\n   */\n\n  fn.debugMode = function(...args) {\n    this._assert3d('debugMode');\n    // p5._validateParameters('debugMode', args);\n\n    // start by removing existing 'post' registered debug methods\n    for (let i = p5.lifecycleHooks.postdraw.length - 1; i >= 0; i--) {\n      // test for equality...\n      if (\n        p5.lifecycleHooks.postdraw[i].toString() === this._grid().toString() ||\n        p5.lifecycleHooks.postdraw[i].toString() === this._axesIcon().toString()\n      ) {\n        p5.lifecycleHooks.postdraw.splice(i, 1);\n      }\n    }\n\n    // then add new debugMode functions according to the argument list\n    if (args[0] === GRID) {\n      p5.lifecycleHooks.postdraw.push(\n        this._grid(args[1], args[2], args[3], args[4], args[5])\n      );\n    } else if (args[0] === AXES) {\n      p5.lifecycleHooks.postdraw.push(\n        this._axesIcon(args[1], args[2], args[3], args[4])\n      );\n    } else {\n      p5.lifecycleHooks.postdraw.push(\n        this._grid(args[0], args[1], args[2], args[3], args[4])\n      );\n      p5.lifecycleHooks.postdraw.push(\n        this._axesIcon(args[5], args[6], args[7], args[8])\n      );\n    }\n  };\n\n  /**\n   * Turns off <a href=\"#/p5/debugMode\">debugMode()</a> in a 3D sketch.\n   *\n   * @method noDebugMode\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Enable debug mode.\n   *   debugMode();\n   *\n   *   describe('A multicolor box on a gray background. A grid and axes icon are displayed near the box. They disappear when the user double-clicks.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Style the box.\n   *   normalMaterial();\n   *\n   *   // Draw the box.  box(20, 40);\n   * }\n   *\n   * // Disable debug mode when the user double-clicks.\n   * function doubleClicked() {\n   *   noDebugMode();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noDebugMode = function() {\n    this._assert3d('noDebugMode');\n\n    // start by removing existing 'post' registered debug methods\n    for (let i = p5.lifecycleHooks.postdraw.length - 1; i >= 0; i--) {\n      // test for equality...\n      if (\n        p5.lifecycleHooks.postdraw[i].toString() === this._grid().toString() ||\n        p5.lifecycleHooks.postdraw[i].toString() === this._axesIcon().toString()\n      ) {\n        p5.lifecycleHooks.postdraw.splice(i, 1);\n      }\n    }\n  };\n\n  /**\n   * For use with debugMode\n   * @private\n   * @method _grid\n   * @param {Number} [size] size of grid sides\n   * @param {Number} [div] number of grid divisions\n   * @param {Number} [xOff] offset of grid center from origin in X axis\n   * @param {Number} [yOff] offset of grid center from origin in Y axis\n   * @param {Number} [zOff] offset of grid center from origin in Z axis\n   */\n  fn._grid = function(size, numDivs, xOff, yOff, zOff) {\n    if (typeof size === 'undefined') {\n      size = this.width / 2;\n    }\n    if (typeof numDivs === 'undefined') {\n      // ensure at least 2 divisions\n      numDivs = Math.round(size / 30) < 4 ? 4 : Math.round(size / 30);\n    }\n    if (typeof xOff === 'undefined') {\n      xOff = 0;\n    }\n    if (typeof yOff === 'undefined') {\n      yOff = 0;\n    }\n    if (typeof zOff === 'undefined') {\n      zOff = 0;\n    }\n\n    const spacing = size / numDivs;\n    const halfSize = size / 2;\n\n    return function() {\n      this.push();\n      this.stroke(\n        this._renderer.states.curStrokeColor[0] * 255,\n        this._renderer.states.curStrokeColor[1] * 255,\n        this._renderer.states.curStrokeColor[2] * 255\n      );\n      this._renderer.states.setValue('uModelMatrix', this._renderer.states.uModelMatrix.clone());\n      this._renderer.states.uModelMatrix.reset();\n\n      // Lines along X axis\n      for (let q = 0; q <= numDivs; q++) {\n        this.beginShape(this.LINES);\n        this.vertex(-halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n        this.vertex(+halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n        this.endShape();\n      }\n\n      // Lines along Z axis\n      for (let i = 0; i <= numDivs; i++) {\n        this.beginShape(this.LINES);\n        this.vertex(i * spacing - halfSize + xOff, yOff, -halfSize + zOff);\n        this.vertex(i * spacing - halfSize + xOff, yOff, +halfSize + zOff);\n        this.endShape();\n      }\n\n      this.pop();\n    };\n  };\n\n  /**\n   * For use with debugMode\n   * @private\n   * @method _axesIcon\n   * @param {Number} [size] size of axes icon lines\n   * @param {Number} [xOff] offset of icon from origin in X axis\n   * @param {Number} [yOff] offset of icon from origin in Y axis\n   * @param {Number} [zOff] offset of icon from origin in Z axis\n   */\n  fn._axesIcon = function(size, xOff, yOff, zOff) {\n    if (typeof size === 'undefined') {\n      size = this.width / 20 > 40 ? this.width / 20 : 40;\n    }\n    if (typeof xOff === 'undefined') {\n      xOff = -this.width / 4;\n    }\n    if (typeof yOff === 'undefined') {\n      yOff = xOff;\n    }\n    if (typeof zOff === 'undefined') {\n      zOff = xOff;\n    }\n\n    return () => {\n      this.push();\n      this._renderer.states.setValue('uModelMatrix', this._renderer.states.uModelMatrix.clone());\n      this._renderer.states.uModelMatrix.reset();\n\n      // X axis\n      this.strokeWeight(2);\n      this.stroke(255, 0, 0);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff + size, yOff, zOff);\n      this.endShape();\n      // Y axis\n      this.stroke(0, 255, 0);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff, yOff + size, zOff);\n      this.endShape();\n      // Z axis\n      this.stroke(0, 0, 255);\n      this.beginShape(this.LINES);\n      this.vertex(xOff, yOff, zOff);\n      this.vertex(xOff, yOff, zOff + size);\n      this.endShape();\n      this.pop();\n    };\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  interaction(p5, p5.prototype);\n}\n\nexport { interaction as default };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,IAAI,QAAQ,0BAA0B;AAC/D,SAASC,MAAM,QAAQ,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,WAAWA,CAACC,EAAE,EAAEC,EAAE,EAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACA;EACAA,EAAE,CAACC,YAAY,GAAG,UAChBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,OAAO,EACP;IACA,IAAI,CAACC,SAAS,CAAC,cAAc,CAAC;IAC9B;;IAEA,MAAMC,GAAG,GAAG,IAAI,CAACC,SAAS,CAACC,MAAM,CAACC,SAAS;IAE3C,IAAI,OAAOR,YAAY,KAAK,WAAW,EAAE;MACvCA,YAAY,GAAG,CAAC;IAClB;IACA,IAAI,OAAOC,YAAY,KAAK,W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jB,KAAK,CAAC3D,CAAC,CAAC,CAAC,CAAC,GAAG6E,EAAE,GAAGlB,KAAK,CAAC1D,CAAC,CAAC,CAAC,CAAC,EAC5CtB,GAAG,CAACyF,IAAI,GAAGQ,EAAE,GAAGjB,KAAK,CAAC3D,CAAC,CAAC,CAAC,CAAC,GAAG6E,EAAE,GAAGlB,KAAK,CAAC1D,CAAC,CAAC,CAAC,CAC7C,CAAC;MACD;MACA,IAAI,CAACrB,SAAS,CAAC8E,YAAY,CAACJ,IAAI,CAAC5C,OAAO,CAAC;IAC3C,CAAC,MAAM;MACL,IAAI,CAAC9B,SAAS,CAAC8E,YAAY,CAACH,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACvC;IAEA,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}