{"ast":null,"code":"import { T as Texture, e as filterOpaqueFrag, g as filterPosterizeFrag, h as filterDilateFrag, j as filterGrayFrag, k as filterErodeFrag, n as filterThresholdFrag, o as filterInvertFrag, q as filterBlurFrag, S as Shader, w as webgl2CompatibilityShader, u as filterBaseVert, v as filterBaseFrag, x as filterShaderVert } from '../rendering-CvUVN-Vb.js';\nimport { I as Image } from '../p5.Renderer-R23xoC7s.js';\nimport { z as WEBGL2, K as OPAQUE, U as POSTERIZE, V as DILATE, X as GRAY, Y as ERODE, Z as THRESHOLD, _ as INVERT, $ as BLUR, e as CORNER, u as BLEND, a0 as WEBGL } from '../constants-BRcElHU3.js';\nimport { filterParamDefaults } from './const.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../dom/p5.Element.js';\nimport '../dom/p5.File.js';\nimport '../io/p5.XML.js';\nimport '../dom/p5.MediaElement.js';\nimport '../shape/2d_primitives.js';\nimport '../core/helpers.js';\nimport '../shape/attributes.js';\nimport '../shape/curves.js';\nimport '../shape/vertex.js';\nimport '../color/setting.js';\nimport 'omggif';\nimport '../io/csv.js';\nimport '../io/utilities.js';\nimport 'file-saver';\nimport 'gifenc';\nimport './pixels.js';\nimport './filters.js';\nimport '../core/transform.js';\nimport '../webgl/GeometryBuilder.js';\nimport '../math/p5.Matrix.js';\nimport '../math/Matrices/Matrix.js';\nimport '../math/p5.Vector.js';\nimport '../math/Matrices/MatrixInterface.js';\nimport '../webgl/p5.Geometry.js';\nimport '../webgl/p5.DataArray.js';\nimport '../webgl/p5.Quat.js';\nimport '../webgl/p5.RenderBuffer.js';\nimport '../webgl/ShapeBuilder.js';\nimport 'libtess';\nimport '../webgl/GeometryBufferCache.js';\nimport '../shape/custom_shapes.js';\nimport '../math/trigonometry.js';\nimport '../core/States.js';\nclass FilterRenderer2D {\n  /**\n   * Creates a new FilterRenderer2D instance.\n   * @param {p5} pInst - The p5.js instance.\n   */\n  constructor(pInst) {\n    this.pInst = pInst;\n    // Create a canvas for applying WebGL-based filters\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = pInst.width;\n    this.canvas.height = pInst.height;\n\n    // Initialize the WebGL context\n    let webglVersion = WEBGL2;\n    this.gl = this.canvas.getContext('webgl2');\n    if (!this.gl) {\n      webglVersion = WEBGL;\n      this.gl = this.canvas.getContext('webgl');\n    }\n    if (!this.gl) {\n      console.error(\"WebGL not supported, cannot apply filter.\");\n      return;\n    }\n    // Minimal renderer object required by p5.Shader and p5.Texture\n    this._renderer = {\n      GL: this.gl,\n      registerEnabled: new Set(),\n      _curShader: null,\n      _emptyTexture: null,\n      webglVersion,\n      states: {\n        textureWrapX: this.gl.CLAMP_TO_EDGE,\n        textureWrapY: this.gl.CLAMP_TO_EDGE\n      },\n      _arraysEqual: (a, b) => JSON.stringify(a) === JSON.stringify(b),\n      _getEmptyTexture: () => {\n        if (!this._emptyTexture) {\n          const im = new Image(1, 1);\n          im.set(0, 0, 255);\n          this._emptyTexture = new Texture(this._renderer, im);\n        }\n        return this._emptyTexture;\n      }\n    };\n    this._baseFilterShader = undefined;\n\n    // Store the fragment shader sources\n    this.filterShaderSources = {\n      [BLUR]: filterBlurFrag,\n      [INVERT]: filterInvertFrag,\n      [THRESHOLD]: filterThresholdFrag,\n      [ERODE]: filterErodeFrag,\n      [GRAY]: filterGrayFrag,\n      [DILATE]: filterDilateFrag,\n      [POSTERIZE]: filterPosterizeFrag,\n      [OPAQUE]: filterOpaqueFrag\n    };\n\n    // Store initialized shaders for each operation\n    this.filterShaders = {};\n\n    // These will be set by setOperation\n    this.operation = null;\n    this.filterParameter = 1;\n    this.customShader = null;\n    this._shader = null;\n\n    // Create buffers once\n    this.vertexBuffer = this.gl.createBuffer();\n    this.texcoordBuffer = this.gl.createBuffer();\n\n    // Set up the vertices and texture coordinates for a full-screen quad\n    this.vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n    this.texcoords = new Float32Array([0, 1, 1, 1, 0, 0, 1, 0]);\n\n    // Upload vertex data once\n    this._bindBufferData(this.vertexBuffer, this.gl.ARRAY_BUFFER, this.vertices);\n\n    // Upload texcoord data once\n    this._bindBufferData(this.texcoordBuffer, this.gl.ARRAY_BUFFER, this.texcoords);\n  }\n  _webGL2CompatibilityPrefix(shaderType, floatPrecision) {\n    let code = \"\";\n    if (this._renderer.webglVersion === WEBGL2) {\n      code += \"#version 300 es\\n#define WEBGL2\\n\";\n    }\n    if (shaderType === \"vert\") {\n      code += \"#define VERTEX_SHADER\\n\";\n    } else if (shaderType === \"frag\") {\n      code += \"#define FRAGMENT_SHADER\\n\";\n    }\n    if (floatPrecision) {\n      code += `precision ${floatPrecision} float;\\n`;\n    }\n    return code;\n  }\n  baseFilterShader() {\n    if (!this._baseFilterShader) {\n      this._baseFilterShader = new Shader(this._renderer, this._webGL2CompatibilityPrefix(\"vert\", \"highp\") + webgl2CompatibilityShader + filterBaseVert, this._webGL2CompatibilityPrefix(\"frag\", \"highp\") + webgl2CompatibilityShader + filterBaseFrag, {\n        vertex: {},\n        fragment: {\n          \"vec4 getColor\": `(FilterInputs inputs, in sampler2D canvasContent) {\n                return getTexture(canvasContent, inputs.texCoord);\n              }`\n        }\n      });\n    }\n    return this._baseFilterShader;\n  }\n\n  /**\n   * Set the current filter operation and parameter. If a customShader is provided,\n   * that overrides the operation-based shader.\n   * @param {String} operation - The filter operation type (e.g., constants.BLUR).\n   * @param {Number} filterParameter - The strength of the filter.\n   * @param {p5.Shader} customShader - Optional custom shader.\n   */\n  setOperation(operation, filterParameter, customShader = null) {\n    this.operation = operation;\n    this.filterParameter = filterParameter;\n    let useDefaultParam = operation in filterParamDefaults && filterParameter === undefined;\n    if (useDefaultParam) {\n      this.filterParameter = filterParamDefaults[operation];\n    }\n    this.customShader = customShader;\n    this._initializeShader();\n  }\n\n  /**\n   * Initializes or retrieves the shader program for the current operation.\n   * If a customShader is provided, that is used.\n   * Otherwise, returns a cached shader if available, or creates a new one, caches it, and sets it as current.\n   */\n  _initializeShader() {\n    if (this.customShader) {\n      this._shader = this.customShader;\n      return;\n    }\n    if (!this.operation) {\n      console.error(\"No operation set for FilterRenderer2D, cannot initialize shader.\");\n      return;\n    }\n\n    // If we already have a compiled shader for this operation, reuse it\n    if (this.filterShaders[this.operation]) {\n      this._shader = this.filterShaders[this.operation];\n      return;\n    }\n    const fragShaderSrc = this.filterShaderSources[this.operation];\n    if (!fragShaderSrc) {\n      console.error(\"No shader available for this operation:\", this.operation);\n      return;\n    }\n\n    // Create and store the new shader\n    const newShader = new Shader(this._renderer, filterShaderVert, fragShaderSrc);\n    this.filterShaders[this.operation] = newShader;\n    this._shader = newShader;\n  }\n\n  /**\n   * Binds a buffer to the drawing context\n   * when passed more than two arguments it also updates or initializes\n   * the data associated with the buffer\n   */\n  _bindBufferData(buffer, target, values) {\n    const gl = this.gl;\n    gl.bindBuffer(target, buffer);\n    gl.bufferData(target, values, gl.STATIC_DRAW);\n  }\n  get canvasTexture() {\n    if (!this._canvasTexture) {\n      this._canvasTexture = new Texture(this._renderer, this.pInst.wrappedElt);\n    }\n    return this._canvasTexture;\n  }\n\n  /**\n   * Prepares and runs the full-screen quad draw call.\n   */\n  _renderPass() {\n    const gl = this.gl;\n    this._shader.bindShader();\n    const pixelDensity = this.pInst.pixelDensity ? this.pInst.pixelDensity() : 1;\n    const texelSize = [1 / (this.pInst.width * pixelDensity), 1 / (this.pInst.height * pixelDensity)];\n    const canvasTexture = this.canvasTexture;\n\n    // Set uniforms for the shader\n    this._shader.setUniform('tex0', canvasTexture);\n    this._shader.setUniform('texelSize', texelSize);\n    this._shader.setUniform('canvasSize', [this.pInst.width, this.pInst.height]);\n    this._shader.setUniform('radius', Math.max(1, this.filterParameter));\n    this._shader.setUniform('filterParameter', this.filterParameter);\n    this._shader.setDefaultUniforms();\n    this.pInst.states.setValue('rectMode', CORNER);\n    this.pInst.states.setValue('imageMode', CORNER);\n    this.pInst.blendMode(BLEND);\n    this.pInst.resetMatrix();\n    const identityMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    this._shader.setUniform('uModelViewMatrix', identityMatrix);\n    this._shader.setUniform('uProjectionMatrix', identityMatrix);\n\n    // Bind and enable vertex attributes\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    this._shader.enableAttrib(this._shader.attributes.aPosition, 2);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n    this._shader.enableAttrib(this._shader.attributes.aTexCoord, 2);\n    this._shader.bindTextures();\n    this._shader.disableRemainingAttributes();\n\n    // Draw the quad\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    // Unbind the shader\n    this._shader.unbindShader();\n  }\n\n  /**\n   * Applies the current filter operation. If the filter requires multiple passes (e.g. blur),\n   * it handles those internally. Make sure setOperation() has been called before applyFilter().\n   */\n  applyFilter() {\n    if (!this._shader) {\n      console.error(\"Cannot apply filter: shader not initialized.\");\n      return;\n    }\n    this.pInst.push();\n    this.pInst.resetMatrix();\n    // For blur, we typically do two passes: one horizontal, one vertical.\n    if (this.operation === BLUR && !this.customShader) {\n      // Horizontal pass\n      this._shader.setUniform('direction', [1, 0]);\n      this._renderPass();\n\n      // Draw the result onto itself\n      this.pInst.clear();\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n\n      // Vertical pass\n      this._shader.setUniform('direction', [0, 1]);\n      this._renderPass();\n      this.pInst.clear();\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n    } else {\n      // Single-pass filters\n\n      this._renderPass();\n      this.pInst.clear();\n      // con\n      this.pInst.blendMode(BLEND);\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n    }\n    this.pInst.pop();\n  }\n}\nexport { FilterRenderer2D as default };","map":{"version":3,"names":["T","Texture","e","filterOpaqueFrag","g","filterPosterizeFrag","h","filterDilateFrag","j","filterGrayFrag","k","filterErodeFrag","n","filterThresholdFrag","o","filterInvertFrag","q","filterBlurFrag","S","Shader","w","webgl2CompatibilityShader","u","filterBaseVert","v","filterBaseFrag","x","filterShaderVert","I","Image","z","WEBGL2","K","OPAQUE","U","POSTERIZE","V","DILATE","X","GRAY","Y","ERODE","Z","THRESHOLD","_","INVERT","$","BLUR","CORNER","BLEND","a0","WEBGL","filterParamDefaults","FilterRenderer2D","constructor","pInst","canvas","document","createElement","width","height","webglVersion","gl","getContext","console","error","_renderer","GL","registerEnabled","Set","_curShader","_emptyTexture","states","textureWrapX","CLAMP_TO_EDGE","textureWrapY","_arraysEqual","a","b","JSON","stringify","_getEmptyTexture","im","set","_baseFilterShader","undefined","filterShaderSources","filterShaders","operation","filterParameter","customShader","_shader","vertexBuffer","createBuffer","texcoordBuffer","vertices","Float32Array","texcoords","_bindBufferData","ARRAY_BUFFER","_webGL2CompatibilityPrefix","shaderType","floatPrecision","code","baseFilterShader","vertex","fragment","setOperation","useDefaultParam","_initializeShader","fragShaderSrc","newShader","buffer","target","values","bindBuffer","bufferData","STATIC_DRAW","canvasTexture","_canvasTexture","wrappedElt","_renderPass","bindShader","pixelDensity","texelSize","setUniform","Math","max","setDefaultUniforms","setValue","blendMode","resetMatrix","identityMatrix","enableAttrib","attributes","aPosition","aTexCoord","bindTextures","disableRemainingAttributes","drawArrays","TRIANGLE_STRIP","unbindShader","applyFilter","push","clear","drawingContext","drawImage","pop","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/image/filterRenderer2D.js"],"sourcesContent":["import { T as Texture, e as filterOpaqueFrag, g as filterPosterizeFrag, h as filterDilateFrag, j as filterGrayFrag, k as filterErodeFrag, n as filterThresholdFrag, o as filterInvertFrag, q as filterBlurFrag, S as Shader, w as webgl2CompatibilityShader, u as filterBaseVert, v as filterBaseFrag, x as filterShaderVert } from '../rendering-CvUVN-Vb.js';\nimport { I as Image } from '../p5.Renderer-R23xoC7s.js';\nimport { z as WEBGL2, K as OPAQUE, U as POSTERIZE, V as DILATE, X as GRAY, Y as ERODE, Z as THRESHOLD, _ as INVERT, $ as BLUR, e as CORNER, u as BLEND, a0 as WEBGL } from '../constants-BRcElHU3.js';\nimport { filterParamDefaults } from './const.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../dom/p5.Element.js';\nimport '../dom/p5.File.js';\nimport '../io/p5.XML.js';\nimport '../dom/p5.MediaElement.js';\nimport '../shape/2d_primitives.js';\nimport '../core/helpers.js';\nimport '../shape/attributes.js';\nimport '../shape/curves.js';\nimport '../shape/vertex.js';\nimport '../color/setting.js';\nimport 'omggif';\nimport '../io/csv.js';\nimport '../io/utilities.js';\nimport 'file-saver';\nimport 'gifenc';\nimport './pixels.js';\nimport './filters.js';\nimport '../core/transform.js';\nimport '../webgl/GeometryBuilder.js';\nimport '../math/p5.Matrix.js';\nimport '../math/Matrices/Matrix.js';\nimport '../math/p5.Vector.js';\nimport '../math/Matrices/MatrixInterface.js';\nimport '../webgl/p5.Geometry.js';\nimport '../webgl/p5.DataArray.js';\nimport '../webgl/p5.Quat.js';\nimport '../webgl/p5.RenderBuffer.js';\nimport '../webgl/ShapeBuilder.js';\nimport 'libtess';\nimport '../webgl/GeometryBufferCache.js';\nimport '../shape/custom_shapes.js';\nimport '../math/trigonometry.js';\nimport '../core/States.js';\n\nclass FilterRenderer2D {\n  /**\n   * Creates a new FilterRenderer2D instance.\n   * @param {p5} pInst - The p5.js instance.\n   */\n  constructor(pInst) {\n    this.pInst = pInst;\n    // Create a canvas for applying WebGL-based filters\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = pInst.width;\n    this.canvas.height = pInst.height;\n\n    // Initialize the WebGL context\n    let webglVersion = WEBGL2;\n    this.gl = this.canvas.getContext('webgl2');\n    if (!this.gl) {\n      webglVersion = WEBGL;\n      this.gl = this.canvas.getContext('webgl');\n    }\n    if (!this.gl) {\n      console.error(\"WebGL not supported, cannot apply filter.\");\n      return;\n    }\n    // Minimal renderer object required by p5.Shader and p5.Texture\n    this._renderer = {\n      GL: this.gl,\n      registerEnabled: new Set(),\n      _curShader: null,\n      _emptyTexture: null,\n      webglVersion,\n      states: {\n        textureWrapX: this.gl.CLAMP_TO_EDGE,\n        textureWrapY: this.gl.CLAMP_TO_EDGE,\n      },\n      _arraysEqual: (a, b) => JSON.stringify(a) === JSON.stringify(b),\n      _getEmptyTexture: () => {\n        if (!this._emptyTexture) {\n          const im = new Image(1, 1);\n          im.set(0, 0, 255);\n          this._emptyTexture = new Texture(this._renderer, im);\n        }\n        return this._emptyTexture;\n      },\n    };\n\n    this._baseFilterShader = undefined;\n\n    // Store the fragment shader sources\n    this.filterShaderSources = {\n      [BLUR]: filterBlurFrag,\n      [INVERT]: filterInvertFrag,\n      [THRESHOLD]: filterThresholdFrag,\n      [ERODE]: filterErodeFrag,\n      [GRAY]: filterGrayFrag,\n      [DILATE]: filterDilateFrag,\n      [POSTERIZE]: filterPosterizeFrag,\n      [OPAQUE]: filterOpaqueFrag,\n    };\n\n    // Store initialized shaders for each operation\n    this.filterShaders = {};\n\n    // These will be set by setOperation\n    this.operation = null;\n    this.filterParameter = 1;\n    this.customShader = null;\n    this._shader = null;\n\n    // Create buffers once\n    this.vertexBuffer = this.gl.createBuffer();\n    this.texcoordBuffer = this.gl.createBuffer();\n\n    // Set up the vertices and texture coordinates for a full-screen quad\n    this.vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n    this.texcoords = new Float32Array([0, 1, 1, 1, 0, 0, 1, 0]);\n\n    // Upload vertex data once\n    this._bindBufferData(this.vertexBuffer, this.gl.ARRAY_BUFFER, this.vertices);\n\n    // Upload texcoord data once\n    this._bindBufferData(this.texcoordBuffer, this.gl.ARRAY_BUFFER, this.texcoords);\n  }\n\n  _webGL2CompatibilityPrefix(shaderType, floatPrecision) {\n    let code = \"\";\n    if (this._renderer.webglVersion === WEBGL2) {\n      code += \"#version 300 es\\n#define WEBGL2\\n\";\n    }\n    if (shaderType === \"vert\") {\n      code += \"#define VERTEX_SHADER\\n\";\n    } else if (shaderType === \"frag\") {\n      code += \"#define FRAGMENT_SHADER\\n\";\n    }\n    if (floatPrecision) {\n      code += `precision ${floatPrecision} float;\\n`;\n    }\n    return code;\n  }\n\n  baseFilterShader() {\n    if (!this._baseFilterShader) {\n      this._baseFilterShader = new Shader(\n        this._renderer,\n        this._webGL2CompatibilityPrefix(\"vert\", \"highp\") +\n          webgl2CompatibilityShader +\n          filterBaseVert,\n        this._webGL2CompatibilityPrefix(\"frag\", \"highp\") +\n          webgl2CompatibilityShader +\n          filterBaseFrag,\n        {\n            vertex: {},\n            fragment: {\n              \"vec4 getColor\": `(FilterInputs inputs, in sampler2D canvasContent) {\n                return getTexture(canvasContent, inputs.texCoord);\n              }`,\n            },\n          }\n      );\n    }\n    return this._baseFilterShader;\n  }\n\n  /**\n   * Set the current filter operation and parameter. If a customShader is provided,\n   * that overrides the operation-based shader.\n   * @param {String} operation - The filter operation type (e.g., constants.BLUR).\n   * @param {Number} filterParameter - The strength of the filter.\n   * @param {p5.Shader} customShader - Optional custom shader.\n   */\n  setOperation(operation, filterParameter, customShader = null) {\n    this.operation = operation;\n    this.filterParameter = filterParameter;\n\n    let useDefaultParam = operation in filterParamDefaults && filterParameter === undefined;\n    if (useDefaultParam) {\n      this.filterParameter = filterParamDefaults[operation];\n    }\n\n    this.customShader = customShader;\n    this._initializeShader();\n  }\n\n  /**\n   * Initializes or retrieves the shader program for the current operation.\n   * If a customShader is provided, that is used.\n   * Otherwise, returns a cached shader if available, or creates a new one, caches it, and sets it as current.\n   */\n  _initializeShader() {\n    if (this.customShader) {\n      this._shader = this.customShader;\n      return;\n    }\n\n    if (!this.operation) {\n      console.error(\"No operation set for FilterRenderer2D, cannot initialize shader.\");\n      return;\n    }\n\n    // If we already have a compiled shader for this operation, reuse it\n    if (this.filterShaders[this.operation]) {\n      this._shader = this.filterShaders[this.operation];\n      return;\n    }\n\n    const fragShaderSrc = this.filterShaderSources[this.operation];\n    if (!fragShaderSrc) {\n      console.error(\"No shader available for this operation:\", this.operation);\n      return;\n    }\n\n    // Create and store the new shader\n    const newShader = new Shader(this._renderer, filterShaderVert, fragShaderSrc);\n    this.filterShaders[this.operation] = newShader;\n    this._shader = newShader;\n  }\n\n  /**\n   * Binds a buffer to the drawing context\n   * when passed more than two arguments it also updates or initializes\n   * the data associated with the buffer\n   */\n  _bindBufferData(buffer, target, values) {\n    const gl = this.gl;\n    gl.bindBuffer(target, buffer);\n    gl.bufferData(target, values, gl.STATIC_DRAW);\n  }\n\n  get canvasTexture() {\n    if (!this._canvasTexture) {\n      this._canvasTexture = new Texture(this._renderer, this.pInst.wrappedElt);\n    }\n    return this._canvasTexture;\n  }\n\n  /**\n   * Prepares and runs the full-screen quad draw call.\n   */\n  _renderPass() {\n    const gl = this.gl;\n    this._shader.bindShader();\n    const pixelDensity = this.pInst.pixelDensity ? this.pInst.pixelDensity() : 1;\n\n    const texelSize = [\n      1 / (this.pInst.width * pixelDensity),\n      1 / (this.pInst.height * pixelDensity)\n    ];\n\n    const canvasTexture = this.canvasTexture;\n\n    // Set uniforms for the shader\n    this._shader.setUniform('tex0', canvasTexture);\n    this._shader.setUniform('texelSize', texelSize);\n    this._shader.setUniform('canvasSize', [this.pInst.width, this.pInst.height]);\n    this._shader.setUniform('radius', Math.max(1, this.filterParameter));\n    this._shader.setUniform('filterParameter', this.filterParameter);\n    this._shader.setDefaultUniforms();\n    \n    this.pInst.states.setValue('rectMode', CORNER);\n    this.pInst.states.setValue('imageMode', CORNER);\n    this.pInst.blendMode(BLEND);\n    this.pInst.resetMatrix();\n\n\n    const identityMatrix = [1, 0, 0, 0,\n                            0, 1, 0, 0,\n                            0, 0, 1, 0,\n                            0, 0, 0, 1];\n    this._shader.setUniform('uModelViewMatrix', identityMatrix);\n    this._shader.setUniform('uProjectionMatrix', identityMatrix);\n\n    // Bind and enable vertex attributes\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    this._shader.enableAttrib(this._shader.attributes.aPosition, 2);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n    this._shader.enableAttrib(this._shader.attributes.aTexCoord, 2);\n\n    this._shader.bindTextures();\n    this._shader.disableRemainingAttributes();\n\n    // Draw the quad\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    // Unbind the shader\n    this._shader.unbindShader();\n  }\n\n  /**\n   * Applies the current filter operation. If the filter requires multiple passes (e.g. blur),\n   * it handles those internally. Make sure setOperation() has been called before applyFilter().\n   */\n  applyFilter() {\n    if (!this._shader) {\n      console.error(\"Cannot apply filter: shader not initialized.\");\n      return;\n    }\n    this.pInst.push();\n    this.pInst.resetMatrix();\n    // For blur, we typically do two passes: one horizontal, one vertical.\n    if (this.operation === BLUR && !this.customShader) {\n      // Horizontal pass\n      this._shader.setUniform('direction', [1, 0]);\n      this._renderPass();\n\n      // Draw the result onto itself\n      this.pInst.clear();\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n\n      // Vertical pass\n      this._shader.setUniform('direction', [0, 1]);\n      this._renderPass();\n\n      this.pInst.clear();\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n    } else {\n      // Single-pass filters\n\n      this._renderPass();\n      this.pInst.clear();\n      // con\n      this.pInst.blendMode(BLEND);\n\n\n      this.pInst.drawingContext.drawImage(this.canvas, 0, 0, this.pInst.width, this.pInst.height);\n    }\n    this.pInst.pop();\n  }\n}\n\nexport { FilterRenderer2D as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}