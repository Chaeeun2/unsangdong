{"ast":null,"code":"import { Matrix } from './Matrices/Matrix.js';\nimport './p5.Vector.js';\nimport '../constants-BRcElHU3.js';\nimport './Matrices/MatrixInterface.js';\n\n/**\n * @module Math\n * @requires constants\n * @todo see methods below needing further implementation.\n * future consideration: implement SIMD optimizations\n * when browser compatibility becomes available\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n *   Reference/Global_Objects/SIMD\n */\n// import { MatrixNumjs as Matrix } from './Matrices/MatrixNumjs'\n\nfunction matrix(p5, fn) {\n  /**\n   * A class to describe a matrix\n   * for model and view matrix manipulation in the p5js webgl renderer.\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   *\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   * This class extends the `MatrixInterface` and includes methods for creating, manipulating, and performing\n   * operations on matrices. It supports both 3x3 and 4x4 matrices, as well as general NxN matrices.\n   * @private\n   * @class p5.Matrix\n   * @param {Array} [mat4] column-major array literal of our 4×4 matrix\n   * @example\n   * // Creating a 3x3 matrix from an array using column major arrangement\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *\n   * // Creating a 4x4 identity matrix\n   * const identityMatrix = new p5.Matrix(4);\n   *\n   * // Adding two matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.add(matrix2); // matrix1 is now [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   * // Setting an element in the matrix\n   * matrix.setElement(0, 10); // matrix is now [10, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * // Resetting the matrix to an identity matrix\n   * matrix.reset();\n   *\n   * // Getting the diagonal elements of the matrix\n   * const diagonal = matrix.diagonal(); // [1, 1, 1]\n   *\n   * // Transposing the matrix\n   * matrix.transpose();\n   *\n   * // Multiplying two matrices\n   * matrix1.mult(matrix2);\n   *\n   * // Inverting the matrix\n   * matrix.invert();\n   *\n   * // Scaling the matrix\n   * matrix.scale(2, 2, 2);\n   *\n   * // Rotating the matrix around an axis\n   * matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *\n   * // Applying a perspective transformation\n   * matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *\n   * // Applying an orthographic transformation\n   * matrix.ortho(-1, 1, -1, 1, 0.1, 100);\n   *\n   * // Multiplying a vector by the matrix\n   * const vector = new Vector(1, 2, 3);\n   * const result = matrix.multiplyPoint(vector);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original p5.Matrix:\", matrix.matrix.toString()); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Add two matrices\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   matrix1.add(matrix2);\n   *   console.log(\"After Addition:\", matrix1.matrix.toString()); // Output: [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   *   // Reset the matrix to an identity matrix\n   *   matrix.reset();\n   *   console.log(\"Reset p5.Matrix:\", matrix.matrix.toString()); // [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a scaling transformation\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Scaled p5.Matrix:\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a rotation around the X-axis\n   *   matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *   console.log(\"Rotated p5.Matrix (X-axis):\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 1.4142135381698608, 1.4142135381698608, 0, 0, -1.4142135381698608, 1.4142135381698608, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a perspective transformation\n   *   matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *   console.log(\"Perspective p5.Matrix:\", matrix.matrix.toString());// [2.4142136573791504, 0, 0, 0, 0, 2.4142136573791504, 0, 0, 0, 0, -1.0020020008087158, -1, 0, 0, -0.20020020008087158, 0]\n   *\n   *   // Multiply a vector by the matrix\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const transformedVector = matrix.multiplyPoint(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString());\n   * }\n   * </code></div>\n   */\n  p5.Matrix = Matrix;\n}\nif (typeof p5 !== \"undefined\") {\n  matrix(p5, p5.prototype);\n}\nexport { Matrix, matrix as default };","map":{"version":3,"names":["Matrix","matrix","p5","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/p5.Matrix.js"],"sourcesContent":["import { Matrix } from './Matrices/Matrix.js';\nimport './p5.Vector.js';\nimport '../constants-BRcElHU3.js';\nimport './Matrices/MatrixInterface.js';\n\n/**\n * @module Math\n * @requires constants\n * @todo see methods below needing further implementation.\n * future consideration: implement SIMD optimizations\n * when browser compatibility becomes available\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n *   Reference/Global_Objects/SIMD\n */\n// import { MatrixNumjs as Matrix } from './Matrices/MatrixNumjs'\n\nfunction matrix(p5, fn) {\n  /**\n   * A class to describe a matrix\n   * for model and view matrix manipulation in the p5js webgl renderer.\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   *\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   * This class extends the `MatrixInterface` and includes methods for creating, manipulating, and performing\n   * operations on matrices. It supports both 3x3 and 4x4 matrices, as well as general NxN matrices.\n   * @private\n   * @class p5.Matrix\n   * @param {Array} [mat4] column-major array literal of our 4×4 matrix\n   * @example\n   * // Creating a 3x3 matrix from an array using column major arrangement\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *\n   * // Creating a 4x4 identity matrix\n   * const identityMatrix = new p5.Matrix(4);\n   *\n   * // Adding two matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.add(matrix2); // matrix1 is now [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   * // Setting an element in the matrix\n   * matrix.setElement(0, 10); // matrix is now [10, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * // Resetting the matrix to an identity matrix\n   * matrix.reset();\n   *\n   * // Getting the diagonal elements of the matrix\n   * const diagonal = matrix.diagonal(); // [1, 1, 1]\n   *\n   * // Transposing the matrix\n   * matrix.transpose();\n   *\n   * // Multiplying two matrices\n   * matrix1.mult(matrix2);\n   *\n   * // Inverting the matrix\n   * matrix.invert();\n   *\n   * // Scaling the matrix\n   * matrix.scale(2, 2, 2);\n   *\n   * // Rotating the matrix around an axis\n   * matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *\n   * // Applying a perspective transformation\n   * matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *\n   * // Applying an orthographic transformation\n   * matrix.ortho(-1, 1, -1, 1, 0.1, 100);\n   *\n   * // Multiplying a vector by the matrix\n   * const vector = new Vector(1, 2, 3);\n   * const result = matrix.multiplyPoint(vector);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original p5.Matrix:\", matrix.matrix.toString()); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Add two matrices\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   matrix1.add(matrix2);\n   *   console.log(\"After Addition:\", matrix1.matrix.toString()); // Output: [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   *   // Reset the matrix to an identity matrix\n   *   matrix.reset();\n   *   console.log(\"Reset p5.Matrix:\", matrix.matrix.toString()); // [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a scaling transformation\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Scaled p5.Matrix:\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a rotation around the X-axis\n   *   matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *   console.log(\"Rotated p5.Matrix (X-axis):\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 1.4142135381698608, 1.4142135381698608, 0, 0, -1.4142135381698608, 1.4142135381698608, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a perspective transformation\n   *   matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *   console.log(\"Perspective p5.Matrix:\", matrix.matrix.toString());// [2.4142136573791504, 0, 0, 0, 0, 2.4142136573791504, 0, 0, 0, 0, -1.0020020008087158, -1, 0, 0, -0.20020020008087158, 0]\n   *\n   *   // Multiply a vector by the matrix\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const transformedVector = matrix.multiplyPoint(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString());\n   * }\n   * </code></div>\n   */\n  p5.Matrix = Matrix;\n}\n\nif (typeof p5 !== \"undefined\") {\n  matrix(p5, p5.prototype);\n}\n\nexport { Matrix, matrix as default };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,sBAAsB;AAC7C,OAAO,gBAAgB;AACvB,OAAO,0BAA0B;AACjC,OAAO,+BAA+B;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,MAAMA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACED,EAAE,CAACF,MAAM,GAAGA,MAAM;AACpB;AAEA,IAAI,OAAOE,EAAE,KAAK,WAAW,EAAE;EAC7BD,MAAM,CAACC,EAAE,EAAEA,EAAE,CAACE,SAAS,CAAC;AAC1B;AAEA,SAASJ,MAAM,EAAEC,MAAM,IAAII,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}