{"ast":null,"code":"import { isNone, skipNone } from \"./util.js\";\nimport defaults from \"./defaults.js\";\nimport to from \"./to.js\";\nimport serialize from \"./serialize.js\";\nimport clone from \"./clone.js\";\nimport REC2020 from \"./spaces/rec2020.js\";\nimport P3 from \"./spaces/p3.js\";\nimport Lab from \"./spaces/lab.js\";\nimport sRGB from \"./spaces/srgb.js\";\n\n// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available\ndefaults.display_space = sRGB;\nlet supportsNone;\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n  // Find widest supported color space for CSS\n  for (let space of [Lab, REC2020, P3]) {\n    let coords = space.getMinCoords();\n    let color = {\n      space,\n      coords,\n      alpha: 1\n    };\n    let str = serialize(color);\n    if (CSS.supports(\"color\", str)) {\n      defaults.display_space = space;\n      break;\n    }\n  }\n}\n\n/**\n * Returns a serialization of the color that can actually be displayed in the browser.\n * If the default serialization can be displayed, it is returned.\n * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.\n * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.\n *\n * @export\n * @param {{space, coords} | Color | string} color\n * @param {*} [options={}] Options to be passed to serialize()\n * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported\n * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)\n */\nexport default function display(color, {\n  space = defaults.display_space,\n  ...options\n} = {}) {\n  let ret = serialize(color, options);\n  if (typeof CSS === \"undefined\" || CSS.supports(\"color\", ret) || !defaults.display_space) {\n    ret = new String(ret);\n    ret.color = color;\n  } else {\n    // If we're here, what we were about to output is not supported\n    let fallbackColor = color;\n\n    // First, check if the culprit is none values\n    let hasNone = color.coords.some(isNone) || isNone(color.alpha);\n    if (hasNone) {\n      // Does the browser support none values?\n      if (!(supportsNone ??= CSS.supports(\"color\", \"hsl(none 50% 50%)\"))) {\n        // Nope, try again without none\n        fallbackColor = clone(color);\n        fallbackColor.coords = fallbackColor.coords.map(skipNone);\n        fallbackColor.alpha = skipNone(fallbackColor.alpha);\n        ret = serialize(fallbackColor, options);\n        if (CSS.supports(\"color\", ret)) {\n          // We're done, now it's supported\n          ret = new String(ret);\n          ret.color = fallbackColor;\n          return ret;\n        }\n      }\n    }\n\n    // If we're here, the color function is not supported\n    // Fall back to fallback space\n    fallbackColor = to(fallbackColor, space);\n    ret = new String(serialize(fallbackColor, options));\n    ret.color = fallbackColor;\n  }\n  return ret;\n}","map":{"version":3,"names":["isNone","skipNone","defaults","to","serialize","clone","REC2020","P3","Lab","sRGB","display_space","supportsNone","CSS","supports","space","coords","getMinCoords","color","alpha","str","display","options","ret","String","fallbackColor","hasNone","some","map"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/display.js"],"sourcesContent":["import { isNone, skipNone } from \"./util.js\";\nimport defaults from \"./defaults.js\";\nimport to from \"./to.js\";\nimport serialize from \"./serialize.js\";\nimport clone from \"./clone.js\";\nimport REC2020 from \"./spaces/rec2020.js\";\nimport P3 from \"./spaces/p3.js\";\nimport Lab from \"./spaces/lab.js\";\nimport sRGB from \"./spaces/srgb.js\";\n\n// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available\ndefaults.display_space = sRGB;\n\nlet supportsNone;\n\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n\t// Find widest supported color space for CSS\n\tfor (let space of [Lab, REC2020, P3]) {\n\t\tlet coords = space.getMinCoords();\n\t\tlet color = {space, coords, alpha: 1};\n\t\tlet str = serialize(color);\n\n\t\tif (CSS.supports(\"color\", str)) {\n\t\t\tdefaults.display_space = space;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Returns a serialization of the color that can actually be displayed in the browser.\n * If the default serialization can be displayed, it is returned.\n * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.\n * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.\n *\n * @export\n * @param {{space, coords} | Color | string} color\n * @param {*} [options={}] Options to be passed to serialize()\n * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported\n * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)\n */\nexport default function display (color, {space = defaults.display_space, ...options} = {}) {\n\tlet ret = serialize(color, options);\n\n\tif (typeof CSS === \"undefined\" || CSS.supports(\"color\", ret) || !defaults.display_space) {\n\t\tret = new String(ret);\n\t\tret.color = color;\n\t}\n\telse {\n\t\t// If we're here, what we were about to output is not supported\n\t\tlet fallbackColor = color;\n\n\t\t// First, check if the culprit is none values\n\t\tlet hasNone = color.coords.some(isNone) || isNone(color.alpha);\n\n\t\tif (hasNone) {\n\t\t\t// Does the browser support none values?\n\t\t\tif (!(supportsNone ??= CSS.supports(\"color\", \"hsl(none 50% 50%)\"))) {\n\t\t\t\t// Nope, try again without none\n\t\t\t\tfallbackColor = clone(color);\n\t\t\t\tfallbackColor.coords = fallbackColor.coords.map(skipNone);\n\t\t\t\tfallbackColor.alpha = skipNone(fallbackColor.alpha);\n\n\t\t\t\tret = serialize(fallbackColor, options);\n\n\t\t\t\tif (CSS.supports(\"color\", ret)) {\n\t\t\t\t\t// We're done, now it's supported\n\t\t\t\t\tret = new String(ret);\n\t\t\t\t\tret.color = fallbackColor;\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're here, the color function is not supported\n\t\t// Fall back to fallback space\n\t\tfallbackColor = to(fallbackColor, space);\n\t\tret = new String(serialize(fallbackColor, options));\n\t\tret.color = fallbackColor;\n\t}\n\n\treturn ret;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}