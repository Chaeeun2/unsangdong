{"ast":null,"code":"/**\n * @module Shape\n * @submodule Curves\n * @for p5\n * @requires core\n */\n\nfunction curves(p5, fn) {\n  /**\n   * Draws a Bézier curve.\n   *\n   * Bézier curves can form shapes and curves that slope gently. They're defined\n   * by two anchor points and two control points. Bézier curves provide more\n   * control than the spline curves created with the\n   * <a href=\"#/p5/curve\">curve()</a> function.\n   *\n   * The first two parameters, `x1` and `y1`, set the first anchor point. The\n   * first anchor point is where the curve starts.\n   *\n   * The next four parameters, `x2`, `y2`, `x3`, and `y3`, set the two control\n   * points. The control points \"pull\" the curve towards them.\n   *\n   * The seventh and eighth parameters, `x4` and `y4`, set the last anchor\n   * point. The last anchor point is where the curve ends.\n   *\n   * Bézier curves can also be drawn in 3D using WebGL mode. The 3D version of\n   * `bezier()` has twelve arguments because each point has x-, y-,\n   * and z-coordinates.\n   *\n   * @method bezier\n   * @param  {Number} x1 x-coordinate of the first anchor point.\n   * @param  {Number} y1 y-coordinate of the first anchor point.\n   * @param  {Number} x2 x-coordinate of the first control point.\n   * @param  {Number} y2 y-coordinate of the first control point.\n   * @param  {Number} x3 x-coordinate of the second control point.\n   * @param  {Number} y3 y-coordinate of the second control point.\n   * @param  {Number} x4 x-coordinate of the second anchor point.\n   * @param  {Number} y4 y-coordinate of the second anchor point.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the anchor points in black.\n   *   stroke(0);\n   *   strokeWeight(5);\n   *   point(85, 20);\n   *   point(15, 80);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(10, 10);\n   *   point(90, 90);\n   *\n   *   // Draw a black bezier curve.\n   *   noFill();\n   *   stroke(0);\n   *   strokeWeight(1);\n   *   bezier(85, 20, 10, 10, 90, 90, 15, 80);\n   *\n   *   // Draw red lines from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   line(85, 20, 10, 10);\n   *   line(15, 80, 90, 90);\n   *\n   *   describe(\n   *     'A gray square with three curves. A black s-curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click the mouse near the red dot in the top-left corner\n   * // and drag to change the curve's shape.\n   *\n   * let x2 = 10;\n   * let y2 = 10;\n   * let isChanging = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A gray square with three curves. A black s-curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the anchor points in black.\n   *   stroke(0);\n   *   strokeWeight(5);\n   *   point(85, 20);\n   *   point(15, 80);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(x2, y2);\n   *   point(90, 90);\n   *\n   *   // Draw a black bezier curve.\n   *   noFill();\n   *   stroke(0);\n   *   strokeWeight(1);\n   *   bezier(85, 20, x2, y2, 90, 90, 15, 80);\n   *\n   *   // Draw red lines from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   line(85, 20, x2, y2);\n   *   line(15, 80, 90, 90);\n   * }\n   *\n   * // Start changing the first control point if the user clicks near it.\n   * function mousePressed() {\n   *   if (dist(mouseX, mouseY, x2, y2) < 20) {\n   *     isChanging = true;\n   *   }\n   * }\n   *\n   * // Stop changing the first control point when the user releases the mouse.\n   * function mouseReleased() {\n   *   isChanging = false;\n   * }\n   *\n   * // Update the first control point while the user drags the mouse.\n   * function mouseDragged() {\n   *   if (isChanging === true) {\n   *     x2 = mouseX;\n   *     y2 = mouseY;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('skyblue');\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   bezier(50, 60, 5, 15, 95, 15, 50, 60);\n   *\n   *   // Draw the balloon string.\n   *   line(50, 60, 50, 80);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A red balloon in a blue sky. The balloon rotates slowly, revealing that it is flat.');\n   * }\n   *\n   * function draw() {\n   *   background('skyblue');\n   *\n   *   // Rotate around the y-axis.\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   bezier(0, 0, 0, -45, -45, 0, 45, -45, 0, 0, 0, 0);\n   *\n   *   // Draw the balloon string.\n   *   line(0, 0, 0, 0, 20, 0);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method bezier\n   * @param  {Number} x1\n   * @param  {Number} y1\n   * @param  {Number} z1 z-coordinate of the first anchor point.\n   * @param  {Number} x2\n   * @param  {Number} y2\n   * @param  {Number} z2 z-coordinate of the first control point.\n   * @param  {Number} x3\n   * @param  {Number} y3\n   * @param  {Number} z3 z-coordinate of the second control point.\n   * @param  {Number} x4\n   * @param  {Number} y4\n   * @param  {Number} z4 z-coordinate of the second anchor point.\n   * @chainable\n   */\n  fn.bezier = function (...args) {\n    // p5._validateParameters('bezier', args);\n\n    // if the current stroke and fill settings wouldn't result in something\n    // visible, exit immediately\n    if (!this._renderer.states.strokeColor && !this._renderer.states.fillColor) {\n      return this;\n    }\n    this._renderer.bezier(...args);\n    return this;\n  };\n\n  /**\n   * Calculates coordinates along a Bézier curve using interpolation.\n   *\n   * `bezierPoint()` calculates coordinates along a Bézier curve using the\n   * anchor and control points. It expects points in the same order as the\n   * <a href=\"#/p5/bezier\">bezier()</a> function. `bezierPoint()` works one axis\n   * at a time. Passing the anchor and control points' x-coordinates will\n   * calculate the x-coordinate of a point on the curve. Passing the anchor and\n   * control points' y-coordinates will calculate the y-coordinate of a point on\n   * the curve.\n   *\n   * The first parameter, `a`, is the coordinate of the first anchor point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * control points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last anchor point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method bezierPoint\n   * @param {Number} a coordinate of first control point.\n   * @param {Number} b coordinate of first anchor point.\n   * @param {Number} c coordinate of second anchor point.\n   * @param {Number} d coordinate of second control point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of the point on the curve.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Style the curve.\n   *   noFill();\n   *\n   *   // Draw the curve.\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw circles along the curve's path.\n   *   fill(255);\n   *\n   *   // Top-right.\n   *   let x = bezierPoint(x1, x2, x3, x4, 0);\n   *   let y = bezierPoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Center.\n   *   x = bezierPoint(x1, x2, x3, x4, 0.5);\n   *   y = bezierPoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom-left.\n   *   x = bezierPoint(x1, x2, x3, x4, 1);\n   *   y = bezierPoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   describe('A black s-curve on a gray square. The endpoints and center of the curve are marked with white circles.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black s-curve on a gray square. A white circle moves back and forth along the curve.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let t = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *   let x = bezierPoint(x1, x2, x3, x4, t);\n   *   let y = bezierPoint(y1, y2, y3, y4, t);\n   *\n   *   // Draw the circle.\n   *   fill(255);\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.bezierPoint = function (a, b, c, d, t) {\n    // p5._validateParameters('bezierPoint', arguments);\n\n    const adjustedT = 1 - t;\n    return Math.pow(adjustedT, 3) * a + 3 * Math.pow(adjustedT, 2) * t * b + 3 * adjustedT * Math.pow(t, 2) * c + Math.pow(t, 3) * d;\n  };\n\n  /**\n   * Calculates coordinates along a line that's tangent to a Bézier curve.\n   *\n   * Tangent lines skim the surface of a curve. A tangent line's slope equals\n   * the curve's slope at the point where it intersects.\n   *\n   * `bezierTangent()` calculates coordinates along a tangent line using the\n   * Bézier curve's anchor and control points. It expects points in the same\n   * order as the <a href=\"#/p5/bezier\">bezier()</a> function. `bezierTangent()`\n   * works one axis at a time. Passing the anchor and control points'\n   * x-coordinates will calculate the x-coordinate of a point on the tangent\n   * line. Passing the anchor and control points' y-coordinates will calculate\n   * the y-coordinate of a point on the tangent line.\n   *\n   * The first parameter, `a`, is the coordinate of the first anchor point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * control points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last anchor point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method bezierTangent\n   * @param {Number} a coordinate of first anchor point.\n   * @param {Number} b coordinate of first control point.\n   * @param {Number} c coordinate of second control point.\n   * @param {Number} d coordinate of second anchor point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the tangent line.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Style the curve.\n   *   noFill();\n   *\n   *   // Draw the curve.\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw tangents along the curve's path.\n   *   fill(255);\n   *\n   *   // Top-right circle.\n   *   stroke(0);\n   *   let x = bezierPoint(x1, x2, x3, x4, 0);\n   *   let y = bezierPoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Top-right tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   let tx = 0.1 * bezierTangent(x1, x2, x3, x4, 0);\n   *   let ty = 0.1 * bezierTangent(y1, y2, y3, y4, 0);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Center circle.\n   *   stroke(0);\n   *   x = bezierPoint(x1, x2, x3, x4, 0.5);\n   *   y = bezierPoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Center tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.1 * bezierTangent(x1, x2, x3, x4, 0.5);\n   *   ty = 0.1 * bezierTangent(y1, y2, y3, y4, 0.5);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Bottom-left circle.\n   *   stroke(0);\n   *   x = bezierPoint(x1, x2, x3, x4, 1);\n   *   y = bezierPoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom-left tangent.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.1 * bezierTangent(x1, x2, x3, x4, 1);\n   *   ty = 0.1 * bezierTangent(y1, y2, y3, y4, 1);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   describe(\n   *     'A black s-curve on a gray square. The endpoints and center of the curve are marked with white circles. Red tangent lines extend from the white circles.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.bezierTangent = function (a, b, c, d, t) {\n    // p5._validateParameters('bezierTangent', arguments);\n\n    const adjustedT = 1 - t;\n    return 3 * d * Math.pow(t, 2) - 3 * c * Math.pow(t, 2) + 6 * c * adjustedT * t - 6 * b * adjustedT * t + 3 * b * Math.pow(adjustedT, 2) - 3 * a * Math.pow(adjustedT, 2);\n  };\n\n  /**\n   * Draws a curve using a Catmull-Rom spline.\n   *\n   * Spline curves can form shapes and curves that slope gently. They’re like\n   * cables that are attached to a set of points. Splines are defined by two\n   * anchor points and two control points.\n   *\n   * The first two parameters, `x1` and `y1`, set the first control point. This\n   * point isn’t drawn and can be thought of as the curve’s starting point.\n   *\n   * The next four parameters, `x2`, `y2`, `x3`, and `y3`, set the two anchor\n   * points. The anchor points are the start and end points of the curve’s\n   * visible segment.\n   *\n   * The seventh and eighth parameters, `x4` and `y4`, set the last control\n   * point. This point isn’t drawn and can be thought of as the curve’s ending\n   * point.\n   *\n   * Spline curves can also be drawn in 3D using WebGL mode. The 3D version of\n   * `spline()` has twelve arguments because each point has x-, y-, and\n   * z-coordinates.\n   *\n   * @method spline\n   * @param  {Number} x1 x-coordinate of the first control point.\n   * @param  {Number} y1 y-coordinate of the first control point.\n   * @param  {Number} x2 x-coordinate of the first anchor point.\n   * @param  {Number} y2 y-coordinate of the first anchor point.\n   * @param  {Number} x3 x-coordinate of the second anchor point.\n   * @param  {Number} y3 y-coordinate of the second anchor point.\n   * @param  {Number} x4 x-coordinate of the second control point.\n   * @param  {Number} y4 y-coordinate of the second control point.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw a black spline curve.\n   *   noFill();\n   *   strokeWeight(1);\n   *   stroke(0);\n   *   spline(5, 26, 73, 24, 73, 61, 15, 65);\n   *\n   *   // Draw red spline curves from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   spline(5, 26, 5, 26, 73, 24, 73, 61);\n   *   spline(73, 24, 73, 61, 15, 65, 15, 65);\n   *\n   *   // Draw the anchor points in black.\n   *   strokeWeight(5);\n   *   stroke(0);\n   *   point(73, 24);\n   *   point(73, 61);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(5, 26);\n   *   point(15, 65);\n   *\n   *   describe(\n   *     'A gray square with a curve drawn in three segments. The curve is a sideways U shape with red segments on top and bottom, and a black segment on the right. The endpoints of all the segments are marked with dots.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x1 = 5;\n   * let y1 = 26;\n   * let isChanging = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A gray square with a curve drawn in three segments. The curve is a sideways U shape with red segments on top and bottom, and a black segment on the right. The endpoints of all the segments are marked with dots.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a black spline curve.\n   *   noFill();\n   *   strokeWeight(1);\n   *   stroke(0);\n   *   spline(x1, y1, 73, 24, 73, 61, 15, 65);\n   *\n   *   // Draw red spline curves from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   spline(x1, y1, x1, y1, 73, 24, 73, 61);\n   *   spline(73, 24, 73, 61, 15, 65, 15, 65);\n   *\n   *   // Draw the anchor points in black.\n   *   strokeWeight(5);\n   *   stroke(0);\n   *   point(73, 24);\n   *   point(73, 61);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(x1, y1);\n   *   point(15, 65);\n   * }\n   *\n   * // Start changing the first control point if the user clicks near it.\n   * function mousePressed() {\n   *   if (dist(mouseX, mouseY, x1, y1) < 20) {\n   *     isChanging = true;\n   *   }\n   * }\n   *\n   * // Stop changing the first control point when the user releases the mouse.\n   * function mouseReleased() {\n   *   isChanging = false;\n   * }\n   *\n   * // Update the first control point while the user drags the mouse.\n   * function mouseDragged() {\n   *   if (isChanging === true) {\n   *     x1 = mouseX;\n   *     y1 = mouseY;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('skyblue');\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   spline(-150, 275, 50, 60, 50, 60, 250, 275);\n   *\n   *   // Draw the balloon string.\n   *   line(50, 60, 50, 80);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   *\n   * function draw() {\n   *   background('skyblue');\n   *\n   *   // Rotate around the y-axis.\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   spline(-200, 225, 0, 0, 10, 0, 0, 10, 0, 200, 225, 0);\n   *\n   *   // Draw the balloon string.\n   *   line(0, 10, 0, 0, 30, 0);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method spline\n   * @param  {Number} x1\n   * @param  {Number} y1\n   * @param  {Number} z1 z-coordinate of the first control point.\n   * @param  {Number} x2\n   * @param  {Number} y2\n   * @param  {Number} z2 z-coordinate of the first anchor point.\n   * @param  {Number} x3\n   * @param  {Number} y3\n   * @param  {Number} z3 z-coordinate of the second anchor point.\n   * @param  {Number} x4\n   * @param  {Number} y4\n   * @param  {Number} z4 z-coordinate of the second control point.\n   * @chainable\n   */\n  fn.spline = function (...args) {\n    if (!this._renderer.states.strokeColor && !this._renderer.states.fillColor) {\n      return this;\n    }\n    this._renderer.spline(...args);\n    return this;\n  };\n\n  /**\n   * Calculates coordinates along a spline curve using interpolation.\n   *\n   * `splinePoint()` calculates coordinates along a spline curve using the\n   * anchor and control points. It expects points in the same order as the\n   * <a href=\"#/p5/spline\">spline()</a> function. `splinePoint()` works one axis\n   * at a time. Passing the anchor and control points' x-coordinates will\n   * calculate the x-coordinate of a point on the curve. Passing the anchor and\n   * control points' y-coordinates will calculate the y-coordinate of a point on\n   * the curve.\n   *\n   * The first parameter, `a`, is the coordinate of the first control point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * anchor points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last control point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method splinePoint\n   * @param {Number} a coordinate of first anchor point.\n   * @param {Number} b coordinate of first control point.\n   * @param {Number} c coordinate of second control point.\n   * @param {Number} d coordinate of second anchor point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the curve.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw circles along the curve's path.\n   *   fill(255);\n   *\n   *   // Top.\n   *   let x = splinePoint(x1, x2, x3, x4, 0);\n   *   let y = splinePoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Center.\n   *   x = splinePoint(x1, x2, x3, x4, 0.5);\n   *   y = splinePoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom.\n   *   x = splinePoint(x1, x2, x3, x4, 1);\n   *   y = splinePoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   describe('A black curve on a gray square. The endpoints and center of the curve are marked with white circles.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black curve on a gray square. A white circle moves back and forth along the curve.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let t = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *   let x = splinePoint(x1, x2, x3, x4, t);\n   *   let y = splinePoint(y1, y2, y3, y4, t);\n   *\n   *   // Draw the circle.\n   *   fill(255);\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splinePoint = function (a, b, c, d, t) {\n    const s = this._renderer.states.splineProperties.tightness,\n      t3 = t * t * t,\n      t2 = t * t,\n      f1 = (s - 1) / 2 * t3 + (1 - s) * t2 + (s - 1) / 2 * t,\n      f2 = (s + 3) / 2 * t3 + (-5 - s) / 2 * t2 + 1.0,\n      f3 = (-3 - s) / 2 * t3 + (s + 2) * t2 + (1 - s) / 2 * t,\n      f4 = (1 - s) / 2 * t3 + (s - 1) / 2 * t2;\n    return a * f1 + b * f2 + c * f3 + d * f4;\n  };\n\n  /**\n   * Calculates coordinates along a line that's tangent to a spline curve.\n   *\n   * Tangent lines skim the surface of a curve. A tangent line's slope equals\n   * the curve's slope at the point where it intersects.\n   *\n   * `splineTangent()` calculates coordinates along a tangent line using the\n   * spline curve's anchor and control points. It expects points in the same\n   * order as the <a href=\"#/p5/spline\">spline()</a> function. `splineTangent()`\n   * works one axis at a time. Passing the anchor and control points'\n   * x-coordinates will calculate the x-coordinate of a point on the tangent\n   * line. Passing the anchor and control points' y-coordinates will calculate\n   * the y-coordinate of a point on the tangent line.\n   *\n   * The first parameter, `a`, is the coordinate of the first control point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * anchor points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last control point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method splineTangent\n   * @param {Number} a coordinate of first control point.\n   * @param {Number} b coordinate of first anchor point.\n   * @param {Number} c coordinate of second anchor point.\n   * @param {Number} d coordinate of second control point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the tangent line.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw tangents along the curve's path.\n   *   fill(255);\n   *\n   *   // Top circle.\n   *   stroke(0);\n   *   let x = splinePoint(x1, x2, x3, x4, 0);\n   *   let y = splinePoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Top tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   let tx = 0.2 * splineTangent(x1, x2, x3, x4, 0);\n   *   let ty = 0.2 * splineTangent(y1, y2, y3, y4, 0);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Center circle.\n   *   stroke(0);\n   *   x = splinePoint(x1, x2, x3, x4, 0.5);\n   *   y = splinePoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Center tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.2 * splineTangent(x1, x2, x3, x4, 0.5);\n   *   ty = 0.2 * splineTangent(y1, y2, y3, y4, 0.5);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Bottom circle.\n   *   stroke(0);\n   *   x = splinePoint(x1, x2, x3, x4, 1);\n   *   y = splinePoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.2 * splineTangent(x1, x2, x3, x4, 1);\n   *   ty = 0.2 * splineTangent(y1, y2, y3, y4, 1);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   describe(\n   *     'A black curve on a gray square. A white circle moves back and forth along the curve.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splineTangent = function (a, b, c, d, t) {\n    const s = this._renderer.states.splineProperties.tightness,\n      tt3 = t * t * 3,\n      t2 = t * 2,\n      f1 = (s - 1) / 2 * tt3 + (1 - s) * t2 + (s - 1) / 2,\n      f2 = (s + 3) / 2 * tt3 + (-5 - s) / 2 * t2,\n      f3 = (-3 - s) / 2 * tt3 + (s + 2) * t2 + (1 - s) / 2,\n      f4 = (1 - s) / 2 * tt3 + (s - 1) / 2 * t2;\n    return a * f1 + b * f2 + c * f3 + d * f4;\n  };\n}\nif (typeof p5 !== 'undefined') {\n  curves(p5, p5.prototype);\n}\nexport { curves as default };","map":{"version":3,"names":["curves","p5","fn","bezier","args","_renderer","states","strokeColor","fillColor","bezierPoint","a","b","c","d","t","adjustedT","Math","pow","bezierTangent","spline","splinePoint","s","splineProperties","tightness","t3","t2","f1","f2","f3","f4","splineTangent","tt3","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/shape/curves.js"],"sourcesContent":["/**\n * @module Shape\n * @submodule Curves\n * @for p5\n * @requires core\n */\n\nfunction curves(p5, fn){\n  /**\n   * Draws a Bézier curve.\n   *\n   * Bézier curves can form shapes and curves that slope gently. They're defined\n   * by two anchor points and two control points. Bézier curves provide more\n   * control than the spline curves created with the\n   * <a href=\"#/p5/curve\">curve()</a> function.\n   *\n   * The first two parameters, `x1` and `y1`, set the first anchor point. The\n   * first anchor point is where the curve starts.\n   *\n   * The next four parameters, `x2`, `y2`, `x3`, and `y3`, set the two control\n   * points. The control points \"pull\" the curve towards them.\n   *\n   * The seventh and eighth parameters, `x4` and `y4`, set the last anchor\n   * point. The last anchor point is where the curve ends.\n   *\n   * Bézier curves can also be drawn in 3D using WebGL mode. The 3D version of\n   * `bezier()` has twelve arguments because each point has x-, y-,\n   * and z-coordinates.\n   *\n   * @method bezier\n   * @param  {Number} x1 x-coordinate of the first anchor point.\n   * @param  {Number} y1 y-coordinate of the first anchor point.\n   * @param  {Number} x2 x-coordinate of the first control point.\n   * @param  {Number} y2 y-coordinate of the first control point.\n   * @param  {Number} x3 x-coordinate of the second control point.\n   * @param  {Number} y3 y-coordinate of the second control point.\n   * @param  {Number} x4 x-coordinate of the second anchor point.\n   * @param  {Number} y4 y-coordinate of the second anchor point.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the anchor points in black.\n   *   stroke(0);\n   *   strokeWeight(5);\n   *   point(85, 20);\n   *   point(15, 80);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(10, 10);\n   *   point(90, 90);\n   *\n   *   // Draw a black bezier curve.\n   *   noFill();\n   *   stroke(0);\n   *   strokeWeight(1);\n   *   bezier(85, 20, 10, 10, 90, 90, 15, 80);\n   *\n   *   // Draw red lines from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   line(85, 20, 10, 10);\n   *   line(15, 80, 90, 90);\n   *\n   *   describe(\n   *     'A gray square with three curves. A black s-curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click the mouse near the red dot in the top-left corner\n   * // and drag to change the curve's shape.\n   *\n   * let x2 = 10;\n   * let y2 = 10;\n   * let isChanging = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A gray square with three curves. A black s-curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the anchor points in black.\n   *   stroke(0);\n   *   strokeWeight(5);\n   *   point(85, 20);\n   *   point(15, 80);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(x2, y2);\n   *   point(90, 90);\n   *\n   *   // Draw a black bezier curve.\n   *   noFill();\n   *   stroke(0);\n   *   strokeWeight(1);\n   *   bezier(85, 20, x2, y2, 90, 90, 15, 80);\n   *\n   *   // Draw red lines from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   line(85, 20, x2, y2);\n   *   line(15, 80, 90, 90);\n   * }\n   *\n   * // Start changing the first control point if the user clicks near it.\n   * function mousePressed() {\n   *   if (dist(mouseX, mouseY, x2, y2) < 20) {\n   *     isChanging = true;\n   *   }\n   * }\n   *\n   * // Stop changing the first control point when the user releases the mouse.\n   * function mouseReleased() {\n   *   isChanging = false;\n   * }\n   *\n   * // Update the first control point while the user drags the mouse.\n   * function mouseDragged() {\n   *   if (isChanging === true) {\n   *     x2 = mouseX;\n   *     y2 = mouseY;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('skyblue');\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   bezier(50, 60, 5, 15, 95, 15, 50, 60);\n   *\n   *   // Draw the balloon string.\n   *   line(50, 60, 50, 80);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A red balloon in a blue sky. The balloon rotates slowly, revealing that it is flat.');\n   * }\n   *\n   * function draw() {\n   *   background('skyblue');\n   *\n   *   // Rotate around the y-axis.\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   bezier(0, 0, 0, -45, -45, 0, 45, -45, 0, 0, 0, 0);\n   *\n   *   // Draw the balloon string.\n   *   line(0, 0, 0, 0, 20, 0);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method bezier\n   * @param  {Number} x1\n   * @param  {Number} y1\n   * @param  {Number} z1 z-coordinate of the first anchor point.\n   * @param  {Number} x2\n   * @param  {Number} y2\n   * @param  {Number} z2 z-coordinate of the first control point.\n   * @param  {Number} x3\n   * @param  {Number} y3\n   * @param  {Number} z3 z-coordinate of the second control point.\n   * @param  {Number} x4\n   * @param  {Number} y4\n   * @param  {Number} z4 z-coordinate of the second anchor point.\n   * @chainable\n   */\n  fn.bezier = function(...args) {\n    // p5._validateParameters('bezier', args);\n\n    // if the current stroke and fill settings wouldn't result in something\n    // visible, exit immediately\n    if (!this._renderer.states.strokeColor && !this._renderer.states.fillColor) {\n      return this;\n    }\n\n    this._renderer.bezier(...args);\n\n    return this;\n  };\n\n  /**\n   * Calculates coordinates along a Bézier curve using interpolation.\n   *\n   * `bezierPoint()` calculates coordinates along a Bézier curve using the\n   * anchor and control points. It expects points in the same order as the\n   * <a href=\"#/p5/bezier\">bezier()</a> function. `bezierPoint()` works one axis\n   * at a time. Passing the anchor and control points' x-coordinates will\n   * calculate the x-coordinate of a point on the curve. Passing the anchor and\n   * control points' y-coordinates will calculate the y-coordinate of a point on\n   * the curve.\n   *\n   * The first parameter, `a`, is the coordinate of the first anchor point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * control points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last anchor point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method bezierPoint\n   * @param {Number} a coordinate of first control point.\n   * @param {Number} b coordinate of first anchor point.\n   * @param {Number} c coordinate of second anchor point.\n   * @param {Number} d coordinate of second control point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of the point on the curve.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Style the curve.\n   *   noFill();\n   *\n   *   // Draw the curve.\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw circles along the curve's path.\n   *   fill(255);\n   *\n   *   // Top-right.\n   *   let x = bezierPoint(x1, x2, x3, x4, 0);\n   *   let y = bezierPoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Center.\n   *   x = bezierPoint(x1, x2, x3, x4, 0.5);\n   *   y = bezierPoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom-left.\n   *   x = bezierPoint(x1, x2, x3, x4, 1);\n   *   y = bezierPoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   describe('A black s-curve on a gray square. The endpoints and center of the curve are marked with white circles.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black s-curve on a gray square. A white circle moves back and forth along the curve.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let t = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *   let x = bezierPoint(x1, x2, x3, x4, t);\n   *   let y = bezierPoint(y1, y2, y3, y4, t);\n   *\n   *   // Draw the circle.\n   *   fill(255);\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.bezierPoint = function(a, b, c, d, t) {\n    // p5._validateParameters('bezierPoint', arguments);\n\n    const adjustedT = 1 - t;\n    return (\n      Math.pow(adjustedT, 3) * a +\n      3 * Math.pow(adjustedT, 2) * t * b +\n      3 * adjustedT * Math.pow(t, 2) * c +\n      Math.pow(t, 3) * d\n    );\n  };\n\n  /**\n   * Calculates coordinates along a line that's tangent to a Bézier curve.\n   *\n   * Tangent lines skim the surface of a curve. A tangent line's slope equals\n   * the curve's slope at the point where it intersects.\n   *\n   * `bezierTangent()` calculates coordinates along a tangent line using the\n   * Bézier curve's anchor and control points. It expects points in the same\n   * order as the <a href=\"#/p5/bezier\">bezier()</a> function. `bezierTangent()`\n   * works one axis at a time. Passing the anchor and control points'\n   * x-coordinates will calculate the x-coordinate of a point on the tangent\n   * line. Passing the anchor and control points' y-coordinates will calculate\n   * the y-coordinate of a point on the tangent line.\n   *\n   * The first parameter, `a`, is the coordinate of the first anchor point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * control points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last anchor point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method bezierTangent\n   * @param {Number} a coordinate of first anchor point.\n   * @param {Number} b coordinate of first control point.\n   * @param {Number} c coordinate of second control point.\n   * @param {Number} d coordinate of second anchor point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the tangent line.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 85;\n   *   let x2 = 10;\n   *   let x3 = 90;\n   *   let x4 = 15;\n   *   let y1 = 20;\n   *   let y2 = 10;\n   *   let y3 = 90;\n   *   let y4 = 80;\n   *\n   *   // Style the curve.\n   *   noFill();\n   *\n   *   // Draw the curve.\n   *   bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw tangents along the curve's path.\n   *   fill(255);\n   *\n   *   // Top-right circle.\n   *   stroke(0);\n   *   let x = bezierPoint(x1, x2, x3, x4, 0);\n   *   let y = bezierPoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Top-right tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   let tx = 0.1 * bezierTangent(x1, x2, x3, x4, 0);\n   *   let ty = 0.1 * bezierTangent(y1, y2, y3, y4, 0);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Center circle.\n   *   stroke(0);\n   *   x = bezierPoint(x1, x2, x3, x4, 0.5);\n   *   y = bezierPoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Center tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.1 * bezierTangent(x1, x2, x3, x4, 0.5);\n   *   ty = 0.1 * bezierTangent(y1, y2, y3, y4, 0.5);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Bottom-left circle.\n   *   stroke(0);\n   *   x = bezierPoint(x1, x2, x3, x4, 1);\n   *   y = bezierPoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom-left tangent.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.1 * bezierTangent(x1, x2, x3, x4, 1);\n   *   ty = 0.1 * bezierTangent(y1, y2, y3, y4, 1);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   describe(\n   *     'A black s-curve on a gray square. The endpoints and center of the curve are marked with white circles. Red tangent lines extend from the white circles.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.bezierTangent = function(a, b, c, d, t) {\n    // p5._validateParameters('bezierTangent', arguments);\n\n    const adjustedT = 1 - t;\n    return (\n      3 * d * Math.pow(t, 2) -\n      3 * c * Math.pow(t, 2) +\n      6 * c * adjustedT * t -\n      6 * b * adjustedT * t +\n      3 * b * Math.pow(adjustedT, 2) -\n      3 * a * Math.pow(adjustedT, 2)\n    );\n  };\n\n  /**\n   * Draws a curve using a Catmull-Rom spline.\n   *\n   * Spline curves can form shapes and curves that slope gently. They’re like\n   * cables that are attached to a set of points. Splines are defined by two\n   * anchor points and two control points.\n   *\n   * The first two parameters, `x1` and `y1`, set the first control point. This\n   * point isn’t drawn and can be thought of as the curve’s starting point.\n   *\n   * The next four parameters, `x2`, `y2`, `x3`, and `y3`, set the two anchor\n   * points. The anchor points are the start and end points of the curve’s\n   * visible segment.\n   *\n   * The seventh and eighth parameters, `x4` and `y4`, set the last control\n   * point. This point isn’t drawn and can be thought of as the curve’s ending\n   * point.\n   *\n   * Spline curves can also be drawn in 3D using WebGL mode. The 3D version of\n   * `spline()` has twelve arguments because each point has x-, y-, and\n   * z-coordinates.\n   *\n   * @method spline\n   * @param  {Number} x1 x-coordinate of the first control point.\n   * @param  {Number} y1 y-coordinate of the first control point.\n   * @param  {Number} x2 x-coordinate of the first anchor point.\n   * @param  {Number} y2 y-coordinate of the first anchor point.\n   * @param  {Number} x3 x-coordinate of the second anchor point.\n   * @param  {Number} y3 y-coordinate of the second anchor point.\n   * @param  {Number} x4 x-coordinate of the second control point.\n   * @param  {Number} y4 y-coordinate of the second control point.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw a black spline curve.\n   *   noFill();\n   *   strokeWeight(1);\n   *   stroke(0);\n   *   spline(5, 26, 73, 24, 73, 61, 15, 65);\n   *\n   *   // Draw red spline curves from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   spline(5, 26, 5, 26, 73, 24, 73, 61);\n   *   spline(73, 24, 73, 61, 15, 65, 15, 65);\n   *\n   *   // Draw the anchor points in black.\n   *   strokeWeight(5);\n   *   stroke(0);\n   *   point(73, 24);\n   *   point(73, 61);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(5, 26);\n   *   point(15, 65);\n   *\n   *   describe(\n   *     'A gray square with a curve drawn in three segments. The curve is a sideways U shape with red segments on top and bottom, and a black segment on the right. The endpoints of all the segments are marked with dots.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x1 = 5;\n   * let y1 = 26;\n   * let isChanging = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A gray square with a curve drawn in three segments. The curve is a sideways U shape with red segments on top and bottom, and a black segment on the right. The endpoints of all the segments are marked with dots.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a black spline curve.\n   *   noFill();\n   *   strokeWeight(1);\n   *   stroke(0);\n   *   spline(x1, y1, 73, 24, 73, 61, 15, 65);\n   *\n   *   // Draw red spline curves from the anchor points to the control points.\n   *   stroke(255, 0, 0);\n   *   spline(x1, y1, x1, y1, 73, 24, 73, 61);\n   *   spline(73, 24, 73, 61, 15, 65, 15, 65);\n   *\n   *   // Draw the anchor points in black.\n   *   strokeWeight(5);\n   *   stroke(0);\n   *   point(73, 24);\n   *   point(73, 61);\n   *\n   *   // Draw the control points in red.\n   *   stroke(255, 0, 0);\n   *   point(x1, y1);\n   *   point(15, 65);\n   * }\n   *\n   * // Start changing the first control point if the user clicks near it.\n   * function mousePressed() {\n   *   if (dist(mouseX, mouseY, x1, y1) < 20) {\n   *     isChanging = true;\n   *   }\n   * }\n   *\n   * // Stop changing the first control point when the user releases the mouse.\n   * function mouseReleased() {\n   *   isChanging = false;\n   * }\n   *\n   * // Update the first control point while the user drags the mouse.\n   * function mouseDragged() {\n   *   if (isChanging === true) {\n   *     x1 = mouseX;\n   *     y1 = mouseY;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('skyblue');\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   spline(-150, 275, 50, 60, 50, 60, 250, 275);\n   *\n   *   // Draw the balloon string.\n   *   line(50, 60, 50, 80);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A red balloon in a blue sky.');\n   * }\n   *\n   * function draw() {\n   *   background('skyblue');\n   *\n   *   // Rotate around the y-axis.\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the red balloon.\n   *   fill('red');\n   *   spline(-200, 225, 0, 0, 10, 0, 0, 10, 0, 200, 225, 0);\n   *\n   *   // Draw the balloon string.\n   *   line(0, 10, 0, 0, 30, 0);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method spline\n   * @param  {Number} x1\n   * @param  {Number} y1\n   * @param  {Number} z1 z-coordinate of the first control point.\n   * @param  {Number} x2\n   * @param  {Number} y2\n   * @param  {Number} z2 z-coordinate of the first anchor point.\n   * @param  {Number} x3\n   * @param  {Number} y3\n   * @param  {Number} z3 z-coordinate of the second anchor point.\n   * @param  {Number} x4\n   * @param  {Number} y4\n   * @param  {Number} z4 z-coordinate of the second control point.\n   * @chainable\n   */\n  fn.spline = function(...args) {\n    if (!this._renderer.states.strokeColor && !this._renderer.states.fillColor) {\n      return this;\n    }\n    this._renderer.spline(...args);\n\n    return this;\n  };\n\n  /**\n   * Calculates coordinates along a spline curve using interpolation.\n   *\n   * `splinePoint()` calculates coordinates along a spline curve using the\n   * anchor and control points. It expects points in the same order as the\n   * <a href=\"#/p5/spline\">spline()</a> function. `splinePoint()` works one axis\n   * at a time. Passing the anchor and control points' x-coordinates will\n   * calculate the x-coordinate of a point on the curve. Passing the anchor and\n   * control points' y-coordinates will calculate the y-coordinate of a point on\n   * the curve.\n   *\n   * The first parameter, `a`, is the coordinate of the first control point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * anchor points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last control point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method splinePoint\n   * @param {Number} a coordinate of first anchor point.\n   * @param {Number} b coordinate of first control point.\n   * @param {Number} c coordinate of second control point.\n   * @param {Number} d coordinate of second anchor point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the curve.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw circles along the curve's path.\n   *   fill(255);\n   *\n   *   // Top.\n   *   let x = splinePoint(x1, x2, x3, x4, 0);\n   *   let y = splinePoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Center.\n   *   x = splinePoint(x1, x2, x3, x4, 0.5);\n   *   y = splinePoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom.\n   *   x = splinePoint(x1, x2, x3, x4, 1);\n   *   y = splinePoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   describe('A black curve on a gray square. The endpoints and center of the curve are marked with white circles.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black curve on a gray square. A white circle moves back and forth along the curve.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let t = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *   let x = splinePoint(x1, x2, x3, x4, t);\n   *   let y = splinePoint(y1, y2, y3, y4, t);\n   *\n   *   // Draw the circle.\n   *   fill(255);\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splinePoint = function(a, b, c, d, t) {\n    const s = this._renderer.states.splineProperties.tightness,\n      t3 = t * t * t,\n      t2 = t * t,\n      f1 = (s - 1) / 2 * t3 + (1 - s) * t2 + (s - 1) / 2 * t,\n      f2 = (s + 3) / 2 * t3 + (-5 - s) / 2 * t2 + 1.0,\n      f3 = (-3 - s) / 2 * t3 + (s + 2) * t2 + (1 - s) / 2 * t,\n      f4 = (1 - s) / 2 * t3 + (s - 1) / 2 * t2;\n    return a * f1 + b * f2 + c * f3 + d * f4;\n  };\n\n  /**\n   * Calculates coordinates along a line that's tangent to a spline curve.\n   *\n   * Tangent lines skim the surface of a curve. A tangent line's slope equals\n   * the curve's slope at the point where it intersects.\n   *\n   * `splineTangent()` calculates coordinates along a tangent line using the\n   * spline curve's anchor and control points. It expects points in the same\n   * order as the <a href=\"#/p5/spline\">spline()</a> function. `splineTangent()`\n   * works one axis at a time. Passing the anchor and control points'\n   * x-coordinates will calculate the x-coordinate of a point on the tangent\n   * line. Passing the anchor and control points' y-coordinates will calculate\n   * the y-coordinate of a point on the tangent line.\n   *\n   * The first parameter, `a`, is the coordinate of the first control point.\n   *\n   * The second and third parameters, `b` and `c`, are the coordinates of the\n   * anchor points.\n   *\n   * The fourth parameter, `d`, is the coordinate of the last control point.\n   *\n   * The fifth parameter, `t`, is the amount to interpolate along the curve. 0\n   * is the first anchor point, 1 is the second anchor point, and 0.5 is halfway\n   * between them.\n   *\n   * @method splineTangent\n   * @param {Number} a coordinate of first control point.\n   * @param {Number} b coordinate of first anchor point.\n   * @param {Number} c coordinate of second anchor point.\n   * @param {Number} d coordinate of second control point.\n   * @param {Number} t amount to interpolate between 0 and 1.\n   * @return {Number} coordinate of a point on the tangent line.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates for the curve's anchor and control points.\n   *   let x1 = 5;\n   *   let y1 = 26;\n   *   let x2 = 73;\n   *   let y2 = 24;\n   *   let x3 = 73;\n   *   let y3 = 61;\n   *   let x4 = 15;\n   *   let y4 = 65;\n   *\n   *   // Draw the curve.\n   *   noFill();\n   *   spline(x1, y1, x2, y2, x3, y3, x4, y4);\n   *\n   *   // Draw tangents along the curve's path.\n   *   fill(255);\n   *\n   *   // Top circle.\n   *   stroke(0);\n   *   let x = splinePoint(x1, x2, x3, x4, 0);\n   *   let y = splinePoint(y1, y2, y3, y4, 0);\n   *   circle(x, y, 5);\n   *\n   *   // Top tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   let tx = 0.2 * splineTangent(x1, x2, x3, x4, 0);\n   *   let ty = 0.2 * splineTangent(y1, y2, y3, y4, 0);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Center circle.\n   *   stroke(0);\n   *   x = splinePoint(x1, x2, x3, x4, 0.5);\n   *   y = splinePoint(y1, y2, y3, y4, 0.5);\n   *   circle(x, y, 5);\n   *\n   *   // Center tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.2 * splineTangent(x1, x2, x3, x4, 0.5);\n   *   ty = 0.2 * splineTangent(y1, y2, y3, y4, 0.5);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   // Bottom circle.\n   *   stroke(0);\n   *   x = splinePoint(x1, x2, x3, x4, 1);\n   *   y = splinePoint(y1, y2, y3, y4, 1);\n   *   circle(x, y, 5);\n   *\n   *   // Bottom tangent line.\n   *   // Scale the tangent point to draw a shorter line.\n   *   stroke(255, 0, 0);\n   *   tx = 0.2 * splineTangent(x1, x2, x3, x4, 1);\n   *   ty = 0.2 * splineTangent(y1, y2, y3, y4, 1);\n   *   line(x + tx, y + ty, x - tx, y - ty);\n   *\n   *   describe(\n   *     'A black curve on a gray square. A white circle moves back and forth along the curve.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splineTangent = function(a, b, c, d, t) {\n    const s = this._renderer.states.splineProperties.tightness,\n      tt3 = t * t * 3,\n      t2 = t * 2,\n      f1 = (s - 1) / 2 * tt3 + (1 - s) * t2 + (s - 1) / 2,\n      f2 = (s + 3) / 2 * tt3 + (-5 - s) / 2 * t2,\n      f3 = (-3 - s) / 2 * tt3 + (s + 2) * t2 + (1 - s) / 2,\n      f4 = (1 - s) / 2 * tt3 + (s - 1) / 2 * t2;\n    return a * f1 + b * f2 + c * f3 + d * f4;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  curves(p5, p5.prototype);\n}\n\nexport { curves as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}