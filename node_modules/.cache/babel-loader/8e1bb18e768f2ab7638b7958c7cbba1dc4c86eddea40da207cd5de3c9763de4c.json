{"ast":null,"code":"import { Vector } from '../p5.Vector.js';\nimport { MatrixInterface } from './MatrixInterface.js';\nimport '../../constants-BRcElHU3.js';\n\n/**\n * @module Math\n */\n\nconst isPerfectSquare = arr => {\n  const sqDimention = Math.sqrt(Array.from(arr).length);\n  if (sqDimention % 1 !== 0) {\n    throw new Error(\"Array length must be a perfect square.\");\n  }\n  return true;\n};\nlet GLMAT_ARRAY_TYPE = Array;\nlet isMatrixArray = x => Array.isArray(x);\nif (typeof Float32Array !== \"undefined\") {\n  GLMAT_ARRAY_TYPE = Float32Array;\n  isMatrixArray = x => Array.isArray(x) || x instanceof Float32Array;\n}\nclass Matrix extends MatrixInterface {\n  matrix;\n  #sqDimention;\n  constructor(...args) {\n    super(...args);\n    // This is default behavior when object\n    // instantiated using createMatrix()\n    if (isMatrixArray(args[0]) && isPerfectSquare(args[0])) {\n      const sqDimention = Math.sqrt(Array.from(args[0]).length);\n      this.#sqDimention = sqDimention;\n      this.matrix = GLMAT_ARRAY_TYPE.from(args[0]);\n    } else if (typeof args[0] === \"number\") {\n      this.#sqDimention = Number(args[0]);\n      this.matrix = this.#createIdentityMatrix(args[0]);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the 3x3 matrix if the dimensions are 3x3, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 3x3.\n   * If the matrix is not 3x3, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 3x3 matrix or `undefined` if the matrix is not 3x3.\n   */\n  get mat3() {\n    if (this.#sqDimention === 3) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Returns the 4x4 matrix if the dimensions are 4x4, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 4x4.\n   * If the matrix is not 4x4, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 4x4 matrix or `undefined` if the matrix is not 4x4.\n   */\n  get mat4() {\n    if (this.#sqDimention === 4) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Adds the corresponding elements of the given matrix to this matrix, if the dimentions are the same.\n   *\n   * @param {Matrix} matrix - The matrix to add to this matrix. It must have the same dimensions as this matrix.\n   * @returns {Matrix} The resulting matrix after addition.\n   * @throws {Error} If the matrices do not have the same dimensions.\n   *\n   * @example\n   * const matrix1 = new p5.Matrix([1, 2, 3]);\n   * const matrix2 = new p5.Matrix([4, 5, 6]);\n   * matrix1.add(matrix2); // matrix1 is now [5, 7, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   *   const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   *   matrix1.add(matrix2);\n   *   console.log(matrix1.matrix); // Output: [6, 8, 10, 12]\n   * }\n   * </code></div>\n   */\n  add(matrix) {\n    if (this.matrix.length !== matrix.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to add.\");\n    }\n    for (let i = 0; i < this.matrix.length; i++) {\n      this.matrix[i] += matrix.matrix[i];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the value of a specific element in the matrix in column-major order.\n   *\n   * A matrix is stored in column-major order, meaning elements are arranged column by column.\n   * This function allows you to update or change the value of a specific element\n   * in the matrix by specifying its index in the column-major order and the new value.\n   *\n   * Parameters:\n   * - `index` (number): The position in the matrix where the value should be set.\n   *   Indices start from 0 and follow column-major order.\n   * - `value` (any): The new value you want to assign to the specified element.\n   *\n   * Example:\n   * If you have the following 3x3 matrix stored in column-major order:\n   * ```\n   * [\n   *   1, 4, 7,  // Column 1\n   *   2, 5, 8,  // Column 2\n   *   3, 6, 9   // Column 3\n   * ]\n   * ```\n   * Calling `setElement(4, 10)` will update the element at index 4\n   * (which corresponds to row 2, column 2 in row-major order) to `10`.\n   * The updated matrix will look like this:\n   * ```\n   * [\n   *   1, 4, 7,\n   *   2, 10, 8,\n   *   3, 6, 9\n   * ]\n   * ```\n   *\n   * This function is useful for modifying specific parts of the matrix without\n   * having to recreate the entire structure.\n   *\n   * @param {Number} index - The position in the matrix where the value should be set.\n   *                         Must be a non-negative integer less than the length of the matrix.\n   * @param {Number} value - The new value to be assigned to the specified position in the matrix.\n   * @returns {Matrix} The current instance of the Matrix, allowing for method chaining.\n   *\n   * @example\n   * // Assuming matrix is an instance of Matrix with initial values [1, 2, 3, 4] matrix.setElement(2, 99);\n   * // Now the matrix values are [1, 2, 99, 4]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   matrix.setElement(2, 99);\n   *   console.log(matrix.matrix); // Output: [1, 2, 99, 4]\n   * }\n   * </code></div>\n   */\n  setElement(index, value) {\n    if (index >= 0 && index < this.matrix.length) {\n      this.matrix[index] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Resets the current matrix to an identity matrix.\n   *\n   * This method replaces the current matrix with an identity matrix of the same dimensions.\n   * An identity matrix is a square matrix with ones on the main diagonal and zeros elsewhere.\n   * This is useful for resetting transformations or starting fresh with a clean matrix.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Resetting a 4x4 matrix to an identity matrix\n   * const matrix = new p5.Matrix(4);\n   * matrix.scale(2, 2, 2); // Apply some transformations\n   * console.log(matrix.matrix); // Output: Transformed matrix\n   * matrix.reset(); // Reset to identity matrix\n   * console.log(matrix.matrix); // Output: Identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4);\n   *   matrix.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Before reset:\", matrix.matrix);\n   *   matrix.reset(); // Reset to identity matrix\n   *   console.log(\"After reset:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  reset() {\n    this.matrix = this.#createIdentityMatrix(this.#sqDimention);\n    return this;\n  }\n\n  /**\n   * Replace the entire contents of a NxN matrix.\n   *\n   * This method allows you to replace the values of the current matrix with\n   * those from another matrix, an array, or individual arguments. The input\n   * can be a `Matrix` instance, an array of numbers, or individual numbers\n   * that match the dimensions of the current matrix. The values are copied\n   * without referencing the source object, ensuring that the original input\n   * remains unchanged.\n   *\n   * If the input dimensions do not match the current matrix, an error will\n   * be thrown to ensure consistency.\n   *\n   * @param {Matrix|Float32Array|Number[]} [inMatrix] - The input matrix, array,\n   * or individual numbers to replace the current matrix values.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Replacing the contents of a matrix with another matrix\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   * const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   * matrix1.set(matrix2);\n   * console.log(matrix1.matrix); // Output: [5, 6, 7, 8]\n   *\n   * // Replacing the contents of a matrix with an array\n   * const matrix = new p5.Matrix([1, 2, 3, 4]);\n   * matrix.set([9, 10, 11, 12]);\n   * console.log(matrix.matrix); // Output: [9, 10, 11, 12]\n   *\n   * // Replacing the contents of a matrix with individual numbers\n   * const matrix = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix.set(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n   * console.log(matrix.matrix); // Output: [1, 2, 3, ..., 16]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   console.log(\"Before set:\", matrix.matrix);\n   *   matrix.set([5, 6, 7, 8]);\n   *   console.log(\"After set:\", matrix.matrix); // Output: [5, 6, 7, 8]\n   * }\n   * </code></div>\n   */\n  set(inMatrix) {\n    let refArray = GLMAT_ARRAY_TYPE.from([...arguments]);\n    if (inMatrix instanceof Matrix) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix.matrix);\n    } else if (isMatrixArray(inMatrix)) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix);\n    }\n    if (refArray.length !== this.matrix.length) {\n      p5._friendlyError(`Expected same dimensions values but received different ${refArray.length}.`, \"p5.Matrix.set\");\n      return this;\n    }\n    this.matrix = refArray;\n    return this;\n  }\n\n  /**\n   * Gets a copy of the matrix, returns a p5.Matrix object.\n   *\n   * This method creates a new instance of the `Matrix` class and copies the\n   * current matrix values into it. The returned matrix is independent of the\n   * original, meaning changes to the copy will not affect the original matrix.\n   *\n   * This is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate.\n   *\n   * @return {p5.Matrix} A new instance of the `Matrix` class containing the\n   *                     same values as the original matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4]);\n   *   const copiedMatrix = originalMatrix.get();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 3, 4]\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(2, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 99, 4]\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   * }\n   * </code></div>\n   */\n  get() {\n    return new Matrix(this.matrix); // TODO: Pass p5\n  }\n\n  /**\n   * Return a copy of this matrix.\n   * If this matrix is 4x4, a 4x4 matrix with exactly the same entries will be\n   * generated. The same is true if this matrix is 3x3 or any NxN matrix.\n   *\n   * This method is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate. The returned matrix is independent\n   * of the original, meaning changes to the copy will not affect the original matrix.\n   *\n   * @return {p5.Matrix}   The result matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const copiedMatrix = originalMatrix.copy();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix);\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  copy() {\n    return new Matrix(this.matrix);\n  }\n\n  /**\n   * Creates a copy of the current matrix instance.\n   * This method is useful when you need a duplicate of the matrix\n   * without modifying the original one.\n   *\n   * @returns {Matrix} A new matrix instance that is a copy of the current matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const clonedMatrix = originalMatrix.clone();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Cloned Matrix:\", clonedMatrix.matrix);\n   *\n   *   // Modify the cloned matrix\n   *   clonedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Cloned Matrix:\", clonedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  clone() {\n    return this.copy();\n  }\n\n  /**\n   * Returns the diagonal elements of the matrix in the form of an array.\n   * A NxN matrix will return an array of length N.\n   *\n   * This method extracts the diagonal elements of the matrix, which are the\n   * elements where the row index equals the column index. For example, in a\n   * 3x3 matrix:\n   * ```\n   * [\n   *   1, 2, 3,\n   *   4, 5, 6,\n   *   7, 8, 9\n   * ]\n   * ```\n   * The diagonal elements are [1, 5, 9].\n   *\n   * This is useful for operations that require the main diagonal of a matrix,\n   * such as calculating the trace of a matrix or verifying if a matrix is diagonal.\n   *\n   * @return {Number[]} An array obtained by arranging the diagonal elements\n   *                    of the matrix in ascending order of index.\n   *\n   * @example\n   * // Extracting the diagonal elements of a matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const diagonal = matrix.diagonal(); // [1, 5, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const diagonal = matrix.diagonal();\n   *   console.log(\"Diagonal elements:\", diagonal); // Output: [1, 5, 9]\n   * }\n   * </code></div>\n   */\n  diagonal() {\n    const diagonal = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      diagonal.push(this.matrix[i * (this.#sqDimention + 1)]);\n    }\n    return diagonal;\n  }\n\n  /**\n   * This function is only for 3x3 matrices A function that returns a row vector of a NxN matrix.\n   *\n   * This method extracts a specific row from the matrix and returns it as a `p5.Vector`.\n   * The row is determined by the `columnIndex` parameter, which specifies the column\n   * index of the matrix. This is useful for operations that require working with\n   * individual rows of a matrix, such as row transformations or dot products.\n   *\n   * @param {Number} columnIndex - The index of the column to extract as a row vector.\n   *                               Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted row of the matrix.\n   *\n   * @example\n   * // Extracting a row vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const rowVector = matrix.row(1); // Returns a vector [2, 5, 8]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const rowVector = matrix.row(1); // Extract the second row (index 1)\n   *   console.log(\"Row Vector:\", rowVector.toString()); // Output: Row Vector: [2, 5, 8]\n   * }\n   * </code></div>\n   */\n  row(columnIndex) {\n    const columnVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      columnVector.push(this.matrix[i * this.#sqDimention + columnIndex]);\n    }\n    return new Vector(...columnVector);\n  }\n\n  /**\n   * A function that returns a column vector of a NxN matrix.\n   *\n   * This method extracts a specific column from the matrix and returns it as a `p5.Vector`.\n   * The column is determined by the `rowIndex` parameter, which specifies the row index\n   * of the matrix. This is useful for operations that require working with individual\n   * columns of a matrix, such as column transformations or dot products.\n   *\n   * @param {Number} rowIndex - The index of the row to extract as a column vector.\n   *                             Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted column of the matrix.\n   *\n   * @example\n   * // Extracting a column vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const columnVector = matrix.column(1); // Returns a vector [4, 5, 6]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const columnVector = matrix.column(1); // Extract the second column (index 1)\n   *   console.log(\"Column Vector:\", columnVector.toString()); // Output: Column Vector: [4, 5, 6]\n   * }\n   * </code></div>\n   */\n  column(rowIndex) {\n    const rowVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      rowVector.push(this.matrix[rowIndex * this.#sqDimention + i]);\n    }\n    return new Vector(...rowVector);\n  }\n\n  /**\n   * Transposes the given matrix `a` based on the square dimension of the matrix.\n   *\n   * This method rearranges the elements of the matrix such that the rows become columns\n   * and the columns become rows. It handles matrices of different dimensions (4x4, 3x3, NxN)\n   * by delegating to specific transpose methods for each case.\n   *\n   * If no argument is provided, the method transposes the current matrix instance.\n   * If an argument is provided, it transposes the given matrix `a` and updates the current matrix.\n   *\n   * @param {Array} [a] - The matrix to be transposed. It should be a 2D array where each sub-array represents a row.\n   *                      If omitted, the current matrix instance is transposed.\n   * @returns {Matrix} - The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Transposing a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * matrix.transpose();\n   * console.log(matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   *\n   * // Transposing a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4);\n   * matrix4x4.transpose();\n   * console.log(matrix4x4.matrix); // Output: Transposed 4x4 identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Before transpose:\", matrix.matrix);\n   *   matrix.transpose();\n   *   console.log(\"After transpose:\", matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   * }\n   * </code></div>\n   */\n  transpose(a) {\n    if (this.#sqDimention === 4) {\n      return this.#transpose4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#transpose3x3(a);\n    } else {\n      return this.#transposeNxN(a);\n    }\n  }\n\n  /**\n   * Multiplies the current matrix with another matrix or matrix-like array.\n   *\n   * This method supports several types of input:\n   * - Another Matrix instance\n   * - A matrix-like array (must be a perfect square, e.g., 4x4 or 3x3)\n   * - Multiple arguments that form a perfect square matrix\n   *\n   * If the input is the same as the current matrix, a copy is made to avoid modifying the original matrix.\n   *\n   * The method determines the appropriate multiplication strategy based on the dimensions of the current matrix\n   * and the input matrix. It supports 3x3, 4x4, and NxN matrices.\n   *\n   * @param {Matrix|Array|...number} multMatrix - The matrix or matrix-like array to multiply with.\n   * @returns {Matrix|undefined} The resulting matrix after multiplication, or undefined if the input is invalid.\n   * @chainable\n   *\n   * @example\n   * // Multiplying two 3x3 matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.mult(matrix2);\n   * console.log(matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   *\n   * // Multiplying a 4x4 matrix with another 4x4 matrix\n   * const matrix4x4_1 = new p5.Matrix(4); // Identity matrix\n   * const matrix4x4_2 = new p5.Matrix([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]);\n   * matrix4x4_1.mult(matrix4x4_2);\n   * console.log(matrix4x4_1.matrix); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   console.log(\"Before multiplication:\", matrix1.matrix);\n   *   matrix1.mult(matrix2);\n   *   console.log(\"After multiplication:\", matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   * }\n   * </code></div>\n   */\n  mult(multMatrix) {\n    let _src;\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix) && isPerfectSquare(multMatrix)) {\n      _src = multMatrix;\n    } else if (isPerfectSquare(arguments)) {\n      _src = Array.from(arguments);\n    } else ;\n    if (this.#sqDimention === 4 && _src.length === 16) {\n      return this.#mult4x4(_src);\n    } else if (this.#sqDimention === 3 && _src.length === 9) {\n      return this.#mult3x3(_src);\n    } else {\n      return this.#multNxN(_src);\n    }\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying to that vector by this matrix from left. This function is only for 3x3 matrices.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const result = matrix.multiplyVec(vector);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output : Original Vector: [1, 2, 3]\n   *   console.log(\"Transformed Vector:\", result.toString()); // Output : Transformed Vector: [30, 36, 42]\n   * }\n   * </code></div>\n   */\n  multiplyVec(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    for (let i = 0; i < this.#sqDimention; i++) {\n      target.values[i] = this.row(i).dot(multVector);\n    }\n    return target;\n  }\n\n  /**\n   * Inverts a given matrix.\n   *\n   * This method inverts a matrix based on its dimensions. Currently, it supports\n   * 3x3 and 4x4 matrices. If the matrix dimension is greater than 4, an error is thrown.\n   *\n   * For 4x4 matrices, it uses a specialized algorithm to compute the inverse.\n   * For 3x3 matrices, it uses a different algorithm optimized for smaller matrices.\n   *\n   * If the matrix is singular (non-invertible), the method will return `null`.\n   *\n   * @param {Array} a - The matrix to be inverted. It should be a 2D array representing the matrix.\n   * @returns {Array|null} - The inverted matrix, or `null` if the matrix is singular.\n   * @throws {Error} - Throws an error if the matrix dimension is greater than 4.\n   *\n   * @example\n   * // Inverting a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   * const invertedMatrix = matrix.invert();\n   * console.log(invertedMatrix.matrix); // Output: Inverted 3x3 matrix\n   *\n   * // Inverting a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Identity matrix\n   * matrix4x4.scale(2, 2, 2);\n   * const invertedMatrix4x4 = matrix4x4.invert();\n   * console.log(invertedMatrix4x4.matrix); // Output: Inverted 4x4 matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *   const invertedMatrix = matrix.invert();\n   *   if (invertedMatrix) {\n   *     console.log(\"Inverted Matrix:\", invertedMatrix.matrix);\n   *   } else {\n   *     console.log(\"Matrix is singular and cannot be inverted.\");\n   *   }\n   * }\n   * </code></div>\n   */\n  invert(a) {\n    if (this.#sqDimention === 4) {\n      return this.#invert4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#invert3x3(a);\n    } else {\n      throw new Error(\"Invert is not implemented for N>4 at the moment, we are working on it\");\n    }\n  }\n\n  /**\n   * Creates a 3x3 matrix whose entries are the top left 3x3 part and returns it. This function is only for 4x4 matrices.\n   *\n   * This method extracts the top-left 3x3 portion of a 4x4 matrix and creates a new\n   * 3x3 matrix from it. This is particularly useful in 3D graphics for operations\n   * that require only the rotational or scaling components of a transformation matrix.\n   *\n   * If the current matrix is not 4x4, an error is thrown to ensure the method is used\n   * correctly. The resulting 3x3 matrix is independent of the original matrix, meaning\n   * changes to the new matrix will not affect the original.\n   *\n   * @return {p5.Matrix} A new 3x3 matrix containing the top-left portion of the original 4x4 matrix.\n   * @throws {Error} If the current matrix is not 4x4.\n   *\n   * @example\n   * // Extracting a 3x3 submatrix from a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   * const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   * console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   * console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   *   matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   *\n   *   const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   *   console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   * }\n   * </code></div>\n   */\n  createSubMatrix3x3() {\n    if (this.#sqDimention === 4) {\n      const result = new Matrix(3);\n      result.mat3[0] = this.matrix[0];\n      result.mat3[1] = this.matrix[1];\n      result.mat3[2] = this.matrix[2];\n      result.mat3[3] = this.matrix[4];\n      result.mat3[4] = this.matrix[5];\n      result.mat3[5] = this.matrix[6];\n      result.mat3[6] = this.matrix[8];\n      result.mat3[7] = this.matrix[9];\n      result.mat3[8] = this.matrix[10];\n      return result;\n    } else {\n      throw new Error(\"Matrix dimension must be 4 to create a 3x3 submatrix.\");\n    }\n  }\n\n  /**\n   * Converts a 4×4 matrix to its 3×3 inverse transpose transform.\n   * This is commonly used in MVMatrix to NMatrix conversions, particularly\n   * in 3D graphics for transforming normal vectors.\n   *\n   * This method extracts the top-left 3×3 portion of a 4×4 matrix, inverts it,\n   * and then transposes the result. If the matrix is singular (non-invertible),\n   * the resulting matrix will be zeroed out.\n   *\n   * @param  {p5.Matrix} mat4 - The 4×4 matrix to be converted.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   * @throws {Error} If the current matrix is not 3×3.\n   *\n   * @example\n   * // Converting a 4×4 matrix to its 3×3 inverse transpose\n   * const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   * mat4.scale(2, 2, 2); // Apply scaling transformation\n   * const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   * mat3.inverseTranspose4x4(mat4);\n   * console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   *   mat4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4×4 Matrix:\", mat4.matrix);\n   *\n   *   const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   *   mat3.inverseTranspose4x4(mat4);\n   *   console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   * }\n   * </code></div>\n   */\n  inverseTranspose4x4({\n    mat4\n  }) {\n    if (this.#sqDimention !== 3) {\n      throw new Error(\"This function only works with 3×3 matrices.\");\n    } else {\n      // Convert mat4 -> mat3 by extracting the top-left 3×3 portion\n      this.matrix[0] = mat4[0];\n      this.matrix[1] = mat4[1];\n      this.matrix[2] = mat4[2];\n      this.matrix[3] = mat4[4];\n      this.matrix[4] = mat4[5];\n      this.matrix[5] = mat4[6];\n      this.matrix[6] = mat4[8];\n      this.matrix[7] = mat4[9];\n      this.matrix[8] = mat4[10];\n    }\n    const inverse = this.invert();\n    // Check if inversion succeeded\n    if (inverse) {\n      inverse.transpose(this.matrix);\n    } else {\n      // In case of singularity, zero out the matrix\n      for (let i = 0; i < 9; i++) {\n        this.matrix[i] = 0;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Applies a transformation matrix to the current matrix.\n   *\n   * This method multiplies the current matrix by another matrix, which can be provided\n   * in several forms: another Matrix instance, an array representing a matrix, or as\n   * individual arguments representing the elements of a 4x4 matrix.\n   *\n   * This operation is useful for combining transformations such as translation, rotation,\n   * scaling, and perspective projection into a single matrix. By applying a transformation\n   * matrix, you can modify the current matrix to represent a new transformation.\n   *\n   * @param {Matrix|Array|number} multMatrix - The matrix to multiply with. This can be:\n   *   - An instance of the Matrix class.\n   *   - An array of 16 numbers representing a 4x4 matrix.\n   *   - 16 individual numbers representing the elements of a 4x4 matrix.\n   * @returns {Matrix} The current matrix after applying the transformation.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   * // Assuming `matrix` is an instance of Matrix\n   * const anotherMatrix = new p5.Matrix(4);\n   * const anotherMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(anotherMatrix);\n   *\n   * // Applying a transformation using an array\n   * const matrixArray = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(matrixArray);\n   *\n   * // Applying a transformation using individual arguments\n   * matrix.apply(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n   *\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Create a scaling transformation matrix\n   *   const scalingMatrix = new p5.Matrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]);\n   *\n   *   // Apply the scaling transformation\n   *   matrix.apply(scalingMatrix);\n   *   console.log(\"After Scaling Transformation:\", matrix.matrix);\n   *\n   *   // Apply a translation transformation using an array\n   *   const translationMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 5, 5, 5, 1];\n   *   matrix.apply(translationMatrix);\n   *   console.log(\"After Translation Transformation:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  apply(multMatrix) {\n    let _src;\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix)) {\n      _src = multMatrix;\n    } else if (arguments.length === 16) {\n      _src = arguments;\n    } else {\n      return; // nothing to do.\n    }\n    const mat4 = this.matrix;\n\n    // each row is used for the multiplier\n    const m0 = mat4[0];\n    const m4 = mat4[4];\n    const m8 = mat4[8];\n    const m12 = mat4[12];\n    mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;\n    mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;\n    mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;\n    mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;\n    const m1 = mat4[1];\n    const m5 = mat4[5];\n    const m9 = mat4[9];\n    const m13 = mat4[13];\n    mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;\n    mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;\n    mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;\n    mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;\n    const m2 = mat4[2];\n    const m6 = mat4[6];\n    const m10 = mat4[10];\n    const m14 = mat4[14];\n    mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;\n    mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;\n    mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;\n    mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;\n    const m3 = mat4[3];\n    const m7 = mat4[7];\n    const m11 = mat4[11];\n    const m15 = mat4[15];\n    mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;\n    mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;\n    mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;\n    mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;\n    return this;\n  }\n\n  /**\n   * Scales a p5.Matrix by scalars or a vector.\n   *\n   * This method applies a scaling transformation to the current matrix.\n   * Scaling is a transformation that enlarges or shrinks objects by a scale factor\n   * along the x, y, and z axes. The scale factors can be provided as individual\n   * numbers, an array, or a `p5.Vector`.\n   *\n   * If a `p5.Vector` or an array is provided, the x, y, and z components are extracted\n   * from it. If the z component is not provided, it defaults to 1 (no scaling along the z-axis).\n   *\n   * @param {p5.Vector|Float32Array|Number[]} s - The vector or scalars to scale by.\n   *                                              Can be a `p5.Vector`, an array, or individual numbers.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Scaling a matrix by individual scalars\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.scale(2, 3, 4); // Scale by 2 along x, 3 along y, and 4 along z\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by a p5.Vector\n   * const scaleVector = new p5.Vector(2, 3, 4);\n   * matrix.scale(scaleVector);\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by an array\n   * const scaleArray = [2, 3, 4];\n   * matrix.scale(scaleArray);\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Scale the matrix by individual scalars\n   *   matrix.scale(2, 3, 4);\n   *   console.log(\"Scaled Matrix (2, 3, 4):\", matrix.matrix);\n   *\n   *   // Scale the matrix by a p5.Vector\n   *   const scaleVector = new p5.Vector(1.5, 2.5, 3.5);\n   *   matrix.scale(scaleVector);\n   *   console.log(\"Scaled Matrix (Vector):\", matrix.matrix);\n   *\n   *   // Scale the matrix by an array\n   *   const scaleArray = [0.5, 0.5, 0.5];\n   *   matrix.scale(scaleArray);\n   *   console.log(\"Scaled Matrix (Array):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  scale(x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; // must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; // must be last\n    }\n    this.matrix[0] *= x;\n    this.matrix[1] *= x;\n    this.matrix[2] *= x;\n    this.matrix[3] *= x;\n    this.matrix[4] *= y;\n    this.matrix[5] *= y;\n    this.matrix[6] *= y;\n    this.matrix[7] *= y;\n    this.matrix[8] *= z;\n    this.matrix[9] *= z;\n    this.matrix[10] *= z;\n    this.matrix[11] *= z;\n    return this;\n  }\n\n  /**\n   * Rotate the Matrix around a specified axis by a given angle.\n   *\n   * This method applies a rotation transformation to the matrix, modifying its orientation\n   * in 3D space. The rotation is performed around the provided axis, which can be defined\n   * as a `p5.Vector` or an array of numbers representing the x, y, and z components of the axis.\n   * Rotate our Matrix around an axis by the given angle.\n   * @param  {Number} a The angle of rotation in radians.\n   *                    Angles in radians are a measure of rotation, where 2π radians\n   *                    represent a full circle (360 degrees). For example:\n   *                    - π/2 radians = 90 degrees (quarter turn)\n   *                    - π radians = 180 degrees (half turn)\n   *                    - 2π radians = 360 degrees (full turn)\n   *                    Use `Math.PI` for π or `p5`'s `PI` constant if using p5.js.\n   * @param  {p5.Vector|Number[]} axis The axis or axes to rotate around.\n   *                                   This defines the direction of the rotation.\n   *                                   - If using a `p5.Vector`, it should represent\n   *                                     the x, y, and z components of the axis.\n   *                                   - If using an array, it should be in the form\n   *                                     [x, y, z], where x, y, and z are numbers.\n   *                                   For example:\n   *                                   - [1, 0, 0] rotates around the x-axis.\n   *                                   - [0, 1, 0] rotates around the y-axis.\n   *                                   - [0, 0, 1] rotates around the z-axis.   *\n   * @chainable\n   * inspired by Toji's gl-matrix lib, mat4 rotation\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.rotate4x4(Math.PI, [1,0,0]);\n   *   console.log(\"After rotation of PI degrees on vector [1,0,0]:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,-1,1.2246468525851679e-16,0,0,-1.2246468525851679e-16,-1,0,0,0,0,1]\n   * }\n   * </code></div>\n   */\n  rotate4x4(a, x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; //must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; //must be last\n    }\n    const len = Math.sqrt(x * x + y * y + z * z);\n    x *= 1 / len;\n    y *= 1 / len;\n    z *= 1 / len;\n    const a00 = this.matrix[0];\n    const a01 = this.matrix[1];\n    const a02 = this.matrix[2];\n    const a03 = this.matrix[3];\n    const a10 = this.matrix[4];\n    const a11 = this.matrix[5];\n    const a12 = this.matrix[6];\n    const a13 = this.matrix[7];\n    const a20 = this.matrix[8];\n    const a21 = this.matrix[9];\n    const a22 = this.matrix[10];\n    const a23 = this.matrix[11];\n\n    //sin,cos, and tan of respective angle\n    const sA = Math.sin(a);\n    const cA = Math.cos(a);\n    const tA = 1 - cA;\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * tA + cA;\n    const b01 = y * x * tA + z * sA;\n    const b02 = z * x * tA - y * sA;\n    const b10 = x * y * tA - z * sA;\n    const b11 = y * y * tA + cA;\n    const b12 = z * y * tA + x * sA;\n    const b20 = x * z * tA + y * sA;\n    const b21 = y * z * tA - x * sA;\n    const b22 = z * z * tA + cA;\n\n    // rotation-specific matrix multiplication\n    this.matrix[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    this.matrix[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    this.matrix[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    this.matrix[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    this.matrix[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    this.matrix[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    this.matrix[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    this.matrix[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    this.matrix[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    this.matrix[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    this.matrix[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    this.matrix[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    return this;\n  }\n\n  /**\n   * Translates the current matrix by a given vector.\n   *\n   * This method applies a translation transformation to the current matrix.\n   * Translation moves the matrix by a specified amount along the x, y, and z axes.\n   * The input vector can be a 2D or 3D vector. If the z-component is not provided,\n   * it defaults to 0, meaning no translation along the z-axis.\n   *\n   * @param {Number[]} v - A vector representing the translation. It should be an array\n   *                       with two or three elements: [x, y, z]. The z-component is optional.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Translating a matrix by a 3D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.translate([10, 20, 30]); // Translate by 10 units along x, 20 along y, and 30 along z\n   * console.log(matrix.matrix);\n   *\n   * // Translating a matrix by a 2D vector\n   * matrix.translate([5, 15]); // Translate by 5 units along x and 15 along y\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.translate([10, 20, 30]);\n   *   console.log(\"After 3D Translation (10, 20, 30):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,10,20,30,1]\n   *\n   *   // Translate the matrix by a 2D vector\n   *   matrix.translate([5, 15]);\n   *   console.log(\"After 2D Translation (5, 15):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,15,35,30,1]\n   * }\n   * </code></div>\n   */\n  translate(v) {\n    const x = v[0],\n      y = v[1],\n      z = v[2] || 0;\n    this.matrix[12] += this.matrix[0] * x + this.matrix[4] * y + this.matrix[8] * z;\n    this.matrix[13] += this.matrix[1] * x + this.matrix[5] * y + this.matrix[9] * z;\n    this.matrix[14] += this.matrix[2] * x + this.matrix[6] * y + this.matrix[10] * z;\n    this.matrix[15] += this.matrix[3] * x + this.matrix[7] * y + this.matrix[11] * z;\n    return this;\n  }\n\n  /**\n   * Rotates the matrix around the X-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the X-axis. The rotation angle is specified in radians.\n   *\n   * Rotating around the X-axis means that the Y and Z coordinates of the matrix\n   * are transformed while the X coordinates remain unchanged. This is commonly\n   * used in 3D graphics to create animations or transformations along the X-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by.\n   *\n   * @example\n   * // Rotating a matrix around the X-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateX(Math.PI / 4); // Rotate 45 degrees around the X-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the X-axis\n   *   matrix.rotateX(Math.PI / 4);\n   *   console.log(\"After Rotation (X-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateX(a) {\n    this.rotate4x4(a, 1, 0, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Y-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Y-axis. The rotation is performed in 3D space, and the angle\n   * is specified in radians. Rotating around the Y-axis means that the X and Z\n   * coordinates of the matrix are transformed while the Y coordinates remain\n   * unchanged. This is commonly used in 3D graphics to create animations or\n   * transformations along the Y-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @example\n   * // Rotating a matrix around the Y-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Y-axis\n   *   matrix.rotateY(Math.PI / 4);\n   *   console.log(\"After Rotation (Y-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateY(a) {\n    this.rotate4x4(a, 0, 1, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Z-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Z-axis. The rotation is performed in a 4x4 matrix context, which\n   * is commonly used in 3D graphics to handle transformations. Rotating around\n   * the Z-axis means that the X and Y coordinates of the matrix are transformed\n   * while the Z coordinates remain unchanged.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Rotating a matrix around the Z-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateZ(Math.PI / 4); // Rotate 45 degrees around the Z-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Z-axis\n   *   matrix.rotateZ(Math.PI / 4);\n   *   console.log(\"After Rotation (Z-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateZ(a) {\n    this.rotate4x4(a, 0, 0, 1);\n  }\n\n  /**\n   * Sets the perspective projection matrix.\n   *\n   * This method modifies the current matrix to represent a perspective projection.\n   * Perspective projection is commonly used in 3D graphics to simulate the effect\n   * of objects appearing smaller as they move further away from the camera.\n   *\n   * The perspective matrix is defined by the field of view (fovy), aspect ratio,\n   * and the near and far clipping planes. The near and far clipping planes define\n   * the range of depth that will be rendered, with anything outside this range\n   * being clipped.\n   *\n   * @param {Number} fovy - The field of view in the y direction, in radians.\n   * @param {Number} aspect - The aspect ratio of the viewport (width / height).\n   * @param {Number} near - The distance to the near clipping plane. Must be greater than 0.\n   * @param {Number} far - The distance to the far clipping plane. Must be greater than the near value.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Setting a perspective projection matrix\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.perspective(Math.PI / 4, 1.5, 0.1, 100); // Set perspective projection\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Set a perspective projection with a 45-degree field of view,\n   *   // an aspect ratio of 1.5, and near/far clipping planes at 0.1 and 100.\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Perspective Matrix:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  perspective(fovy, aspect, near, far) {\n    const f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n    this.matrix[0] = f / aspect;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = f;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = (far + near) * nf;\n    this.matrix[11] = -1;\n    this.matrix[12] = 0;\n    this.matrix[13] = 0;\n    this.matrix[14] = 2 * far * near * nf;\n    this.matrix[15] = 0;\n    return this;\n  }\n\n  /**\n   * Sets this matrix to an orthographic projection matrix.\n   *\n   * An orthographic projection matrix is used to create a 2D rendering\n   * of a 3D scene by projecting points onto a plane without perspective\n   * distortion. This method modifies the current matrix to represent\n   * the orthographic projection defined by the given parameters.\n   *\n   * @param {number} left - The coordinate for the left vertical clipping plane.\n   * @param {number} right - The coordinate for the right vertical clipping plane.\n   * @param {number} bottom - The coordinate for the bottom horizontal clipping plane.\n   * @param {number} top - The coordinate for the top horizontal clipping plane.\n   * @param {number} near - The distance to the near depth clipping plane. Must be positive.\n   * @param {number} far - The distance to the far depth clipping plane. Must be positive.\n   * @chainable\n   * @returns {Matrix} The current matrix instance, updated with the orthographic projection.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * // Example using p5.js to demonstrate orthographic projection\n   * function setup() {\n   *  let orthoMatrix = new p5.Matrix(4);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1\n   *  orthoMatrix.ortho(-200, 200, -200, 200, 0.1, 1000);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [24 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *  applyMatrix(\n   *     orthoMatrix.mat4[0], orthoMatrix.mat4[1], orthoMatrix.mat4[2], orthoMatrix.mat4[3],\n   *     orthoMatrix.mat4[4], orthoMatrix.mat4[5], orthoMatrix.mat4[6], orthoMatrix.mat4[7],\n   *     orthoMatrix.mat4[8], orthoMatrix.mat4[9], orthoMatrix.mat4[10], orthoMatrix.mat4[11],\n   *     orthoMatrix.mat4[12], orthoMatrix.mat4[13], orthoMatrix.mat4[14], orthoMatrix.mat4[15]\n   *  );\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [31 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *   }\n   * </code></div>\n   *\n   */\n  ortho(left, right, bottom, top, near, far) {\n    const lr = 1 / (left - right),\n      bt = 1 / (bottom - top),\n      nf = 1 / (near - far);\n    this.matrix[0] = -2 * lr;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = -2 * bt;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = 2 * nf;\n    this.matrix[11] = 0;\n    this.matrix[12] = (left + right) * lr;\n    this.matrix[13] = (top + bottom) * bt;\n    this.matrix[14] = (far + near) * nf;\n    this.matrix[15] = 1;\n    return this;\n  }\n\n  /**\n   * Applies a matrix to a vector with x, y, z, w components and returns the result as an array.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, w) and computes the resulting vector.\n   * It is commonly used in 3D graphics for transformations such as translation, rotation, scaling, and perspective projection.\n   *\n   * The resulting vector is returned as an array of four numbers, representing the transformed x, y, z, and w components.\n   *\n   * @param {Number} x - The x component of the vector.\n   * @param {Number} y - The y component of the vector.\n   * @param {Number} z - The z component of the vector.\n   * @param {Number} w - The w component of the vector.\n   * @returns {Number[]} An array containing the transformed [x, y, z, w] components.\n   *\n   * @example\n   * // Applying a matrix to a 4D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const result = matrix.multiplyVec4(1, 2, 3, 1); // Transform the vector [1, 2, 3, 1]\n   * console.log(result); // Output: [1, 2, 3, 1] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Apply the matrix to a 4D vector\n   *   const result = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector:\", result); // Output: [1, 2, 3, 1]\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const transformedResult = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector after Translation:\", transformedResult); // Output: [6, 7, 8, 1]\n   * }\n   * </code></div>\n   */\n  multiplyVec4(x, y, z, w) {\n    const result = new Array(4);\n    const m = this.matrix;\n    result[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    result[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    result[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    result[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return result;\n  }\n\n  /**\n   * Applies a matrix to a vector. The fourth component is set to 1.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance.\n   *\n   * This is useful for applying transformations such as translation,\n   * rotation, scaling, or perspective projection to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyPoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point\n   *   const transformedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Transformed Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const translatedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Translated Point:\", translatedPoint.toString()); // Output: [6, 7, 8]\n   * }\n   * </code></div>\n   */\n  multiplyPoint({\n    x,\n    y,\n    z\n  }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 1.\n   * Returns the result of dividing the 1st to 3rd components\n   * of the result by the 4th component as a vector.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is normalized by dividing its x, y, and z components by the w component.\n   * This is useful for applying transformations such as perspective projection\n   * to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed and normalized point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point and normalizing it\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point and normalize it\n   *   const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Transformed and Normalized Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a perspective transformation)\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Modified Matrix (Perspective):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const perspectivePoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Point after Perspective Transformation:\", perspectivePoint.toString());\n   * }\n   * </code></div>\n   */\n  multiplyAndNormalizePoint({\n    x,\n    y,\n    z\n  }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    array[0] /= array[3];\n    array[1] /= array[3];\n    array[2] /= array[3];\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 0.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 0),\n   * effectively transforming the direction vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance. This is particularly useful\n   * for transforming direction vectors (e.g., normals) without applying translation.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed direction.\n   *\n   * @example\n   * // Applying a matrix to a direction vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const direction = new p5.Vector(1, 0, 0); // Define a direction vector\n   * const transformedDirection = matrix.multiplyDirection(direction);\n   * console.log(transformedDirection.toString()); // Output: [1, 0, 0] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a direction vector\n   *   const direction = new p5.Vector(1, 0, 0);\n   *   console.log(\"Original Direction:\", direction.toString());\n   *\n   *   // Apply the matrix to the direction vector\n   *   const transformedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Transformed Direction:\", transformedDirection.toString());\n   *\n   *   // Modify the matrix (e.g., apply a rotation)\n   *   matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   *   console.log(\"Modified Matrix (Rotation):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same direction vector\n   *   const rotatedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Rotated Direction:\", rotatedDirection.toString()); // Output: Rotated vector\n   * }\n   * </code></div>\n   */\n  multiplyDirection({\n    x,\n    y,\n    z\n  }) {\n    const array = this.multiplyVec4(x, y, z, 0);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying. This function is only for 3x3 matrices.\n   * that vector by this matrix from the left.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * This is useful for operations such as transforming points or directions\n   * in 2D or 3D space using a 3x3 transformation matrix.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec3(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 3x3 matrix\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a vector\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output: [1, 2, 3]\n   *\n   *   // Apply the matrix to the vector\n   *   const transformedVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString()); // Output: [30, 36, 42]\n   *\n   *   // Modify the matrix (e.g., apply a scaling transformation)\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Modified Matrix (Scaling):\", matrix.matrix); // Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const scaledVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Scaled Vector:\", scaledVector.toString()); // Output: [60, 72, 84]\n   * }\n   * </code></div>\n   */\n  multiplyVec3(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    target.x = this.row(0).dot(multVector);\n    target.y = this.row(1).dot(multVector);\n    target.z = this.row(2).dot(multVector);\n    return target;\n  }\n\n  // ====================\n  // PRIVATE\n  /**\n   * Creates identity matrix\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   */\n  #createIdentityMatrix(dimension) {\n    // This it to prevent loops in the most common 3x3 and 4x4 cases\n    // TODO: check performance if it actually helps\n    if (dimension === 3) return new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    if (dimension === 4) return new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    const identityMatrix = new GLMAT_ARRAY_TYPE(dimension * dimension).fill(0);\n    for (let i = 0; i < dimension; i++) {\n      identityMatrix[i * dimension + i] = 1;\n    }\n    return identityMatrix;\n  }\n\n  /**\n   * Multiplies the current 4x4 matrix with another 4x4 matrix.\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   * @param {number[]} _src - A 16-element array representing the 4x4 matrix to multiply with.\n   *\n   * @returns {this} The current instance with the updated matrix.\n   *\n   * @example\n   * // Assuming `matrix` is an instance of the Matrix class\n   * const srcMatrix = [\n   *   1, 0, 0, 0,\n   *   0, 1, 0, 0,\n   *   0, 0, 1, 0,\n   *   0, 0, 0, 1\n   * ];\n   * matrix.#mult4x4(srcMatrix);\n   */\n  #mult4x4(_src) {\n    // each row is used for the multiplier\n    let b0 = this.matrix[0],\n      b1 = this.matrix[1],\n      b2 = this.matrix[2],\n      b3 = this.matrix[3];\n    this.matrix[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[2] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[3] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n    b0 = this.matrix[4];\n    b1 = this.matrix[5];\n    b2 = this.matrix[6];\n    b3 = this.matrix[7];\n    this.matrix[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[6] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[7] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n    b0 = this.matrix[8];\n    b1 = this.matrix[9];\n    b2 = this.matrix[10];\n    b3 = this.matrix[11];\n    this.matrix[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[10] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[11] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n    b0 = this.matrix[12];\n    b1 = this.matrix[13];\n    b2 = this.matrix[14];\n    b3 = this.matrix[15];\n    this.matrix[12] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[13] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[14] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[15] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n    return this;\n  }\n\n  /**\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #multNxN(multMatrix) {\n    if (multMatrix.length !== this.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to multiply.\");\n    }\n    const result = new GLMAT_ARRAY_TYPE(this.matrix.length).fill(0);\n    for (let i = 0; i < this.#sqDimention; i++) {\n      for (let j = 0; j < this.#sqDimention; j++) {\n        for (let k = 0; k < this.#sqDimention; k++) {\n          result[i * this.#sqDimention + j] += this.matrix[i * this.#sqDimention + k] * multMatrix[k * this.#sqDimention + j];\n        }\n      }\n    }\n    this.matrix = result;\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * multiply two mat3s. It is an operation to multiply the 3x3 matrix of\n   * the argument from the right. Arguments can be a 3x3 p5.Matrix,\n   * a Float32Array of length 9, or a javascript array of length 9.\n   * In addition, it can also be done by enumerating 9 numbers.\n   *\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #mult3x3(_src) {\n    // each row is used for the multiplier\n    let b0 = this.mat3[0];\n    let b1 = this.mat3[1];\n    let b2 = this.mat3[2];\n    this.mat3[0] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[1] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[2] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n    b0 = this.mat3[3];\n    b1 = this.mat3[4];\n    b2 = this.mat3[5];\n    this.mat3[3] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[4] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[5] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n    b0 = this.mat3[6];\n    b1 = this.mat3[7];\n    b2 = this.mat3[8];\n    this.mat3[6] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[7] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[8] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n    return this;\n  }\n\n  /**\n   * Transposes a square matrix in place.\n   * This method swaps the rows and columns of the matrix, effectively flipping it over its diagonal.\n   *\n   * @private\n   * @returns {Matrix} The current instance of the Matrix, with the transposed values.\n   */\n  #transposeNxN() {\n    const n = this.#sqDimention;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        this.matrix[i * n + j] = this.matrix[j * n + i];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * transpose according to a given matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a  the matrix to be\n   *                                               based on to transpose\n   * @private\n   * @chainable\n   */\n  #transpose4x4(a) {\n    console.log(\"====> 4x4\");\n    let a01, a02, a03, a12, a13, a23;\n    if (a instanceof Matrix) {\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a23 = a.matrix[11];\n      this.matrix[0] = a.matrix[0];\n      this.matrix[1] = a.matrix[4];\n      this.matrix[2] = a.matrix[8];\n      this.matrix[3] = a.matrix[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a.matrix[5];\n      this.matrix[6] = a.matrix[9];\n      this.matrix[7] = a.matrix[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a.matrix[10];\n      this.matrix[11] = a.matrix[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a12 = a[6];\n      a13 = a[7];\n      a23 = a[11];\n      this.matrix[0] = a[0];\n      this.matrix[1] = a[4];\n      this.matrix[2] = a[8];\n      this.matrix[3] = a[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a[5];\n      this.matrix[6] = a[9];\n      this.matrix[7] = a[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a[10];\n      this.matrix[11] = a[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a[15];\n    }\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * transposes a 3×3 p5.Matrix by a mat3\n   * If there is an array of arguments, the matrix obtained by transposing\n   * the 3x3 matrix generated based on that array is set.\n   * If no arguments, it transposes itself and returns it.\n   *\n   * @param  {Number[]} mat3 1-dimensional array\n   * @private\n   * @chainable\n   */\n  #transpose3x3(mat3) {\n    if (mat3 === undefined) {\n      mat3 = this.mat3;\n    }\n    const a01 = mat3[1];\n    const a02 = mat3[2];\n    const a12 = mat3[5];\n    this.mat3[0] = mat3[0];\n    this.mat3[1] = mat3[3];\n    this.mat3[2] = mat3[6];\n    this.mat3[3] = a01;\n    this.mat3[4] = mat3[4];\n    this.mat3[5] = mat3[7];\n    this.mat3[6] = a02;\n    this.mat3[7] = a12;\n    this.mat3[8] = mat3[8];\n    return this;\n  }\n\n  /**\n   * Only 4x4 becasuse determinant is only 4x4 currently\n   * invert  matrix according to a give matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a   the matrix to be\n   *                                                based on to invert\n   * @private\n   * @chainable\n   */\n  #invert4x4(a) {\n    let a00, a01, a02, a03, a10, a11, a12, a13;\n    let a20, a21, a22, a23, a30, a31, a32, a33;\n    if (a instanceof Matrix) {\n      a00 = a.matrix[0];\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a10 = a.matrix[4];\n      a11 = a.matrix[5];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a20 = a.matrix[8];\n      a21 = a.matrix[9];\n      a22 = a.matrix[10];\n      a23 = a.matrix[11];\n      a30 = a.matrix[12];\n      a31 = a.matrix[13];\n      a32 = a.matrix[14];\n      a33 = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a00 = a[0];\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a10 = a[4];\n      a11 = a[5];\n      a12 = a[6];\n      a13 = a[7];\n      a20 = a[8];\n      a21 = a[9];\n      a22 = a[10];\n      a23 = a[11];\n      a30 = a[12];\n      a31 = a[13];\n      a32 = a[14];\n      a33 = a[15];\n    }\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n    this.matrix[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    this.matrix[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    this.matrix[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    this.matrix[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    this.matrix[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    this.matrix[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    this.matrix[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    this.matrix[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    this.matrix[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    this.matrix[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    this.matrix[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    this.matrix[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    this.matrix[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    this.matrix[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    this.matrix[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    this.matrix[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return this;\n  }\n\n  /**\n   * Inverts a 3×3 matrix\n   * @chainable\n   * @private\n   */\n  #invert3x3() {\n    const a00 = this.mat3[0];\n    const a01 = this.mat3[1];\n    const a02 = this.mat3[2];\n    const a10 = this.mat3[3];\n    const a11 = this.mat3[4];\n    const a12 = this.mat3[5];\n    const a20 = this.mat3[6];\n    const a21 = this.mat3[7];\n    const a22 = this.mat3[8];\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n    this.mat3[0] = b01 * det;\n    this.mat3[1] = (-a22 * a01 + a02 * a21) * det;\n    this.mat3[2] = (a12 * a01 - a02 * a11) * det;\n    this.mat3[3] = b11 * det;\n    this.mat3[4] = (a22 * a00 - a02 * a20) * det;\n    this.mat3[5] = (-a12 * a00 + a02 * a10) * det;\n    this.mat3[6] = b21 * det;\n    this.mat3[7] = (-a21 * a00 + a01 * a20) * det;\n    this.mat3[8] = (a11 * a00 - a01 * a10) * det;\n    return this;\n  }\n\n  /**\n   * inspired by Toji's mat4 determinant\n   * @return {Number} Determinant of our 4×4 matrix\n   * @private\n   */\n  #determinant4x4() {\n    if (this.#sqDimention !== 4) {\n      throw new Error(\"Determinant is only implemented for 4x4 matrices. We are working on it.\");\n    }\n    const d00 = this.matrix[0] * this.matrix[5] - this.matrix[1] * this.matrix[4],\n      d01 = this.matrix[0] * this.matrix[6] - this.matrix[2] * this.matrix[4],\n      d02 = this.matrix[0] * this.matrix[7] - this.matrix[3] * this.matrix[4],\n      d03 = this.matrix[1] * this.matrix[6] - this.matrix[2] * this.matrix[5],\n      d04 = this.matrix[1] * this.matrix[7] - this.matrix[3] * this.matrix[5],\n      d05 = this.matrix[2] * this.matrix[7] - this.matrix[3] * this.matrix[6],\n      d06 = this.matrix[8] * this.matrix[13] - this.matrix[9] * this.matrix[12],\n      d07 = this.matrix[8] * this.matrix[14] - this.matrix[10] * this.matrix[12],\n      d08 = this.matrix[8] * this.matrix[15] - this.matrix[11] * this.matrix[12],\n      d09 = this.matrix[9] * this.matrix[14] - this.matrix[10] * this.matrix[13],\n      d10 = this.matrix[9] * this.matrix[15] - this.matrix[11] * this.matrix[13],\n      d11 = this.matrix[10] * this.matrix[15] - this.matrix[11] * this.matrix[14];\n\n    // Calculate the determinant\n    return d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06;\n  }\n\n  /**\n   * PRIVATE\n   */\n  // matrix methods adapted from:\n  // https://developer.mozilla.org/en-US/docs/Web/WebGL/\n  // gluPerspective\n  //\n  // function _makePerspective(fovy, aspect, znear, zfar){\n  //    const ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n  //    const ymin = -ymax;\n  //    const xmin = ymin * aspect;\n  //    const xmax = ymax * aspect;\n  //    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n  //  }\n\n  ////\n  //// glFrustum\n  ////\n  //function _makeFrustum(left, right, bottom, top, znear, zfar){\n  //  const X = 2*znear/(right-left);\n  //  const Y = 2*znear/(top-bottom);\n  //  const A = (right+left)/(right-left);\n  //  const B = (top+bottom)/(top-bottom);\n  //  const C = -(zfar+znear)/(zfar-znear);\n  //  const D = -2*zfar*znear/(zfar-znear);\n  //  const frustrumMatrix =[\n  //  X, 0, A, 0,\n  //  0, Y, B, 0,\n  //  0, 0, C, D,\n  //  0, 0, -1, 0\n  //];\n  //return frustrumMatrix;\n  // }\n\n  // function _setMVPMatrices(){\n  ////an identity matrix\n  ////@TODO use the p5.Matrix class to abstract away our MV matrices and\n  ///other math\n  //const _mvMatrix =\n  //[\n  //  1.0,0.0,0.0,0.0,\n  //  0.0,1.0,0.0,0.0,\n  //  0.0,0.0,1.0,0.0,\n  //  0.0,0.0,0.0,1.0\n  //];\n}\nexport { GLMAT_ARRAY_TYPE, Matrix, isMatrixArray };","map":{"version":3,"names":["Vector","MatrixInterface","isPerfectSquare","arr","sqDimention","Math","sqrt","Array","from","length","Error","GLMAT_ARRAY_TYPE","isMatrixArray","x","isArray","Float32Array","Matrix","matrix","constructor","args","Number","createIdentityMatrix","mat3","undefined","mat4","add","i","setElement","index","value","reset","set","inMatrix","refArray","arguments","p5","_friendlyError","get","copy","clone","diagonal","push","row","columnIndex","columnVector","column","rowIndex","rowVector","transpose","a","transpose4x4","transpose3x3","transposeNxN","mult","multMatrix","_src","mult4x4","mult3x3","multNxN","multiplyVec","multVector","target","values","dot","invert","invert4x4","invert3x3","createSubMatrix3x3","result","inverseTranspose4x4","inverse","apply","m0","m4","m8","m12","m1","m5","m9","m13","m2","m6","m10","m14","m3","m7","m11","m15","scale","y","z","rotate4x4","len","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","sA","sin","cA","cos","tA","b00","b01","b02","b10","b11","b12","b20","b21","b22","translate","v","rotateX","rotateY","rotateZ","perspective","fovy","aspect","near","far","f","tan","nf","ortho","left","right","bottom","top","lr","bt","multiplyVec4","w","m","multiplyPoint","array","multiplyAndNormalizePoint","multiplyDirection","multiplyVec3","#createIdentityMatrix","dimension","identityMatrix","fill","#mult4x4","b0","b1","b2","b3","#multNxN","j","k","#mult3x3","#transposeNxN","n","#transpose4x4","console","log","#transpose3x3","#invert4x4","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","det","#invert3x3","determinant4x4","#determinant4x4","d00","d01","d02","d03","d04","d05","d06","d07","d08","d09","d10","d11"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/Matrices/Matrix.js"],"sourcesContent":["import { Vector } from '../p5.Vector.js';\nimport { MatrixInterface } from './MatrixInterface.js';\nimport '../../constants-BRcElHU3.js';\n\n/**\n * @module Math\n */\n\n\nconst isPerfectSquare = (arr) => {\n  const sqDimention = Math.sqrt(Array.from(arr).length);\n  if (sqDimention % 1 !== 0) {\n    throw new Error(\"Array length must be a perfect square.\");\n  }\n  return true;\n};\n\nlet GLMAT_ARRAY_TYPE = Array;\nlet isMatrixArray = (x) => Array.isArray(x);\nif (typeof Float32Array !== \"undefined\") {\n  GLMAT_ARRAY_TYPE = Float32Array;\n  isMatrixArray = (x) => Array.isArray(x) || x instanceof Float32Array;\n}\n\nclass Matrix extends MatrixInterface {\n  matrix;\n  #sqDimention;\n\n  constructor(...args) {\n    super(...args);\n    // This is default behavior when object\n    // instantiated using createMatrix()\n    if (isMatrixArray(args[0]) && isPerfectSquare(args[0])) {\n      const sqDimention = Math.sqrt(Array.from(args[0]).length);\n      this.#sqDimention = sqDimention;\n      this.matrix = GLMAT_ARRAY_TYPE.from(args[0]);\n    } else if (typeof args[0] === \"number\") {\n      this.#sqDimention = Number(args[0]);\n      this.matrix = this.#createIdentityMatrix(args[0]);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the 3x3 matrix if the dimensions are 3x3, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 3x3.\n   * If the matrix is not 3x3, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 3x3 matrix or `undefined` if the matrix is not 3x3.\n   */\n  get mat3() {\n    if (this.#sqDimention === 3) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Returns the 4x4 matrix if the dimensions are 4x4, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 4x4.\n   * If the matrix is not 4x4, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 4x4 matrix or `undefined` if the matrix is not 4x4.\n   */\n  get mat4() {\n    if (this.#sqDimention === 4) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Adds the corresponding elements of the given matrix to this matrix, if the dimentions are the same.\n   *\n   * @param {Matrix} matrix - The matrix to add to this matrix. It must have the same dimensions as this matrix.\n   * @returns {Matrix} The resulting matrix after addition.\n   * @throws {Error} If the matrices do not have the same dimensions.\n   *\n   * @example\n   * const matrix1 = new p5.Matrix([1, 2, 3]);\n   * const matrix2 = new p5.Matrix([4, 5, 6]);\n   * matrix1.add(matrix2); // matrix1 is now [5, 7, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   *   const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   *   matrix1.add(matrix2);\n   *   console.log(matrix1.matrix); // Output: [6, 8, 10, 12]\n   * }\n   * </code></div>\n   */\n  add(matrix) {\n    if (this.matrix.length !== matrix.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to add.\");\n    }\n    for (let i = 0; i < this.matrix.length; i++) {\n      this.matrix[i] += matrix.matrix[i];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the value of a specific element in the matrix in column-major order.\n   *\n   * A matrix is stored in column-major order, meaning elements are arranged column by column.\n   * This function allows you to update or change the value of a specific element\n   * in the matrix by specifying its index in the column-major order and the new value.\n   *\n   * Parameters:\n   * - `index` (number): The position in the matrix where the value should be set.\n   *   Indices start from 0 and follow column-major order.\n   * - `value` (any): The new value you want to assign to the specified element.\n   *\n   * Example:\n   * If you have the following 3x3 matrix stored in column-major order:\n   * ```\n   * [\n   *   1, 4, 7,  // Column 1\n   *   2, 5, 8,  // Column 2\n   *   3, 6, 9   // Column 3\n   * ]\n   * ```\n   * Calling `setElement(4, 10)` will update the element at index 4\n   * (which corresponds to row 2, column 2 in row-major order) to `10`.\n   * The updated matrix will look like this:\n   * ```\n   * [\n   *   1, 4, 7,\n   *   2, 10, 8,\n   *   3, 6, 9\n   * ]\n   * ```\n   *\n   * This function is useful for modifying specific parts of the matrix without\n   * having to recreate the entire structure.\n   *\n   * @param {Number} index - The position in the matrix where the value should be set.\n   *                         Must be a non-negative integer less than the length of the matrix.\n   * @param {Number} value - The new value to be assigned to the specified position in the matrix.\n   * @returns {Matrix} The current instance of the Matrix, allowing for method chaining.\n   *\n   * @example\n   * // Assuming matrix is an instance of Matrix with initial values [1, 2, 3, 4] matrix.setElement(2, 99);\n   * // Now the matrix values are [1, 2, 99, 4]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   matrix.setElement(2, 99);\n   *   console.log(matrix.matrix); // Output: [1, 2, 99, 4]\n   * }\n   * </code></div>\n   */\n  setElement(index, value) {\n    if (index >= 0 && index < this.matrix.length) {\n      this.matrix[index] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Resets the current matrix to an identity matrix.\n   *\n   * This method replaces the current matrix with an identity matrix of the same dimensions.\n   * An identity matrix is a square matrix with ones on the main diagonal and zeros elsewhere.\n   * This is useful for resetting transformations or starting fresh with a clean matrix.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Resetting a 4x4 matrix to an identity matrix\n   * const matrix = new p5.Matrix(4);\n   * matrix.scale(2, 2, 2); // Apply some transformations\n   * console.log(matrix.matrix); // Output: Transformed matrix\n   * matrix.reset(); // Reset to identity matrix\n   * console.log(matrix.matrix); // Output: Identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4);\n   *   matrix.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Before reset:\", matrix.matrix);\n   *   matrix.reset(); // Reset to identity matrix\n   *   console.log(\"After reset:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  reset() {\n    this.matrix = this.#createIdentityMatrix(this.#sqDimention);\n    return this;\n  }\n\n  /**\n   * Replace the entire contents of a NxN matrix.\n   *\n   * This method allows you to replace the values of the current matrix with\n   * those from another matrix, an array, or individual arguments. The input\n   * can be a `Matrix` instance, an array of numbers, or individual numbers\n   * that match the dimensions of the current matrix. The values are copied\n   * without referencing the source object, ensuring that the original input\n   * remains unchanged.\n   *\n   * If the input dimensions do not match the current matrix, an error will\n   * be thrown to ensure consistency.\n   *\n   * @param {Matrix|Float32Array|Number[]} [inMatrix] - The input matrix, array,\n   * or individual numbers to replace the current matrix values.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Replacing the contents of a matrix with another matrix\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   * const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   * matrix1.set(matrix2);\n   * console.log(matrix1.matrix); // Output: [5, 6, 7, 8]\n   *\n   * // Replacing the contents of a matrix with an array\n   * const matrix = new p5.Matrix([1, 2, 3, 4]);\n   * matrix.set([9, 10, 11, 12]);\n   * console.log(matrix.matrix); // Output: [9, 10, 11, 12]\n   *\n   * // Replacing the contents of a matrix with individual numbers\n   * const matrix = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix.set(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n   * console.log(matrix.matrix); // Output: [1, 2, 3, ..., 16]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   console.log(\"Before set:\", matrix.matrix);\n   *   matrix.set([5, 6, 7, 8]);\n   *   console.log(\"After set:\", matrix.matrix); // Output: [5, 6, 7, 8]\n   * }\n   * </code></div>\n   */\n  set(inMatrix) {\n    let refArray = GLMAT_ARRAY_TYPE.from([...arguments]);\n    if (inMatrix instanceof Matrix) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix.matrix);\n    } else if (isMatrixArray(inMatrix)) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix);\n    }\n    if (refArray.length !== this.matrix.length) {\n      p5._friendlyError(\n        `Expected same dimensions values but received different ${refArray.length}.`,\n        \"p5.Matrix.set\"\n      );\n      return this;\n    }\n    this.matrix = refArray;\n    return this;\n  }\n\n  /**\n   * Gets a copy of the matrix, returns a p5.Matrix object.\n   *\n   * This method creates a new instance of the `Matrix` class and copies the\n   * current matrix values into it. The returned matrix is independent of the\n   * original, meaning changes to the copy will not affect the original matrix.\n   *\n   * This is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate.\n   *\n   * @return {p5.Matrix} A new instance of the `Matrix` class containing the\n   *                     same values as the original matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4]);\n   *   const copiedMatrix = originalMatrix.get();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 3, 4]\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(2, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 99, 4]\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   * }\n   * </code></div>\n   */\n  get() {\n    return new Matrix(this.matrix); // TODO: Pass p5\n  }\n\n  /**\n   * Return a copy of this matrix.\n   * If this matrix is 4x4, a 4x4 matrix with exactly the same entries will be\n   * generated. The same is true if this matrix is 3x3 or any NxN matrix.\n   *\n   * This method is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate. The returned matrix is independent\n   * of the original, meaning changes to the copy will not affect the original matrix.\n   *\n   * @return {p5.Matrix}   The result matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const copiedMatrix = originalMatrix.copy();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix);\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  copy() {\n    return new Matrix(this.matrix);\n  }\n\n  /**\n   * Creates a copy of the current matrix instance.\n   * This method is useful when you need a duplicate of the matrix\n   * without modifying the original one.\n   *\n   * @returns {Matrix} A new matrix instance that is a copy of the current matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const clonedMatrix = originalMatrix.clone();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Cloned Matrix:\", clonedMatrix.matrix);\n   *\n   *   // Modify the cloned matrix\n   *   clonedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Cloned Matrix:\", clonedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  clone() {\n    return this.copy();\n  }\n\n  /**\n   * Returns the diagonal elements of the matrix in the form of an array.\n   * A NxN matrix will return an array of length N.\n   *\n   * This method extracts the diagonal elements of the matrix, which are the\n   * elements where the row index equals the column index. For example, in a\n   * 3x3 matrix:\n   * ```\n   * [\n   *   1, 2, 3,\n   *   4, 5, 6,\n   *   7, 8, 9\n   * ]\n   * ```\n   * The diagonal elements are [1, 5, 9].\n   *\n   * This is useful for operations that require the main diagonal of a matrix,\n   * such as calculating the trace of a matrix or verifying if a matrix is diagonal.\n   *\n   * @return {Number[]} An array obtained by arranging the diagonal elements\n   *                    of the matrix in ascending order of index.\n   *\n   * @example\n   * // Extracting the diagonal elements of a matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const diagonal = matrix.diagonal(); // [1, 5, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const diagonal = matrix.diagonal();\n   *   console.log(\"Diagonal elements:\", diagonal); // Output: [1, 5, 9]\n   * }\n   * </code></div>\n   */\n  diagonal() {\n    const diagonal = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      diagonal.push(this.matrix[i * (this.#sqDimention + 1)]);\n    }\n    return diagonal;\n  }\n\n  /**\n   * This function is only for 3x3 matrices A function that returns a row vector of a NxN matrix.\n   *\n   * This method extracts a specific row from the matrix and returns it as a `p5.Vector`.\n   * The row is determined by the `columnIndex` parameter, which specifies the column\n   * index of the matrix. This is useful for operations that require working with\n   * individual rows of a matrix, such as row transformations or dot products.\n   *\n   * @param {Number} columnIndex - The index of the column to extract as a row vector.\n   *                               Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted row of the matrix.\n   *\n   * @example\n   * // Extracting a row vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const rowVector = matrix.row(1); // Returns a vector [2, 5, 8]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const rowVector = matrix.row(1); // Extract the second row (index 1)\n   *   console.log(\"Row Vector:\", rowVector.toString()); // Output: Row Vector: [2, 5, 8]\n   * }\n   * </code></div>\n   */\n  row(columnIndex) {\n    const columnVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      columnVector.push(this.matrix[i * this.#sqDimention + columnIndex]);\n    }\n    return new Vector(...columnVector);\n  }\n\n  /**\n   * A function that returns a column vector of a NxN matrix.\n   *\n   * This method extracts a specific column from the matrix and returns it as a `p5.Vector`.\n   * The column is determined by the `rowIndex` parameter, which specifies the row index\n   * of the matrix. This is useful for operations that require working with individual\n   * columns of a matrix, such as column transformations or dot products.\n   *\n   * @param {Number} rowIndex - The index of the row to extract as a column vector.\n   *                             Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted column of the matrix.\n   *\n   * @example\n   * // Extracting a column vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const columnVector = matrix.column(1); // Returns a vector [4, 5, 6]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const columnVector = matrix.column(1); // Extract the second column (index 1)\n   *   console.log(\"Column Vector:\", columnVector.toString()); // Output: Column Vector: [4, 5, 6]\n   * }\n   * </code></div>\n   */\n  column(rowIndex) {\n    const rowVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      rowVector.push(this.matrix[rowIndex * this.#sqDimention + i]);\n    }\n    return new Vector(...rowVector);\n  }\n\n  /**\n   * Transposes the given matrix `a` based on the square dimension of the matrix.\n   *\n   * This method rearranges the elements of the matrix such that the rows become columns\n   * and the columns become rows. It handles matrices of different dimensions (4x4, 3x3, NxN)\n   * by delegating to specific transpose methods for each case.\n   *\n   * If no argument is provided, the method transposes the current matrix instance.\n   * If an argument is provided, it transposes the given matrix `a` and updates the current matrix.\n   *\n   * @param {Array} [a] - The matrix to be transposed. It should be a 2D array where each sub-array represents a row.\n   *                      If omitted, the current matrix instance is transposed.\n   * @returns {Matrix} - The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Transposing a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * matrix.transpose();\n   * console.log(matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   *\n   * // Transposing a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4);\n   * matrix4x4.transpose();\n   * console.log(matrix4x4.matrix); // Output: Transposed 4x4 identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Before transpose:\", matrix.matrix);\n   *   matrix.transpose();\n   *   console.log(\"After transpose:\", matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   * }\n   * </code></div>\n   */\n  transpose(a) {\n    if (this.#sqDimention === 4) {\n      return this.#transpose4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#transpose3x3(a);\n    } else {\n      return this.#transposeNxN(a);\n    }\n  }\n\n  /**\n   * Multiplies the current matrix with another matrix or matrix-like array.\n   *\n   * This method supports several types of input:\n   * - Another Matrix instance\n   * - A matrix-like array (must be a perfect square, e.g., 4x4 or 3x3)\n   * - Multiple arguments that form a perfect square matrix\n   *\n   * If the input is the same as the current matrix, a copy is made to avoid modifying the original matrix.\n   *\n   * The method determines the appropriate multiplication strategy based on the dimensions of the current matrix\n   * and the input matrix. It supports 3x3, 4x4, and NxN matrices.\n   *\n   * @param {Matrix|Array|...number} multMatrix - The matrix or matrix-like array to multiply with.\n   * @returns {Matrix|undefined} The resulting matrix after multiplication, or undefined if the input is invalid.\n   * @chainable\n   *\n   * @example\n   * // Multiplying two 3x3 matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.mult(matrix2);\n   * console.log(matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   *\n   * // Multiplying a 4x4 matrix with another 4x4 matrix\n   * const matrix4x4_1 = new p5.Matrix(4); // Identity matrix\n   * const matrix4x4_2 = new p5.Matrix([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]);\n   * matrix4x4_1.mult(matrix4x4_2);\n   * console.log(matrix4x4_1.matrix); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   console.log(\"Before multiplication:\", matrix1.matrix);\n   *   matrix1.mult(matrix2);\n   *   console.log(\"After multiplication:\", matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   * }\n   * </code></div>\n   */\n  mult(multMatrix) {\n    let _src;\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix) && isPerfectSquare(multMatrix)) {\n      _src = multMatrix;\n    } else if (isPerfectSquare(arguments)) {\n      _src = Array.from(arguments);\n    } else ;\n    if (this.#sqDimention === 4 && _src.length === 16) {\n      return this.#mult4x4(_src);\n    } else if (this.#sqDimention === 3 && _src.length === 9) {\n      return this.#mult3x3(_src);\n    } else {\n      return this.#multNxN(_src);\n    }\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying to that vector by this matrix from left. This function is only for 3x3 matrices.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const result = matrix.multiplyVec(vector);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output : Original Vector: [1, 2, 3]\n   *   console.log(\"Transformed Vector:\", result.toString()); // Output : Transformed Vector: [30, 36, 42]\n   * }\n   * </code></div>\n   */\n  multiplyVec(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    for (let i = 0; i < this.#sqDimention; i++) {\n      target.values[i] = this.row(i).dot(multVector);\n    }\n    return target;\n  }\n\n  /**\n   * Inverts a given matrix.\n   *\n   * This method inverts a matrix based on its dimensions. Currently, it supports\n   * 3x3 and 4x4 matrices. If the matrix dimension is greater than 4, an error is thrown.\n   *\n   * For 4x4 matrices, it uses a specialized algorithm to compute the inverse.\n   * For 3x3 matrices, it uses a different algorithm optimized for smaller matrices.\n   *\n   * If the matrix is singular (non-invertible), the method will return `null`.\n   *\n   * @param {Array} a - The matrix to be inverted. It should be a 2D array representing the matrix.\n   * @returns {Array|null} - The inverted matrix, or `null` if the matrix is singular.\n   * @throws {Error} - Throws an error if the matrix dimension is greater than 4.\n   *\n   * @example\n   * // Inverting a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   * const invertedMatrix = matrix.invert();\n   * console.log(invertedMatrix.matrix); // Output: Inverted 3x3 matrix\n   *\n   * // Inverting a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Identity matrix\n   * matrix4x4.scale(2, 2, 2);\n   * const invertedMatrix4x4 = matrix4x4.invert();\n   * console.log(invertedMatrix4x4.matrix); // Output: Inverted 4x4 matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *   const invertedMatrix = matrix.invert();\n   *   if (invertedMatrix) {\n   *     console.log(\"Inverted Matrix:\", invertedMatrix.matrix);\n   *   } else {\n   *     console.log(\"Matrix is singular and cannot be inverted.\");\n   *   }\n   * }\n   * </code></div>\n   */\n  invert(a) {\n    if (this.#sqDimention === 4) {\n      return this.#invert4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#invert3x3(a);\n    } else {\n      throw new Error(\n        \"Invert is not implemented for N>4 at the moment, we are working on it\"\n      );\n    }\n  }\n\n  /**\n   * Creates a 3x3 matrix whose entries are the top left 3x3 part and returns it. This function is only for 4x4 matrices.\n   *\n   * This method extracts the top-left 3x3 portion of a 4x4 matrix and creates a new\n   * 3x3 matrix from it. This is particularly useful in 3D graphics for operations\n   * that require only the rotational or scaling components of a transformation matrix.\n   *\n   * If the current matrix is not 4x4, an error is thrown to ensure the method is used\n   * correctly. The resulting 3x3 matrix is independent of the original matrix, meaning\n   * changes to the new matrix will not affect the original.\n   *\n   * @return {p5.Matrix} A new 3x3 matrix containing the top-left portion of the original 4x4 matrix.\n   * @throws {Error} If the current matrix is not 4x4.\n   *\n   * @example\n   * // Extracting a 3x3 submatrix from a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   * const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   * console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   * console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   *   matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   *\n   *   const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   *   console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   * }\n   * </code></div>\n   */\n  createSubMatrix3x3() {\n    if (this.#sqDimention === 4) {\n      const result = new Matrix(3);\n      result.mat3[0] = this.matrix[0];\n      result.mat3[1] = this.matrix[1];\n      result.mat3[2] = this.matrix[2];\n      result.mat3[3] = this.matrix[4];\n      result.mat3[4] = this.matrix[5];\n      result.mat3[5] = this.matrix[6];\n      result.mat3[6] = this.matrix[8];\n      result.mat3[7] = this.matrix[9];\n      result.mat3[8] = this.matrix[10];\n      return result;\n    } else {\n      throw new Error(\"Matrix dimension must be 4 to create a 3x3 submatrix.\");\n    }\n  }\n\n  /**\n   * Converts a 4×4 matrix to its 3×3 inverse transpose transform.\n   * This is commonly used in MVMatrix to NMatrix conversions, particularly\n   * in 3D graphics for transforming normal vectors.\n   *\n   * This method extracts the top-left 3×3 portion of a 4×4 matrix, inverts it,\n   * and then transposes the result. If the matrix is singular (non-invertible),\n   * the resulting matrix will be zeroed out.\n   *\n   * @param  {p5.Matrix} mat4 - The 4×4 matrix to be converted.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   * @throws {Error} If the current matrix is not 3×3.\n   *\n   * @example\n   * // Converting a 4×4 matrix to its 3×3 inverse transpose\n   * const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   * mat4.scale(2, 2, 2); // Apply scaling transformation\n   * const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   * mat3.inverseTranspose4x4(mat4);\n   * console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   *   mat4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4×4 Matrix:\", mat4.matrix);\n   *\n   *   const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   *   mat3.inverseTranspose4x4(mat4);\n   *   console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   * }\n   * </code></div>\n   */\n  inverseTranspose4x4({ mat4 }) {\n    if (this.#sqDimention !== 3) {\n      throw new Error(\"This function only works with 3×3 matrices.\");\n    } else {\n      // Convert mat4 -> mat3 by extracting the top-left 3×3 portion\n      this.matrix[0] = mat4[0];\n      this.matrix[1] = mat4[1];\n      this.matrix[2] = mat4[2];\n      this.matrix[3] = mat4[4];\n      this.matrix[4] = mat4[5];\n      this.matrix[5] = mat4[6];\n      this.matrix[6] = mat4[8];\n      this.matrix[7] = mat4[9];\n      this.matrix[8] = mat4[10];\n    }\n\n    const inverse = this.invert();\n    // Check if inversion succeeded\n    if (inverse) {\n      inverse.transpose(this.matrix);\n    } else {\n      // In case of singularity, zero out the matrix\n      for (let i = 0; i < 9; i++) {\n        this.matrix[i] = 0;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Applies a transformation matrix to the current matrix.\n   *\n   * This method multiplies the current matrix by another matrix, which can be provided\n   * in several forms: another Matrix instance, an array representing a matrix, or as\n   * individual arguments representing the elements of a 4x4 matrix.\n   *\n   * This operation is useful for combining transformations such as translation, rotation,\n   * scaling, and perspective projection into a single matrix. By applying a transformation\n   * matrix, you can modify the current matrix to represent a new transformation.\n   *\n   * @param {Matrix|Array|number} multMatrix - The matrix to multiply with. This can be:\n   *   - An instance of the Matrix class.\n   *   - An array of 16 numbers representing a 4x4 matrix.\n   *   - 16 individual numbers representing the elements of a 4x4 matrix.\n   * @returns {Matrix} The current matrix after applying the transformation.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   * // Assuming `matrix` is an instance of Matrix\n   * const anotherMatrix = new p5.Matrix(4);\n   * const anotherMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(anotherMatrix);\n   *\n   * // Applying a transformation using an array\n   * const matrixArray = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(matrixArray);\n   *\n   * // Applying a transformation using individual arguments\n   * matrix.apply(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n   *\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Create a scaling transformation matrix\n   *   const scalingMatrix = new p5.Matrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]);\n   *\n   *   // Apply the scaling transformation\n   *   matrix.apply(scalingMatrix);\n   *   console.log(\"After Scaling Transformation:\", matrix.matrix);\n   *\n   *   // Apply a translation transformation using an array\n   *   const translationMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 5, 5, 5, 1];\n   *   matrix.apply(translationMatrix);\n   *   console.log(\"After Translation Transformation:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  apply(multMatrix) {\n    let _src;\n\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix)) {\n      _src = multMatrix;\n    } else if (arguments.length === 16) {\n      _src = arguments;\n    } else {\n      return; // nothing to do.\n    }\n\n    const mat4 = this.matrix;\n\n    // each row is used for the multiplier\n    const m0 = mat4[0];\n    const m4 = mat4[4];\n    const m8 = mat4[8];\n    const m12 = mat4[12];\n    mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;\n    mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;\n    mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;\n    mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;\n\n    const m1 = mat4[1];\n    const m5 = mat4[5];\n    const m9 = mat4[9];\n    const m13 = mat4[13];\n    mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;\n    mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;\n    mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;\n    mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;\n\n    const m2 = mat4[2];\n    const m6 = mat4[6];\n    const m10 = mat4[10];\n    const m14 = mat4[14];\n    mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;\n    mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;\n    mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;\n    mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;\n\n    const m3 = mat4[3];\n    const m7 = mat4[7];\n    const m11 = mat4[11];\n    const m15 = mat4[15];\n    mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;\n    mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;\n    mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;\n    mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;\n\n    return this;\n  }\n\n  /**\n   * Scales a p5.Matrix by scalars or a vector.\n   *\n   * This method applies a scaling transformation to the current matrix.\n   * Scaling is a transformation that enlarges or shrinks objects by a scale factor\n   * along the x, y, and z axes. The scale factors can be provided as individual\n   * numbers, an array, or a `p5.Vector`.\n   *\n   * If a `p5.Vector` or an array is provided, the x, y, and z components are extracted\n   * from it. If the z component is not provided, it defaults to 1 (no scaling along the z-axis).\n   *\n   * @param {p5.Vector|Float32Array|Number[]} s - The vector or scalars to scale by.\n   *                                              Can be a `p5.Vector`, an array, or individual numbers.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Scaling a matrix by individual scalars\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.scale(2, 3, 4); // Scale by 2 along x, 3 along y, and 4 along z\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by a p5.Vector\n   * const scaleVector = new p5.Vector(2, 3, 4);\n   * matrix.scale(scaleVector);\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by an array\n   * const scaleArray = [2, 3, 4];\n   * matrix.scale(scaleArray);\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Scale the matrix by individual scalars\n   *   matrix.scale(2, 3, 4);\n   *   console.log(\"Scaled Matrix (2, 3, 4):\", matrix.matrix);\n   *\n   *   // Scale the matrix by a p5.Vector\n   *   const scaleVector = new p5.Vector(1.5, 2.5, 3.5);\n   *   matrix.scale(scaleVector);\n   *   console.log(\"Scaled Matrix (Vector):\", matrix.matrix);\n   *\n   *   // Scale the matrix by an array\n   *   const scaleArray = [0.5, 0.5, 0.5];\n   *   matrix.scale(scaleArray);\n   *   console.log(\"Scaled Matrix (Array):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  scale(x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; // must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; // must be last\n    }\n\n    this.matrix[0] *= x;\n    this.matrix[1] *= x;\n    this.matrix[2] *= x;\n    this.matrix[3] *= x;\n    this.matrix[4] *= y;\n    this.matrix[5] *= y;\n    this.matrix[6] *= y;\n    this.matrix[7] *= y;\n    this.matrix[8] *= z;\n    this.matrix[9] *= z;\n    this.matrix[10] *= z;\n    this.matrix[11] *= z;\n\n    return this;\n  }\n\n  /**\n   * Rotate the Matrix around a specified axis by a given angle.\n   *\n   * This method applies a rotation transformation to the matrix, modifying its orientation\n   * in 3D space. The rotation is performed around the provided axis, which can be defined\n   * as a `p5.Vector` or an array of numbers representing the x, y, and z components of the axis.\n   * Rotate our Matrix around an axis by the given angle.\n   * @param  {Number} a The angle of rotation in radians.\n   *                    Angles in radians are a measure of rotation, where 2π radians\n   *                    represent a full circle (360 degrees). For example:\n   *                    - π/2 radians = 90 degrees (quarter turn)\n   *                    - π radians = 180 degrees (half turn)\n   *                    - 2π radians = 360 degrees (full turn)\n   *                    Use `Math.PI` for π or `p5`'s `PI` constant if using p5.js.\n   * @param  {p5.Vector|Number[]} axis The axis or axes to rotate around.\n   *                                   This defines the direction of the rotation.\n   *                                   - If using a `p5.Vector`, it should represent\n   *                                     the x, y, and z components of the axis.\n   *                                   - If using an array, it should be in the form\n   *                                     [x, y, z], where x, y, and z are numbers.\n   *                                   For example:\n   *                                   - [1, 0, 0] rotates around the x-axis.\n   *                                   - [0, 1, 0] rotates around the y-axis.\n   *                                   - [0, 0, 1] rotates around the z-axis.   *\n   * @chainable\n   * inspired by Toji's gl-matrix lib, mat4 rotation\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.rotate4x4(Math.PI, [1,0,0]);\n   *   console.log(\"After rotation of PI degrees on vector [1,0,0]:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,-1,1.2246468525851679e-16,0,0,-1.2246468525851679e-16,-1,0,0,0,0,1]\n   * }\n   * </code></div>\n   */\n  rotate4x4(a, x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; //must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; //must be last\n    }\n\n    const len = Math.sqrt(x * x + y * y + z * z);\n    x *= 1 / len;\n    y *= 1 / len;\n    z *= 1 / len;\n\n    const a00 = this.matrix[0];\n    const a01 = this.matrix[1];\n    const a02 = this.matrix[2];\n    const a03 = this.matrix[3];\n    const a10 = this.matrix[4];\n    const a11 = this.matrix[5];\n    const a12 = this.matrix[6];\n    const a13 = this.matrix[7];\n    const a20 = this.matrix[8];\n    const a21 = this.matrix[9];\n    const a22 = this.matrix[10];\n    const a23 = this.matrix[11];\n\n    //sin,cos, and tan of respective angle\n    const sA = Math.sin(a);\n    const cA = Math.cos(a);\n    const tA = 1 - cA;\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * tA + cA;\n    const b01 = y * x * tA + z * sA;\n    const b02 = z * x * tA - y * sA;\n    const b10 = x * y * tA - z * sA;\n    const b11 = y * y * tA + cA;\n    const b12 = z * y * tA + x * sA;\n    const b20 = x * z * tA + y * sA;\n    const b21 = y * z * tA - x * sA;\n    const b22 = z * z * tA + cA;\n\n    // rotation-specific matrix multiplication\n    this.matrix[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    this.matrix[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    this.matrix[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    this.matrix[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    this.matrix[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    this.matrix[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    this.matrix[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    this.matrix[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    this.matrix[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    this.matrix[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    this.matrix[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    this.matrix[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    return this;\n  }\n\n  /**\n   * Translates the current matrix by a given vector.\n   *\n   * This method applies a translation transformation to the current matrix.\n   * Translation moves the matrix by a specified amount along the x, y, and z axes.\n   * The input vector can be a 2D or 3D vector. If the z-component is not provided,\n   * it defaults to 0, meaning no translation along the z-axis.\n   *\n   * @param {Number[]} v - A vector representing the translation. It should be an array\n   *                       with two or three elements: [x, y, z]. The z-component is optional.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Translating a matrix by a 3D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.translate([10, 20, 30]); // Translate by 10 units along x, 20 along y, and 30 along z\n   * console.log(matrix.matrix);\n   *\n   * // Translating a matrix by a 2D vector\n   * matrix.translate([5, 15]); // Translate by 5 units along x and 15 along y\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.translate([10, 20, 30]);\n   *   console.log(\"After 3D Translation (10, 20, 30):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,10,20,30,1]\n   *\n   *   // Translate the matrix by a 2D vector\n   *   matrix.translate([5, 15]);\n   *   console.log(\"After 2D Translation (5, 15):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,15,35,30,1]\n   * }\n   * </code></div>\n   */\n  translate(v) {\n    const x = v[0],\n      y = v[1],\n      z = v[2] || 0;\n    this.matrix[12] +=\n      this.matrix[0] * x + this.matrix[4] * y + this.matrix[8] * z;\n    this.matrix[13] +=\n      this.matrix[1] * x + this.matrix[5] * y + this.matrix[9] * z;\n    this.matrix[14] +=\n      this.matrix[2] * x + this.matrix[6] * y + this.matrix[10] * z;\n    this.matrix[15] +=\n      this.matrix[3] * x + this.matrix[7] * y + this.matrix[11] * z;\n    return this;\n  }\n\n  /**\n   * Rotates the matrix around the X-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the X-axis. The rotation angle is specified in radians.\n   *\n   * Rotating around the X-axis means that the Y and Z coordinates of the matrix\n   * are transformed while the X coordinates remain unchanged. This is commonly\n   * used in 3D graphics to create animations or transformations along the X-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by.\n   *\n   * @example\n   * // Rotating a matrix around the X-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateX(Math.PI / 4); // Rotate 45 degrees around the X-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the X-axis\n   *   matrix.rotateX(Math.PI / 4);\n   *   console.log(\"After Rotation (X-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateX(a) {\n    this.rotate4x4(a, 1, 0, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Y-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Y-axis. The rotation is performed in 3D space, and the angle\n   * is specified in radians. Rotating around the Y-axis means that the X and Z\n   * coordinates of the matrix are transformed while the Y coordinates remain\n   * unchanged. This is commonly used in 3D graphics to create animations or\n   * transformations along the Y-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @example\n   * // Rotating a matrix around the Y-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Y-axis\n   *   matrix.rotateY(Math.PI / 4);\n   *   console.log(\"After Rotation (Y-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateY(a) {\n    this.rotate4x4(a, 0, 1, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Z-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Z-axis. The rotation is performed in a 4x4 matrix context, which\n   * is commonly used in 3D graphics to handle transformations. Rotating around\n   * the Z-axis means that the X and Y coordinates of the matrix are transformed\n   * while the Z coordinates remain unchanged.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Rotating a matrix around the Z-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateZ(Math.PI / 4); // Rotate 45 degrees around the Z-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Z-axis\n   *   matrix.rotateZ(Math.PI / 4);\n   *   console.log(\"After Rotation (Z-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateZ(a) {\n    this.rotate4x4(a, 0, 0, 1);\n  }\n\n  /**\n   * Sets the perspective projection matrix.\n   *\n   * This method modifies the current matrix to represent a perspective projection.\n   * Perspective projection is commonly used in 3D graphics to simulate the effect\n   * of objects appearing smaller as they move further away from the camera.\n   *\n   * The perspective matrix is defined by the field of view (fovy), aspect ratio,\n   * and the near and far clipping planes. The near and far clipping planes define\n   * the range of depth that will be rendered, with anything outside this range\n   * being clipped.\n   *\n   * @param {Number} fovy - The field of view in the y direction, in radians.\n   * @param {Number} aspect - The aspect ratio of the viewport (width / height).\n   * @param {Number} near - The distance to the near clipping plane. Must be greater than 0.\n   * @param {Number} far - The distance to the far clipping plane. Must be greater than the near value.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Setting a perspective projection matrix\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.perspective(Math.PI / 4, 1.5, 0.1, 100); // Set perspective projection\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Set a perspective projection with a 45-degree field of view,\n   *   // an aspect ratio of 1.5, and near/far clipping planes at 0.1 and 100.\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Perspective Matrix:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  perspective(fovy, aspect, near, far) {\n    const f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n\n    this.matrix[0] = f / aspect;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = f;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = (far + near) * nf;\n    this.matrix[11] = -1;\n    this.matrix[12] = 0;\n    this.matrix[13] = 0;\n    this.matrix[14] = 2 * far * near * nf;\n    this.matrix[15] = 0;\n\n    return this;\n  }\n\n  /**\n   * Sets this matrix to an orthographic projection matrix.\n   *\n   * An orthographic projection matrix is used to create a 2D rendering\n   * of a 3D scene by projecting points onto a plane without perspective\n   * distortion. This method modifies the current matrix to represent\n   * the orthographic projection defined by the given parameters.\n   *\n   * @param {number} left - The coordinate for the left vertical clipping plane.\n   * @param {number} right - The coordinate for the right vertical clipping plane.\n   * @param {number} bottom - The coordinate for the bottom horizontal clipping plane.\n   * @param {number} top - The coordinate for the top horizontal clipping plane.\n   * @param {number} near - The distance to the near depth clipping plane. Must be positive.\n   * @param {number} far - The distance to the far depth clipping plane. Must be positive.\n   * @chainable\n   * @returns {Matrix} The current matrix instance, updated with the orthographic projection.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * // Example using p5.js to demonstrate orthographic projection\n   * function setup() {\n   *  let orthoMatrix = new p5.Matrix(4);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1\n   *  orthoMatrix.ortho(-200, 200, -200, 200, 0.1, 1000);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [24 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *  applyMatrix(\n   *     orthoMatrix.mat4[0], orthoMatrix.mat4[1], orthoMatrix.mat4[2], orthoMatrix.mat4[3],\n   *     orthoMatrix.mat4[4], orthoMatrix.mat4[5], orthoMatrix.mat4[6], orthoMatrix.mat4[7],\n   *     orthoMatrix.mat4[8], orthoMatrix.mat4[9], orthoMatrix.mat4[10], orthoMatrix.mat4[11],\n   *     orthoMatrix.mat4[12], orthoMatrix.mat4[13], orthoMatrix.mat4[14], orthoMatrix.mat4[15]\n   *  );\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [31 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *   }\n   * </code></div>\n   *\n   */\n  ortho(left, right, bottom, top, near, far) {\n    const lr = 1 / (left - right),\n      bt = 1 / (bottom - top),\n      nf = 1 / (near - far);\n    this.matrix[0] = -2 * lr;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = -2 * bt;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = 2 * nf;\n    this.matrix[11] = 0;\n    this.matrix[12] = (left + right) * lr;\n    this.matrix[13] = (top + bottom) * bt;\n    this.matrix[14] = (far + near) * nf;\n    this.matrix[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Applies a matrix to a vector with x, y, z, w components and returns the result as an array.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, w) and computes the resulting vector.\n   * It is commonly used in 3D graphics for transformations such as translation, rotation, scaling, and perspective projection.\n   *\n   * The resulting vector is returned as an array of four numbers, representing the transformed x, y, z, and w components.\n   *\n   * @param {Number} x - The x component of the vector.\n   * @param {Number} y - The y component of the vector.\n   * @param {Number} z - The z component of the vector.\n   * @param {Number} w - The w component of the vector.\n   * @returns {Number[]} An array containing the transformed [x, y, z, w] components.\n   *\n   * @example\n   * // Applying a matrix to a 4D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const result = matrix.multiplyVec4(1, 2, 3, 1); // Transform the vector [1, 2, 3, 1]\n   * console.log(result); // Output: [1, 2, 3, 1] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Apply the matrix to a 4D vector\n   *   const result = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector:\", result); // Output: [1, 2, 3, 1]\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const transformedResult = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector after Translation:\", transformedResult); // Output: [6, 7, 8, 1]\n   * }\n   * </code></div>\n   */\n  multiplyVec4(x, y, z, w) {\n    const result = new Array(4);\n    const m = this.matrix;\n\n    result[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    result[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    result[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    result[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n    return result;\n  }\n\n  /**\n   * Applies a matrix to a vector. The fourth component is set to 1.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance.\n   *\n   * This is useful for applying transformations such as translation,\n   * rotation, scaling, or perspective projection to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyPoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point\n   *   const transformedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Transformed Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const translatedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Translated Point:\", translatedPoint.toString()); // Output: [6, 7, 8]\n   * }\n   * </code></div>\n   */\n  multiplyPoint({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 1.\n   * Returns the result of dividing the 1st to 3rd components\n   * of the result by the 4th component as a vector.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is normalized by dividing its x, y, and z components by the w component.\n   * This is useful for applying transformations such as perspective projection\n   * to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed and normalized point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point and normalizing it\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point and normalize it\n   *   const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Transformed and Normalized Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a perspective transformation)\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Modified Matrix (Perspective):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const perspectivePoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Point after Perspective Transformation:\", perspectivePoint.toString());\n   * }\n   * </code></div>\n   */\n  multiplyAndNormalizePoint({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    array[0] /= array[3];\n    array[1] /= array[3];\n    array[2] /= array[3];\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 0.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 0),\n   * effectively transforming the direction vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance. This is particularly useful\n   * for transforming direction vectors (e.g., normals) without applying translation.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed direction.\n   *\n   * @example\n   * // Applying a matrix to a direction vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const direction = new p5.Vector(1, 0, 0); // Define a direction vector\n   * const transformedDirection = matrix.multiplyDirection(direction);\n   * console.log(transformedDirection.toString()); // Output: [1, 0, 0] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a direction vector\n   *   const direction = new p5.Vector(1, 0, 0);\n   *   console.log(\"Original Direction:\", direction.toString());\n   *\n   *   // Apply the matrix to the direction vector\n   *   const transformedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Transformed Direction:\", transformedDirection.toString());\n   *\n   *   // Modify the matrix (e.g., apply a rotation)\n   *   matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   *   console.log(\"Modified Matrix (Rotation):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same direction vector\n   *   const rotatedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Rotated Direction:\", rotatedDirection.toString()); // Output: Rotated vector\n   * }\n   * </code></div>\n   */\n  multiplyDirection({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 0);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying. This function is only for 3x3 matrices.\n   * that vector by this matrix from the left.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * This is useful for operations such as transforming points or directions\n   * in 2D or 3D space using a 3x3 transformation matrix.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec3(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 3x3 matrix\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a vector\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output: [1, 2, 3]\n   *\n   *   // Apply the matrix to the vector\n   *   const transformedVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString()); // Output: [30, 36, 42]\n   *\n   *   // Modify the matrix (e.g., apply a scaling transformation)\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Modified Matrix (Scaling):\", matrix.matrix); // Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const scaledVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Scaled Vector:\", scaledVector.toString()); // Output: [60, 72, 84]\n   * }\n   * </code></div>\n   */\n  multiplyVec3(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    target.x = this.row(0).dot(multVector);\n    target.y = this.row(1).dot(multVector);\n    target.z = this.row(2).dot(multVector);\n    return target;\n  }\n\n  // ====================\n  // PRIVATE\n  /**\n   * Creates identity matrix\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   */\n  #createIdentityMatrix(dimension) {\n    // This it to prevent loops in the most common 3x3 and 4x4 cases\n    // TODO: check performance if it actually helps\n    if (dimension === 3)\n      return new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    if (dimension === 4)\n      return new GLMAT_ARRAY_TYPE([\n        1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n      ]);\n    const identityMatrix = new GLMAT_ARRAY_TYPE(dimension * dimension).fill(0);\n    for (let i = 0; i < dimension; i++) {\n      identityMatrix[i * dimension + i] = 1;\n    }\n    return identityMatrix;\n  }\n\n  /**\n   * Multiplies the current 4x4 matrix with another 4x4 matrix.\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   * @param {number[]} _src - A 16-element array representing the 4x4 matrix to multiply with.\n   *\n   * @returns {this} The current instance with the updated matrix.\n   *\n   * @example\n   * // Assuming `matrix` is an instance of the Matrix class\n   * const srcMatrix = [\n   *   1, 0, 0, 0,\n   *   0, 1, 0, 0,\n   *   0, 0, 1, 0,\n   *   0, 0, 0, 1\n   * ];\n   * matrix.#mult4x4(srcMatrix);\n   */\n  #mult4x4(_src) {\n    // each row is used for the multiplier\n    let b0 = this.matrix[0],\n      b1 = this.matrix[1],\n      b2 = this.matrix[2],\n      b3 = this.matrix[3];\n    this.matrix[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[2] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[3] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[4];\n    b1 = this.matrix[5];\n    b2 = this.matrix[6];\n    b3 = this.matrix[7];\n    this.matrix[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[6] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[7] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[8];\n    b1 = this.matrix[9];\n    b2 = this.matrix[10];\n    b3 = this.matrix[11];\n    this.matrix[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[10] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[11] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[12];\n    b1 = this.matrix[13];\n    b2 = this.matrix[14];\n    b3 = this.matrix[15];\n    this.matrix[12] =\n      b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[13] =\n      b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[14] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[15] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    return this;\n  }\n\n  /**\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #multNxN(multMatrix) {\n    if (multMatrix.length !== this.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to multiply.\");\n    }\n    const result = new GLMAT_ARRAY_TYPE(this.matrix.length).fill(0);\n    for (let i = 0; i < this.#sqDimention; i++) {\n      for (let j = 0; j < this.#sqDimention; j++) {\n        for (let k = 0; k < this.#sqDimention; k++) {\n          result[i * this.#sqDimention + j] +=\n            this.matrix[i * this.#sqDimention + k] *\n            multMatrix[k * this.#sqDimention + j];\n        }\n      }\n    }\n    this.matrix = result;\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * multiply two mat3s. It is an operation to multiply the 3x3 matrix of\n   * the argument from the right. Arguments can be a 3x3 p5.Matrix,\n   * a Float32Array of length 9, or a javascript array of length 9.\n   * In addition, it can also be done by enumerating 9 numbers.\n   *\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #mult3x3(_src) {\n    // each row is used for the multiplier\n    let b0 = this.mat3[0];\n    let b1 = this.mat3[1];\n    let b2 = this.mat3[2];\n    this.mat3[0] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[1] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[2] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    b0 = this.mat3[3];\n    b1 = this.mat3[4];\n    b2 = this.mat3[5];\n    this.mat3[3] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[4] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[5] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    b0 = this.mat3[6];\n    b1 = this.mat3[7];\n    b2 = this.mat3[8];\n    this.mat3[6] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[7] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[8] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    return this;\n  }\n\n  /**\n   * Transposes a square matrix in place.\n   * This method swaps the rows and columns of the matrix, effectively flipping it over its diagonal.\n   *\n   * @private\n   * @returns {Matrix} The current instance of the Matrix, with the transposed values.\n   */\n  #transposeNxN() {\n    const n = this.#sqDimention;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        this.matrix[i * n + j] = this.matrix[j * n + i];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * transpose according to a given matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a  the matrix to be\n   *                                               based on to transpose\n   * @private\n   * @chainable\n   */\n  #transpose4x4(a) {\n    console.log(\"====> 4x4\");\n    let a01, a02, a03, a12, a13, a23;\n    if (a instanceof Matrix) {\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a23 = a.matrix[11];\n\n      this.matrix[0] = a.matrix[0];\n      this.matrix[1] = a.matrix[4];\n      this.matrix[2] = a.matrix[8];\n      this.matrix[3] = a.matrix[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a.matrix[5];\n      this.matrix[6] = a.matrix[9];\n      this.matrix[7] = a.matrix[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a.matrix[10];\n      this.matrix[11] = a.matrix[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a12 = a[6];\n      a13 = a[7];\n      a23 = a[11];\n\n      this.matrix[0] = a[0];\n      this.matrix[1] = a[4];\n      this.matrix[2] = a[8];\n      this.matrix[3] = a[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a[5];\n      this.matrix[6] = a[9];\n      this.matrix[7] = a[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a[10];\n      this.matrix[11] = a[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a[15];\n    }\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * transposes a 3×3 p5.Matrix by a mat3\n   * If there is an array of arguments, the matrix obtained by transposing\n   * the 3x3 matrix generated based on that array is set.\n   * If no arguments, it transposes itself and returns it.\n   *\n   * @param  {Number[]} mat3 1-dimensional array\n   * @private\n   * @chainable\n   */\n  #transpose3x3(mat3) {\n    if (mat3 === undefined) {\n      mat3 = this.mat3;\n    }\n    const a01 = mat3[1];\n    const a02 = mat3[2];\n    const a12 = mat3[5];\n    this.mat3[0] = mat3[0];\n    this.mat3[1] = mat3[3];\n    this.mat3[2] = mat3[6];\n    this.mat3[3] = a01;\n    this.mat3[4] = mat3[4];\n    this.mat3[5] = mat3[7];\n    this.mat3[6] = a02;\n    this.mat3[7] = a12;\n    this.mat3[8] = mat3[8];\n\n    return this;\n  }\n\n  /**\n   * Only 4x4 becasuse determinant is only 4x4 currently\n   * invert  matrix according to a give matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a   the matrix to be\n   *                                                based on to invert\n   * @private\n   * @chainable\n   */\n  #invert4x4(a) {\n    let a00, a01, a02, a03, a10, a11, a12, a13;\n    let a20, a21, a22, a23, a30, a31, a32, a33;\n    if (a instanceof Matrix) {\n      a00 = a.matrix[0];\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a10 = a.matrix[4];\n      a11 = a.matrix[5];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a20 = a.matrix[8];\n      a21 = a.matrix[9];\n      a22 = a.matrix[10];\n      a23 = a.matrix[11];\n      a30 = a.matrix[12];\n      a31 = a.matrix[13];\n      a32 = a.matrix[14];\n      a33 = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a00 = a[0];\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a10 = a[4];\n      a11 = a[5];\n      a12 = a[6];\n      a13 = a[7];\n      a20 = a[8];\n      a21 = a[9];\n      a22 = a[10];\n      a23 = a[11];\n      a30 = a[12];\n      a31 = a[13];\n      a32 = a[14];\n      a33 = a[15];\n    }\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    this.matrix[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    this.matrix[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    this.matrix[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    this.matrix[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    this.matrix[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    this.matrix[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    this.matrix[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    this.matrix[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    this.matrix[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    this.matrix[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    this.matrix[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    this.matrix[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    this.matrix[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    this.matrix[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    this.matrix[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    this.matrix[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return this;\n  }\n\n  /**\n   * Inverts a 3×3 matrix\n   * @chainable\n   * @private\n   */\n  #invert3x3() {\n    const a00 = this.mat3[0];\n    const a01 = this.mat3[1];\n    const a02 = this.mat3[2];\n    const a10 = this.mat3[3];\n    const a11 = this.mat3[4];\n    const a12 = this.mat3[5];\n    const a20 = this.mat3[6];\n    const a21 = this.mat3[7];\n    const a22 = this.mat3[8];\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n    this.mat3[0] = b01 * det;\n    this.mat3[1] = (-a22 * a01 + a02 * a21) * det;\n    this.mat3[2] = (a12 * a01 - a02 * a11) * det;\n    this.mat3[3] = b11 * det;\n    this.mat3[4] = (a22 * a00 - a02 * a20) * det;\n    this.mat3[5] = (-a12 * a00 + a02 * a10) * det;\n    this.mat3[6] = b21 * det;\n    this.mat3[7] = (-a21 * a00 + a01 * a20) * det;\n    this.mat3[8] = (a11 * a00 - a01 * a10) * det;\n    return this;\n  }\n\n  /**\n   * inspired by Toji's mat4 determinant\n   * @return {Number} Determinant of our 4×4 matrix\n   * @private\n   */\n  #determinant4x4() {\n    if (this.#sqDimention !== 4) {\n      throw new Error(\n        \"Determinant is only implemented for 4x4 matrices. We are working on it.\"\n      );\n    }\n\n    const d00 =\n        this.matrix[0] * this.matrix[5] - this.matrix[1] * this.matrix[4],\n      d01 = this.matrix[0] * this.matrix[6] - this.matrix[2] * this.matrix[4],\n      d02 = this.matrix[0] * this.matrix[7] - this.matrix[3] * this.matrix[4],\n      d03 = this.matrix[1] * this.matrix[6] - this.matrix[2] * this.matrix[5],\n      d04 = this.matrix[1] * this.matrix[7] - this.matrix[3] * this.matrix[5],\n      d05 = this.matrix[2] * this.matrix[7] - this.matrix[3] * this.matrix[6],\n      d06 = this.matrix[8] * this.matrix[13] - this.matrix[9] * this.matrix[12],\n      d07 =\n        this.matrix[8] * this.matrix[14] - this.matrix[10] * this.matrix[12],\n      d08 =\n        this.matrix[8] * this.matrix[15] - this.matrix[11] * this.matrix[12],\n      d09 =\n        this.matrix[9] * this.matrix[14] - this.matrix[10] * this.matrix[13],\n      d10 =\n        this.matrix[9] * this.matrix[15] - this.matrix[11] * this.matrix[13],\n      d11 =\n        this.matrix[10] * this.matrix[15] - this.matrix[11] * this.matrix[14];\n\n    // Calculate the determinant\n    return (\n      d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06\n    );\n  }\n\n  /**\n   * PRIVATE\n   */\n  // matrix methods adapted from:\n  // https://developer.mozilla.org/en-US/docs/Web/WebGL/\n  // gluPerspective\n  //\n  // function _makePerspective(fovy, aspect, znear, zfar){\n  //    const ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n  //    const ymin = -ymax;\n  //    const xmin = ymin * aspect;\n  //    const xmax = ymax * aspect;\n  //    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n  //  }\n\n  ////\n  //// glFrustum\n  ////\n  //function _makeFrustum(left, right, bottom, top, znear, zfar){\n  //  const X = 2*znear/(right-left);\n  //  const Y = 2*znear/(top-bottom);\n  //  const A = (right+left)/(right-left);\n  //  const B = (top+bottom)/(top-bottom);\n  //  const C = -(zfar+znear)/(zfar-znear);\n  //  const D = -2*zfar*znear/(zfar-znear);\n  //  const frustrumMatrix =[\n  //  X, 0, A, 0,\n  //  0, Y, B, 0,\n  //  0, 0, C, D,\n  //  0, 0, -1, 0\n  //];\n  //return frustrumMatrix;\n  // }\n\n  // function _setMVPMatrices(){\n  ////an identity matrix\n  ////@TODO use the p5.Matrix class to abstract away our MV matrices and\n  ///other math\n  //const _mvMatrix =\n  //[\n  //  1.0,0.0,0.0,0.0,\n  //  0.0,1.0,0.0,0.0,\n  //  0.0,0.0,1.0,0.0,\n  //  0.0,0.0,0.0,1.0\n  //];\n}\n\nexport { GLMAT_ARRAY_TYPE, Matrix, isMatrixArray };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,iBAAiB;AACxC,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAO,6BAA6B;;AAEpC;AACA;AACA;;AAGA,MAAMC,eAAe,GAAIC,GAAG,IAAK;EAC/B,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,GAAG,CAAC,CAACM,MAAM,CAAC;EACrD,IAAIL,WAAW,GAAG,CAAC,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIM,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACA,OAAO,IAAI;AACb,CAAC;AAED,IAAIC,gBAAgB,GAAGJ,KAAK;AAC5B,IAAIK,aAAa,GAAIC,CAAC,IAAKN,KAAK,CAACO,OAAO,CAACD,CAAC,CAAC;AAC3C,IAAI,OAAOE,YAAY,KAAK,WAAW,EAAE;EACvCJ,gBAAgB,GAAGI,YAAY;EAC/BH,aAAa,GAAIC,CAAC,IAAKN,KAAK,CAACO,OAAO,CAACD,CAAC,CAAC,IAAIA,CAAC,YAAYE,YAAY;AACtE;AAEA,MAAMC,MAAM,SAASf,eAAe,CAAC;EACnCgB,MAAM;EACN,CAACb,WAAW;EAEZc,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACd;IACA;IACA,IAAIP,aAAa,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIjB,eAAe,CAACiB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MACtD,MAAMf,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,CAACV,MAAM,CAAC;MACzD,IAAI,CAAC,CAACL,WAAW,GAAGA,WAAW;MAC/B,IAAI,CAACa,MAAM,GAAGN,gBAAgB,CAACH,IAAI,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,MAAM,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACtC,IAAI,CAAC,CAACf,WAAW,GAAGgB,MAAM,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC;MACnC,IAAI,CAACF,MAAM,GAAG,IAAI,CAAC,CAACI,oBAAoB,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;IACnD;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIG,IAAIA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC,CAAClB,WAAW,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACa,MAAM;IACpB,CAAC,MAAM;MACL,OAAOM,SAAS;IAClB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC,CAACpB,WAAW,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACa,MAAM;IACpB,CAAC,MAAM;MACL,OAAOM,SAAS;IAClB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,GAAGA,CAACR,MAAM,EAAE;IACV,IAAI,IAAI,CAACA,MAAM,CAACR,MAAM,KAAKQ,MAAM,CAACA,MAAM,CAACR,MAAM,EAAE;MAC/C,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;IACnE;IACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,MAAM,CAACR,MAAM,EAAEiB,CAAC,EAAE,EAAE;MAC3C,IAAI,CAACT,MAAM,CAACS,CAAC,CAAC,IAAIT,MAAM,CAACA,MAAM,CAACS,CAAC,CAAC;IACpC;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACvB,IAAID,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,IAAI,CAACX,MAAM,CAACR,MAAM,EAAE;MAC5C,IAAI,CAACQ,MAAM,CAACW,KAAK,CAAC,GAAGC,KAAK;IAC5B;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACb,MAAM,GAAG,IAAI,CAAC,CAACI,oBAAoB,CAAC,IAAI,CAAC,CAACjB,WAAW,CAAC;IAC3D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2B,GAAGA,CAACC,QAAQ,EAAE;IACZ,IAAIC,QAAQ,GAAGtB,gBAAgB,CAACH,IAAI,CAAC,CAAC,GAAG0B,SAAS,CAAC,CAAC;IACpD,IAAIF,QAAQ,YAAYhB,MAAM,EAAE;MAC9BiB,QAAQ,GAAGtB,gBAAgB,CAACH,IAAI,CAACwB,QAAQ,CAACf,MAAM,CAAC;IACnD,CAAC,MAAM,IAAIL,aAAa,CAACoB,QAAQ,CAAC,EAAE;MAClCC,QAAQ,GAAGtB,gBAAgB,CAACH,IAAI,CAACwB,QAAQ,CAAC;IAC5C;IACA,IAAIC,QAAQ,CAACxB,MAAM,KAAK,IAAI,CAACQ,MAAM,CAACR,MAAM,EAAE;MAC1C0B,EAAE,CAACC,cAAc,CACf,0DAA0DH,QAAQ,CAACxB,MAAM,GAAG,EAC5E,eACF,CAAC;MACD,OAAO,IAAI;IACb;IACA,IAAI,CAACQ,MAAM,GAAGgB,QAAQ;IACtB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAIrB,MAAM,CAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqB,IAAIA,CAAA,EAAG;IACL,OAAO,IAAItB,MAAM,CAAC,IAAI,CAACC,MAAM,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACD,IAAI,CAAC,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,QAAQA,CAAA,EAAG;IACT,MAAMA,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC,CAACtB,WAAW,EAAEsB,CAAC,EAAE,EAAE;MAC1Cc,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACxB,MAAM,CAACS,CAAC,IAAI,IAAI,CAAC,CAACtB,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACzD;IACA,OAAOoC,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,WAAWA,CAACC,UAAU,EAAEC,MAAM,EAAE;IAC9B,IAAIA,MAAM,KAAKtC,SAAS,EAAE;MACxBsC,MAAM,GAAGD,UAAU,CAACtB,IAAI,CAAC,CAAC;IAC5B;IACA,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC,CAACtB,WAAW,EAAEsB,CAAC,EAAE,EAAE;MAC1CmC,MAAM,CAACC,MAAM,CAACpC,CAAC,CAAC,GAAG,IAAI,CAACgB,GAAG,CAAChB,CAAC,CAAC,CAACqC,GAAG,CAACH,UAAU,CAAC;IAChD;IACA,OAAOC,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,MAAMA,CAACf,CAAC,EAAE;IACR,IAAI,IAAI,CAAC,CAAC7C,WAAW,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAAC,CAAC6D,SAAS,CAAChB,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC7C,WAAW,KAAK,CAAC,EAAE;MAClC,OAAO,IAAI,CAAC,CAAC8D,SAAS,CAACjB,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL,MAAM,IAAIvC,KAAK,CACb,uEACF,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyD,kBAAkBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAAC,CAAC/D,WAAW,KAAK,CAAC,EAAE;MAC3B,MAAMgE,MAAM,GAAG,IAAIpD,MAAM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AAM,CAAC,EAAE,CAAC,IACb,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAGJ,CAAC,GAAG,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,GAAGwE,CAAC,GAAG,IAAI,CAACxE,MAAM,CAAC,EAAE,CAAC,GAAGyE,CAAC;IAC/D,IAAI,CAACzE,MAAM,CAAC,EAAE,CAAC,IACb,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAGJ,CAAC,GAAG,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,GAAGwE,CAAC,GAAG,IAAI,CAACxE,MAAM,CAAC,EAAE,CAAC,GAAGyE,CAAC;IAC/D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+B,OAAOA,CAACxE,CAAC,EAAE;IACT,IAAI,CAAC0C,SAAS,CAAC1C,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyE,OAAOA,CAACzE,CAAC,EAAE;IACT,IAAI,CAAC0C,SAAS,CAAC1C,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0E,OAAOA,CAAC1E,CAAC,EAAE;IACT,IAAI,CAAC0C,SAAS,CAAC1C,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2E,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAE;IACnC,MAAMC,CAAC,GAAG,GAAG,GAAG5H,IAAI,CAAC6H,GAAG,CAACL,IAAI,GAAG,CAAC,CAAC;MAChCM,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;IAEvB,IAAI,CAAC/G,MAAM,CAAC,CAAC,CAAC,GAAGgH,CAAC,GAAGH,MAAM;IAC3B,IAAI,CAAC7G,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAGgH,CAAC;IAClB,IAAI,CAAChH,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC+G,GAAG,GAAGD,IAAI,IAAII,EAAE;IACnC,IAAI,CAAClH,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;IACnB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;IACnB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG+G,GAAG,GAAGD,IAAI,GAAGI,EAAE;IACrC,IAAI,CAAClH,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;IAEnB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmH,KAAKA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAET,IAAI,EAAEC,GAAG,EAAE;IACzC,MAAMS,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,KAAK,CAAC;MAC3BI,EAAE,GAAG,CAAC,IAAIH,MAAM,GAAGC,GAAG,CAAC;MACvBL,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;IACvB,IAAI,CAAC/G,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGwH,EAAE;IACxB,IAAI,CAACxH,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGyH,EAAE;IACxB,IAAI,CAACzH,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGkH,EAAE;IACxB,IAAI,CAAClH,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;IACnB,IAAI,CAACA,MAAM,CAAC,EAAE,CAAC,GAAG,CAACoH,IAAI,GAAGC,KAAK,IAAIG,EAAE;IACrC,IAAI,CAACxH,MAAM,CAAC,EAAE,CAAC,GAAG,CAACuH,GAAG,GAAGD,MAAM,IAAIG,EAAE;IACrC,IAAI,CAACzH,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC+G,GAAG,GAAGD,IAAI,IAAII,EAAE;IACnC,IAAI,CAAClH,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;IAEnB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0H,YAAYA,CAAC9H,CAAC,EAAE4E,CAAC,EAAEC,CAAC,EAAEkD,CAAC,EAAE;IACvB,MAAMxE,MAAM,GAAG,IAAI7D,KAAK,CAAC,CAAC,CAAC;IAC3B,MAAMsI,CAAC,GAAG,IAAI,CAAC5H,MAAM;IAErBmD,MAAM,CAAC,CAAC,CAAC,GAAGyE,CAAC,CAAC,CAAC,CAAC,GAAGhI,CAAC,GAAGgI,CAAC,CAAC,CAAC,CAAC,GAAGpD,CAAC,GAAGoD,CAAC,CAAC,CAAC,CAAC,GAAGnD,CAAC,GAAGmD,CAAC,CAAC,EAAE,CAAC,GAAGD,CAAC;IACtDxE,MAAM,CAAC,CAAC,CAAC,GAAGyE,CAAC,CAAC,CAAC,CAAC,GAAGhI,CAAC,GAAGgI,CAAC,CAAC,CAAC,CAAC,GAAGpD,CAAC,GAAGoD,CAAC,CAAC,CAAC,CAAC,GAAGnD,CAAC,GAAGmD,CAAC,CAAC,EAAE,CAAC,GAAGD,CAAC;IACtDxE,MAAM,CAAC,CAAC,CAAC,GAAGyE,CAAC,CAAC,CAAC,CAAC,GAAGhI,CAAC,GAAGgI,CAAC,CAAC,CAAC,CAAC,GAAGpD,CAAC,GAAGoD,CAAC,CAAC,EAAE,CAAC,GAAGnD,CAAC,GAAGmD,CAAC,CAAC,EAAE,CAAC,GAAGD,CAAC;IACvDxE,MAAM,CAAC,CAAC,CAAC,GAAGyE,CAAC,CAAC,CAAC,CAAC,GAAGhI,CAAC,GAAGgI,CAAC,CAAC,CAAC,CAAC,GAAGpD,CAAC,GAAGoD,CAAC,CAAC,EAAE,CAAC,GAAGnD,CAAC,GAAGmD,CAAC,CAAC,EAAE,CAAC,GAAGD,CAAC;IAEvD,OAAOxE,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0E,aAAaA,CAAC;IAAEjI,CAAC;IAAE4E,CAAC;IAAEC;EAAE,CAAC,EAAE;IACzB,MAAMqD,KAAK,GAAG,IAAI,CAACJ,YAAY,CAAC9H,CAAC,EAAE4E,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;IAC3C,OAAO,IAAI1F,MAAM,CAAC+I,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,yBAAyBA,CAAC;IAAEnI,CAAC;IAAE4E,CAAC;IAAEC;EAAE,CAAC,EAAE;IACrC,MAAMqD,KAAK,GAAG,IAAI,CAACJ,YAAY,CAAC9H,CAAC,EAAE4E,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;IAC3CqD,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;IACpBA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;IACpBA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;IACpB,OAAO,IAAI/I,MAAM,CAAC+I,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,iBAAiBA,CAAC;IAAEpI,CAAC;IAAE4E,CAAC;IAAEC;EAAE,CAAC,EAAE;IAC7B,MAAMqD,KAAK,GAAG,IAAI,CAACJ,YAAY,CAAC9H,CAAC,EAAE4E,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;IAC3C,OAAO,IAAI1F,MAAM,CAAC+I,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,YAAYA,CAACtF,UAAU,EAAEC,MAAM,EAAE;IAC/B,IAAIA,MAAM,KAAKtC,SAAS,EAAE;MACxBsC,MAAM,GAAGD,UAAU,CAACtB,IAAI,CAAC,CAAC;IAC5B;IACAuB,MAAM,CAAChD,CAAC,GAAG,IAAI,CAAC6B,GAAG,CAAC,CAAC,CAAC,CAACqB,GAAG,CAACH,UAAU,CAAC;IACtCC,MAAM,CAAC4B,CAAC,GAAG,IAAI,CAAC/C,GAAG,CAAC,CAAC,CAAC,CAACqB,GAAG,CAACH,UAAU,CAAC;IACtCC,MAAM,CAAC6B,CAAC,GAAG,IAAI,CAAChD,GAAG,CAAC,CAAC,CAAC,CAACqB,GAAG,CAACH,UAAU,CAAC;IACtC,OAAOC,MAAM;EACf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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}