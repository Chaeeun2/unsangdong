{"ast":null,"code":"import { N as NORMAL, u as BLEND } from '../constants-BRcElHU3.js';\nimport { R as RGB, b as RGBHDR, H as HSB, d as HSL, e as HWB, L as LAB, f as LCH, O as OKLAB, g as OKLCH } from '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport './color_spaces/hsb.js';\n\n/**\n * @module Color\n * @submodule Setting\n * @for p5\n * @requires core\n * @requires constants\n */\n\nfunction setting(p5, fn) {\n  /**\n   * Starts defining a shape that will mask any shapes drawn afterward.\n   *\n   * Any shapes drawn between `beginClip()` and\n   * <a href=\"#/p5/endClip\">endClip()</a> will add to the mask shape. The mask\n   * will apply to anything drawn after <a href=\"#/p5/endClip\">endClip()</a>.\n   *\n   * The parameter, `options`, is optional. If an object with an `invert`\n   * property is passed, as in `beginClip({ invert: true })`, it will be used to\n   * set the masking mode. `{ invert: true }` inverts the mask, creating holes\n   * in shapes that are masked. `invert` is `false` by default.\n   *\n   * Masks can be contained between the\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n   * Doing so allows unmasked shapes to be drawn after masked shapes.\n   *\n   * Masks can also be defined in a callback function that's passed to\n   * <a href=\"#/p5/clip\">clip()</a>.\n   *\n   * @method beginClip\n   * @param {Object} [options] an object containing clip settings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an inverted mask.\n   *   beginClip({ invert: true });\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white square at the top-left corner of a gray square. The white square has a triangle and a circle cut out of it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *\n   *   // Draw a masked shape.\n   *   push();\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw an inverted masked shape.\n   *   push();\n   *   // Create an inverted mask.\n   *   beginClip({ invert: true });\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   describe('In the top left, a white triangle and circle. In the bottom right, a white square with a triangle and circle cut out of it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored fuchsia.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   fill('fuchsia');\n   *   plane(100);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored with a gradient from cyan to purple.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   beginShape(QUAD_STRIP);\n   *   fill(0, 255, 255);\n   *   vertex(-width / 2, -height / 2);\n   *   vertex(width / 2, -height / 2);\n   *   fill(100, 0, 100);\n   *   vertex(-width / 2, height / 2);\n   *   vertex(width / 2, height / 2);\n   *   endShape();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.beginClip = function (options = {}) {\n    this._renderer.beginClip(options);\n  };\n\n  /**\n   * Ends defining a mask that was started with\n   * <a href=\"#/p5/beginClip\">beginClip()</a>.\n   *\n   * @method endClip\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.endClip = function () {\n    this._renderer.endClip();\n  };\n\n  /**\n   * Defines a shape that will mask any shapes drawn afterward.\n   *\n   * The first parameter, `callback`, is a function that defines the mask.\n   * Any shapes drawn in  `callback` will add to the mask shape. The mask\n   * will apply to anything drawn after `clip()` is called.\n   *\n   * The second parameter, `options`, is optional. If an object with an `invert`\n   * property is passed, as in `beginClip({ invert: true })`, it will be used to\n   * set the masking mode. `{ invert: true }` inverts the mask, creating holes\n   * in shapes that are masked. `invert` is `false` by default.\n   *\n   * Masks can be contained between the\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n   * Doing so allows unmasked shapes to be drawn after masked shapes.\n   *\n   * Masks can also be defined with <a href=\"#/p5/beginClip\">beginClip()</a>\n   * and <a href=\"#/p5/endClip\">endClip()</a>.\n   *\n   * @method clip\n   * @param {Function} callback a function that draws the mask shape.\n   * @param {Object} [options] an object containing clip settings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an inverted mask.\n   *   clip(mask, { invert: true });\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white square at the top-left corner of a gray square. The white square has a triangle and a circle cut out of it.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *\n   *   // Draw a masked shape.\n   *   push();\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw an inverted masked shape.\n   *   push();\n   *   // Create an inverted mask.\n   *   clip(mask, { invert: true });\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   describe('In the top left, a white triangle and circle. In the bottom right, a white square with a triangle and circle cut out of it.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored fuchsia.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   fill('fuchsia');\n   *   plane(100);\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored with a gradient from cyan to purple.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   beginShape(QUAD_STRIP);\n   *   fill(0, 255, 255);\n   *   vertex(-width / 2, -height / 2);\n   *   vertex(width / 2, -height / 2);\n   *   fill(100, 0, 100);\n   *   vertex(-width / 2, height / 2);\n   *   vertex(width / 2, height / 2);\n   *   endShape();\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.clip = function (callback, options) {\n    this._renderer.beginClip(options);\n    callback();\n    this._renderer.endClip(options);\n  };\n\n  /**\n   * Sets the color used for the background of the canvas.\n   *\n   * By default, the background is transparent. `background()` is typically used\n   * within <a href=\"#/p5/draw\">draw()</a> to clear the display window at the\n   * beginning of each frame. It can also be used inside\n   * <a href=\"#/p5/setup\">setup()</a> to set the background on the first frame\n   * of animation.\n   *\n   * The version of `background()` with one parameter interprets the value one\n   * of four ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color string.\n   * RGB, RGBA, HSL, HSLA, hex, and named color strings are supported. If the\n   * parameter is a <a href=\"#/p5.Color\">p5.Color</a> object, it will be used as\n   * the background color. If the parameter is a\n   * <a href=\"#/p5.Image\">p5.Image</a> object, it will be used as the background\n   * image.\n   *\n   * The version of `background()` with two parameters interprets the first one\n   * as a grayscale value. The second parameter sets the alpha (transparency)\n   * value.\n   *\n   * The version of `background()` with three parameters interprets them as RGB,\n   * HSB, or HSL colors, depending on the current\n   * <a href=\"#/p5/colorMode\">colorMode()</a>. By default, colors are specified\n   * in RGB values. Calling `background(255, 204, 0)` sets the background a bright\n   * yellow color.\n   *\n   * @method background\n   * @param {p5.Color} color  any value created by the <a href=\"#/p5/color\">color()</a> function\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A grayscale value.\n   *   background(51);\n   *\n   *   describe('A canvas with a dark charcoal gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A grayscale value and an alpha value.\n   *   background(51, 0.4);\n   *   describe('A canvas with a transparent gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // R, G & B values.\n   *   background(255, 204, 0);\n   *\n   *   describe('A canvas with a yellow background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   background(255, 204, 100);\n   *\n   *   describe('A canvas with a royal blue background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A CSS named color.\n   *   background('red');\n   *\n   *   describe('A canvas with a red background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Three-digit hex RGB notation.\n   *   background('#fae');\n   *\n   *   describe('A canvas with a pink background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Six-digit hex RGB notation.\n   *   background('#222222');\n   *\n   *   describe('A canvas with a black background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Integer RGB notation.\n   *   background('rgb(0, 255, 0)');\n   *\n   *   describe('A canvas with a bright green background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Integer RGBA notation.\n   *   background('rgba(0, 255, 0, 0.25)');\n   *\n   *   describe('A canvas with a transparent green background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Percentage RGB notation.\n   *   background('rgb(100%, 0%, 10%)');\n   *\n   *   describe('A canvas with a red background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Percentage RGBA notation.\n   *   background('rgba(100%, 0%, 100%, 0.5)');\n   *\n   *   describe('A canvas with a transparent purple background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A p5.Color object.\n   *   let c = color(0, 0, 255);\n   *   background(c);\n   *\n   *   describe('A canvas with a blue background.');\n   * }\n   * </code>\n   * </div>\n   *\n   */\n\n  /**\n   * @method background\n   * @param {String} colorstring color string, possible formats include: integer\n   *                         rgb() or rgba(), percentage rgb() or rgba(),\n   *                         3-digit hex, 6-digit hex.\n   * @param {Number} [a]         opacity of the background relative to current\n   *                             color range (default is 0-255).\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {Number} gray   specifies a value between white and black.\n   * @param {Number} [a]\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {Number} v1     red value if color mode is RGB, or hue value if color mode is HSB.\n   * @param {Number} v2     green value if color mode is RGB, or saturation value if color mode is HSB.\n   * @param {Number} v3     blue value if color mode is RGB, or brightness value if color mode is HSB.\n   * @param  {Number} [a]\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param  {Number[]}      values  an array containing the red, green, blue\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {p5.Image} image     image created with <a href=\"#/p5/loadImage\">loadImage()</a>\n   *                             or <a href=\"#/p5/createImage\">createImage()</a>,\n   *                             to set as background.\n   *                             (must be same size as the sketch window).\n   * @param  {Number}  [a]\n   * @chainable\n   */\n  fn.background = function (...args) {\n    this._renderer.background(...args);\n    return this;\n  };\n\n  /**\n   * Clears the pixels on the canvas.\n   *\n   * `clear()` makes every pixel 100% transparent. Calling `clear()` doesn't\n   * clear objects created by `createX()` functions such as\n   * <a href=\"#/p5/createGraphics\">createGraphics()</a>,\n   * <a href=\"#/p5/createVideo\">createVideo()</a>, and\n   * <a href=\"#/p5/createImg\">createImg()</a>. These objects will remain\n   * unchanged after calling `clear()` and can be redrawn.\n   *\n   * In WebGL mode, this function can clear the screen to a specific color. It\n   * interprets four numeric parameters as normalized RGBA color values. It also\n   * clears the depth buffer. If you are not using the WebGL renderer, these\n   * parameters will have no effect.\n   *\n   * @method clear\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A gray square. White circles are drawn as the user moves the mouse. The circles disappear when the user presses the mouse.');\n   * }\n   *\n   * function draw() {\n   *   circle(mouseX, mouseY, 20);\n   * }\n   *\n   * function mousePressed() {\n   *   clear();\n   *   background(200);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pg;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(200);\n   *\n   *   pg = createGraphics(60, 60);\n   *   pg.background(200);\n   *   pg.noStroke();\n   *   pg.circle(pg.width / 2, pg.height / 2, 15);\n   *   image(pg, 20, 20);\n   *\n   *   describe('A white circle drawn on a gray square. The square gets smaller when the mouse is pressed.');\n   * }\n   *\n   * function mousePressed() {\n   *   clear();\n   *   image(pg, 20, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * @param {Number} [r] normalized red value.\n   * @param {Number} [g] normalized green value.\n   * @param {Number} [b] normalized blue value.\n   * @param {Number} [a] normalized alpha value.\n   */\n  fn.clear = function (...args) {\n    const _r = args[0] || 0;\n    const _g = args[1] || 0;\n    const _b = args[2] || 0;\n    const _a = args[3] || 0;\n    this._renderer.clear(_r, _g, _b, _a);\n    return this;\n  };\n\n  /**\n   * Changes the way color values are interpreted.\n   *\n   * By default, the `Number` parameters for <a href=\"#/p5/fill\">fill()</a>,\n   * <a href=\"#/p5/stroke\">stroke()</a>,\n   * <a href=\"#/p5/background\">background()</a>, and\n   * <a href=\"#/p5/color\">color()</a> are defined by values between 0 and 255\n   * using the RGB color model. This is equivalent to calling\n   * `colorMode(RGB, 255)`. Pure red is `color(255, 0, 0)` in this model.\n   *\n   * Calling `colorMode(RGB, 100)` sets colors to use RGB color values\n   * between 0 and 100. Pure red is `color(100, 0, 0)` in this model.\n   *\n   * Calling `colorMode(HSB)` or `colorMode(HSL)` changes to HSB or HSL systems instead of RGB.\n   * Pure red is `color(0, 100, 100)` in HSB and `color(0, 100, 50)` in HSL.\n   *\n   * Some additional color modes that p5.js supports are:\n   *\n   * `RGBHDR` - High Dynamic Range RGB defined within the Display P3 color space.\n   *          Colors are expressed with an extended dynamic range. To render these colors\n   *          accurately, you must use the HDR canvas.\n   *\n   * `HWB`    - Hue, Whiteness, Blackness.\n   *          Similar to HSB and HSL, this mode uses a hue angle.\n   *          Instead of saturation and lightness, HWB defines colors based on the percentage\n   *          of whiteness and blackness. This is the color model used by Chrome's GUI color picker.\n   *          Pure red in HWB is represented as `color(0, 0, 0)` (i.e., hue 0 with 0% whiteness and 0% blackness).\n   *    \n   *          <img src=\"assets/hwb.png\"></img>\n   *\n   * `LAB`    - Also known as CIE Lab, this color mode defines colors with Lightness, Alpha, and Beta.\n   *          It is widely used in professional color measurement contexts due to its perceptual uniformity.\n   *\n   * `LCH`    - A more intuitive representation of the CIE Lab color space using Lightness, Chroma, and Hue.\n   *          This mode separates the color's chromatic intensity (chroma) from its lightness,\n   *          simplifying color selection and manipulation.\n   *\n   * `OKLAB`  - A variant of the CIE Lab color space that corrects for non-uniformities inherent in LAB.\n   *          The adjustment provides a more perceptually accurate and uniform representation,\n   *          which is particularly beneficial for smooth color transitions.\n   *\n   * `OKLCH`  - An easier-to-use representation of OKLAB, expressing colors in terms of Lightness, Chroma, and Hue.\n   *          This mode retains the perceptual benefits of OKLAB while offering a more intuitive format for color manipulation.\n   *\n   * <a href=\"#/p5.Color\">p5.Color</a> objects remember the mode that they were\n   * created in. Changing modes doesn't affect their appearance.\n   *\n   *  `Single-value (Grayscale) Colors`:    \n   *  When a color is specified with only one parameter (e.g., `color(g)`), p5.js will interpret it\n   *  as a grayscale color. However, how that single parameter translates into a grayscale value\n   *  depends on the color mode:\n   *\n   * - `RGB, HSB, and HSL`: In RGB, the single value is interpreted using the “blue” maximum \n   *   (i.e., the single parameter is mapped to the blue channel's max). \n   *   In HSB and HSL, the single value is mapped to Brightness and Lightness max respectively with hue=0 . \n   *   and saturation=0.\n   *\n   * - `LAB, LCH, OKLAB, and OKLCH`: The single value is taken to be the `lightness (L)` component,\n   *   with the specified max range for that channel.\n   *\n   * - `HWB`: Grayscale relies on both the `whiteness (W)` and `blackness (B)` channels. Since\n   *   a single value cannot directly account for two distinct channels, the library uses an\n   *   average of their max values to interpret the single grayscale parameter. For instance,\n   *   if W has a max of 50 and B has a max of 100, then the single grayscale parameter\n   *   is mapped using (50 + 100) / 2 = 75 as its effective maximum. More complex or negative\n   *   ranges are currently not handled, so results in those cases may be ambiguous.\n   *\n   * @method colorMode\n   * @param {RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH} mode   either RGB, HSB, HSL,\n   *          or one of the extended modes described above.\n   * @param {Number}  [max]  range for all values.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Fill with pure red.\n   *   fill(255, 0, 0);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use RGB color with values in the range 0-100.\n   *   colorMode(RGB, 100);\n   *\n   *   // Fill with pure red.\n   *   fill(100, 0, 0);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // Fill with pure red.\n   *   fill(0, 100, 100);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSL color.\n   *   colorMode(HSL);\n   *\n   *   // Fill with pure red.\n   *   fill(0, 100, 50);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background using the default color mode.\n   *   background(200); \n   *   \n   *   // Switch to HWB color mode.\n   *   // (Assuming p5.js supports HWB with a range of:\n   *   // hue: 0–360, whiteness: 0–100, blackness: 0–100.)\n   *   colorMode(HWB);\n   *   \n   *   // Set fill to pure red in HWB.\n   *   // Pure red in HWB is: hue = 0°, whiteness = 0%, blackness = 0%.\n   *   fill(0, 0, 0);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using HWB color mode.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background using the default color mode.\n   *   background(200);\n   *   \n   *   // Switch to LAB color mode.\n   *   // In this mode, L typically ranges from 0 to 100 while a and b span roughly -128 to 127.\n   *   colorMode(LAB);\n   *   \n   *   // Set fill to pure red in LAB.\n   *   // The sRGB red (255, 0, 0) converts approximately to LAB as:\n   *   // L = 53, a = 80, b = 67.\n   *   fill(53, 80, 67);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using LAB color mode.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background.\n   *   background(200);\n   *   \n   *   // Switch to LCH color mode.\n   *   // In LCH, colors are defined by Lightness, Chroma, and Hue (in degrees).\n   *   colorMode(LCH);\n   *   \n   *   // Set fill to an approximation of pure red in LCH:\n   *   // Lightness ≈ 53, Chroma ≈ 104, Hue ≈ 40°.\n   *   fill(53, 104, 40);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using LCH color mode.');\n   * }\n   * </code>  \n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use RGB color with values in the range 0-100.\n   *   colorMode(RGB, 100);\n   *\n   *   for (let x = 0; x < 100; x += 1) {\n   *     for (let y = 0; y < 100; y += 1) {\n   *       stroke(x, y, 0);\n   *       point(x, y);\n   *     }\n   *   }\n   *\n   *   describe(\n   *     'A diagonal green to red gradient from bottom-left to top-right with shading transitioning to black at top-left corner.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use HSB color with values in the range 0-100.\n   *   colorMode(HSB, 100);\n   *\n   *   for (let x = 0; x < 100; x += 1) {\n   *     for (let y = 0; y < 100; y += 1) {\n   *       stroke(x, y, 100);\n   *       point(x, y);\n   *     }\n   *   }\n   *\n   *   describe('A rainbow gradient from left-to-right. Brightness transitions to white at the top.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let myColor = color(180, 175, 230);\n   *   background(myColor);\n   *\n   *   // Use RGB color with values in the range 0-1.\n   *   colorMode(RGB, 1);\n   *\n   *   // Get the red, green, and blue color components.\n   *   let redValue = red(myColor);\n   *   let greenValue = green(myColor);\n   *   let blueValue = blue(myColor);\n   *\n   *   // Round the color components for display.\n   *   redValue = round(redValue, 2);\n   *   greenValue = round(greenValue, 2);\n   *   blueValue = round(blueValue, 2);\n   *\n   *   // Display the color components.\n   *   text(`Red: ${redValue}`, 10, 10, 80, 80);\n   *   text(`Green: ${greenValue}`, 10, 40, 80, 80);\n   *   text(`Blue: ${blueValue}`, 10, 70, 80, 80);\n   *\n   *   describe('A purple canvas with the red, green, and blue decimal values of the color written on it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(255);\n   *\n   *   // Use RGB color with alpha values in the range 0-1.\n   *   colorMode(RGB, 255, 255, 255, 1);\n   *\n   *   noFill();\n   *   strokeWeight(4);\n   *   stroke(255, 0, 10, 0.3);\n   *   circle(40, 40, 50);\n   *   circle(50, 60, 50);\n   *\n   *   describe('Two overlapping translucent pink circle outlines.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * let hslGraphic, lchGraphic, oklchGraphic;\n   *\n   * function setup() {\n   *   createCanvas(600, 200);\n   *   noLoop();\n   *\n   *   // Create three graphics objects for HSL, LCH, and OKLCH color modes\n   *   hslGraphic = createGraphics(200, 200);\n   *   lchGraphic = createGraphics(200, 200);\n   *   oklchGraphic = createGraphics(200, 200);\n   *\n   *   // Draw HSL color wheel\n   *   colorMode(HSL);\n   *   hslGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     hslGraphic.stroke(360 / 1000 * i, 70, 50);\n   *     hslGraphic.line(0, 0, hslGraphic.width / 2, 0);\n   *     hslGraphic.rotate(TAU / 1000);\n   *   }\n   *\n   *   // Draw LCH color wheel\n   *   colorMode(LCH);\n   *   lchGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     lchGraphic.stroke(54, 106, 360 / 1000 * i);\n   *     lchGraphic.line(0, 0, lchGraphic.width / 2, 0);\n   *     lchGraphic.rotate(TAU / 1000);\n   *   }\n   *\n   *   // Draw OKLCH color wheel\n   *   colorMode(OKLCH);\n   *   oklchGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     oklchGraphic.stroke(54, 106, 360 / 1000 * i);\n   *     oklchGraphic.line(0, 0, oklchGraphic.width / 2, 0);\n   *     oklchGraphic.rotate(TAU / 1000);\n   *   }\n   * }\n   *\n   * function draw() {\n   *   // Set the styles\n   *   colorMode(RGB);\n   *   background(220);\n   *\n   *   // Display the color wheels\n   *   image(hslGraphic, 0, 0);\n   *   image(lchGraphic, 200, 0);\n   *   image(oklchGraphic, 400, 0);\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * // Example: Single-value (Grayscale) colors in different color modes.\n   * // The rectangle is filled with one parameter, but its final color depends\n   * // on how that parameter is interpreted by the current color mode.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   noStroke();\n   *   noLoop();\n   * }\n   *\n   * function draw() {\n   *   // Set color mode to RGB with range 0-255\n   *   colorMode(RGB, 255);\n   *   \n   *   // Fill with single grayscale value\n   *   fill(128);\n   *   rect(0, 0, 100, 100);\n   *\n   *   // Add text label\n   *   fill(0); // Switch to black text for clarity\n   *   textSize(14);\n   *   text(\"RGB (128)\", 10, 20);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method colorMode\n   * @param {RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH} mode\n   * @param {Number} max1     range for the red or hue depending on the\n   *                              current color mode.\n   * @param {Number} max2     range for the green or saturation depending\n   *                              on the current color mode.\n   * @param {Number} max3     range for the blue or brightness/lightness\n   *                              depending on the current color mode.\n   * @param {Number} [maxA]   range for the alpha.\n   *\n   * @return {String}      The current color mode.\n   */\n  fn.colorMode = function (mode, max1, max2, max3, maxA) {\n    // p5._validateParameters('colorMode', arguments);\n    if ([RGB, RGBHDR, HSB, HSL, HWB, LAB, LCH, OKLAB, OKLCH].includes(mode)) {\n      // Set color mode.\n      this._renderer.states.setValue('colorMode', mode);\n\n      // Set color maxes.\n      this._renderer.states.setValue('colorMaxes', this._renderer.states.colorMaxes.clone());\n      const maxes = this._renderer.states.colorMaxes[mode];\n      if (arguments.length === 2) {\n        maxes[0] = max1; // Red\n        maxes[1] = max1; // Green\n        maxes[2] = max1; // Blue\n        maxes[3] = max1; // Alpha\n      } else if (arguments.length === 4) {\n        maxes[0] = max1; // Red\n        maxes[1] = max2; // Green\n        maxes[2] = max3; // Blue\n      } else if (arguments.length === 5) {\n        maxes[0] = max1; // Red\n        maxes[1] = max2; // Green\n        maxes[2] = max3; // Blue\n        maxes[3] = maxA; // Alpha\n      }\n    }\n    return this._renderer.states.colorMode;\n  };\n\n  /**\n   * Sets the color used to fill shapes.\n   *\n   * Calling `fill(255, 165, 0)` or `fill('orange')` means all shapes drawn\n   * after the fill command will be filled with the color orange.\n   *\n   * The version of `fill()` with one parameter interprets the value one of\n   * three ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color\n   * string. A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to\n   * set the fill color.\n   *\n   * The version of `fill()` with three parameters interprets them as RGB, HSB,\n   * or HSL colors, depending on the current\n   * <a href=\"#/p5/colorMode\">colorMode()</a>. The default color space is RGB,\n   * with each value in the range from 0 to 255.\n   *\n   * @method fill\n   * @param  {Number}        v1      red value if color mode is RGB or hue value if color mode is HSB.\n   * @param  {Number}        v2      green value if color mode is RGB or saturation value if color mode is HSB.\n   * @param  {Number}        v3      blue value if color mode is RGB or brightness value if color mode is HSB.\n   * @param  {Number}        [alpha] alpha value, controls transparency (0 - transparent, 255 - opaque).\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A grayscale value.\n   *   fill(51);\n   *   square(20, 20, 60);\n   *\n   *   describe('A dark charcoal gray square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // R, G & B values.\n   *   fill(255, 204, 0);\n   *   square(20, 20, 60);\n   *\n   *   describe('A yellow square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   fill(255, 204, 100);\n   *   square(20, 20, 60);\n   *\n   *   describe('A royal blue square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A CSS named color.\n   *   fill('red');\n   *   square(20, 20, 60);\n   *\n   *   describe('A red square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Three-digit hex RGB notation.\n   *   fill('#fae');\n   *   square(20, 20, 60);\n   *\n   *   describe('A pink square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Six-digit hex RGB notation.\n   *   fill('#A251FA');\n   *   square(20, 20, 60);\n   *\n   *   describe('A purple square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGB notation.\n   *   fill('rgb(0, 255, 0)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A bright green square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGBA notation.\n   *   fill('rgba(0, 255, 0, 0.25)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A soft green rectange with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGB notation.\n   *   fill('rgb(100%, 0%, 10%)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A red square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGBA notation.\n   *   fill('rgba(100%, 0%, 100%, 0.5)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A dark fuchsia square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A p5.Color object.\n   *   let c = color(0, 0, 255);\n   *   fill(c);\n   *   square(20, 20, 60);\n   *\n   *   describe('A blue square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method fill\n   * @param  {String}        value   a color string.\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {Number}        gray   a grayscale value.\n   * @param  {Number}        [alpha]\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {Number[]}      values  an array containing the red, green, blue &\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {p5.Color}      color   the fill color.\n   * @chainable\n   */\n  fn.fill = function (...args) {\n    this._renderer.fill(...args);\n    return this;\n  };\n\n  /**\n   * Disables setting the fill color for shapes.\n   *\n   * Calling `noFill()` is the same as making the fill completely transparent,\n   * as in `fill(0, 0)`. If both <a href=\"#/p5/noStroke\">noStroke()</a> and\n   * `noFill()` are called, nothing will be drawn to the screen.\n   *\n   * @method noFill\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the top square.\n   *   square(32, 10, 35);\n   *\n   *   // Draw the bottom square.\n   *   noFill();\n   *   square(32, 55, 35);\n   *\n   *   describe('A white square on above an empty square. Both squares have black outlines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div modernizr='webgl'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A purple cube wireframe spinning on a black canvas.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Style the box.\n   *   noFill();\n   *   stroke(100, 100, 240);\n   *\n   *   // Rotate the coordinates.\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the box.\n   *   box(45);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noFill = function () {\n    this._renderer.noFill();\n    return this;\n  };\n\n  /**\n   * Disables drawing points, lines, and the outlines of shapes.\n   *\n   * Calling `noStroke()` is the same as making the stroke completely transparent,\n   * as in `stroke(0, 0)`. If both `noStroke()` and\n   * <a href=\"#/p5/noFill\">noFill()</a> are called, nothing will be drawn to the\n   * screen.\n   *\n   * @method noStroke\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with no outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div modernizr='webgl'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A pink cube with no edge outlines spinning on a black canvas.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Style the box.\n   *   noStroke();\n   *   fill(240, 150, 150);\n   *\n   *   // Rotate the coordinates.\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the box.\n   *   box(45);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noStroke = function () {\n    this._renderer.states.setValue('strokeColor', null);\n    return this;\n  };\n\n  /**\n   * Sets the color used to draw points, lines, and the outlines of shapes.\n   *\n   * Calling `stroke(255, 165, 0)` or `stroke('orange')` means all shapes drawn\n   * after calling `stroke()` will be filled with the color orange. The way\n   * these parameters are interpreted may be changed with the\n   * <a href=\"#/p5/colorMode\">colorMode()</a> function.\n   *\n   * The version of `stroke()` with one parameter interprets the value one of\n   * three ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color\n   * string. A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to\n   * set the stroke color.\n   *\n   * The version of `stroke()` with two parameters interprets the first one as a\n   * grayscale value. The second parameter sets the alpha (transparency) value.\n   *\n   * The version of `stroke()` with three parameters interprets them as RGB, HSB,\n   * or HSL colors, depending on the current `colorMode()`.\n   *\n   * The version of `stroke()` with four parameters interprets them as RGBA, HSBA,\n   * or HSLA colors, depending on the current `colorMode()`. The last parameter\n   * sets the alpha (transparency) value.\n   *\n   * @method stroke\n   * @param  {Number}        v1      red value if color mode is RGB or hue value if color mode is HSB.\n   * @param  {Number}        v2      green value if color mode is RGB or saturation value if color mode is HSB.\n   * @param  {Number}        v3      blue value if color mode is RGB or brightness value if color mode is HSB.\n   * @param  {Number}        [alpha] alpha value, controls transparency (0 - transparent, 255 - opaque).\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A grayscale value.\n   *   strokeWeight(4);\n   *   stroke(51);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a dark charcoal gray outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // R, G & B values.\n   *   stroke(255, 204, 0);\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a yellow outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   strokeWeight(4);\n   *   stroke(255, 204, 100);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a royal blue outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A CSS named color.\n   *   stroke('red');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a red outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Three-digit hex RGB notation.\n   *   stroke('#fae');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a pink outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Six-digit hex RGB notation.\n   *   stroke('#222222');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGB notation.\n   *   stroke('rgb(0, 255, 0)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a bright green outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGBA notation.\n   *   stroke('rgba(0, 255, 0, 0.25)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a soft green outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGB notation.\n   *   stroke('rgb(100%, 0%, 10%)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a red outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGBA notation.\n   *   stroke('rgba(100%, 0%, 100%, 0.5)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a dark fuchsia outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A p5.Color object.\n   *   stroke(color(0, 0, 255));\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a blue outline.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method stroke\n   * @param  {String}        value   a color string.\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {Number}        gray   a grayscale value.\n   * @param  {Number}        [alpha]\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {Number[]}      values  an array containing the red, green, blue,\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {p5.Color}      color   the stroke color.\n   * @chainable\n   */\n  fn.stroke = function (...args) {\n    this._renderer.stroke(...args);\n    return this;\n  };\n\n  /**\n   * Starts using shapes to erase parts of the canvas.\n   *\n   * All drawing that follows `erase()` will subtract from the canvas, revealing\n   * the web page underneath. The erased areas will become transparent, allowing\n   * the content behind the canvas to show through. The\n   * <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n   * <a href=\"#/p5/blendMode\">blendMode()</a> have no effect once `erase()` is\n   * called.\n   *\n   * The `erase()` function has two optional parameters. The first parameter\n   * sets the strength of erasing by the shape's interior. A value of 0 means\n   * that no erasing will occur. A value of 255 means that the shape's interior\n   * will fully erase the content underneath. The default value is 255\n   * (full strength).\n   *\n   * The second parameter sets the strength of erasing by the shape's edge. A\n   * value of 0 means that no erasing will occur. A value of 255 means that the\n   * shape's edge will fully erase the content underneath. The default value is\n   * 255 (full strength).\n   *\n   * To cancel the erasing effect, use the <a href=\"#/p5/noErase\">noErase()</a>\n   * function.\n   *\n   * `erase()` has no effect on drawing done with the\n   * <a href=\"#/p5/image\">image()</a> and\n   * <a href=\"#/p5/background\">background()</a> functions.\n   *\n   * @method erase\n   * @param  {Number}   [strengthFill]      a number (0-255) for the strength of erasing under a shape's interior.\n   *                                        Defaults to 255, which is full strength.\n   * @param  {Number}   [strengthStroke]    a number (0-255) for the strength of erasing under a shape's edge.\n   *                                        Defaults to 255, which is full strength.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100, 100, 250);\n   *\n   *   // Draw a pink square.\n   *   fill(250, 100, 100);\n   *   square(20, 20, 60);\n   *\n   *   // Erase a circular area.\n   *   erase();\n   *   circle(25, 30, 30);\n   *   noErase();\n   *\n   *   describe('A purple canvas with a pink square in the middle. A circle is erased from the top-left, leaving a hole.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100, 100, 250);\n   *\n   *   // Draw a pink square.\n   *   fill(250, 100, 100);\n   *   square(20, 20, 60);\n   *\n   *   // Erase a circular area.\n   *   strokeWeight(5);\n   *   erase(150, 255);\n   *   circle(25, 30, 30);\n   *   noErase();\n   *\n   *   describe('A purple canvas with a pink square in the middle. A circle at the top-left partially erases its interior and a fully erases its outline.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.erase = function (opacityFill = 255, opacityStroke = 255) {\n    this._renderer.erase(opacityFill, opacityStroke);\n    return this;\n  };\n\n  /**\n   * Ends erasing that was started with <a href=\"#/p5/erase\">erase()</a>.\n   *\n   * The <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n   * <a href=\"#/p5/blendMode\">blendMode()</a> settings will return to what they\n   * were prior to calling <a href=\"#/p5/erase\">erase()</a>.\n   *\n   * @method noErase\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(235, 145, 15);\n   *\n   *   // Draw the left rectangle.\n   *   noStroke();\n   *   fill(30, 45, 220);\n   *   rect(30, 10, 10, 80);\n   *\n   *   // Erase a circle.\n   *   erase();\n   *   circle(50, 50, 60);\n   *   noErase();\n   *\n   *   // Draw the right rectangle.\n   *   rect(70, 10, 10, 80);\n   *\n   *   describe('An orange canvas with two tall blue rectangles. A circular hole in the center erases the rectangle on the left but not the one on the right.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noErase = function () {\n    this._renderer.noErase();\n    return this;\n  };\n\n  /**\n   * Sets the way colors blend when added to the canvas.\n   *\n   * By default, drawing with a solid color paints over the current pixel values\n   * on the canvas. `blendMode()` offers many options for blending colors.\n   *\n   * Shapes, images, and text can be used as sources for drawing to the canvas.\n   * A source pixel changes the color of the canvas pixel where it's drawn. The\n   * final color results from blending the source pixel's color with the canvas\n   * pixel's color. RGB color values from the source and canvas pixels are\n   * compared, added, subtracted, multiplied, and divided to create different\n   * effects. Red values with red values, greens with greens, and blues with\n   * blues.\n   *\n   * The parameter, `mode`, sets the blend mode. For example, calling\n   * `blendMode(ADD)` sets the blend mode to `ADD`. The following blend modes\n   * are available in both 2D and WebGL mode:\n   *\n   * - `BLEND`: color values from the source overwrite the canvas. This is the default mode.\n   * - `ADD`: color values from the source are added to values from the canvas.\n   * - `DARKEST`: keeps the darkest color value.\n   * - `LIGHTEST`: keeps the lightest color value.\n   * - `EXCLUSION`: similar to `DIFFERENCE` but with less contrast.\n   * - `MULTIPLY`: color values from the source are multiplied with values from the canvas. The result is always darker.\n   * - `SCREEN`: all color values are inverted, then multiplied, then inverted again. The result is always lighter. (Opposite of `MULTIPLY`)\n   * - `REPLACE`: the last source drawn completely replaces the rest of the canvas.\n   * - `REMOVE`: overlapping pixels are removed by making them completely transparent.\n   *\n   * The following blend modes are only available in 2D mode:\n   *\n   * - `DIFFERENCE`: color values from the source are subtracted from the values from the canvas. If the difference is a negative number, it's made positive.\n   * - `OVERLAY`: combines `MULTIPLY` and `SCREEN`. Dark values in the canvas get darker and light values get lighter.\n   * - `HARD_LIGHT`: combines `MULTIPLY` and `SCREEN`. Dark values in the source get darker and light values get lighter.\n   * - `SOFT_LIGHT`: a softer version of `HARD_LIGHT`.\n   * - `DODGE`: lightens light tones and increases contrast. Divides the canvas color values by the inverted color values from the source.\n   * - `BURN`: darkens dark tones and increases contrast. Divides the source color values by the inverted color values from the canvas, then inverts the result.\n   *\n   * The following blend modes are only available in WebGL mode:\n   *\n   * - `SUBTRACT`: RGB values from the source are subtracted from the values from the canvas. If the difference is a negative number, it's made positive. Alpha (transparency) values from the source and canvas are added.\n   *\n   * @method blendMode\n   * @param  {(BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT)} mode blend mode to set.\n   *                either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n   *                EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n   *                SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use the default blend mode.\n   *   blendMode(BLEND);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(ADD);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DARKEST);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(LIGHTEST);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(EXCLUSION);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a cyan line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(MULTIPLY);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SCREEN);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(REPLACE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A diagonal red line.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(REMOVE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('The silhouette of an X is missing from a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DIFFERENCE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a cyan line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(OVERLAY);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is bright magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(HARD_LIGHT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SOFT_LIGHT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is violet.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DODGE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint violet.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(BURN);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SUBTRACT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a turquoise line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.blendMode = function (mode) {\n    // p5._validateParameters('blendMode', arguments);\n    if (mode === NORMAL) {\n      // Warning added 3/26/19, can be deleted in future (1.0 release?)\n      console.warn('NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.');\n      mode = BLEND;\n    }\n    this._renderer.blendMode(mode);\n  };\n}\nif (typeof p5 !== 'undefined') {\n  setting(p5, p5.prototype);\n}\nexport { setting as default };","map":{"version":3,"names":["N","NORMAL","u","BLEND","R","RGB","b","RGBHDR","H","HSB","d","HSL","e","HWB","L","LAB","f","LCH","O","OKLAB","g","OKLCH","setting","p5","fn","beginClip","options","_renderer","endClip","clip","callback","background","args","clear","_r","_g","_b","_a","colorMode","mode","max1","max2","max3","maxA","includes","states","setValue","colorMaxes","clone","maxes","arguments","length","fill","noFill","noStroke","stroke","erase","opacityFill","opacityStroke","noErase","blendMode","console","warn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/color/setting.js"],"sourcesContent":["import { N as NORMAL, u as BLEND } from '../constants-BRcElHU3.js';\nimport { R as RGB, b as RGBHDR, H as HSB, d as HSL, e as HWB, L as LAB, f as LCH, O as OKLAB, g as OKLCH } from '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport './color_spaces/hsb.js';\n\n/**\n * @module Color\n * @submodule Setting\n * @for p5\n * @requires core\n * @requires constants\n */\n\n\nfunction setting(p5, fn){\n  /**\n   * Starts defining a shape that will mask any shapes drawn afterward.\n   *\n   * Any shapes drawn between `beginClip()` and\n   * <a href=\"#/p5/endClip\">endClip()</a> will add to the mask shape. The mask\n   * will apply to anything drawn after <a href=\"#/p5/endClip\">endClip()</a>.\n   *\n   * The parameter, `options`, is optional. If an object with an `invert`\n   * property is passed, as in `beginClip({ invert: true })`, it will be used to\n   * set the masking mode. `{ invert: true }` inverts the mask, creating holes\n   * in shapes that are masked. `invert` is `false` by default.\n   *\n   * Masks can be contained between the\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n   * Doing so allows unmasked shapes to be drawn after masked shapes.\n   *\n   * Masks can also be defined in a callback function that's passed to\n   * <a href=\"#/p5/clip\">clip()</a>.\n   *\n   * @method beginClip\n   * @param {Object} [options] an object containing clip settings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an inverted mask.\n   *   beginClip({ invert: true });\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white square at the top-left corner of a gray square. The white square has a triangle and a circle cut out of it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *\n   *   // Draw a masked shape.\n   *   push();\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw an inverted masked shape.\n   *   push();\n   *   // Create an inverted mask.\n   *   beginClip({ invert: true });\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   describe('In the top left, a white triangle and circle. In the bottom right, a white square with a triangle and circle cut out of it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored fuchsia.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   fill('fuchsia');\n   *   plane(100);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored with a gradient from cyan to purple.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   beginShape(QUAD_STRIP);\n   *   fill(0, 255, 255);\n   *   vertex(-width / 2, -height / 2);\n   *   vertex(width / 2, -height / 2);\n   *   fill(100, 0, 100);\n   *   vertex(-width / 2, height / 2);\n   *   vertex(width / 2, height / 2);\n   *   endShape();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.beginClip = function(options = {}) {\n    this._renderer.beginClip(options);\n  };\n\n  /**\n   * Ends defining a mask that was started with\n   * <a href=\"#/p5/beginClip\">beginClip()</a>.\n   *\n   * @method endClip\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   beginClip();\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   *   endClip();\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.endClip = function() {\n    this._renderer.endClip();\n  };\n\n  /**\n   * Defines a shape that will mask any shapes drawn afterward.\n   *\n   * The first parameter, `callback`, is a function that defines the mask.\n   * Any shapes drawn in  `callback` will add to the mask shape. The mask\n   * will apply to anything drawn after `clip()` is called.\n   *\n   * The second parameter, `options`, is optional. If an object with an `invert`\n   * property is passed, as in `beginClip({ invert: true })`, it will be used to\n   * set the masking mode. `{ invert: true }` inverts the mask, creating holes\n   * in shapes that are masked. `invert` is `false` by default.\n   *\n   * Masks can be contained between the\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n   * Doing so allows unmasked shapes to be drawn after masked shapes.\n   *\n   * Masks can also be defined with <a href=\"#/p5/beginClip\">beginClip()</a>\n   * and <a href=\"#/p5/endClip\">endClip()</a>.\n   *\n   * @method clip\n   * @param {Function} callback a function that draws the mask shape.\n   * @param {Object} [options] an object containing clip settings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white triangle and circle on a gray background.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an inverted mask.\n   *   clip(mask, { invert: true });\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *\n   *   describe('A white square at the top-left corner of a gray square. The white square has a triangle and a circle cut out of it.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *\n   *   // Draw a masked shape.\n   *   push();\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw an inverted masked shape.\n   *   push();\n   *   // Create an inverted mask.\n   *   clip(mask, { invert: true });\n   *\n   *   // Draw a backing shape.\n   *   square(5, 5, 45);\n   *   pop();\n   *\n   *   describe('In the top left, a white triangle and circle. In the bottom right, a white square with a triangle and circle cut out of it.');\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   triangle(15, 37, 30, 13, 43, 37);\n   *   circle(45, 45, 7);\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored fuchsia.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   fill('fuchsia');\n   *   plane(100);\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A silhouette of a rotating torus colored with a gradient from cyan to purple.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a mask.\n   *   clip(mask);\n   *\n   *   // Draw a backing shape.\n   *   noStroke();\n   *   beginShape(QUAD_STRIP);\n   *   fill(0, 255, 255);\n   *   vertex(-width / 2, -height / 2);\n   *   vertex(width / 2, -height / 2);\n   *   fill(100, 0, 100);\n   *   vertex(-width / 2, height / 2);\n   *   vertex(width / 2, height / 2);\n   *   endShape();\n   * }\n   *\n   * // Declare a function that defines the mask.\n   * function mask() {\n   *   push();\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *   scale(0.5);\n   *   torus(30, 15);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.clip = function(callback, options) {\n    this._renderer.beginClip(options);\n    callback();\n    this._renderer.endClip(options);\n  };\n\n  /**\n   * Sets the color used for the background of the canvas.\n   *\n   * By default, the background is transparent. `background()` is typically used\n   * within <a href=\"#/p5/draw\">draw()</a> to clear the display window at the\n   * beginning of each frame. It can also be used inside\n   * <a href=\"#/p5/setup\">setup()</a> to set the background on the first frame\n   * of animation.\n   *\n   * The version of `background()` with one parameter interprets the value one\n   * of four ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color string.\n   * RGB, RGBA, HSL, HSLA, hex, and named color strings are supported. If the\n   * parameter is a <a href=\"#/p5.Color\">p5.Color</a> object, it will be used as\n   * the background color. If the parameter is a\n   * <a href=\"#/p5.Image\">p5.Image</a> object, it will be used as the background\n   * image.\n   *\n   * The version of `background()` with two parameters interprets the first one\n   * as a grayscale value. The second parameter sets the alpha (transparency)\n   * value.\n   *\n   * The version of `background()` with three parameters interprets them as RGB,\n   * HSB, or HSL colors, depending on the current\n   * <a href=\"#/p5/colorMode\">colorMode()</a>. By default, colors are specified\n   * in RGB values. Calling `background(255, 204, 0)` sets the background a bright\n   * yellow color.\n   *\n   * @method background\n   * @param {p5.Color} color  any value created by the <a href=\"#/p5/color\">color()</a> function\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A grayscale value.\n   *   background(51);\n   *\n   *   describe('A canvas with a dark charcoal gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A grayscale value and an alpha value.\n   *   background(51, 0.4);\n   *   describe('A canvas with a transparent gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // R, G & B values.\n   *   background(255, 204, 0);\n   *\n   *   describe('A canvas with a yellow background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   background(255, 204, 100);\n   *\n   *   describe('A canvas with a royal blue background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A CSS named color.\n   *   background('red');\n   *\n   *   describe('A canvas with a red background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Three-digit hex RGB notation.\n   *   background('#fae');\n   *\n   *   describe('A canvas with a pink background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Six-digit hex RGB notation.\n   *   background('#222222');\n   *\n   *   describe('A canvas with a black background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Integer RGB notation.\n   *   background('rgb(0, 255, 0)');\n   *\n   *   describe('A canvas with a bright green background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Integer RGBA notation.\n   *   background('rgba(0, 255, 0, 0.25)');\n   *\n   *   describe('A canvas with a transparent green background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Percentage RGB notation.\n   *   background('rgb(100%, 0%, 10%)');\n   *\n   *   describe('A canvas with a red background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Percentage RGBA notation.\n   *   background('rgba(100%, 0%, 100%, 0.5)');\n   *\n   *   describe('A canvas with a transparent purple background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // A p5.Color object.\n   *   let c = color(0, 0, 255);\n   *   background(c);\n   *\n   *   describe('A canvas with a blue background.');\n   * }\n   * </code>\n   * </div>\n   *\n   */\n\n  /**\n   * @method background\n   * @param {String} colorstring color string, possible formats include: integer\n   *                         rgb() or rgba(), percentage rgb() or rgba(),\n   *                         3-digit hex, 6-digit hex.\n   * @param {Number} [a]         opacity of the background relative to current\n   *                             color range (default is 0-255).\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {Number} gray   specifies a value between white and black.\n   * @param {Number} [a]\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {Number} v1     red value if color mode is RGB, or hue value if color mode is HSB.\n   * @param {Number} v2     green value if color mode is RGB, or saturation value if color mode is HSB.\n   * @param {Number} v3     blue value if color mode is RGB, or brightness value if color mode is HSB.\n   * @param  {Number} [a]\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param  {Number[]}      values  an array containing the red, green, blue\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method background\n   * @param {p5.Image} image     image created with <a href=\"#/p5/loadImage\">loadImage()</a>\n   *                             or <a href=\"#/p5/createImage\">createImage()</a>,\n   *                             to set as background.\n   *                             (must be same size as the sketch window).\n   * @param  {Number}  [a]\n   * @chainable\n   */\n  fn.background = function(...args) {\n    this._renderer.background(...args);\n    return this;\n  };\n\n  /**\n   * Clears the pixels on the canvas.\n   *\n   * `clear()` makes every pixel 100% transparent. Calling `clear()` doesn't\n   * clear objects created by `createX()` functions such as\n   * <a href=\"#/p5/createGraphics\">createGraphics()</a>,\n   * <a href=\"#/p5/createVideo\">createVideo()</a>, and\n   * <a href=\"#/p5/createImg\">createImg()</a>. These objects will remain\n   * unchanged after calling `clear()` and can be redrawn.\n   *\n   * In WebGL mode, this function can clear the screen to a specific color. It\n   * interprets four numeric parameters as normalized RGBA color values. It also\n   * clears the depth buffer. If you are not using the WebGL renderer, these\n   * parameters will have no effect.\n   *\n   * @method clear\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A gray square. White circles are drawn as the user moves the mouse. The circles disappear when the user presses the mouse.');\n   * }\n   *\n   * function draw() {\n   *   circle(mouseX, mouseY, 20);\n   * }\n   *\n   * function mousePressed() {\n   *   clear();\n   *   background(200);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pg;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(200);\n   *\n   *   pg = createGraphics(60, 60);\n   *   pg.background(200);\n   *   pg.noStroke();\n   *   pg.circle(pg.width / 2, pg.height / 2, 15);\n   *   image(pg, 20, 20);\n   *\n   *   describe('A white circle drawn on a gray square. The square gets smaller when the mouse is pressed.');\n   * }\n   *\n   * function mousePressed() {\n   *   clear();\n   *   image(pg, 20, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * @param {Number} [r] normalized red value.\n   * @param {Number} [g] normalized green value.\n   * @param {Number} [b] normalized blue value.\n   * @param {Number} [a] normalized alpha value.\n   */\n  fn.clear = function(...args) {\n    const _r = args[0] || 0;\n    const _g = args[1] || 0;\n    const _b = args[2] || 0;\n    const _a = args[3] || 0;\n\n    this._renderer.clear(_r, _g, _b, _a);\n    return this;\n  };\n\n  /**\n   * Changes the way color values are interpreted.\n   *\n   * By default, the `Number` parameters for <a href=\"#/p5/fill\">fill()</a>,\n   * <a href=\"#/p5/stroke\">stroke()</a>,\n   * <a href=\"#/p5/background\">background()</a>, and\n   * <a href=\"#/p5/color\">color()</a> are defined by values between 0 and 255\n   * using the RGB color model. This is equivalent to calling\n   * `colorMode(RGB, 255)`. Pure red is `color(255, 0, 0)` in this model.\n   *\n   * Calling `colorMode(RGB, 100)` sets colors to use RGB color values\n   * between 0 and 100. Pure red is `color(100, 0, 0)` in this model.\n   *\n   * Calling `colorMode(HSB)` or `colorMode(HSL)` changes to HSB or HSL systems instead of RGB.\n   * Pure red is `color(0, 100, 100)` in HSB and `color(0, 100, 50)` in HSL.\n   *\n   * Some additional color modes that p5.js supports are:\n   *\n   * `RGBHDR` - High Dynamic Range RGB defined within the Display P3 color space.\n   *          Colors are expressed with an extended dynamic range. To render these colors\n   *          accurately, you must use the HDR canvas.\n   *\n   * `HWB`    - Hue, Whiteness, Blackness.\n   *          Similar to HSB and HSL, this mode uses a hue angle.\n   *          Instead of saturation and lightness, HWB defines colors based on the percentage\n   *          of whiteness and blackness. This is the color model used by Chrome's GUI color picker.\n   *          Pure red in HWB is represented as `color(0, 0, 0)` (i.e., hue 0 with 0% whiteness and 0% blackness).\n   *    \n   *          <img src=\"assets/hwb.png\"></img>\n   *\n   * `LAB`    - Also known as CIE Lab, this color mode defines colors with Lightness, Alpha, and Beta.\n   *          It is widely used in professional color measurement contexts due to its perceptual uniformity.\n   *\n   * `LCH`    - A more intuitive representation of the CIE Lab color space using Lightness, Chroma, and Hue.\n   *          This mode separates the color's chromatic intensity (chroma) from its lightness,\n   *          simplifying color selection and manipulation.\n   *\n   * `OKLAB`  - A variant of the CIE Lab color space that corrects for non-uniformities inherent in LAB.\n   *          The adjustment provides a more perceptually accurate and uniform representation,\n   *          which is particularly beneficial for smooth color transitions.\n   *\n   * `OKLCH`  - An easier-to-use representation of OKLAB, expressing colors in terms of Lightness, Chroma, and Hue.\n   *          This mode retains the perceptual benefits of OKLAB while offering a more intuitive format for color manipulation.\n   *\n   * <a href=\"#/p5.Color\">p5.Color</a> objects remember the mode that they were\n   * created in. Changing modes doesn't affect their appearance.\n   *\n   *  `Single-value (Grayscale) Colors`:    \n   *  When a color is specified with only one parameter (e.g., `color(g)`), p5.js will interpret it\n   *  as a grayscale color. However, how that single parameter translates into a grayscale value\n   *  depends on the color mode:\n   *\n   * - `RGB, HSB, and HSL`: In RGB, the single value is interpreted using the “blue” maximum \n   *   (i.e., the single parameter is mapped to the blue channel's max). \n   *   In HSB and HSL, the single value is mapped to Brightness and Lightness max respectively with hue=0 . \n   *   and saturation=0.\n   *\n   * - `LAB, LCH, OKLAB, and OKLCH`: The single value is taken to be the `lightness (L)` component,\n   *   with the specified max range for that channel.\n   *\n   * - `HWB`: Grayscale relies on both the `whiteness (W)` and `blackness (B)` channels. Since\n   *   a single value cannot directly account for two distinct channels, the library uses an\n   *   average of their max values to interpret the single grayscale parameter. For instance,\n   *   if W has a max of 50 and B has a max of 100, then the single grayscale parameter\n   *   is mapped using (50 + 100) / 2 = 75 as its effective maximum. More complex or negative\n   *   ranges are currently not handled, so results in those cases may be ambiguous.\n   *\n   * @method colorMode\n   * @param {RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH} mode   either RGB, HSB, HSL,\n   *          or one of the extended modes described above.\n   * @param {Number}  [max]  range for all values.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Fill with pure red.\n   *   fill(255, 0, 0);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use RGB color with values in the range 0-100.\n   *   colorMode(RGB, 100);\n   *\n   *   // Fill with pure red.\n   *   fill(100, 0, 0);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // Fill with pure red.\n   *   fill(0, 100, 100);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSL color.\n   *   colorMode(HSL);\n   *\n   *   // Fill with pure red.\n   *   fill(0, 100, 50);\n   *\n   *   circle(50, 50, 25);\n   *\n   *   describe('A gray square with a red circle at its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background using the default color mode.\n   *   background(200); \n   *   \n   *   // Switch to HWB color mode.\n   *   // (Assuming p5.js supports HWB with a range of:\n   *   // hue: 0–360, whiteness: 0–100, blackness: 0–100.)\n   *   colorMode(HWB);\n   *   \n   *   // Set fill to pure red in HWB.\n   *   // Pure red in HWB is: hue = 0°, whiteness = 0%, blackness = 0%.\n   *   fill(0, 0, 0);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using HWB color mode.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background using the default color mode.\n   *   background(200);\n   *   \n   *   // Switch to LAB color mode.\n   *   // In this mode, L typically ranges from 0 to 100 while a and b span roughly -128 to 127.\n   *   colorMode(LAB);\n   *   \n   *   // Set fill to pure red in LAB.\n   *   // The sRGB red (255, 0, 0) converts approximately to LAB as:\n   *   // L = 53, a = 80, b = 67.\n   *   fill(53, 80, 67);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using LAB color mode.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   \n   *   // Draw a neutral gray background.\n   *   background(200);\n   *   \n   *   // Switch to LCH color mode.\n   *   // In LCH, colors are defined by Lightness, Chroma, and Hue (in degrees).\n   *   colorMode(LCH);\n   *   \n   *   // Set fill to an approximation of pure red in LCH:\n   *   // Lightness ≈ 53, Chroma ≈ 104, Hue ≈ 40°.\n   *   fill(53, 104, 40);\n   *   \n   *   // Draw a circle at the center.\n   *   circle(50, 50, 25);\n   *   \n   *   describe('A gray square with a red circle at its center, drawn using LCH color mode.');\n   * }\n   * </code>  \n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use RGB color with values in the range 0-100.\n   *   colorMode(RGB, 100);\n   *\n   *   for (let x = 0; x < 100; x += 1) {\n   *     for (let y = 0; y < 100; y += 1) {\n   *       stroke(x, y, 0);\n   *       point(x, y);\n   *     }\n   *   }\n   *\n   *   describe(\n   *     'A diagonal green to red gradient from bottom-left to top-right with shading transitioning to black at top-left corner.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use HSB color with values in the range 0-100.\n   *   colorMode(HSB, 100);\n   *\n   *   for (let x = 0; x < 100; x += 1) {\n   *     for (let y = 0; y < 100; y += 1) {\n   *       stroke(x, y, 100);\n   *       point(x, y);\n   *     }\n   *   }\n   *\n   *   describe('A rainbow gradient from left-to-right. Brightness transitions to white at the top.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let myColor = color(180, 175, 230);\n   *   background(myColor);\n   *\n   *   // Use RGB color with values in the range 0-1.\n   *   colorMode(RGB, 1);\n   *\n   *   // Get the red, green, and blue color components.\n   *   let redValue = red(myColor);\n   *   let greenValue = green(myColor);\n   *   let blueValue = blue(myColor);\n   *\n   *   // Round the color components for display.\n   *   redValue = round(redValue, 2);\n   *   greenValue = round(greenValue, 2);\n   *   blueValue = round(blueValue, 2);\n   *\n   *   // Display the color components.\n   *   text(`Red: ${redValue}`, 10, 10, 80, 80);\n   *   text(`Green: ${greenValue}`, 10, 40, 80, 80);\n   *   text(`Blue: ${blueValue}`, 10, 70, 80, 80);\n   *\n   *   describe('A purple canvas with the red, green, and blue decimal values of the color written on it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(255);\n   *\n   *   // Use RGB color with alpha values in the range 0-1.\n   *   colorMode(RGB, 255, 255, 255, 1);\n   *\n   *   noFill();\n   *   strokeWeight(4);\n   *   stroke(255, 0, 10, 0.3);\n   *   circle(40, 40, 50);\n   *   circle(50, 60, 50);\n   *\n   *   describe('Two overlapping translucent pink circle outlines.');\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * let hslGraphic, lchGraphic, oklchGraphic;\n   *\n   * function setup() {\n   *   createCanvas(600, 200);\n   *   noLoop();\n   *\n   *   // Create three graphics objects for HSL, LCH, and OKLCH color modes\n   *   hslGraphic = createGraphics(200, 200);\n   *   lchGraphic = createGraphics(200, 200);\n   *   oklchGraphic = createGraphics(200, 200);\n   *\n   *   // Draw HSL color wheel\n   *   colorMode(HSL);\n   *   hslGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     hslGraphic.stroke(360 / 1000 * i, 70, 50);\n   *     hslGraphic.line(0, 0, hslGraphic.width / 2, 0);\n   *     hslGraphic.rotate(TAU / 1000);\n   *   }\n   *\n   *   // Draw LCH color wheel\n   *   colorMode(LCH);\n   *   lchGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     lchGraphic.stroke(54, 106, 360 / 1000 * i);\n   *     lchGraphic.line(0, 0, lchGraphic.width / 2, 0);\n   *     lchGraphic.rotate(TAU / 1000);\n   *   }\n   *\n   *   // Draw OKLCH color wheel\n   *   colorMode(OKLCH);\n   *   oklchGraphic.translate(100, 100);\n   *   for (let i = 0; i < 1000; i++) {\n   *     oklchGraphic.stroke(54, 106, 360 / 1000 * i);\n   *     oklchGraphic.line(0, 0, oklchGraphic.width / 2, 0);\n   *     oklchGraphic.rotate(TAU / 1000);\n   *   }\n   * }\n   *\n   * function draw() {\n   *   // Set the styles\n   *   colorMode(RGB);\n   *   background(220);\n   *\n   *   // Display the color wheels\n   *   image(hslGraphic, 0, 0);\n   *   image(lchGraphic, 200, 0);\n   *   image(oklchGraphic, 400, 0);\n   * }\n   * </code>\n   * </div>\n   * \n   * @example\n   * <div>\n   * <code>\n   * // Example: Single-value (Grayscale) colors in different color modes.\n   * // The rectangle is filled with one parameter, but its final color depends\n   * // on how that parameter is interpreted by the current color mode.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   noStroke();\n   *   noLoop();\n   * }\n   *\n   * function draw() {\n   *   // Set color mode to RGB with range 0-255\n   *   colorMode(RGB, 255);\n   *   \n   *   // Fill with single grayscale value\n   *   fill(128);\n   *   rect(0, 0, 100, 100);\n   *\n   *   // Add text label\n   *   fill(0); // Switch to black text for clarity\n   *   textSize(14);\n   *   text(\"RGB (128)\", 10, 20);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method colorMode\n   * @param {RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH} mode\n   * @param {Number} max1     range for the red or hue depending on the\n   *                              current color mode.\n   * @param {Number} max2     range for the green or saturation depending\n   *                              on the current color mode.\n   * @param {Number} max3     range for the blue or brightness/lightness\n   *                              depending on the current color mode.\n   * @param {Number} [maxA]   range for the alpha.\n   *\n   * @return {String}      The current color mode.\n   */\n  fn.colorMode = function(mode, max1, max2, max3, maxA) {\n    // p5._validateParameters('colorMode', arguments);\n    if (\n      [\n        RGB,\n        RGBHDR,\n        HSB,\n        HSL,\n        HWB,\n        LAB,\n        LCH,\n        OKLAB,\n        OKLCH\n      ].includes(mode)\n    ) {\n      // Set color mode.\n      this._renderer.states.setValue('colorMode', mode);\n\n      // Set color maxes.\n      this._renderer.states.setValue('colorMaxes', this._renderer.states.colorMaxes.clone());\n      const maxes = this._renderer.states.colorMaxes[mode];\n      if (arguments.length === 2) {\n        maxes[0] = max1; // Red\n        maxes[1] = max1; // Green\n        maxes[2] = max1; // Blue\n        maxes[3] = max1; // Alpha\n      } else if (arguments.length === 4) {\n        maxes[0] = max1; // Red\n        maxes[1] = max2; // Green\n        maxes[2] = max3; // Blue\n      } else if (arguments.length === 5) {\n        maxes[0] = max1; // Red\n        maxes[1] = max2; // Green\n        maxes[2] = max3; // Blue\n        maxes[3] = maxA; // Alpha\n      }\n    }\n\n    return this._renderer.states.colorMode;\n  };\n\n  /**\n   * Sets the color used to fill shapes.\n   *\n   * Calling `fill(255, 165, 0)` or `fill('orange')` means all shapes drawn\n   * after the fill command will be filled with the color orange.\n   *\n   * The version of `fill()` with one parameter interprets the value one of\n   * three ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color\n   * string. A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to\n   * set the fill color.\n   *\n   * The version of `fill()` with three parameters interprets them as RGB, HSB,\n   * or HSL colors, depending on the current\n   * <a href=\"#/p5/colorMode\">colorMode()</a>. The default color space is RGB,\n   * with each value in the range from 0 to 255.\n   *\n   * @method fill\n   * @param  {Number}        v1      red value if color mode is RGB or hue value if color mode is HSB.\n   * @param  {Number}        v2      green value if color mode is RGB or saturation value if color mode is HSB.\n   * @param  {Number}        v3      blue value if color mode is RGB or brightness value if color mode is HSB.\n   * @param  {Number}        [alpha] alpha value, controls transparency (0 - transparent, 255 - opaque).\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A grayscale value.\n   *   fill(51);\n   *   square(20, 20, 60);\n   *\n   *   describe('A dark charcoal gray square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // R, G & B values.\n   *   fill(255, 204, 0);\n   *   square(20, 20, 60);\n   *\n   *   describe('A yellow square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   fill(255, 204, 100);\n   *   square(20, 20, 60);\n   *\n   *   describe('A royal blue square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A CSS named color.\n   *   fill('red');\n   *   square(20, 20, 60);\n   *\n   *   describe('A red square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Three-digit hex RGB notation.\n   *   fill('#fae');\n   *   square(20, 20, 60);\n   *\n   *   describe('A pink square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Six-digit hex RGB notation.\n   *   fill('#A251FA');\n   *   square(20, 20, 60);\n   *\n   *   describe('A purple square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGB notation.\n   *   fill('rgb(0, 255, 0)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A bright green square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGBA notation.\n   *   fill('rgba(0, 255, 0, 0.25)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A soft green rectange with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGB notation.\n   *   fill('rgb(100%, 0%, 10%)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A red square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGBA notation.\n   *   fill('rgba(100%, 0%, 100%, 0.5)');\n   *   square(20, 20, 60);\n   *\n   *   describe('A dark fuchsia square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A p5.Color object.\n   *   let c = color(0, 0, 255);\n   *   fill(c);\n   *   square(20, 20, 60);\n   *\n   *   describe('A blue square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method fill\n   * @param  {String}        value   a color string.\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {Number}        gray   a grayscale value.\n   * @param  {Number}        [alpha]\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {Number[]}      values  an array containing the red, green, blue &\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method fill\n   * @param  {p5.Color}      color   the fill color.\n   * @chainable\n   */\n  fn.fill = function(...args) {\n    this._renderer.fill(...args);\n    return this;\n  };\n\n  /**\n   * Disables setting the fill color for shapes.\n   *\n   * Calling `noFill()` is the same as making the fill completely transparent,\n   * as in `fill(0, 0)`. If both <a href=\"#/p5/noStroke\">noStroke()</a> and\n   * `noFill()` are called, nothing will be drawn to the screen.\n   *\n   * @method noFill\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the top square.\n   *   square(32, 10, 35);\n   *\n   *   // Draw the bottom square.\n   *   noFill();\n   *   square(32, 55, 35);\n   *\n   *   describe('A white square on above an empty square. Both squares have black outlines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div modernizr='webgl'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A purple cube wireframe spinning on a black canvas.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Style the box.\n   *   noFill();\n   *   stroke(100, 100, 240);\n   *\n   *   // Rotate the coordinates.\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the box.\n   *   box(45);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noFill = function() {\n    this._renderer.noFill();\n    return this;\n  };\n\n  /**\n   * Disables drawing points, lines, and the outlines of shapes.\n   *\n   * Calling `noStroke()` is the same as making the stroke completely transparent,\n   * as in `stroke(0, 0)`. If both `noStroke()` and\n   * <a href=\"#/p5/noFill\">noFill()</a> are called, nothing will be drawn to the\n   * screen.\n   *\n   * @method noStroke\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   noStroke();\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with no outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div modernizr='webgl'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A pink cube with no edge outlines spinning on a black canvas.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Style the box.\n   *   noStroke();\n   *   fill(240, 150, 150);\n   *\n   *   // Rotate the coordinates.\n   *   rotateX(frameCount * 0.01);\n   *   rotateY(frameCount * 0.01);\n   *\n   *   // Draw the box.\n   *   box(45);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noStroke = function() {\n    this._renderer.states.setValue('strokeColor', null);\n    return this;\n  };\n\n  /**\n   * Sets the color used to draw points, lines, and the outlines of shapes.\n   *\n   * Calling `stroke(255, 165, 0)` or `stroke('orange')` means all shapes drawn\n   * after calling `stroke()` will be filled with the color orange. The way\n   * these parameters are interpreted may be changed with the\n   * <a href=\"#/p5/colorMode\">colorMode()</a> function.\n   *\n   * The version of `stroke()` with one parameter interprets the value one of\n   * three ways. If the parameter is a `Number`, it's interpreted as a grayscale\n   * value. If the parameter is a `String`, it's interpreted as a CSS color\n   * string. A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to\n   * set the stroke color.\n   *\n   * The version of `stroke()` with two parameters interprets the first one as a\n   * grayscale value. The second parameter sets the alpha (transparency) value.\n   *\n   * The version of `stroke()` with three parameters interprets them as RGB, HSB,\n   * or HSL colors, depending on the current `colorMode()`.\n   *\n   * The version of `stroke()` with four parameters interprets them as RGBA, HSBA,\n   * or HSLA colors, depending on the current `colorMode()`. The last parameter\n   * sets the alpha (transparency) value.\n   *\n   * @method stroke\n   * @param  {Number}        v1      red value if color mode is RGB or hue value if color mode is HSB.\n   * @param  {Number}        v2      green value if color mode is RGB or saturation value if color mode is HSB.\n   * @param  {Number}        v3      blue value if color mode is RGB or brightness value if color mode is HSB.\n   * @param  {Number}        [alpha] alpha value, controls transparency (0 - transparent, 255 - opaque).\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A grayscale value.\n   *   strokeWeight(4);\n   *   stroke(51);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a dark charcoal gray outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // R, G & B values.\n   *   stroke(255, 204, 0);\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a yellow outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use HSB color.\n   *   colorMode(HSB);\n   *\n   *   // H, S & B values.\n   *   strokeWeight(4);\n   *   stroke(255, 204, 100);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a royal blue outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A CSS named color.\n   *   stroke('red');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a red outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Three-digit hex RGB notation.\n   *   stroke('#fae');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a pink outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Six-digit hex RGB notation.\n   *   stroke('#222222');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a black outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGB notation.\n   *   stroke('rgb(0, 255, 0)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a bright green outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Integer RGBA notation.\n   *   stroke('rgba(0, 255, 0, 0.25)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a soft green outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGB notation.\n   *   stroke('rgb(100%, 0%, 10%)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a red outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Percentage RGBA notation.\n   *   stroke('rgba(100%, 0%, 100%, 0.5)');\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a dark fuchsia outline.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // A p5.Color object.\n   *   stroke(color(0, 0, 255));\n   *   strokeWeight(4);\n   *   square(20, 20, 60);\n   *\n   *   describe('A white square with a blue outline.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method stroke\n   * @param  {String}        value   a color string.\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {Number}        gray   a grayscale value.\n   * @param  {Number}        [alpha]\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {Number[]}      values  an array containing the red, green, blue,\n   *                                 and alpha components of the color.\n   * @chainable\n   */\n\n  /**\n   * @method stroke\n   * @param  {p5.Color}      color   the stroke color.\n   * @chainable\n   */\n  fn.stroke = function(...args) {\n    this._renderer.stroke(...args);\n    return this;\n  };\n\n  /**\n   * Starts using shapes to erase parts of the canvas.\n   *\n   * All drawing that follows `erase()` will subtract from the canvas, revealing\n   * the web page underneath. The erased areas will become transparent, allowing\n   * the content behind the canvas to show through. The\n   * <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n   * <a href=\"#/p5/blendMode\">blendMode()</a> have no effect once `erase()` is\n   * called.\n   *\n   * The `erase()` function has two optional parameters. The first parameter\n   * sets the strength of erasing by the shape's interior. A value of 0 means\n   * that no erasing will occur. A value of 255 means that the shape's interior\n   * will fully erase the content underneath. The default value is 255\n   * (full strength).\n   *\n   * The second parameter sets the strength of erasing by the shape's edge. A\n   * value of 0 means that no erasing will occur. A value of 255 means that the\n   * shape's edge will fully erase the content underneath. The default value is\n   * 255 (full strength).\n   *\n   * To cancel the erasing effect, use the <a href=\"#/p5/noErase\">noErase()</a>\n   * function.\n   *\n   * `erase()` has no effect on drawing done with the\n   * <a href=\"#/p5/image\">image()</a> and\n   * <a href=\"#/p5/background\">background()</a> functions.\n   *\n   * @method erase\n   * @param  {Number}   [strengthFill]      a number (0-255) for the strength of erasing under a shape's interior.\n   *                                        Defaults to 255, which is full strength.\n   * @param  {Number}   [strengthStroke]    a number (0-255) for the strength of erasing under a shape's edge.\n   *                                        Defaults to 255, which is full strength.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100, 100, 250);\n   *\n   *   // Draw a pink square.\n   *   fill(250, 100, 100);\n   *   square(20, 20, 60);\n   *\n   *   // Erase a circular area.\n   *   erase();\n   *   circle(25, 30, 30);\n   *   noErase();\n   *\n   *   describe('A purple canvas with a pink square in the middle. A circle is erased from the top-left, leaving a hole.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(100, 100, 250);\n   *\n   *   // Draw a pink square.\n   *   fill(250, 100, 100);\n   *   square(20, 20, 60);\n   *\n   *   // Erase a circular area.\n   *   strokeWeight(5);\n   *   erase(150, 255);\n   *   circle(25, 30, 30);\n   *   noErase();\n   *\n   *   describe('A purple canvas with a pink square in the middle. A circle at the top-left partially erases its interior and a fully erases its outline.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.erase = function(opacityFill = 255, opacityStroke = 255) {\n    this._renderer.erase(opacityFill, opacityStroke);\n\n    return this;\n  };\n\n  /**\n   * Ends erasing that was started with <a href=\"#/p5/erase\">erase()</a>.\n   *\n   * The <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n   * <a href=\"#/p5/blendMode\">blendMode()</a> settings will return to what they\n   * were prior to calling <a href=\"#/p5/erase\">erase()</a>.\n   *\n   * @method noErase\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(235, 145, 15);\n   *\n   *   // Draw the left rectangle.\n   *   noStroke();\n   *   fill(30, 45, 220);\n   *   rect(30, 10, 10, 80);\n   *\n   *   // Erase a circle.\n   *   erase();\n   *   circle(50, 50, 60);\n   *   noErase();\n   *\n   *   // Draw the right rectangle.\n   *   rect(70, 10, 10, 80);\n   *\n   *   describe('An orange canvas with two tall blue rectangles. A circular hole in the center erases the rectangle on the left but not the one on the right.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noErase = function() {\n    this._renderer.noErase();\n    return this;\n  };\n\n  /**\n   * Sets the way colors blend when added to the canvas.\n   *\n   * By default, drawing with a solid color paints over the current pixel values\n   * on the canvas. `blendMode()` offers many options for blending colors.\n   *\n   * Shapes, images, and text can be used as sources for drawing to the canvas.\n   * A source pixel changes the color of the canvas pixel where it's drawn. The\n   * final color results from blending the source pixel's color with the canvas\n   * pixel's color. RGB color values from the source and canvas pixels are\n   * compared, added, subtracted, multiplied, and divided to create different\n   * effects. Red values with red values, greens with greens, and blues with\n   * blues.\n   *\n   * The parameter, `mode`, sets the blend mode. For example, calling\n   * `blendMode(ADD)` sets the blend mode to `ADD`. The following blend modes\n   * are available in both 2D and WebGL mode:\n   *\n   * - `BLEND`: color values from the source overwrite the canvas. This is the default mode.\n   * - `ADD`: color values from the source are added to values from the canvas.\n   * - `DARKEST`: keeps the darkest color value.\n   * - `LIGHTEST`: keeps the lightest color value.\n   * - `EXCLUSION`: similar to `DIFFERENCE` but with less contrast.\n   * - `MULTIPLY`: color values from the source are multiplied with values from the canvas. The result is always darker.\n   * - `SCREEN`: all color values are inverted, then multiplied, then inverted again. The result is always lighter. (Opposite of `MULTIPLY`)\n   * - `REPLACE`: the last source drawn completely replaces the rest of the canvas.\n   * - `REMOVE`: overlapping pixels are removed by making them completely transparent.\n   *\n   * The following blend modes are only available in 2D mode:\n   *\n   * - `DIFFERENCE`: color values from the source are subtracted from the values from the canvas. If the difference is a negative number, it's made positive.\n   * - `OVERLAY`: combines `MULTIPLY` and `SCREEN`. Dark values in the canvas get darker and light values get lighter.\n   * - `HARD_LIGHT`: combines `MULTIPLY` and `SCREEN`. Dark values in the source get darker and light values get lighter.\n   * - `SOFT_LIGHT`: a softer version of `HARD_LIGHT`.\n   * - `DODGE`: lightens light tones and increases contrast. Divides the canvas color values by the inverted color values from the source.\n   * - `BURN`: darkens dark tones and increases contrast. Divides the source color values by the inverted color values from the canvas, then inverts the result.\n   *\n   * The following blend modes are only available in WebGL mode:\n   *\n   * - `SUBTRACT`: RGB values from the source are subtracted from the values from the canvas. If the difference is a negative number, it's made positive. Alpha (transparency) values from the source and canvas are added.\n   *\n   * @method blendMode\n   * @param  {(BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT)} mode blend mode to set.\n   *                either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n   *                EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n   *                SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use the default blend mode.\n   *   blendMode(BLEND);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(ADD);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DARKEST);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(LIGHTEST);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(EXCLUSION);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a cyan line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(MULTIPLY);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SCREEN);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(REPLACE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A diagonal red line.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(REMOVE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('The silhouette of an X is missing from a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DIFFERENCE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a cyan line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(OVERLAY);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is bright magenta.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(HARD_LIGHT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SOFT_LIGHT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is violet.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(DODGE);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A faint blue line and a faint red line form an X on a gray background. The area where they overlap is faint violet.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(BURN);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A blue line and a red line form an X on a gray background. The area where they overlap is black.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the blend mode.\n   *   blendMode(SUBTRACT);\n   *\n   *   // Style the lines.\n   *   strokeWeight(30);\n   *\n   *   // Draw the blue line.\n   *   stroke('blue');\n   *   line(25, 25, 75, 75);\n   *\n   *   // Draw the red line.\n   *   stroke('red');\n   *   line(75, 25, 25, 75);\n   *\n   *   describe('A yellow line and a turquoise line form an X on a gray background. The area where they overlap is green.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.blendMode = function (mode) {\n    // p5._validateParameters('blendMode', arguments);\n    if (mode === NORMAL) {\n      // Warning added 3/26/19, can be deleted in future (1.0 release?)\n      console.warn(\n        'NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.'\n      );\n      mode = BLEND;\n    }\n    this._renderer.blendMode(mode);\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  setting(p5, p5.prototype);\n}\n\nexport { setting as default };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,KAAK,QAAQ,0BAA0B;AAClE,SAASC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,GAAG,EAAEC,CAAC,IAAIC,KAAK,EAAEC,CAAC,IAAIC,KAAK,QAAQ,iCAAiC;AACjJ,OAAO,eAAe;AACtB,OAAO,uBAAuB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,OAAOA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACtpC,IAAI,CAACC,SAAS,CAACF,SAAS,CAACC,OAAO,CAAC;EACnC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,EAAE,CAACI,OAAO,GAAG,YAAW;IACtB,IAAI,CAACD,SAAS,CAACC,OAAO,CAAC,CAAC;EAC1B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,EAAE,CAACK,IAAI,GAAG,UAASC,QAAQ,EAAEJ,OAAO,EAAE;IACpC,IAAI,CAACC,SAAS,CAACF,SAAS,CAACC,OAAO,CAAC;IACjCI,QAAQ,CAAC,CAAC;IACV,IAAI,CAACH,SAAS,CAACC,OAAO,CAACF,OAAO,CAAC;EACjhC,IAAI,CAACL,SAAS,CAACI,UAAU,CAAC,GAAGC,IAAI,CAAC;IAClC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,EAAE,CAACS,KAAK,GAAG,UAAS,GAAGD,IAAI,EAAE;IAC3B,MAAME,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACvB,MAAMG,EAAE,GAAGH,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACvB,MAAMI,EAAE,GAAGJ,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACvB,MAAMK,EAAE,GAAGL,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACL,SAAS,CAACM,KAAK,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IACpC,OAAO,IAAI;EACbb,EAAE,CAACc,SAAS,GAAG,UAASC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACpD;IACA,IACE,CACEtC,GAAG,EACHE,MAAM,EACNE,GAAG,EACHE,GAAG,EACHE,GAAG,EACHE,GAAG,EACHE,GAAG,EACHE,KAAK,EACLE,KAAK,CACN,CAACuB,QAAQ,CAACL,IAAI,CAAC,EAChB;MACA;MACA,IAAI,CAACZ,SAAS,CAACkB,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAEP,IAAI,CAAC;;MAEjD;MACA,IAAI,CAACZ,SAAS,CAACkB,MAAM,CAACC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAACnB,SAAS,CAACkB,MAAM,CAACE,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC;MACtF,MAAMC,KAAK,GAAG,IAAI,CAACtB,SAAS,CAACkB,MAAM,CAACE,UAAU,CAACR,IAAI,CAAC;MACpD,IAAIW,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1BF,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;QACjBS,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;QACjBS,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;QACjBS,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;MACnB,CAAC,MAAM,IAAIU,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QACjCF,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;QACjBS,KAAK,CAAC,CAAC,CAAC,GAAGR,IAAI,CAAC,CAAC;QACjBQ,KAAK,CAAC,CAAC,CAAC,GAAGP,IAAI,CAAC,CAAC;MACnB,CAAC,MAAM,IAAIQ,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QACjCF,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,CAAC,CAAC;QACjBS,KAAK,CAAC,CAAC,CAAC,GAAGR,IAAI,CAAC,CAAC;QACjBQ,KAAK,CAAC,CAAC,CAAC,GAAGP,IAAI,CAAC,CAAC;QACjBO,KAAK,CAAC,CAAC,CAAC,GAAGN,IAAI,CAAC,CAAC;MACnB;IACF;IAEA,OAAO,IAAI,CAAChB,SAAS,CAACkB,MAAM,CAACP,SAAS;EACxd,EAAE,CAAC4B,IAAI,GAAG,UAAS,GAAGpB,IAAI,EAAE;IAC1B,IAAI,CAACL,SAAS,CAACyB,IAAI,CAAC,GAAGpB,IAAI,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,EAAE,CAAC6B,MAAM,GAAG,YAAW;IACrB,IAAI,CAAC1B,SAAS,CAAC0B,MAAM,CAAC,CAAC;IACvB,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7B,EAAE,CAAC8B,QAAQ,GAAG,YAAW;IACvB,IAAI,CAAC3B,SAAS,CAACkB,MAAM,CAACC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC;IACnD,OAAO,IAAI;EACbtB,EAAE,CAAC+B,MAAM,GAAG,UAAS,GAAGvB,IAAI,EAAE;IAC5B,IAAI,CAACL,SAAS,CAAC4B,MAAM,CAAC,GAAGvB,IAAI,CAAC;IAC9B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,EAAE,CAACgC,KAAK,GAAG,UAASC,WAAW,GAAG,GAAG,EAAEC,aAAa,GAAG,GAAG,EAAE;IAC1D,IAAI,CAAC/B,SAAS,CAAC6B,KAAK,CAACC,WAAW,EAAEC,aAAa,CAAC;IAEhD,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElC,EAAE,CAACmC,OAAO,GAAG,YAAW;IACtB,IAAI,CAAChC,SAAS,CAACgC,OAAO,CAAC,CAAC;IACxB,OAAO,IAAI;EACbnC,EAAE,CAACoC,SAAS,GAAG,UAAUrB,IAAI,EAAE;IAC7B;IACA,IAAIA,IAAI,KAAKtC,MAAM,EAAE;MACnB;MACA4D,OAAO,CAACC,IAAI,CACV,+EACF,CAAC;MACDvB,IAAI,GAAGpC,KAAK;IACd;IACA,IAAI,CAACwB,SAAS,CAACiC,SAAS,CAACrB,IAAI,CAAC;EAChC,CAAC;AACH;AAEA,IAAG,OAAOhB,EAAE,KAAK,WAAW,EAAC;EAC3BD,OAAO,CAACC,EAAE,EAAEA,EAAE,CAACwC,SAAS,CAAC;AAC3B;AAEA,SAASzC,OAAO,IAAI0C,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}