{"ast":null,"code":"import { parse } from 'acorn';\nimport { simple } from 'acorn-walk';\nimport { v as constants } from '../../constants-BRcElHU3.js';\n\n// List of functions to ignore as they either are meant to be re-defined or\n// generate false positive outputs.\nconst ignoreFunction = ['setup', 'draw', 'preload', 'deviceMoved', 'deviceTurned', 'deviceShaken', 'doubleClicked', 'mousePressed', 'mouseReleased', 'mouseMoved', 'mouseDragged', 'mouseClicked', 'mouseWheel', 'touchStarted', 'touchMoved', 'touchEnded', 'keyPressed', 'keyReleased', 'keyTyped', 'windowResized'\n// 'name',\n// 'parent',\n// 'toString',\n// 'print',\n// 'stop',\n// 'onended'\n];\nconst verifierUtils = {\n  /**\n   * Fetches the contents of a script element in the user's sketch.\n   *\n   * @private\n   * @method fetchScript\n   * @param {HTMLScriptElement} script\n   * @returns {Promise<string>}\n  */\n  fetchScript: async function (script) {\n    if (script.src) {\n      try {\n        const contents = await fetch(script.src).then(res => res.text());\n        return contents;\n      } catch (error) {\n        // TODO: Handle CORS error here.\n        console.error('Error fetching script:', error);\n        return '';\n      }\n    } else {\n      return script.textContent;\n    }\n  },\n  /**\n   * Extracts the user-defined variables and functions from the user code with\n   * the help of Espree parser.\n   *\n   * @private\n   * @method extractUserDefinedVariablesAndFuncs\n   * @param {String} code - The code to extract variables and functions from.\n   * @returns {Object} An object containing the user's defined variables and functions.\n   * @returns {Array<{name: string, line: number}>} [userDefinitions.variables] Array of user-defined variable names and their line numbers.\n   * @returns {Array<{name: string, line: number}>} [userDefinitions.functions] Array of user-defined function names and their line numbers.\n   */\n  extractUserDefinedVariablesAndFuncs: function (code) {\n    const userDefinitions = {\n      variables: [],\n      functions: []\n    };\n    // The line numbers from the parser are consistently off by one, add\n    // `lineOffset` here to correct them.\n    const lineOffset = -1;\n    try {\n      const ast = parse(code, {\n        ecmaVersion: 2021,\n        sourceType: 'module',\n        locations: true // This helps us get the line number.\n      });\n      simple(ast, {\n        VariableDeclarator(node) {\n          if (node.id.type === 'Identifier') {\n            const category = node.init && ['ArrowFunctionExpression', 'FunctionExpression'].includes(node.init.type) ? 'functions' : 'variables';\n            userDefinitions[category].push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        },\n        FunctionDeclaration(node) {\n          if (node.id && node.id.type === 'Identifier') {\n            userDefinitions.functions.push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        },\n        // We consider class declarations to be a special form of variable\n        // declaration.\n        ClassDeclaration(node) {\n          if (node.id && node.id.type === 'Identifier') {\n            userDefinitions.variables.push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        }\n      });\n    } catch (error) {\n      // TODO: Replace this with a friendly error message.\n      console.error('Error parsing code:', error);\n    }\n    return userDefinitions;\n  },\n  /**\n   * Checks user-defined variables and functions for conflicts with p5.js\n   * constants and global functions.\n   *\n   * This function performs two main checks:\n   * 1. Verifies if any user definition conflicts with p5.js constants.\n   * 2. Checks if any user definition conflicts with global functions from\n   * p5.js renderer classes.\n   *\n   * If a conflict is found, it reports a friendly error message and halts\n   * further checking.\n   *\n   * @private\n   * @param {Object} userDefinitions - An object containing user-defined variables and functions.\n   * @param {Array<{name: string, line: number}>} userDefinitions.variables - Array of user-defined variable names and their line numbers.\n   * @param {Array<{name: string, line: number}>} userDefinitions.functions - Array of user-defined function names and their line numbers.\n   * @returns {boolean} - Returns true if a conflict is found, false otherwise.\n   */\n  checkForConstsAndFuncs: function (userDefinitions, p5) {\n    const allDefinitions = [...userDefinitions.variables, ...userDefinitions.functions];\n\n    // Helper function that generates a friendly error message that contains\n    // the type of redefinition (constant or function), the name of the\n    // redefinition, the line number in user's code, and a link to its\n    // reference on the p5.js website.\n    function generateFriendlyError(errorType, name, line) {\n      const url = `https://p5js.org/reference/p5/${name}`;\n      const message = `${errorType} \"${name}\" on line ${line} is being redeclared and conflicts with a p5.js ${errorType.toLowerCase()}. p5.js reference: ${url}`;\n      return message;\n    }\n\n    // Checks for constant redefinitions.\n    for (let {\n      name,\n      line\n    } of allDefinitions) {\n      const libDefinition = constants[name];\n      if (libDefinition !== undefined) {\n        const message = generateFriendlyError('Constant', name, line);\n        console.log(message);\n        return true;\n      }\n    }\n\n    // The new rules for attaching anything to global are (if true for both of\n    // the following):\n    //   - It is a member of p5.prototype\n    //   - Its name does not start with `_`\n    const globalFunctions = new Set(Object.getOwnPropertyNames(p5.prototype).filter(key => !key.startsWith('_') && key !== 'constructor'));\n    for (let {\n      name,\n      line\n    } of allDefinitions) {\n      if (!ignoreFunction.includes(name) && globalFunctions.has(name)) {\n        const message = generateFriendlyError('Function', name, line);\n        console.log(message);\n        return true;\n      }\n    }\n    return false;\n  },\n  /**\n   * Extracts the user's code from the script fetched. Note that this method\n   * assumes that the user's code is always the last script element in the\n   * sketch.\n   *\n   * @private\n   * @method getUserCode\n   * @returns {Promise<string>} The user's code as a string.\n   */\n  getUserCode: async function () {\n    // TODO: think of a more robust way to get the user's code. Refer to\n    // https://github.com/processing/p5.js/pull/7293.\n    const scripts = document.querySelectorAll('script');\n    const userCodeScript = scripts[scripts.length - 1];\n    const userCode = await verifierUtils.fetchScript(userCodeScript);\n    return userCode;\n  },\n  /**\n   * @private\n   */\n  runFES: async function (p5) {\n    const userCode = await verifierUtils.getUserCode();\n    const userDefinedVariablesAndFuncs = verifierUtils.extractUserDefinedVariablesAndFuncs(userCode);\n    verifierUtils.checkForConstsAndFuncs(userDefinedVariablesAndFuncs, p5);\n  }\n};\nfunction sketchVerifier(p5, _fn, lifecycles) {\n  lifecycles.presetup = async function () {\n    if (!p5.disableFriendlyErrors) {\n      verifierUtils.runFES(p5);\n    }\n  };\n}\nif (typeof p5 !== 'undefined') {\n  sketchVerifier(p5, p5.prototype);\n}\nexport { sketchVerifier as default, verifierUtils };","map":{"version":3,"names":["parse","simple","v","constants","ignoreFunction","verifierUtils","fetchScript","script","src","contents","fetch","then","res","text","error","console","textContent","extractUserDefinedVariablesAndFuncs","code","userDefinitions","variables","functions","lineOffset","ast","ecmaVersion","sourceType","locations","VariableDeclarator","node","id","type","category","init","includes","push","name","line","loc","start","FunctionDeclaration","ClassDeclaration","checkForConstsAndFuncs","p5","allDefinitions","generateFriendlyError","errorType","url","message","toLowerCase","libDefinition","undefined","log","globalFunctions","Set","Object","getOwnPropertyNames","prototype","filter","key","startsWith","has","getUserCode","scripts","document","querySelectorAll","userCodeScript","length","userCode","runFES","userDefinedVariablesAndFuncs","sketchVerifier","_fn","lifecycles","presetup","disableFriendlyErrors","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/core/friendly_errors/sketch_verifier.js"],"sourcesContent":["import { parse } from 'acorn';\nimport { simple } from 'acorn-walk';\nimport { v as constants } from '../../constants-BRcElHU3.js';\n\n// List of functions to ignore as they either are meant to be re-defined or\n// generate false positive outputs.\nconst ignoreFunction = [\n  'setup',\n  'draw',\n  'preload',\n  'deviceMoved',\n  'deviceTurned',\n  'deviceShaken',\n  'doubleClicked',\n  'mousePressed',\n  'mouseReleased',\n  'mouseMoved',\n  'mouseDragged',\n  'mouseClicked',\n  'mouseWheel',\n  'touchStarted',\n  'touchMoved',\n  'touchEnded',\n  'keyPressed',\n  'keyReleased',\n  'keyTyped',\n  'windowResized',\n  // 'name',\n  // 'parent',\n  // 'toString',\n  // 'print',\n  // 'stop',\n  // 'onended'\n];\n\nconst verifierUtils = {\n\n  /**\n   * Fetches the contents of a script element in the user's sketch.\n   *\n   * @private\n   * @method fetchScript\n   * @param {HTMLScriptElement} script\n   * @returns {Promise<string>}\n */\n  fetchScript: async function (script) {\n    if (script.src) {\n      try {\n        const contents = await fetch(script.src).then((res) => res.text());\n        return contents;\n      } catch (error) {\n        // TODO: Handle CORS error here.\n        console.error('Error fetching script:', error);\n        return '';\n      }\n    } else {\n      return script.textContent;\n    }\n  },\n\n  /**\n   * Extracts the user-defined variables and functions from the user code with\n   * the help of Espree parser.\n   *\n   * @private\n   * @method extractUserDefinedVariablesAndFuncs\n   * @param {String} code - The code to extract variables and functions from.\n   * @returns {Object} An object containing the user's defined variables and functions.\n   * @returns {Array<{name: string, line: number}>} [userDefinitions.variables] Array of user-defined variable names and their line numbers.\n   * @returns {Array<{name: string, line: number}>} [userDefinitions.functions] Array of user-defined function names and their line numbers.\n   */\n  extractUserDefinedVariablesAndFuncs: function (code) {\n    const userDefinitions = {\n      variables: [],\n      functions: []\n    };\n    // The line numbers from the parser are consistently off by one, add\n    // `lineOffset` here to correct them.\n    const lineOffset = -1;\n\n    try {\n      const ast = parse(code, {\n        ecmaVersion: 2021,\n        sourceType: 'module',\n        locations: true  // This helps us get the line number.\n      });\n\n      simple(ast, {\n        VariableDeclarator(node) {\n          if (node.id.type === 'Identifier') {\n            const category = node.init && ['ArrowFunctionExpression', 'FunctionExpression'].includes(node.init.type)\n              ? 'functions'\n              : 'variables';\n            userDefinitions[category].push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        },\n        FunctionDeclaration(node) {\n          if (node.id && node.id.type === 'Identifier') {\n            userDefinitions.functions.push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        },\n        // We consider class declarations to be a special form of variable\n        // declaration.\n        ClassDeclaration(node) {\n          if (node.id && node.id.type === 'Identifier') {\n            userDefinitions.variables.push({\n              name: node.id.name,\n              line: node.loc.start.line + lineOffset\n            });\n          }\n        }\n      });\n    } catch (error) {\n      // TODO: Replace this with a friendly error message.\n      console.error('Error parsing code:', error);\n    }\n\n    return userDefinitions;\n  },\n\n  /**\n   * Checks user-defined variables and functions for conflicts with p5.js\n   * constants and global functions.\n   *\n   * This function performs two main checks:\n   * 1. Verifies if any user definition conflicts with p5.js constants.\n   * 2. Checks if any user definition conflicts with global functions from\n   * p5.js renderer classes.\n   *\n   * If a conflict is found, it reports a friendly error message and halts\n   * further checking.\n   *\n   * @private\n   * @param {Object} userDefinitions - An object containing user-defined variables and functions.\n   * @param {Array<{name: string, line: number}>} userDefinitions.variables - Array of user-defined variable names and their line numbers.\n   * @param {Array<{name: string, line: number}>} userDefinitions.functions - Array of user-defined function names and their line numbers.\n   * @returns {boolean} - Returns true if a conflict is found, false otherwise.\n   */\n  checkForConstsAndFuncs: function (userDefinitions, p5) {\n    const allDefinitions = [\n      ...userDefinitions.variables,\n      ...userDefinitions.functions\n    ];\n\n    // Helper function that generates a friendly error message that contains\n    // the type of redefinition (constant or function), the name of the\n    // redefinition, the line number in user's code, and a link to its\n    // reference on the p5.js website.\n    function generateFriendlyError(errorType, name, line) {\n      const url = `https://p5js.org/reference/p5/${name}`;\n      const message = `${errorType} \"${name}\" on line ${line} is being redeclared and conflicts with a p5.js ${errorType.toLowerCase()}. p5.js reference: ${url}`;\n      return message;\n    }\n\n    // Checks for constant redefinitions.\n    for (let { name, line } of allDefinitions) {\n      const libDefinition = constants[name];\n      if (libDefinition !== undefined) {\n        const message = generateFriendlyError('Constant', name, line);\n        console.log(message);\n        return true;\n      }\n    }\n\n    // The new rules for attaching anything to global are (if true for both of\n    // the following):\n    //   - It is a member of p5.prototype\n    //   - Its name does not start with `_`\n    const globalFunctions = new Set(\n      Object.getOwnPropertyNames(p5.prototype)\n        .filter(key => !key.startsWith('_') && key !== 'constructor')\n    );\n\n    for (let { name, line } of allDefinitions) {\n      if (!ignoreFunction.includes(name) && globalFunctions.has(name)) {\n        const message = generateFriendlyError('Function', name, line);\n        console.log(message);\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Extracts the user's code from the script fetched. Note that this method\n   * assumes that the user's code is always the last script element in the\n   * sketch.\n   *\n   * @private\n   * @method getUserCode\n   * @returns {Promise<string>} The user's code as a string.\n   */\n  getUserCode: async function () {\n    // TODO: think of a more robust way to get the user's code. Refer to\n    // https://github.com/processing/p5.js/pull/7293.\n    const scripts = document.querySelectorAll('script');\n    const userCodeScript = scripts[scripts.length - 1];\n    const userCode = await verifierUtils.fetchScript(userCodeScript);\n\n    return userCode;\n  },\n\n  /**\n   * @private\n   */\n  runFES: async function (p5) {\n    const userCode = await verifierUtils.getUserCode();\n    const userDefinedVariablesAndFuncs = verifierUtils.extractUserDefinedVariablesAndFuncs(userCode);\n\n    verifierUtils.checkForConstsAndFuncs(userDefinedVariablesAndFuncs, p5);\n  }\n};\n\nfunction sketchVerifier(p5, _fn, lifecycles) {\n  lifecycles.presetup = async function() {\n    if (!p5.disableFriendlyErrors) {\n      verifierUtils.runFES(p5);\n    }\n  };\n}\n\nif (typeof p5 !== 'undefined') {\n  sketchVerifier(p5, p5.prototype);\n}\n\nexport { sketchVerifier as default, verifierUtils };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,OAAO;AAC7B,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,CAAC,IAAIC,SAAS,QAAQ,6BAA6B;;AAE5D;AACA;AACA,MAAMC,cAAc,GAAG,CACrB,OAAO,EACP,MAAM,EACN,SAAS,EACT,aAAa,EACb,cAAc,EACd,cAAc,EACd,eAAe,EACf,cAAc,EACd,eAAe,EACf,YAAY,EACZ,cAAc,EACd,cAAc,EACd,YAAY,EACZ,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,UAAU,EACV;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;AAED,MAAMC,aAAa,GAAG;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,eAAAA,CAAgBC,MAAM,EAAE;IACnC,IAAIA,MAAM,CAACC,GAAG,EAAE;MACd,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,CAACC,GAAG,CAAC,CAACG,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;QAClE,OAAOJ,QAAQ;MACjB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,OAAO,EAAE;MACX;IACF,CAAC,MAAM;MACL,OAAOP,MAAM,CAACS,WAAW;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mCAAmC,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACnD,MAAMC,eAAe,GAAG;MACtBC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;IACb,CAAC;IACD;IACA;IACA,MAAMC,UAAU,GAAG,CAAC,CAAC;IAErB,IAAI;MACF,MAAMC,GAAG,GAAGvB,KAAK,CAACkB,IAAI,EAAE;QACtBM,WAAW,EAAE,IAAI;QACjBC,UAAU,EAAE,QAAQ;QACpBC,SAAS,EAAE,IAAI,CAAE;MACnB,CAAC,CAAC;MAEFzB,MAAM,CAACsB,GAAG,EAAE;QACVI,kBAAkBA,CAACC,IAAI,EAAE;UACvB,IAAIA,IAAI,CAACC,EAAE,CAACC,IAAI,KAAK,YAAY,EAAE;YACjC,MAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI,IAAI,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAACC,QAAQ,CAACL,IAAI,CAACI,IAAI,CAACF,IAAI,CAAC,GACpG,WAAW,GACX,WAAW;YACfX,eAAe,CAACY,QAAQ,CAAC,CAACG,IAAI,CAAC;cAC7BC,IAAI,EAAEP,IAAI,CAACC,EAAE,CAACM,IAAI;cAClBC,IAAI,EAAER,IAAI,CAACS,GAAG,CAACC,KAAK,CAACF,IAAI,GAAGd;YAC9B,CAAC,CAAC;UACJ;QACF,CAAC;QACDiB,mBAAmBA,CAACX,IAAI,EAAE;UACxB,IAAIA,IAAI,CAACC,EAAE,IAAID,IAAI,CAACC,EAAE,CAACC,IAAI,KAAK,YAAY,EAAE;YAC5CX,eAAe,CAACE,SAAS,CAACa,IAAI,CAAC;cAC7BC,IAAI,EAAEP,IAAI,CAACC,EAAE,CAACM,IAAI;cAClBC,IAAI,EAAER,IAAI,CAACS,GAAG,CAACC,KAAK,CAACF,IAAI,GAAGd;YAC9B,CAAC,CAAC;UACJ;QACF,CAAC;QACD;QACA;QACAkB,gBAAgBA,CAACZ,IAAI,EAAE;UACrB,IAAIA,IAAI,CAACC,EAAE,IAAID,IAAI,CAACC,EAAE,CAACC,IAAI,KAAK,YAAY,EAAE;YAC5CX,eAAe,CAACC,SAAS,CAACc,IAAI,CAAC;cAC7BC,IAAI,EAAEP,IAAI,CAACC,EAAE,CAACM,IAAI;cAClBC,IAAI,EAAER,IAAI,CAACS,GAAG,CAACC,KAAK,CAACF,IAAI,GAAGd;YAC9B,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;IAEA,OAAOK,eAAe;EACxB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,sBAAsB,EAAE,SAAAA,CAAUtB,eAAe,EAAEuB,EAAE,EAAE;IACrD,MAAMC,cAAc,GAAG,CACrB,GAAGxB,eAAe,CAACC,SAAS,EAC5B,GAAGD,eAAe,CAACE,SAAS,CAC7B;;IAED;IACA;IACA;IACA;IACA,SAASuB,qBAAqBA,CAACC,SAAS,EAAEV,IAAI,EAAEC,IAAI,EAAE;MACpD,MAAMU,GAAG,GAAG,iCAAiCX,IAAI,EAAE;MACnD,MAAMY,OAAO,GAAG,GAAGF,SAAS,KAAKV,IAAI,aAAaC,IAAI,mDAAmDS,SAAS,CAACG,WAAW,CAAC,CAAC,sBAAsBF,GAAG,EAAE;MAC3J,OAAOC,OAAO;IAChB;;IAEA;IACA,KAAK,IAAI;MAAEZ,IAAI;MAAEC;IAAK,CAAC,IAAIO,cAAc,EAAE;MACzC,MAAMM,aAAa,GAAG9C,SAAS,CAACgC,IAAI,CAAC;MACrC,IAAIc,aAAa,KAAKC,SAAS,EAAE;QAC/B,MAAMH,OAAO,GAAGH,qBAAqB,CAAC,UAAU,EAAET,IAAI,EAAEC,IAAI,CAAC;QAC7DrB,OAAO,CAACoC,GAAG,CAACJ,OAAO,CAAC;QACpB,OAAO,IAAI;MACb;IACF;;IAEA;IACA;IACA;IACA;IACA,MAAMK,eAAe,GAAG,IAAIC,GAAG,CAC7BC,MAAM,CAACC,mBAAmB,CAACb,EAAE,CAACc,SAAS,CAAC,CACrCC,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,GAAG,KAAK,aAAa,CAChE,CAAC;IAED,KAAK,IAAI;MAAEvB,IAAI;MAAEC;IAAK,CAAC,IAAIO,cAAc,EAAE;MACzC,IAAI,CAACvC,cAAc,CAAC6B,QAAQ,CAACE,IAAI,CAAC,IAAIiB,eAAe,CAACQ,GAAG,CAACzB,IAAI,CAAC,EAAE;QAC/D,MAAMY,OAAO,GAAGH,qBAAqB,CAAC,UAAU,EAAET,IAAI,EAAEC,IAAI,CAAC;QAC7DrB,OAAO,CAACoC,GAAG,CAACJ,OAAO,CAAC;QACpB,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,WAAW,EAAE,eAAAA,CAAA,EAAkB;IAC7B;IACA;IACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,QAAQ,CAAC;IACnD,MAAMC,cAAc,GAAGH,OAAO,CAACA,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG,MAAM9D,aAAa,CAACC,WAAW,CAAC2D,cAAc,CAAC;IAEhE,OAAOE,QAAQ;EACjB,CAAC;EAED;AACF;AACA;EACEC,MAAM,EAAE,eAAAA,CAAgB1B,EAAE,EAAE;IAC1B,MAAMyB,QAAQ,GAAG,MAAM9D,aAAa,CAACwD,WAAW,CAAC,CAAC;IAClD,MAAMQ,4BAA4B,GAAGhE,aAAa,CAACY,mCAAmC,CAACkD,QAAQ,CAAC;IAEhG9D,aAAa,CAACoC,sBAAsB,CAAC4B,4BAA4B,EAAE3B,EAAE,CAAC;EACxE;AACF,CAAC;AAED,SAAS4B,cAAcA,CAAC5B,EAAE,EAAE6B,GAAG,EAAEC,UAAU,EAAE;EAC3CA,UAAU,CAACC,QAAQ,GAAG,kBAAiB;IACrC,IAAI,CAAC/B,EAAE,CAACgC,qBAAqB,EAAE;MAC7BrE,aAAa,CAAC+D,MAAM,CAAC1B,EAAE,CAAC;IAC1B;EACF,CAAC;AACH;AAEA,IAAI,OAAOA,EAAE,KAAK,WAAW,EAAE;EAC7B4B,cAAc,CAAC5B,EAAE,EAAEA,EAAE,CAACc,SAAS,CAAC;AAClC;AAEA,SAASc,cAAc,IAAIK,OAAO,EAAEtE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}