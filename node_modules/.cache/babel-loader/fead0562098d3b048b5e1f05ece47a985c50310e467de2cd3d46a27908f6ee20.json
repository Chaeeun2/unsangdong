{"ast":null,"code":"/**\n * @module Environment\n * @submodule Environment\n * @for p5\n * @requires core\n */\n\nfunction describe(p5, fn) {\n  const descContainer = '_Description'; //Fallback container\n  const fallbackDescId = '_fallbackDesc'; //Fallback description\n  const fallbackTableId = '_fallbackTable'; //Fallback Table\n  const fallbackTableElId = '_fte_'; //Fallback Table Element\n  const labelContainer = '_Label'; //Label container\n  const labelDescId = '_labelDesc'; //Label description\n  const labelTableId = '_labelTable'; //Label Table\n  const labelTableElId = '_lte_'; //Label Table Element\n\n  /**\n   * Creates a screen reader-accessible description of the canvas.\n   *\n   * The first parameter, `text`, is the description of the canvas.\n   *\n   * The second parameter, `display`, is optional. It determines how the\n   * description is displayed. If `LABEL` is passed, as in\n   * `describe('A description.', LABEL)`, the description will be visible in\n   * a div element next to the canvas. If `FALLBACK` is passed, as in\n   * `describe('A description.', FALLBACK)`, the description will only be\n   * visible to screen readers. This is the default mode.\n   *\n   * Read\n   * <a href=\"/learn/accessible-labels.html\">Writing accessible canvas descriptions</a>\n   * to learn more about making sketches accessible.\n   *\n   * @method describe\n   * @param  {String} text        description of the canvas.\n   * @param  {(FALLBACK|LABEL)} [display] either LABEL or FALLBACK.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Draw a heart.\n   *   fill('red');\n   *   noStroke();\n   *   circle(67, 67, 20);\n   *   circle(83, 67, 20);\n   *   triangle(91, 73, 75, 95, 59, 73);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A pink square with a red heart in the bottom-right corner.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Draw a heart.\n   *   fill('red');\n   *   noStroke();\n   *   circle(67, 67, 20);\n   *   circle(83, 67, 20);\n   *   triangle(91, 73, 75, 95, 59, 73);\n   *\n   *   // Add a general description of the canvas\n   *   // and display it for debugging.\n   *   describe('A pink square with a red heart in the bottom-right corner.', LABEL);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * \n   * function setup(){\n   *  createCanvas(100, 100);\n   * };\n   * \n   * function draw() {\n   *   background(200);\n   *\n   *   // The expression\n   *   // frameCount % 100\n   *   // causes x to increase from 0\n   *   // to 99, then restart from 0.\n   *   let x = frameCount % 100;\n   *\n   *   // Draw the circle.\n   *   fill(0, 255, 0);\n   *   circle(x, 50, 40);\n   *\n   *   // Add a general description of the canvas.\n   *   describe(`A green circle at (${x}, 50) moves from left to right on a gray square.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * \n   * function setup(){\n   * createCanvas(100, 100);\n   * }\n   * \n   * function draw() {\n   *   background(200);\n   *\n   *   // The expression\n   *   // frameCount % 100\n   *   // causes x to increase from 0\n   *   // to 99, then restart from 0.\n   *   let x = frameCount % 100;\n   *\n   *   // Draw the circle.\n   *   fill(0, 255, 0);\n   *   circle(x, 50, 40);\n   *\n   *   // Add a general description of the canvas\n   *   // and display it for debugging.\n   *   describe(`A green circle at (${x}, 50) moves from left to right on a gray square.`, LABEL);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.describe = function (text, display) {\n    // p5._validateParameters('describe', arguments);\n    if (typeof text !== 'string') {\n      return;\n    }\n    const cnvId = this.canvas.id;\n    //calls function that adds punctuation for better screen reading\n    text = _descriptionText(text);\n    //if there is no dummyDOM\n    if (!this.dummyDOM) {\n      this.dummyDOM = document.getElementById(cnvId).parentNode;\n    }\n    if (!this.descriptions) {\n      this.descriptions = {};\n    }\n    //check if html structure for description is ready\n    if (this.descriptions.fallback) {\n      //check if text is different from current description\n      if (this.descriptions.fallback.innerHTML !== text) {\n        //update description\n        this.descriptions.fallback.innerHTML = text;\n      }\n    } else {\n      //create fallback html structure\n      this._describeHTML('fallback', text);\n    }\n    //if display is LABEL\n    if (display === this.LABEL) {\n      //check if html structure for label is ready\n      if (this.descriptions.label) {\n        //check if text is different from current label\n        if (this.descriptions.label.innerHTML !== text) {\n          //update label description\n          this.descriptions.label.innerHTML = text;\n        }\n      } else {\n        //create label html structure\n        this._describeHTML('label', text);\n      }\n    }\n  };\n\n  /**\n   * Creates a screen reader-accessible description of elements in the canvas.\n   *\n   * Elements are shapes or groups of shapes that create meaning together. For\n   * example, a few overlapping circles could make an \"eye\" element.\n   *\n   * The first parameter, `name`, is the name of the element.\n   *\n   * The second parameter, `text`, is the description of the element.\n   *\n   * The third parameter, `display`, is optional. It determines how the\n   * description is displayed. If `LABEL` is passed, as in\n   * `describe('A description.', LABEL)`, the description will be visible in\n   * a div element next to the canvas. Using `LABEL` creates unhelpful\n   * duplicates for screen readers. Only use `LABEL` during development. If\n   * `FALLBACK` is passed, as in `describe('A description.', FALLBACK)`, the\n   * description will only be visible to screen readers. This is the default\n   * mode.\n   *\n   * Read\n   * <a href=\"/learn/accessible-labels.html\">Writing accessible canvas descriptions</a>\n   * to learn more about making sketches accessible.\n   *\n   * @method describeElement\n   * @param  {String} name        name of the element.\n   * @param  {String} text        description of the element.\n   * @param  {(FALLBACK|LABEL)} [display] either LABEL or FALLBACK.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Describe the first element\n   *   // and draw it.\n   *   describeElement('Circle', 'A yellow circle in the top-left corner.');\n   *   noStroke();\n   *   fill('yellow');\n   *   circle(25, 25, 40);\n   *\n   *   // Describe the second element\n   *   // and draw it.\n   *   describeElement('Heart', 'A red heart in the bottom-right corner.');\n   *   fill('red');\n   *   circle(66.6, 66.6, 20);\n   *   circle(83.2, 66.6, 20);\n   *   triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A red heart and yellow circle over a pink background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Describe the first element\n   *   // and draw it. Display the\n   *   // description for debugging.\n   *   describeElement('Circle', 'A yellow circle in the top-left corner.', LABEL);\n   *   noStroke();\n   *   fill('yellow');\n   *   circle(25, 25, 40);\n   *\n   *   // Describe the second element\n   *   // and draw it. Display the\n   *   // description for debugging.\n   *   describeElement('Heart', 'A red heart in the bottom-right corner.', LABEL);\n   *   fill('red');\n   *   circle(66.6, 66.6, 20);\n   *   circle(83.2, 66.6, 20);\n   *   triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A red heart and yellow circle over a pink background.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  fn.describeElement = function (name, text, display) {\n    // p5._validateParameters('describeElement', arguments);\n    if (typeof text !== 'string' || typeof name !== 'string') {\n      return;\n    }\n    const cnvId = this.canvas.id;\n    //calls function that adds punctuation for better screen reading\n    text = _descriptionText(text);\n    //calls function that adds punctuation for better screen reading\n    let elementName = _elementName(name);\n    //remove any special characters from name to use it as html id\n    name = name.replace(/[^a-zA-Z0-9]/g, '');\n\n    //store element description\n    let inner = `<th scope=\"row\">${elementName}</th><td>${text}</td>`;\n    //if there is no dummyDOM\n    if (!this.dummyDOM) {\n      this.dummyDOM = document.getElementById(cnvId).parentNode;\n    }\n    if (!this.descriptions) {\n      this.descriptions = {\n        fallbackElements: {}\n      };\n    } else if (!this.descriptions.fallbackElements) {\n      this.descriptions.fallbackElements = {};\n    }\n    //check if html structure for element description is ready\n    if (this.descriptions.fallbackElements[name]) {\n      //if current element description is not the same as inner\n      if (this.descriptions.fallbackElements[name].innerHTML !== inner) {\n        //update element description\n        this.descriptions.fallbackElements[name].innerHTML = inner;\n      }\n    } else {\n      //create fallback html structure\n      this._describeElementHTML('fallback', name, inner);\n    }\n    //if display is LABEL\n    if (display === this.LABEL) {\n      if (!this.descriptions.labelElements) {\n        this.descriptions.labelElements = {};\n      }\n      //if html structure for label element description is ready\n      if (this.descriptions.labelElements[name]) {\n        //if label element description is different\n        if (this.descriptions.labelElements[name].innerHTML !== inner) {\n          //update label element description\n          this.descriptions.labelElements[name].innerHTML = inner;\n        }\n      } else {\n        //create label element html structure\n        this._describeElementHTML('label', name, inner);\n      }\n    }\n  };\n\n  /*\n   *\n   * Helper functions for describe() and describeElement().\n   *\n   */\n\n  // check that text is not LABEL or FALLBACK and ensure text ends with punctuation mark\n  function _descriptionText(text) {\n    if (text === 'label' || text === 'fallback') {\n      throw new Error('description should not be LABEL or FALLBACK');\n    }\n    //if string does not end with '.'\n    if (!text.endsWith('.') && !text.endsWith(';') && !text.endsWith(',') && !text.endsWith('?') && !text.endsWith('!')) {\n      //add '.' to the end of string\n      text = text + '.';\n    }\n    return text;\n  }\n\n  /*\n   * Helper functions for describe()\n   */\n\n  //creates HTML structure for canvas descriptions\n  fn._describeHTML = function (type, text) {\n    const cnvId = this.canvas.id;\n    if (type === 'fallback') {\n      //if there is no description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + descContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${descContainer}\" role=\"region\" aria-label=\"Canvas Description\"><p id=\"${cnvId}${fallbackDescId}\"></p></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`)) {\n          //create description container + <p> for fallback description\n          this.dummyDOM.querySelector(`#${cnvId}`).innerHTML = html;\n        } else {\n          //create description container + <p> for fallback description before outputs\n          this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`).insertAdjacentHTML('beforebegin', html);\n        }\n      } else {\n        //if describeElement() has already created the container and added a table of elements\n        //create fallback description <p> before the table\n        this.dummyDOM.querySelector('#' + cnvId + fallbackTableId).insertAdjacentHTML('beforebegin', `<p id=\"${cnvId + fallbackDescId}\"></p>`);\n      }\n      //if the container for the description exists\n      this.descriptions.fallback = this.dummyDOM.querySelector(`#${cnvId}${fallbackDescId}`);\n      this.descriptions.fallback.innerHTML = text;\n      return;\n    } else if (type === 'label') {\n      //if there is no label container\n      if (!this.dummyDOM.querySelector(`#${cnvId + labelContainer}`)) {\n        let html = `<div id=\"${cnvId}${labelContainer}\" class=\"p5Label\"><p id=\"${cnvId}${labelDescId}\"></p></div>`;\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`)) {\n          //create label container + <p> for label description\n          this.dummyDOM.querySelector('#' + cnvId).insertAdjacentHTML('afterend', html);\n        } else {\n          //create label container + <p> for label description before outputs\n          this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`).insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (this.dummyDOM.querySelector(`#${cnvId + labelTableId}`)) {\n        //if describeElement() has already created the container and added a table of elements\n        //create label description <p> before the table\n        this.dummyDOM.querySelector(`#${cnvId + labelTableId}`).insertAdjacentHTML('beforebegin', `<p id=\"${cnvId}${labelDescId}\"></p>`);\n      }\n      this.descriptions.label = this.dummyDOM.querySelector('#' + cnvId + labelDescId);\n      this.descriptions.label.innerHTML = text;\n      return;\n    }\n  };\n\n  /*\n   * Helper functions for describeElement().\n   */\n\n  //check that name is not LABEL or FALLBACK and ensure text ends with colon\n  function _elementName(name) {\n    if (name === 'label' || name === 'fallback') {\n      throw new Error('element name should not be LABEL or FALLBACK');\n    }\n    //check if last character of string n is '.', ';', or ','\n    if (name.endsWith('.') || name.endsWith(';') || name.endsWith(',')) {\n      //replace last character with ':'\n      name = name.replace(/.$/, ':');\n    } else if (!name.endsWith(':')) {\n      //if string n does not end with ':'\n      //add ':'' at the end of string\n      name = name + ':';\n    }\n    return name;\n  }\n\n  //creates HTML structure for element descriptions\n  fn._describeElementHTML = function (type, name, text) {\n    const cnvId = this.canvas.id;\n    if (type === 'fallback') {\n      //if there is no description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + descContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${descContainer}\" role=\"region\" aria-label=\"Canvas Description\"><table id=\"${cnvId}${fallbackTableId}\"><caption>Canvas elements and their descriptions</caption></table></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`)) {\n          //create container + table for element descriptions\n          this.dummyDOM.querySelector('#' + cnvId).innerHTML = html;\n        } else {\n          //create container + table for element descriptions before outputs\n          this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`).insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (!this.dummyDOM.querySelector('#' + cnvId + fallbackTableId)) {\n        //if describe() has already created the container and added a description\n        //and there is no table create fallback table for element description after\n        //fallback description\n        this.dummyDOM.querySelector('#' + cnvId + fallbackDescId).insertAdjacentHTML('afterend', `<table id=\"${cnvId}${fallbackTableId}\"><caption>Canvas elements and their descriptions</caption></table>`);\n      }\n      //create a table row for the element\n      let tableRow = document.createElement('tr');\n      tableRow.id = cnvId + fallbackTableElId + name;\n      this.dummyDOM.querySelector('#' + cnvId + fallbackTableId).appendChild(tableRow);\n      //update element description\n      this.descriptions.fallbackElements[name] = this.dummyDOM.querySelector(`#${cnvId}${fallbackTableElId}${name}`);\n      this.descriptions.fallbackElements[name].innerHTML = text;\n      return;\n    } else if (type === 'label') {\n      //If display is LABEL creates a div adjacent to the canvas element with\n      //a table, a row header cell with the name of the elements,\n      //and adds the description of the element in adjacent cell.\n      //if there is no label description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + labelContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${labelContainer}\" class=\"p5Label\"><table id=\"${cnvId}${labelTableId}\"></table></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`)) {\n          //create container + table for element descriptions\n          this.dummyDOM.querySelector('#' + cnvId).insertAdjacentHTML('afterend', html);\n        } else {\n          //create container + table for element descriptions before outputs\n          this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`).insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (!this.dummyDOM.querySelector(`#${cnvId + labelTableId}`)) {\n        //if describe() has already created the label container and added a description\n        //and there is no table create label table for element description after\n        //label description\n        this.dummyDOM.querySelector('#' + cnvId + labelDescId).insertAdjacentHTML('afterend', `<table id=\"${cnvId + labelTableId}\"></table>`);\n      }\n      //create a table row for the element label description\n      let tableRow = document.createElement('tr');\n      tableRow.id = cnvId + labelTableElId + name;\n      this.dummyDOM.querySelector('#' + cnvId + labelTableId).appendChild(tableRow);\n      //update element label description\n      this.descriptions.labelElements[name] = this.dummyDOM.querySelector(`#${cnvId}${labelTableElId}${name}`);\n      this.descriptions.labelElements[name].innerHTML = text;\n    }\n  };\n}\nif (typeof p5 !== 'undefined') {\n  describe(p5, p5.prototype);\n}\nexport { describe as default };","map":{"version":3,"names":["describe","p5","fn","descContainer","fallbackDescId","fallbackTableId","fallbackTableElId","labelContainer","labelDescId","labelTableId","labelTableElId","text","display","cnvId","canvas","id","_descriptionText","dummyDOM","document","getElementById","parentNode","descriptions","fallback","innerHTML","_describeHTML","LABEL","label","describeElement","name","elementName","_elementName","replace","inner","fallbackElements","_describeElementHTML","labelElements","Error","endsWith","type","querySelector","html","insertAdjacentHTML","tableRow","createElement","appendChild","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/accessibility/describe.js"],"sourcesContent":["/**\n * @module Environment\n * @submodule Environment\n * @for p5\n * @requires core\n */\n\nfunction describe(p5, fn){\n  const descContainer = '_Description'; //Fallback container\n  const fallbackDescId = '_fallbackDesc'; //Fallback description\n  const fallbackTableId = '_fallbackTable'; //Fallback Table\n  const fallbackTableElId = '_fte_'; //Fallback Table Element\n  const labelContainer = '_Label'; //Label container\n  const labelDescId = '_labelDesc'; //Label description\n  const labelTableId = '_labelTable'; //Label Table\n  const labelTableElId = '_lte_'; //Label Table Element\n\n  /**\n   * Creates a screen reader-accessible description of the canvas.\n   *\n   * The first parameter, `text`, is the description of the canvas.\n   *\n   * The second parameter, `display`, is optional. It determines how the\n   * description is displayed. If `LABEL` is passed, as in\n   * `describe('A description.', LABEL)`, the description will be visible in\n   * a div element next to the canvas. If `FALLBACK` is passed, as in\n   * `describe('A description.', FALLBACK)`, the description will only be\n   * visible to screen readers. This is the default mode.\n   *\n   * Read\n   * <a href=\"/learn/accessible-labels.html\">Writing accessible canvas descriptions</a>\n   * to learn more about making sketches accessible.\n   *\n   * @method describe\n   * @param  {String} text        description of the canvas.\n   * @param  {(FALLBACK|LABEL)} [display] either LABEL or FALLBACK.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Draw a heart.\n   *   fill('red');\n   *   noStroke();\n   *   circle(67, 67, 20);\n   *   circle(83, 67, 20);\n   *   triangle(91, 73, 75, 95, 59, 73);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A pink square with a red heart in the bottom-right corner.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Draw a heart.\n   *   fill('red');\n   *   noStroke();\n   *   circle(67, 67, 20);\n   *   circle(83, 67, 20);\n   *   triangle(91, 73, 75, 95, 59, 73);\n   *\n   *   // Add a general description of the canvas\n   *   // and display it for debugging.\n   *   describe('A pink square with a red heart in the bottom-right corner.', LABEL);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * \n   * function setup(){\n   *  createCanvas(100, 100);\n   * };\n   * \n   * function draw() {\n   *   background(200);\n   *\n   *   // The expression\n   *   // frameCount % 100\n   *   // causes x to increase from 0\n   *   // to 99, then restart from 0.\n   *   let x = frameCount % 100;\n   *\n   *   // Draw the circle.\n   *   fill(0, 255, 0);\n   *   circle(x, 50, 40);\n   *\n   *   // Add a general description of the canvas.\n   *   describe(`A green circle at (${x}, 50) moves from left to right on a gray square.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * \n   * function setup(){\n   * createCanvas(100, 100);\n   * }\n   * \n   * function draw() {\n   *   background(200);\n   *\n   *   // The expression\n   *   // frameCount % 100\n   *   // causes x to increase from 0\n   *   // to 99, then restart from 0.\n   *   let x = frameCount % 100;\n   *\n   *   // Draw the circle.\n   *   fill(0, 255, 0);\n   *   circle(x, 50, 40);\n   *\n   *   // Add a general description of the canvas\n   *   // and display it for debugging.\n   *   describe(`A green circle at (${x}, 50) moves from left to right on a gray square.`, LABEL);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.describe = function(text, display) {\n    // p5._validateParameters('describe', arguments);\n    if (typeof text !== 'string') {\n      return;\n    }\n    const cnvId = this.canvas.id;\n    //calls function that adds punctuation for better screen reading\n    text = _descriptionText(text);\n    //if there is no dummyDOM\n    if (!this.dummyDOM) {\n      this.dummyDOM = document.getElementById(cnvId).parentNode;\n    }\n    if (!this.descriptions) {\n      this.descriptions = {};\n    }\n    //check if html structure for description is ready\n    if (this.descriptions.fallback) {\n      //check if text is different from current description\n      if (this.descriptions.fallback.innerHTML !== text) {\n        //update description\n        this.descriptions.fallback.innerHTML = text;\n      }\n    } else {\n      //create fallback html structure\n      this._describeHTML('fallback', text);\n    }\n    //if display is LABEL\n    if (display === this.LABEL) {\n      //check if html structure for label is ready\n      if (this.descriptions.label) {\n        //check if text is different from current label\n        if (this.descriptions.label.innerHTML !== text) {\n          //update label description\n          this.descriptions.label.innerHTML = text;\n        }\n      } else {\n        //create label html structure\n        this._describeHTML('label', text);\n      }\n    }\n  };\n\n  /**\n   * Creates a screen reader-accessible description of elements in the canvas.\n   *\n   * Elements are shapes or groups of shapes that create meaning together. For\n   * example, a few overlapping circles could make an \"eye\" element.\n   *\n   * The first parameter, `name`, is the name of the element.\n   *\n   * The second parameter, `text`, is the description of the element.\n   *\n   * The third parameter, `display`, is optional. It determines how the\n   * description is displayed. If `LABEL` is passed, as in\n   * `describe('A description.', LABEL)`, the description will be visible in\n   * a div element next to the canvas. Using `LABEL` creates unhelpful\n   * duplicates for screen readers. Only use `LABEL` during development. If\n   * `FALLBACK` is passed, as in `describe('A description.', FALLBACK)`, the\n   * description will only be visible to screen readers. This is the default\n   * mode.\n   *\n   * Read\n   * <a href=\"/learn/accessible-labels.html\">Writing accessible canvas descriptions</a>\n   * to learn more about making sketches accessible.\n   *\n   * @method describeElement\n   * @param  {String} name        name of the element.\n   * @param  {String} text        description of the element.\n   * @param  {(FALLBACK|LABEL)} [display] either LABEL or FALLBACK.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Describe the first element\n   *   // and draw it.\n   *   describeElement('Circle', 'A yellow circle in the top-left corner.');\n   *   noStroke();\n   *   fill('yellow');\n   *   circle(25, 25, 40);\n   *\n   *   // Describe the second element\n   *   // and draw it.\n   *   describeElement('Heart', 'A red heart in the bottom-right corner.');\n   *   fill('red');\n   *   circle(66.6, 66.6, 20);\n   *   circle(83.2, 66.6, 20);\n   *   triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A red heart and yellow circle over a pink background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background('pink');\n   *\n   *   // Describe the first element\n   *   // and draw it. Display the\n   *   // description for debugging.\n   *   describeElement('Circle', 'A yellow circle in the top-left corner.', LABEL);\n   *   noStroke();\n   *   fill('yellow');\n   *   circle(25, 25, 40);\n   *\n   *   // Describe the second element\n   *   // and draw it. Display the\n   *   // description for debugging.\n   *   describeElement('Heart', 'A red heart in the bottom-right corner.', LABEL);\n   *   fill('red');\n   *   circle(66.6, 66.6, 20);\n   *   circle(83.2, 66.6, 20);\n   *   triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n   *\n   *   // Add a general description of the canvas.\n   *   describe('A red heart and yellow circle over a pink background.');\n   * }\n   * </code>\n   * </div>\n   */\n\n  fn.describeElement = function(name, text, display) {\n    // p5._validateParameters('describeElement', arguments);\n    if (typeof text !== 'string' || typeof name !== 'string') {\n      return;\n    }\n    const cnvId = this.canvas.id;\n    //calls function that adds punctuation for better screen reading\n    text = _descriptionText(text);\n    //calls function that adds punctuation for better screen reading\n    let elementName = _elementName(name);\n    //remove any special characters from name to use it as html id\n    name = name.replace(/[^a-zA-Z0-9]/g, '');\n\n    //store element description\n    let inner = `<th scope=\"row\">${elementName}</th><td>${text}</td>`;\n    //if there is no dummyDOM\n    if (!this.dummyDOM) {\n      this.dummyDOM = document.getElementById(cnvId).parentNode;\n    }\n    if (!this.descriptions) {\n      this.descriptions = { fallbackElements: {} };\n    } else if (!this.descriptions.fallbackElements) {\n      this.descriptions.fallbackElements = {};\n    }\n    //check if html structure for element description is ready\n    if (this.descriptions.fallbackElements[name]) {\n      //if current element description is not the same as inner\n      if (this.descriptions.fallbackElements[name].innerHTML !== inner) {\n        //update element description\n        this.descriptions.fallbackElements[name].innerHTML = inner;\n      }\n    } else {\n      //create fallback html structure\n      this._describeElementHTML('fallback', name, inner);\n    }\n    //if display is LABEL\n    if (display === this.LABEL) {\n      if (!this.descriptions.labelElements) {\n        this.descriptions.labelElements = {};\n      }\n      //if html structure for label element description is ready\n      if (this.descriptions.labelElements[name]) {\n        //if label element description is different\n        if (this.descriptions.labelElements[name].innerHTML !== inner) {\n          //update label element description\n          this.descriptions.labelElements[name].innerHTML = inner;\n        }\n      } else {\n        //create label element html structure\n        this._describeElementHTML('label', name, inner);\n      }\n    }\n  };\n\n  /*\n   *\n   * Helper functions for describe() and describeElement().\n   *\n   */\n\n  // check that text is not LABEL or FALLBACK and ensure text ends with punctuation mark\n  function _descriptionText(text) {\n    if (text === 'label' || text === 'fallback') {\n      throw new Error('description should not be LABEL or FALLBACK');\n    }\n    //if string does not end with '.'\n    if (\n      !text.endsWith('.') &&\n      !text.endsWith(';') &&\n      !text.endsWith(',') &&\n      !text.endsWith('?') &&\n      !text.endsWith('!')\n    ) {\n      //add '.' to the end of string\n      text = text + '.';\n    }\n    return text;\n  }\n\n  /*\n   * Helper functions for describe()\n   */\n\n  //creates HTML structure for canvas descriptions\n  fn._describeHTML = function(type, text) {\n    const cnvId = this.canvas.id;\n    if (type === 'fallback') {\n      //if there is no description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + descContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${descContainer}\" role=\"region\" aria-label=\"Canvas Description\"><p id=\"${cnvId}${fallbackDescId}\"></p></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`)) {\n          //create description container + <p> for fallback description\n          this.dummyDOM.querySelector(`#${cnvId}`).innerHTML = html;\n        } else {\n          //create description container + <p> for fallback description before outputs\n          this.dummyDOM\n            .querySelector(`#${cnvId}accessibleOutput`)\n            .insertAdjacentHTML('beforebegin', html);\n        }\n      } else {\n        //if describeElement() has already created the container and added a table of elements\n        //create fallback description <p> before the table\n        this.dummyDOM\n          .querySelector('#' + cnvId + fallbackTableId)\n          .insertAdjacentHTML(\n            'beforebegin',\n            `<p id=\"${cnvId + fallbackDescId}\"></p>`\n          );\n      }\n      //if the container for the description exists\n      this.descriptions.fallback = this.dummyDOM.querySelector(\n        `#${cnvId}${fallbackDescId}`\n      );\n      this.descriptions.fallback.innerHTML = text;\n      return;\n    } else if (type === 'label') {\n      //if there is no label container\n      if (!this.dummyDOM.querySelector(`#${cnvId + labelContainer}`)) {\n        let html = `<div id=\"${cnvId}${labelContainer}\" class=\"p5Label\"><p id=\"${cnvId}${labelDescId}\"></p></div>`;\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`)) {\n          //create label container + <p> for label description\n          this.dummyDOM\n            .querySelector('#' + cnvId)\n            .insertAdjacentHTML('afterend', html);\n        } else {\n          //create label container + <p> for label description before outputs\n          this.dummyDOM\n            .querySelector(`#${cnvId}accessibleOutputLabel`)\n            .insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (this.dummyDOM.querySelector(`#${cnvId + labelTableId}`)) {\n        //if describeElement() has already created the container and added a table of elements\n        //create label description <p> before the table\n        this.dummyDOM\n          .querySelector(`#${cnvId + labelTableId}`)\n          .insertAdjacentHTML(\n            'beforebegin',\n            `<p id=\"${cnvId}${labelDescId}\"></p>`\n          );\n      }\n      this.descriptions.label = this.dummyDOM.querySelector(\n        '#' + cnvId + labelDescId\n      );\n      this.descriptions.label.innerHTML = text;\n      return;\n    }\n  };\n\n  /*\n   * Helper functions for describeElement().\n   */\n\n  //check that name is not LABEL or FALLBACK and ensure text ends with colon\n  function _elementName(name) {\n    if (name === 'label' || name === 'fallback') {\n      throw new Error('element name should not be LABEL or FALLBACK');\n    }\n    //check if last character of string n is '.', ';', or ','\n    if (name.endsWith('.') || name.endsWith(';') || name.endsWith(',')) {\n      //replace last character with ':'\n      name = name.replace(/.$/, ':');\n    } else if (!name.endsWith(':')) {\n      //if string n does not end with ':'\n      //add ':'' at the end of string\n      name = name + ':';\n    }\n    return name;\n  }\n\n  //creates HTML structure for element descriptions\n  fn._describeElementHTML = function(type, name, text) {\n    const cnvId = this.canvas.id;\n    if (type === 'fallback') {\n      //if there is no description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + descContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${descContainer}\" role=\"region\" aria-label=\"Canvas Description\"><table id=\"${cnvId}${fallbackTableId}\"><caption>Canvas elements and their descriptions</caption></table></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutput`)) {\n          //create container + table for element descriptions\n          this.dummyDOM.querySelector('#' + cnvId).innerHTML = html;\n        } else {\n          //create container + table for element descriptions before outputs\n          this.dummyDOM\n            .querySelector(`#${cnvId}accessibleOutput`)\n            .insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (!this.dummyDOM.querySelector('#' + cnvId + fallbackTableId)) {\n        //if describe() has already created the container and added a description\n        //and there is no table create fallback table for element description after\n        //fallback description\n        this.dummyDOM\n          .querySelector('#' + cnvId + fallbackDescId)\n          .insertAdjacentHTML(\n            'afterend',\n            `<table id=\"${cnvId}${fallbackTableId}\"><caption>Canvas elements and their descriptions</caption></table>`\n          );\n      }\n      //create a table row for the element\n      let tableRow = document.createElement('tr');\n      tableRow.id = cnvId + fallbackTableElId + name;\n      this.dummyDOM\n        .querySelector('#' + cnvId + fallbackTableId)\n        .appendChild(tableRow);\n      //update element description\n      this.descriptions.fallbackElements[name] = this.dummyDOM.querySelector(\n        `#${cnvId}${fallbackTableElId}${name}`\n      );\n      this.descriptions.fallbackElements[name].innerHTML = text;\n      return;\n    } else if (type === 'label') {\n      //If display is LABEL creates a div adjacent to the canvas element with\n      //a table, a row header cell with the name of the elements,\n      //and adds the description of the element in adjacent cell.\n      //if there is no label description container\n      if (!this.dummyDOM.querySelector(`#${cnvId + labelContainer}`)) {\n        //if there are no accessible outputs (see textOutput() and gridOutput())\n        let html = `<div id=\"${cnvId}${labelContainer}\" class=\"p5Label\"><table id=\"${cnvId}${labelTableId}\"></table></div>`;\n        if (!this.dummyDOM.querySelector(`#${cnvId}accessibleOutputLabel`)) {\n          //create container + table for element descriptions\n          this.dummyDOM\n            .querySelector('#' + cnvId)\n            .insertAdjacentHTML('afterend', html);\n        } else {\n          //create container + table for element descriptions before outputs\n          this.dummyDOM\n            .querySelector(`#${cnvId}accessibleOutputLabel`)\n            .insertAdjacentHTML('beforebegin', html);\n        }\n      } else if (!this.dummyDOM.querySelector(`#${cnvId + labelTableId}`)) {\n        //if describe() has already created the label container and added a description\n        //and there is no table create label table for element description after\n        //label description\n        this.dummyDOM\n          .querySelector('#' + cnvId + labelDescId)\n          .insertAdjacentHTML(\n            'afterend',\n            `<table id=\"${cnvId + labelTableId}\"></table>`\n          );\n      }\n      //create a table row for the element label description\n      let tableRow = document.createElement('tr');\n      tableRow.id = cnvId + labelTableElId + name;\n      this.dummyDOM\n        .querySelector('#' + cnvId + labelTableId)\n        .appendChild(tableRow);\n      //update element label description\n      this.descriptions.labelElements[name] = this.dummyDOM.querySelector(\n        `#${cnvId}${labelTableElId}${name}`\n      );\n      this.descriptions.labelElements[name].innerHTML = text;\n    }\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  describe(p5, p5.prototype);\n}\n\nexport { describe as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACvB,MAAMC,aAAa,GAAG,cAAc,CAAC,CAAC;EACtC,MAAMC,cAAc,GAAG,eAAe,CAAC,CAAC;EACxC,MAAMC,eAAe,GAAG,gBAAgB,CAAC,CAAC;EAC1C,MAAMC,iBAAiB,GAAG,OAAO,CAAC,CAAC;EACnC,MAAMC,cAAc,GAAG,QAAQ,CAAC,CAAC;EACjC,MAAMC,WAAW,GAAG,YAAY,CAAC,CAAC;EAClC,MAAMC,YAAY,GAAG,aAAa,CAAC,CAAC;EACpC,MAAMC,cAAc,GAAG,OAAO,CAAC,CAAC;;EAEhpC;IACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5B;IACF;IACA,MAAME,KAAK,GAAG,IAAI,CAACC,MAAM,CAACC,EAAE;IAC5B;IACAJ,IAAI,GAAGK,gBAAgB,CAACL,IAAI,CAAC;IAC7B;IACA,IAAI,CAAC,IAAI,CAACM,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAACN,KAAK,CAAC,CAACO,UAAU;IAC3D;IACA,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,CAAC,CAAC;IACxB;IACA;IACA,IAAI,IAAI,CAACA,YAAY,CAACC,QAAQ,EAAE;MAC9B;MACA,IAAI,IAAI,CAACD,YAAY,CAACC,QAAQ,CAACC,SAAS,KAAKZ,IAAI,EAAE;QACjD;QACA,IAAI,CAACU,YAAY,CAACC,QAAQ,CAACC,SAAS,GAAGZ,IAAI;MAC7C;IACF,CAAC,MAAM;MACL;MACA,IAAI,CAACa,aAAa,CAAC,UAAU,EAAEb,IAAI,CAAC;IACtC;IACA;IACA,IAAIC,OAAO,KAAK,IAAI,CAACa,KAAK,EAAE;MAC1B;MACA,IAAI,IAAI,CAACJ,YAAY,CAACK,KAAK,EAAE;QAC3B;QACA,IAAI,IAAI,CAACL,YAAY,CAACK,KAAK,CAACH,SAAS,KAAKZ,IAAI,EAAE;UAC9C;UACA,IAAI,CAACU,YAAY,CAACK,KAAK,CAACH,SAAS,GAAGZ,IAAI;QAC1C;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAACa,aAAa,CAAC,OAAO,EAAEb,IAAI,CAAC;MACnC;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEET,EAAE,CAACyB,eAAe,GAAG,UAASC,IAAI,EAAEjB,IAAI,EAAEC,OAAO,EAAE;IACjD;IACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOiB,IAAI,KAAK,QAAQ,EAAE;MACxD;IACF;IACA,MAAMf,KAAK,GAAG,IAAI,CAACC,MAAM,CAACC,EAAE;IAC5B;IACAJ,IAAI,GAAGK,gBAAgB,CAACL,IAAI,CAAC;IAC7B;IACA,IAAIkB,WAAW,GAAGC,YAAY,CAACF,IAAI,CAAC;IACpC;IACAA,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;;IAExC;IACA,IAAIC,KAAK,GAAG,mBAAmBH,WAAW,YAAYlB,IAAI,OAAO;IACjE;IACA,IAAI,CAAC,IAAI,CAACM,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAACN,KAAK,CAAC,CAACO,UAAU;IAC3D;IACA,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG;QAAEY,gBAAgB,EAAE,CAAC;MAAE,CAAC;IAC9C,CAAC,MAAM,IAAI,CAAC,IAAI,CAACZ,YAAY,CAACY,gBAAgB,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}