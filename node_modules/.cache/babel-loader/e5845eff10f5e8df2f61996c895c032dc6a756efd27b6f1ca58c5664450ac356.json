{"ast":null,"code":"import { File } from './p5.File.js';\nimport { C as Color } from '../creating_reading-Cr8L2Jnm.js';\nimport { w as AUTO } from '../constants-BRcElHU3.js';\nimport '../io/p5.XML.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\nclass Element {\n  width;\n  height;\n  elt;\n  constructor(elt, pInst) {\n    this.elt = elt;\n    this._pInst = this._pixelsState = pInst;\n    this._events = {};\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n  }\n\n  /**\n   * Removes the element, stops all audio/video streams, and removes all\n   * callback functions.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square. ');\n   * }\n   *\n   * // Remove the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.remove();\n   * }\n   * </code>\n   * </div>\n   */\n  remove() {\n    // stop all audios/videos and detach all devices like microphone/camera etc\n    // used as input/output for audios/videos.\n    // if (this instanceof p5.MediaElement) {\n    if (this.stop) {\n      this.stop();\n      const sources = this.elt.srcObject;\n      if (sources !== null) {\n        const tracks = sources.getTracks();\n        tracks.forEach(track => {\n          track.stop();\n        });\n      }\n    }\n\n    // delete the reference in this._pInst._elements\n    const index = this._pInst._elements.indexOf(this);\n    if (index !== -1) {\n      this._pInst._elements.splice(index, 1);\n    }\n\n    // deregister events\n    for (let ev in this._events) {\n      this.elt.removeEventListener(ev, this._events[ev]);\n    }\n    if (this.elt && this.elt.parentNode) {\n      this.elt.parentNode.removeChild(this.elt);\n    }\n  }\n\n  /**\n   * Attaches the element to a parent element.\n   *\n   * For example, a `&lt;div&gt;&lt;/div&gt;` element may be used as a box to\n   * hold two pieces of text, a header and a paragraph. The\n   * `&lt;div&gt;&lt;/div&gt;` is the parent element of both the header and\n   * paragraph.\n   *\n   * The parameter `parent` can have one of three types. `parent` can be a\n   * string with the parent element's ID, as in\n   * `myElement.parent('container')`. It can also be another\n   * <a href=\"#/p5.Element\">p5.Element</a> object, as in\n   * `myElement.parent(myDiv)`. Finally, `parent` can be an `HTMLElement`\n   * object, as in `myElement.parent(anotherElement)`.\n   *\n   * Calling `myElement.parent()` without an argument returns the element's\n   * parent.\n   *\n   * @param  {String|p5.Element|Object} parent ID, <a href=\"#/p5.Element\">p5.Element</a>,\n   *                                           or HTMLElement of desired parent element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color to white\n   *   div.style('background-color', 'white');\n   *\n   *   // Align any text to the center.\n   *   div.style('text-align', 'center');\n   *\n   *   // Set its ID to \"container\".\n   *   div.id('container');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using its ID \"container\".\n   *   p.parent('container');\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent.\n   *   p.parent(div);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using the underlying\n   *   // HTMLElement.\n   *   p.parent(div.elt);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {p5.Element}\n   */\n  parent(p) {\n    if (typeof p === 'undefined') {\n      return this.elt.parentNode;\n    }\n    if (typeof p === 'string') {\n      if (p[0] === '#') {\n        p = p.substring(1);\n      }\n      p = document.getElementById(p);\n    } else if (p instanceof Element) {\n      p = p.elt;\n    }\n    p.appendChild(this.elt);\n    return this;\n  }\n\n  /**\n   * Attaches the element as a child of another element.\n   *\n   * `myElement.child()` accepts either a string ID, DOM node, or\n   * <a href=\"#/p5.Element\">p5.Element</a>. For example,\n   * `myElement.child(otherElement)`. If no argument is provided, an array of\n   * children DOM nodes is returned.\n   *\n   * @returns {Node[]} an array of child nodes.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Make div1 the child of div0\n   *   // using the p5.Element.\n   *   div0.child(div1);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Give div1 an ID.\n   *   div1.id('apples');\n   *\n   *   // Make div1 the child of div0\n   *   // using its ID.\n   *   div0.child('apples');\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // This example assumes there is a div already on the page\n   * // with id \"myChildDiv\".\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *\n   *   // Select the child element by its ID.\n   *   let elt = document.getElementById('myChildDiv');\n   *\n   *   // Make div1 the child of div0\n   *   // using its HTMLElement object.\n   *   div0.child(elt);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|p5.Element} [child] the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n   *                         to add to the current element\n   * @chainable\n   */\n  child(childNode) {\n    if (typeof childNode === 'undefined') {\n      return this.elt.childNodes;\n    }\n    if (typeof childNode === 'string') {\n      if (childNode[0] === '#') {\n        childNode = childNode.substring(1);\n      }\n      childNode = document.getElementById(childNode);\n    } else if (childNode instanceof Element) {\n      childNode = childNode.elt;\n    }\n    if (childNode instanceof HTMLElement) {\n      this.elt.appendChild(childNode);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the inner HTML of the element, replacing any existing HTML.\n   *\n   * The second parameter, `append`, is optional. If `true` is passed, as in\n   * `myElement.html('hi', true)`, the HTML is appended instead of replacing\n   * existing HTML.\n   *\n   * If no arguments are passed, as in `myElement.html()`, the element's inner\n   * HTML is returned.\n   *\n   * @for p5.Element\n   * @returns {String} the inner HTML of the element\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('');\n   *   div.size(100, 100);\n   *\n   *   // Set the inner HTML to \"hi\".\n   *   div.html('hi');\n   *\n   *   describe('A gray square with the word \"hi\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('Hello ');\n   *   div.size(100, 100);\n   *\n   *   // Append \"World\" to the div's HTML.\n   *   div.html('World', true);\n   *\n   *   describe('A gray square with the text \"Hello World\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element.\n   *   let div = createDiv('Hello');\n   *\n   *   // Prints \"Hello\" to the console.\n   *   print(div.html());\n   *\n   *   describe('A gray square with the word \"Hello!\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} [html] the HTML to be placed inside the element\n   * @param  {Boolean} [append] whether to append HTML to existing\n   * @chainable\n   */\n  html(...args) {\n    if (args.length === 0) {\n      return this.elt.innerHTML;\n    } else if (args[1]) {\n      this.elt.insertAdjacentHTML('beforeend', args[0]);\n      return this;\n    } else {\n      this.elt.innerHTML = args[0];\n      return this;\n    }\n  }\n\n  /**\n   * Sets the element's ID using a given string.\n   *\n   * Calling `myElement.id()` without an argument returns its ID as a string.\n   *\n   * @param  {String} id ID of the element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the canvas' ID\n   *   // to \"mycanvas\".\n   *   cnv.id('mycanvas');\n   *\n   *   // Get the canvas' ID.\n   *   let id = cnv.id();\n   *   text(id, 24, 54);\n   *\n   *   describe('The text \"mycanvas\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} ID of the element.\n   */\n  id(id) {\n    if (typeof id === 'undefined') {\n      return this.elt.id;\n    }\n    this.elt.id = id;\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n    return this;\n  }\n\n  /**\n   * Adds a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\" target=\"_blank\">class attribute</a>\n   * to the element using a given string.\n   *\n   * Calling `myElement.class()` without an argument returns a string with its current classes.\n   *\n   * @param  {String} class class to add.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Add the class \"small\" to the\n   *   // canvas element.\n   *   cnv.class('small');\n   *\n   *   // Get the canvas element's class\n   *   // and display it.\n   *   let c = cnv.class();\n   *   text(c, 35, 54);\n   *\n   *   describe('The word \"small\" written in black on a gray canvas.');\n   *\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} element's classes, if any.\n   */\n  class(c) {\n    if (typeof c === 'undefined') {\n      return this.elt.className;\n    }\n    this.elt.className = c;\n    return this;\n  }\n\n  /**\n   *\n   * Adds a class to the element.\n   *\n   * @for p5.Element\n   * @param  {String} class name of class to add.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  addClass(c) {\n    if (this.elt.className) {\n      if (!this.hasClass(c)) {\n        this.elt.className = this.elt.className + ' ' + c;\n      }\n    } else {\n      this.elt.className = c;\n    }\n    return this;\n  }\n\n  /**\n   * Removes a class from the element.\n   *\n   * @param  {String} class name of class to remove.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * // In this example, a class is set when the div is created\n   * // and removed when mouse is pressed. This could link up\n   * // with a CSS style rule to toggle style properties.\n   *\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Remove 'myClass' from the div when the user presses the mouse.\n   * function mousePressed() {\n   *   div.removeClass('myClass');\n   * }\n   * </code>\n   * </div>\n   */\n  removeClass(c) {\n    // Note: Removing a class that does not exist does NOT throw an error in classList.remove method\n    this.elt.classList.remove(c);\n    return this;\n  }\n\n  /**\n   * Checks if a class is already applied to element.\n   *\n   * @returns {boolean} a boolean value if element has specified class.\n   * @param c {String} name of class to check.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the class 'show' to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the class 'show' when the mouse is pressed.\n   * function mousePressed() {\n   *   if (div.hasClass('show')) {\n   *     div.addClass('show');\n   *   } else {\n   *     div.removeClass('show');\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hasClass(c) {\n    return this.elt.classList.contains(c);\n  }\n\n  /**\n   * Toggles whether a class is applied to the element.\n   *\n   * @param c {String} class name to toggle.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the 'show' class to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the 'show' class when the mouse is pressed.\n   * function mousePressed() {\n   *   div.toggleClass('show');\n   * }\n   * </code>\n   * </div>\n   */\n  toggleClass(c) {\n    // classList also has a toggle() method, but we cannot use that yet as support is unclear.\n    // See https://github.com/processing/p5.js/issues/3631\n    // this.elt.classList.toggle(c);\n    if (this.elt.classList.contains(c)) {\n      this.elt.classList.remove(c);\n    } else {\n      this.elt.classList.add(c);\n    }\n    return this;\n  }\n\n  /**\n   * Centers the element either vertically, horizontally, or both.\n   *\n   * `center()` will center the element relative to its parent or according to\n   * the page's body if the element has no parent.\n   *\n   * If no argument is passed, as in `myElement.center()` the element is aligned\n   * both vertically and horizontally.\n   *\n   * @param  {String} [align] passing 'vertical', 'horizontal' aligns element accordingly\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and style it.\n   *   let div = createDiv('');\n   *   div.size(10, 10);\n   *   div.style('background-color', 'orange');\n   *\n   *   // Center the div relative to the page's body.\n   *   div.center();\n   *\n   *   describe('A gray square and an orange rectangle. The rectangle is at the center of the page.');\n   * }\n   * </code>\n   * </div>\n   */\n  center(align) {\n    const style = this.elt.style.display;\n    const hidden = this.elt.style.display === 'none';\n    const parentHidden = this.parent().style.display === 'none';\n    const pos = {\n      x: this.elt.offsetLeft,\n      y: this.elt.offsetTop\n    };\n    if (hidden) this.show();\n    if (parentHidden) this.parent().show();\n    this.elt.style.display = 'block';\n    this.position(0, 0);\n    const wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);\n    const hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n    if (align === 'both' || align === undefined) {\n      this.position(wOffset / 2 + this.parent().offsetLeft, hOffset / 2 + this.parent().offsetTop);\n    } else if (align === 'horizontal') {\n      this.position(wOffset / 2 + this.parent().offsetLeft, pos.y);\n    } else if (align === 'vertical') {\n      this.position(pos.x, hOffset / 2 + this.parent().offsetTop);\n    }\n    this.style('display', style);\n    if (hidden) this.hide();\n    if (parentHidden) this.parent().hide();\n    return this;\n  }\n\n  /**\n   * Sets the element's position.\n   *\n   * The first two parameters, `x` and `y`, set the element's position relative\n   * to the top-left corner of the web page.\n   *\n   * The third parameter, `positionType`, is optional. It sets the element's\n   * <a target=\"_blank\"\n   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.\n   * `positionType` is a string that can be either `'static'`, `'fixed'`,\n   * `'relative'`, `'sticky'`, `'initial'`, or `'inherit'`.\n   *\n   * If no arguments passed, as in `myElement.position()`, the method returns\n   * the element's position in an object, as in `{ x: 0, y: 0 }`.\n   *\n   * @returns {Object} object of form `{ x: 0, y: 0 }` containing the element's position.\n   *\n   * @example\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas 50px to the right and 100px\n   *   // below the top-left corner of the window.\n   *   cnv.position(50, 100);\n   *\n   *   describe('A gray square that is 50 pixels to the right and 100 pixels down from the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas at the top-left corner\n   *   // of the window with a 'fixed' position type.\n   *   cnv.position(0, 0, 'fixed');\n   *\n   *   describe('A gray square in the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} [x] x-position relative to top-left of window (optional)\n   * @param  {Number} [y] y-position relative to top-left of window (optional)\n   * @param  {String} [positionType] it can be static, fixed, relative, sticky, initial or inherit (optional)\n   * @chainable\n   */\n  position(...args) {\n    if (args.length === 0) {\n      return {\n        x: this.elt.offsetLeft,\n        y: this.elt.offsetTop\n      };\n    } else {\n      let positionType = 'absolute';\n      if (args[2] === 'static' || args[2] === 'fixed' || args[2] === 'relative' || args[2] === 'sticky' || args[2] === 'initial' || args[2] === 'inherit') {\n        positionType = args[2];\n      }\n      this.elt.style.position = positionType;\n      this.elt.style.left = args[0] + 'px';\n      this.elt.style.top = args[1] + 'px';\n      this.x = args[0];\n      this.y = args[1];\n      return this;\n    }\n  }\n\n  /**\n   * Shows the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and hide it.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *   p.hide();\n   *\n   *   describe('A gray square. The text \"p5*js\" appears when the user double-clicks the square.');\n   * }\n   *\n   * // Show the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.show();\n   * }\n   * </code>\n   * </div>\n   */\n  show() {\n    this.elt.style.display = 'block';\n    return this;\n  }\n\n  /**\n   * Hides the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" at the center of a gray square. The text disappears when the user double-clicks the square.');\n   * }\n   *\n   * // Hide the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.hide();\n   * }\n   * </code>\n   * </div>\n   */\n  hide() {\n    this.elt.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Sets the element's width and height.\n   *\n   * Calling `myElement.size()` without an argument returns the element's size\n   * as an object with the properties `width` and `height`. For example,\n   *  `{ width: 20, height: 10 }`.\n   *\n   * The first parameter, `width`, is optional. It's a number used to set the\n   * element's width. Calling `myElement.size(10)`\n   *\n   * The second parameter, 'height`, is also optional. It's a\n   * number used to set the element's height. For example, calling\n   * `myElement.size(20, 10)` sets the element's width to 20 pixels and height\n   * to 10 pixels.\n   *\n   * The constant `AUTO` can be used to adjust one dimension at a time while\n   * maintaining the aspect ratio, which is `width / height`. For example,\n   * consider an element that's 200 pixels wide and 100 pixels tall. Calling\n   * `myElement.size(20, AUTO)` sets the width to 20 pixels and height to 10\n   * pixels.\n   *\n   * Note: In the case of elements that need to load data, such as images, wait\n   * to call `myElement.size()` until after the data loads.\n   *\n   * @return {Object} width and height of the element in an object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 20 pixels.\n   *   div.size(80, 20);\n   *\n   *   describe('A gray square with a pink rectangle near its top.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 40 pixels.\n   *   div.size(80, 40);\n   *\n   *   // Get the div's size as an object.\n   *   let s = div.size();\n   *\n   *   // Display the div's dimensions.\n   *   div.html(`${s.width} x ${s.height}`);\n   *\n   *   describe('A gray square with a pink rectangle near its top. The text \"80 x 40\" is written within the rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let img1;\n   * let img2;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   img1 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     ''\n   *   );\n   *   img1.position(0, 0);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   // Resize the image once it's loaded.\n   *   img2 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     '',\n   *     resizeImage\n   *   );\n   *   img2.position(0, 0);\n   *\n   *   describe('A gray square two copies of a space image at the top-left. The copy in front is smaller.');\n   * }\n   *\n   * // Resize img2 and keep its aspect ratio.\n   * function resizeImage() {\n   *   img2.size(50, AUTO);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {(Number|AUTO)} [w]   width of the element, either AUTO, or a number.\n   * @param  {(Number|AUTO)} [h] height of the element, either AUTO, or a number.\n   * @chainable\n   */\n  size(w, h) {\n    if (arguments.length === 0) {\n      return {\n        width: this.elt.offsetWidth,\n        height: this.elt.offsetHeight\n      };\n    } else {\n      let aW = w;\n      let aH = h;\n      const AUTO$1 = AUTO;\n      if (aW !== AUTO$1 || aH !== AUTO$1) {\n        if (aW === AUTO$1) {\n          aW = h * this.width / this.height;\n        } else if (aH === AUTO$1) {\n          aH = w * this.height / this.width;\n        }\n        // set diff for cnv vs normal div\n        if (this.elt instanceof HTMLCanvasElement) {\n          const j = {};\n          const k = this.elt.getContext('2d');\n          let prop;\n          for (prop in k) {\n            j[prop] = k[prop];\n          }\n          this.elt.setAttribute('width', aW * this._pInst._pixelDensity);\n          this.elt.setAttribute('height', aH * this._pInst._pixelDensity);\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n          for (prop in j) {\n            this.elt.getContext('2d')[prop] = j[prop];\n          }\n        } else {\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this.elt.width = aW;\n          this.elt.height = aH;\n        }\n        this.width = aW;\n        this.height = aH;\n        if (this._pInst && this._pInst._curElement) {\n          // main canvas associated with p5 instance\n          if (this._pInst._curElement.elt === this.elt) {\n            this._pInst.width = aW;\n            this._pInst.height = aH;\n          }\n        }\n      }\n      return this;\n    }\n  }\n\n  /**\n   * Applies a style to the element by adding a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax\" target=\"_blank\">CSS declaration</a>.\n   *\n   * The first parameter, `property`, is a string. If the name of a style\n   * property is passed, as in `myElement.style('color')`, the method returns\n   * the current value as a string or `null` if it hasn't been set. If a\n   * `property:style` string is passed, as in\n   * `myElement.style('color:deeppink')`, the method sets the style `property`\n   * to `value`.\n   *\n   * The second parameter, `value`, is optional. It sets the property's value.\n   * `value` can be a string, as in\n   * `myElement.style('color', 'deeppink')`, or a\n   * <a href=\"#/p5.Color\">p5.Color</a> object, as in\n   * `myElement.style('color', myColor)`.\n   *\n   * @param  {String} property style property to set.\n   * @returns {String} value of the property.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\".\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', 'deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Create a paragraph element and set its font color using a p5.Color object.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', c);\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\"\n   *   // using property:value syntax.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color:deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an empty paragraph element and set its font color to \"deeppink\".\n   *   let p = createP();\n   *   p.position(5, 5);\n   *   p.style('color', 'deeppink');\n   *\n   *   // Get the element's color as an  RGB color string.\n   *   let c = p.style('color');\n   *\n   *   // Set the element's inner HTML using the RGB color string.\n   *   p.html(c);\n   *\n   *   describe('The text \"rgb(255, 20, 147)\" written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} property\n   * @param  {String|p5.Color} value value to assign to the property.\n   * @return {String} value of the property.\n   * @chainable\n   */\n  style(prop, val) {\n    const self = this;\n    if (val instanceof Color) {\n      val = val.toString();\n    }\n    if (typeof val === 'undefined') {\n      if (prop.indexOf(':') === -1) {\n        // no value set, so assume requesting a value\n        let styles = window.getComputedStyle(self.elt);\n        let style = styles.getPropertyValue(prop);\n        return style;\n      } else {\n        // value set using `:` in a single line string\n        const attrs = prop.split(';');\n        for (let i = 0; i < attrs.length; i++) {\n          const parts = attrs[i].split(':');\n          if (parts[0] && parts[1]) {\n            this.elt.style[parts[0].trim()] = parts[1].trim();\n          }\n        }\n      }\n    } else {\n      // input provided as key,val pair\n      this.elt.style[prop] = val;\n      if (prop === 'width' || prop === 'height' || prop === 'left' || prop === 'top') {\n        let styles = window.getComputedStyle(self.elt);\n        let styleVal = styles.getPropertyValue(prop);\n        let numVal = styleVal.replace(/[^\\d.]/g, '');\n        this[prop] = Math.round(parseFloat(numVal, 10));\n      }\n    }\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _translate(...args) {\n    this.elt.style.position = 'absolute';\n    // save out initial non-translate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, '');\n      transform = transform.replace(/translate[X-Z]?\\(.*\\)/g, '');\n    }\n    if (args.length === 2) {\n      this.elt.style.transform = 'translate(' + args[0] + 'px, ' + args[1] + 'px)';\n    } else if (args.length > 2) {\n      this.elt.style.transform = 'translate3d(' + args[0] + 'px,' + args[1] + 'px,' + args[2] + 'px)';\n      if (args.length === 3) {\n        this.elt.parentElement.style.perspective = '1000px';\n      } else {\n        this.elt.parentElement.style.perspective = args[3] + 'px';\n      }\n    }\n    // add any extra transform styling back on end\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _rotate(...args) {\n    // save out initial non-rotate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, '');\n      transform = transform.replace(/rotate[X-Z]?\\(.*\\)/g, '');\n    }\n    if (args.length === 1) {\n      this.elt.style.transform = 'rotate(' + args[0] + 'deg)';\n    } else if (args.length === 2) {\n      this.elt.style.transform = 'rotate(' + args[0] + 'deg, ' + args[1] + 'deg)';\n    } else if (args.length === 3) {\n      this.elt.style.transform = 'rotateX(' + args[0] + 'deg)';\n      this.elt.style.transform += 'rotateY(' + args[1] + 'deg)';\n      this.elt.style.transform += 'rotateZ(' + args[2] + 'deg)';\n    }\n    // add remaining transform back on\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /**\n   * Adds an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#attributes\" target=\"_blank\">attribute</a>\n   * to the element.\n   *\n   * This method is useful for advanced tasks. Most commonly-used attributes,\n   * such as `id`, can be set with their dedicated methods. For example,\n   * `nextButton.id('next')` sets an element's `id` attribute. Calling\n   * `nextButton.attribute('id', 'next')` has the same effect.\n   *\n   * The first parameter, `attr`, is the attribute's name as a string. Calling\n   * `myElement.attribute('align')` returns the attribute's current value as a\n   * string or `null` if it hasn't been set.\n   *\n   * The second parameter, `value`, is optional. It's a string used to set the\n   * attribute's value. For example, calling\n   * `myElement.attribute('align', 'center')` sets the element's horizontal\n   * alignment to `center`.\n   *\n   * @return {String} value of the attribute.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a container div element and place it at the top-left corner.\n   *   let container = createDiv();\n   *   container.position(0, 0);\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"left\".\n   *   let p1 = createP('hi');\n   *   p1.parent(container);\n   *   p1.attribute('align', 'left');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"center\".\n   *   let p2 = createP('hi');\n   *   p2.parent(container);\n   *   p2.attribute('align', 'center');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"right\".\n   *   let p3 = createP('hi');\n   *   p3.parent(container);\n   *   p3.attribute('align', 'right');\n   *\n   *   describe('A gray square with the text \"hi\" written on three separate lines, each placed further to the right.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} attr       attribute to set.\n   * @param  {String} value      value to assign to the attribute.\n   * @chainable\n   */\n  attribute(attr, value) {\n    //handling for checkboxes and radios to ensure options get\n    //attributes not divs\n    if (this.elt.firstChild != null && (this.elt.firstChild.type === 'checkbox' || this.elt.firstChild.type === 'radio')) {\n      if (typeof value === 'undefined') {\n        return this.elt.firstChild.getAttribute(attr);\n      } else {\n        for (let i = 0; i < this.elt.childNodes.length; i++) {\n          this.elt.childNodes[i].setAttribute(attr, value);\n        }\n      }\n    } else if (typeof value === 'undefined') {\n      return this.elt.getAttribute(attr);\n    } else {\n      this.elt.setAttribute(attr, value);\n      return this;\n    }\n  }\n\n  /**\n   * Removes an attribute from the element.\n   *\n   * The parameter `attr` is the attribute's name as a string. For example,\n   * calling `myElement.removeAttribute('align')` removes its `align`\n   * attribute if it's been set.\n   *\n   * @param  {String} attr       attribute to remove.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place it in the center of the canvas.\n   *   // Set its \"align\" attribute to \"center\".\n   *   p = createP('hi');\n   *   p.position(0, 20);\n   *   p.attribute('align', 'center');\n   *\n   *   describe('The text \"hi\" written in black at the center of a gray square. The text moves to the left edge when double-clicked.');\n   * }\n   *\n   * // Remove the 'align' attribute when the user double-clicks the paragraph.\n   * function doubleClicked() {\n   *   p.removeAttribute('align');\n   * }\n   * </code>\n   * </div>\n   */\n  removeAttribute(attr) {\n    if (this.elt.firstChild != null && (this.elt.firstChild.type === 'checkbox' || this.elt.firstChild.type === 'radio')) {\n      for (let i = 0; i < this.elt.childNodes.length; i++) {\n        this.elt.childNodes[i].removeAttribute(attr);\n      }\n    }\n    this.elt.removeAttribute(attr);\n    return this;\n  }\n\n  /**\n   * Returns or sets the element's value.\n   *\n   * Calling `myElement.value()` returns the element's current value.\n   *\n   * The parameter, `value`, is an optional number or string. If provided,\n   * as in `myElement.value(123)`, it's used to set the element's value.\n   *\n   * @return {String|Number} value of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square. The text resets to \"hello\" when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   *\n   * // Reset the input's value.\n   * function doubleClicked() {\n   *   input.value('hello');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|Number}     value\n   * @chainable\n   */\n  value(...args) {\n    if (args.length > 0) {\n      this.elt.value = args[0];\n      return this;\n    } else {\n      if (this.elt.type === 'range') {\n        return parseFloat(this.elt.value);\n      } else return this.elt.value;\n    }\n  }\n\n  /**\n   * Calls a function when the mouse is pressed over the element.\n   *\n   * Calling `myElement.mousePressed(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the canvas\n   *   // is pressed.\n   *   cnv.mousePressed(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse is pressed.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mousePressed(fxn) {\n    // Prepend the mouse property setters to the event-listener.\n    // This is required so that mouseButton is set correctly prior to calling the callback (fxn).\n    // For details, see https://github.com/processing/p5.js/issues/3087.\n    const eventPrependedFxn = function (event) {\n      this._pInst.mouseIsPressed = true;\n      this._pInst._activePointers.set(event.pointerId, event);\n      this._pInst._setMouseButton(event);\n      this._pInst._updatePointerCoords(event);\n      // Pass along the return-value of the callback:\n      return fxn.call(this, event);\n    };\n    // Pass along the event-prepended form of the callback.\n    Element._adjustListener('pointerdown', eventPrependedFxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed twice over the element.\n   *\n   * Calling `myElement.doubleClicked(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                double clicked over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // canvas is double-clicked.\n   *   cnv.doubleClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user double-clicks the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  doubleClicked(fxn) {\n    Element._adjustListener('dblclick', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse wheel scrolls over the element.\n   *\n   * The callback function, `fxn`, is passed an `event` object. `event` has\n   * two numeric properties, `deltaY` and `deltaX`. `event.deltaY` is\n   * negative if the mouse wheel rotates away from the user. It's positive if\n   * the mouse wheel rotates toward the user. `event.deltaX` is positive if\n   * the mouse wheel moves to the right. It's negative if the mouse wheel moves\n   * to the left.\n   *\n   * Calling `myElement.mouseWheel(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse wheel is\n   *                                scrolled over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(randomColor);\n   *\n   *   describe('A gray square changes color when the user scrolls the mouse wheel over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call changeBackground() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(changeBackground);\n   *\n   *   describe('A gray square. When the mouse wheel scrolls over the square, it changes color and displays shapes.');\n   * }\n   *\n   * function changeBackground(event) {\n   *   // Change the background color\n   *   // based on deltaY.\n   *   if (event.deltaY > 0) {\n   *     background('deeppink');\n   *   } else if (event.deltaY < 0) {\n   *     background('cornflowerblue');\n   *   } else {\n   *     background(200);\n   *   }\n   *\n   *   // Draw a shape based on deltaX.\n   *   if (event.deltaX > 0) {\n   *     circle(50, 50, 20);\n   *   } else if (event.deltaX < 0) {\n   *     square(40, 40, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  mouseWheel(fxn) {\n    Element._adjustListener('wheel', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseReleased(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseReleased(fxn) {\n    Element._adjustListener('pointerup', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed and released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed and released over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseClicked(fxn) {\n    Element._adjustListener('click', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves over the element.\n   *\n   * Calling `myElement.mouseMoved(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves.\n   *   cnv.mouseMoved(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseMoved(fxn) {\n    Element._adjustListener('pointermove', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves onto the element.\n   *\n   * Calling `myElement.mouseOver(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves onto the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves onto the canvas.\n   *   cnv.mouseOver(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves onto the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOver(fxn) {\n    Element._adjustListener('pointerover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves off the element.\n   *\n   * Calling `myElement.mouseOut(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves off the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves off the canvas.\n   *   cnv.mouseOut(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves off the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOut(fxn) {\n    Element._adjustListener('pointerout', fxn, this);\n    return this;\n  }\n\n  /**\n  * Calls a function when a file is dragged over the element.\n  *\n  * Calling `myElement.dragOver(false)` disables the function.\n  *\n  * @param  {Function|Boolean} fxn function to call when the file is\n  *                                dragged over the element.\n  *                                `false` disables the function.\n  * @chainable\n  *\n  * @example\n  * <div>\n  * <code>\n  * // Drag a file over the canvas to test.\n  *\n  * function setup() {\n  *   // Create a canvas element and\n  *   // assign it to cnv.\n  *   let cnv = createCanvas(100, 100);\n  *\n  *   background(200);\n  *\n  *   // Call helloFile() when a\n  *   // file is dragged over\n  *   // the canvas.\n  *   cnv.dragOver(helloFile);\n  *\n  *   describe('A gray square. The text \"hello, file\" appears when a file is dragged over the square.');\n  * }\n  *\n  * function helloFile() {\n  *   text('hello, file', 50, 50);\n  * }\n  * </code>\n  * </div>\n  */\n  dragOver(fxn) {\n    Element._adjustListener('dragover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when a file is dragged off the element.\n   *\n   * Calling `myElement.dragLeave(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the file is\n   *                                dragged off the element.\n   *                                `false` disables the function.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * // Drag a file over, then off\n   * // the canvas to test.\n   *\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call byeFile() when a\n   *   // file is dragged over,\n   *   // then off the canvas.\n   *   cnv.dragLeave(byeFile);\n   *\n   *   describe('A gray square. The text \"bye, file\" appears when a file is dragged over, then off the square.');\n   * }\n   *\n   * function byeFile() {\n   *   text('bye, file', 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  dragLeave(fxn) {\n    Element._adjustListener('dragleave', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element changes.\n   *\n   * Calling `myElement.changed(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the element changes.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dropdown;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a dropdown menu and add a few color options.\n   *   dropdown = createSelect();\n   *   dropdown.position(0, 0);\n   *   dropdown.option('red');\n   *   dropdown.option('green');\n   *   dropdown.option('blue');\n   *\n   *   // Call paintBackground() when the color option changes.\n   *   dropdown.changed(paintBackground);\n   *\n   *   describe('A gray square with a dropdown menu at the top. The square changes color when an option is selected.');\n   * }\n   *\n   * // Paint the background with the selected color.\n   * function paintBackground() {\n   *   let c = dropdown.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox(' circle');\n   *   checkbox.position(0, 100);\n   *\n   *   // Call repaint() when the checkbox changes.\n   *   checkbox.changed(repaint);\n   *\n   *   describe('A gray square with a checkbox underneath it that says \"circle\". A white circle appears when the box is checked and disappears otherwise.');\n   * }\n   *\n   * // Paint the background gray and determine whether to draw a circle.\n   * function repaint() {\n   *   background(200);\n   *   if (checkbox.checked() === true) {\n   *     circle(50, 50, 30);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  changed(fxn) {\n    Element._adjustListener('change', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element receives input.\n   *\n   * `myElement.input()` is often used to with text inputs and sliders. Calling\n   * `myElement.input(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when input is detected within\n   *                                the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a slider and place it beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   // Call repaint() when the slider changes.\n   *   slider.input(repaint);\n   *\n   *   describe('A gray square with a range slider underneath it. The background changes shades of gray when the slider is moved.');\n   * }\n   *\n   * // Paint the background using slider's value.\n   * function repaint() {\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an input and place it beneath the canvas.\n   *   input = createInput('');\n   *   input.position(0, 100);\n   *\n   *   // Call repaint() when input is detected.\n   *   input.input(repaint);\n   *\n   *   describe('A gray square with a text input bar beneath it. Any text written in the input appears in the middle of the square.');\n   * }\n   *\n   * // Paint the background gray and display the input's value.\n   * function repaint() {\n   *   background(200);\n   *   let msg = input.value();\n   *   text(msg, 5, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  input(fxn) {\n    Element._adjustListener('input', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the user drops a file on the element.\n   *\n   * The first parameter, `callback`, is a function to call once the file loads.\n   * The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object. If the user drops multiple files on\n   * the element, `callback`, is called once for each file.\n   *\n   * The second parameter, `fxn`, is a function to call when the browser detects\n   * one or more dropped files. The callback function should have one\n   * parameter, `event`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\n   *\n   * @param  {Function} callback  called when a file loads. Called once for each file dropped.\n   * @param  {Function} [fxn]     called once when any files are dropped.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call handleFile() when a file that's dropped on the canvas has loaded.\n   *   c.drop(handleFile);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed.');\n   * }\n   *\n   * // Remove the existing image and display the new one.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an <img> element with the\n   *   // dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   * let msg;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call functions when the user drops a file on the canvas\n   *   // and when the file loads.\n   *   c.drop(handleFile, handleDrop);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed. The id attribute of canvas element is also displayed.');\n   * }\n   *\n   * // Display the image when it loads.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an img element with the dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   *\n   * // Display the file's name when it loads.\n   * function handleDrop(event) {\n   *   // Remove current paragraph, if any.\n   *   if (msg) {\n   *     msg.remove();\n   *   }\n   *\n   *   // Use event to get the drop target's id.\n   *   let id = event.target.id;\n   *\n   *   // Write the canvas' id beneath it.\n   *   msg = createP(id);\n   *   msg.position(0, 100);\n   *\n   *   // Set the font color randomly for each drop.\n   *   let c = random(['red', 'green', 'blue']);\n   *   msg.style('color', c);\n   *   msg.style('font-size', '12px');\n   * }\n   * </code>\n   * </div>\n   */\n  drop(callback, fxn) {\n    // Is the file stuff supported?\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      if (!this._dragDisabled) {\n        this._dragDisabled = true;\n        const preventDefault = function (evt) {\n          evt.preventDefault();\n        };\n\n        // If you want to be able to drop you've got to turn off\n        // a lot of default behavior.\n        // avoid `attachListener` here, since it overrides other handlers.\n        this.elt.addEventListener('dragover', preventDefault);\n\n        // If this is a drag area we need to turn off the default behavior\n        this.elt.addEventListener('dragleave', preventDefault);\n      }\n\n      // Deal with the files\n      Element._attachListener('drop', function (evt) {\n        evt.preventDefault();\n        // Call the second argument as a callback that receives the raw drop event\n        if (typeof fxn === 'function') {\n          fxn.call(this, evt);\n        }\n        // A FileList\n        const files = evt.dataTransfer.files;\n\n        // Load each one and trigger the callback\n        for (const f of files) {\n          File._load(f, callback);\n        }\n      }, this);\n    } else {\n      console.log('The File APIs are not fully supported in this browser.');\n    }\n    return this;\n  }\n\n  /**\n   * Makes the element draggable.\n   *\n   * The parameter, `elmnt`, is optional. If another\n   * <a href=\"#/p5.Element\">p5.Element</a> object is passed, as in\n   * `myElement.draggable(otherElement)`, the other element will become draggable.\n   *\n   * @param  {p5.Element} [elmnt]  another <a href=\"#/p5.Element\">p5.Element</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let stickyNote;\n   * let textInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and style it.\n   *   stickyNote = createDiv('Note');\n   *   stickyNote.position(5, 5);\n   *   stickyNote.size(80, 20);\n   *   stickyNote.style('font-size', '16px');\n   *   stickyNote.style('font-family', 'Comic Sans MS');\n   *   stickyNote.style('background', 'orchid');\n   *   stickyNote.style('padding', '5px');\n   *\n   *   // Make the note draggable.\n   *   stickyNote.draggable();\n   *\n   *   // Create a panel div and style it.\n   *   let panel = createDiv('');\n   *   panel.position(5, 40);\n   *   panel.size(80, 50);\n   *   panel.style('background', 'orchid');\n   *   panel.style('font-size', '16px');\n   *   panel.style('padding', '5px');\n   *   panel.style('text-align', 'center');\n   *\n   *   // Make the panel draggable.\n   *   panel.draggable();\n   *\n   *   // Create a text input and style it.\n   *   textInput = createInput('Note');\n   *   textInput.size(70);\n   *\n   *   // Add the input to the panel.\n   *   textInput.parent(panel);\n   *\n   *   // Call handleInput() when text is input.\n   *   textInput.input(handleInput);\n   *\n   *   describe(\n   *     'A gray square with two purple rectangles that move when dragged. The top rectangle displays the text that is typed into the bottom rectangle.'\n   *   );\n   * }\n   *\n   * // Update stickyNote's HTML when text is input.\n   * function handleInput() {\n   *   stickyNote.html(textInput.value());\n   * }\n   * </code>\n   * </div>\n   */\n  draggable(elmMove) {\n    let isTouch = 'ontouchstart' in window;\n    let x = 0,\n      y = 0,\n      px = 0,\n      py = 0,\n      elmDrag,\n      dragMouseDownEvt = isTouch ? 'touchstart' : 'mousedown',\n      closeDragElementEvt = isTouch ? 'touchend' : 'mouseup',\n      elementDragEvt = isTouch ? 'touchmove' : 'mousemove';\n    if (elmMove === undefined) {\n      elmMove = this.elt;\n      elmDrag = elmMove;\n    } else if (elmMove !== this.elt && elmMove.elt !== this.elt) {\n      elmMove = elmMove.elt;\n      elmDrag = this.elt;\n    }\n    elmDrag.addEventListener(dragMouseDownEvt, dragMouseDown, false);\n    elmDrag.style.cursor = 'move';\n    function dragMouseDown(e) {\n      e = e || window.event;\n      if (isTouch) {\n        const touches = e.changedTouches;\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n      document.addEventListener(closeDragElementEvt, closeDragElement, false);\n      document.addEventListener(elementDragEvt, elementDrag, false);\n      return false;\n    }\n    function elementDrag(e) {\n      e = e || window.event;\n      if (isTouch) {\n        const touches = e.changedTouches;\n        x = px - parseInt(touches[0].clientX);\n        y = py - parseInt(touches[0].clientY);\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        x = px - parseInt(e.clientX);\n        y = py - parseInt(e.clientY);\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n      elmMove.style.left = elmMove.offsetLeft - x + 'px';\n      elmMove.style.top = elmMove.offsetTop - y + 'px';\n    }\n    function closeDragElement() {\n      document.removeEventListener(closeDragElementEvt, closeDragElement, false);\n      document.removeEventListener(elementDragEvt, elementDrag, false);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Boolean|Function} fxn\n   * @param {Element} ctx\n   * @chainable\n   * @alt\n   * General handler for event attaching and detaching\n   */\n  static _adjustListener(ev, fxn, ctx) {\n    if (fxn === false) {\n      Element._detachListener(ev, ctx);\n    } else {\n      Element._attachListener(ev, fxn, ctx);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Function} fxn\n   * @param {Element} ctx\n   */\n  static _attachListener(ev, fxn, ctx) {\n    // detach the old listener if there was one\n    if (ctx._events[ev]) {\n      Element._detachListener(ev, ctx);\n    }\n    const f = fxn.bind(ctx);\n    ctx.elt.addEventListener(ev, f, false);\n    ctx._events[ev] = f;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Element} ctx\n   */\n  static _detachListener(ev, ctx) {\n    const f = ctx._events[ev];\n    ctx.elt.removeEventListener(ev, f, false);\n    ctx._events[ev] = null;\n  }\n}\nfunction element(p5, fn) {\n  /**\n   * A class to describe an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\" target=\"_blank\">HTML element</a>.\n   *\n   * Sketches can use many elements. Common elements include the drawing canvas,\n   * buttons, sliders, webcam feeds, and so on.\n   *\n   * All elements share the methods of the `p5.Element` class. They're created\n   * with functions such as <a href=\"#/p5/createCanvas\">createCanvas()</a> and\n   * <a href=\"#/p5/createButton\">createButton()</a>.\n   *\n   * @class p5.Element\n   * @param {HTMLElement} elt wrapped DOM element.\n   * @param {p5} [pInst] pointer to p5 instance.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button element and\n   *   // place it beneath the canvas.\n   *   let btn = createButton('change');\n   *   btn.position(0, 100);\n   *\n   *   // Call randomColor() when\n   *   // the button is pressed.\n   *   btn.mousePressed(randomColor);\n   *\n   *   describe('A gray square with a button that says \"change\" beneath it. The square changes color when the user presses the button.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Element = Element;\n\n  /**\n   * A `Number` property that stores the element's width.\n   *\n   * @type {Number}\n   * @property width\n   * @for p5.Element\n   */\n\n  /**\n   * A `Number` property that stores the element's height.\n   *\n   * @type {Number}\n   * @property height\n   * @for p5.Element\n   */\n\n  /**\n   * The element's underlying `HTMLElement` object.\n   *\n   * The\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a>\n   * object's properties and methods can be used directly.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the border style for the\n   *   // canvas.\n   *   cnv.elt.style.border = '5px dashed deeppink';\n   *\n   *   describe('A gray square with a pink border drawn with dashed lines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @property elt\n   * @for p5.Element\n   * @name elt\n   * @readOnly\n   */\n}\nif (typeof p5 !== 'undefined') {\n  element(p5, p5.prototype);\n}\nexport { Element, element as default };","map":{"version":3,"names":["File","C","Color","w","AUTO","Element","width","height","elt","constructor","pInst","_pInst","_pixelsState","_events","offsetWidth","offsetHeight","remove","stop","sources","srcObject","tracks","getTracks","forEach","track","index","_elements","indexOf","splice","ev","removeEventListener","parentNode","removeChild","parent","p","substring","document","getElementById","appendChild","child","childNode","childNodes","HTMLElement","html","args","length","innerHTML","insertAdjacentHTML","id","class","c","className","addClass","hasClass","removeClass","classList","contains","toggleClass","add","center","align","style","display","hidden","parentHidden","pos","x","offsetLeft","y","offsetTop","show","position","wOffset","Math","abs","hOffset","undefined","hide","positionType","left","top","size","h","arguments","aW","aH","AUTO$1","HTMLCanvasElement","j","k","getContext","prop","setAttribute","_pixelDensity","scale","_curElement","val","self","toString","styles","window","getComputedStyle","getPropertyValue","attrs","split","i","parts","trim","styleVal","numVal","replace","round","parseFloat","_translate","transform","parentElement","perspective","_rotate","attribute","attr","value","firstChild","type","getAttribute","removeAttribute","mousePressed","fxn","eventPrependedFxn","event","mouseIsPressed","_activePointers","set","pointerId","_setMouseButton","_updatePointerCoords","call","_adjustListener","doubleClicked","mouseWheel","mouseReleased","mouseClicked","mouseMoved","mouseOver","mouseOut","dragOver","dragLeave","changed","input","drop","callback","FileReader","FileList","Blob","_dragDisabled","preventDefault","evt","addEventListener","_attachListener","files","dataTransfer","f","_load","console","log","draggable","elmMove","isTouch","px","py","elmDrag","dragMouseDownEvt","closeDragElementEvt","elementDragEvt","dragMouseDown","cursor","e","touches","changedTouches","parseInt","clientX","clientY","closeDragElement","elementDrag","ctx","_detachListener","bind","element","p5","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/dom/p5.Element.js"],"sourcesContent":["import { File } from './p5.File.js';\nimport { C as Color } from '../creating_reading-Cr8L2Jnm.js';\nimport { w as AUTO } from '../constants-BRcElHU3.js';\nimport '../io/p5.XML.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\n\nclass Element {\n  width;\n  height;\n  elt;\n\n  constructor(elt, pInst) {\n    this.elt = elt;\n    this._pInst = this._pixelsState = pInst;\n    this._events = {};\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n  }\n\n  /**\n   * Removes the element, stops all audio/video streams, and removes all\n   * callback functions.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square. ');\n   * }\n   *\n   * // Remove the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.remove();\n   * }\n   * </code>\n   * </div>\n   */\n  remove() {\n    // stop all audios/videos and detach all devices like microphone/camera etc\n    // used as input/output for audios/videos.\n    // if (this instanceof p5.MediaElement) {\n    if(this.stop){\n      this.stop();\n      const sources = this.elt.srcObject;\n      if (sources !== null) {\n        const tracks = sources.getTracks();\n        tracks.forEach(track => {\n          track.stop();\n        });\n      }\n    }\n\n    // delete the reference in this._pInst._elements\n    const index = this._pInst._elements.indexOf(this);\n    if (index !== -1) {\n      this._pInst._elements.splice(index, 1);\n    }\n\n    // deregister events\n    for (let ev in this._events) {\n      this.elt.removeEventListener(ev, this._events[ev]);\n    }\n    if (this.elt && this.elt.parentNode) {\n      this.elt.parentNode.removeChild(this.elt);\n    }\n  }\n\n  /**\n   * Attaches the element to a parent element.\n   *\n   * For example, a `&lt;div&gt;&lt;/div&gt;` element may be used as a box to\n   * hold two pieces of text, a header and a paragraph. The\n   * `&lt;div&gt;&lt;/div&gt;` is the parent element of both the header and\n   * paragraph.\n   *\n   * The parameter `parent` can have one of three types. `parent` can be a\n   * string with the parent element's ID, as in\n   * `myElement.parent('container')`. It can also be another\n   * <a href=\"#/p5.Element\">p5.Element</a> object, as in\n   * `myElement.parent(myDiv)`. Finally, `parent` can be an `HTMLElement`\n   * object, as in `myElement.parent(anotherElement)`.\n   *\n   * Calling `myElement.parent()` without an argument returns the element's\n   * parent.\n   *\n   * @param  {String|p5.Element|Object} parent ID, <a href=\"#/p5.Element\">p5.Element</a>,\n   *                                           or HTMLElement of desired parent element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color to white\n   *   div.style('background-color', 'white');\n   *\n   *   // Align any text to the center.\n   *   div.style('text-align', 'center');\n   *\n   *   // Set its ID to \"container\".\n   *   div.id('container');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using its ID \"container\".\n   *   p.parent('container');\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent.\n   *   p.parent(div);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using the underlying\n   *   // HTMLElement.\n   *   p.parent(div.elt);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {p5.Element}\n   */\n  parent(p) {\n    if (typeof p === 'undefined') {\n      return this.elt.parentNode;\n    }\n\n    if (typeof p === 'string') {\n      if (p[0] === '#') {\n        p = p.substring(1);\n      }\n      p = document.getElementById(p);\n    } else if (p instanceof Element) {\n      p = p.elt;\n    }\n    p.appendChild(this.elt);\n    return this;\n  }\n\n  /**\n   * Attaches the element as a child of another element.\n   *\n   * `myElement.child()` accepts either a string ID, DOM node, or\n   * <a href=\"#/p5.Element\">p5.Element</a>. For example,\n   * `myElement.child(otherElement)`. If no argument is provided, an array of\n   * children DOM nodes is returned.\n   *\n   * @returns {Node[]} an array of child nodes.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Make div1 the child of div0\n   *   // using the p5.Element.\n   *   div0.child(div1);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Give div1 an ID.\n   *   div1.id('apples');\n   *\n   *   // Make div1 the child of div0\n   *   // using its ID.\n   *   div0.child('apples');\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // This example assumes there is a div already on the page\n   * // with id \"myChildDiv\".\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *\n   *   // Select the child element by its ID.\n   *   let elt = document.getElementById('myChildDiv');\n   *\n   *   // Make div1 the child of div0\n   *   // using its HTMLElement object.\n   *   div0.child(elt);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|p5.Element} [child] the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n   *                         to add to the current element\n   * @chainable\n   */\n  child(childNode) {\n    if (typeof childNode === 'undefined') {\n      return this.elt.childNodes;\n    }\n    if (typeof childNode === 'string') {\n      if (childNode[0] === '#') {\n        childNode = childNode.substring(1);\n      }\n      childNode = document.getElementById(childNode);\n    } else if (childNode instanceof Element) {\n      childNode = childNode.elt;\n    }\n\n    if (childNode instanceof HTMLElement) {\n      this.elt.appendChild(childNode);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the inner HTML of the element, replacing any existing HTML.\n   *\n   * The second parameter, `append`, is optional. If `true` is passed, as in\n   * `myElement.html('hi', true)`, the HTML is appended instead of replacing\n   * existing HTML.\n   *\n   * If no arguments are passed, as in `myElement.html()`, the element's inner\n   * HTML is returned.\n   *\n   * @for p5.Element\n   * @returns {String} the inner HTML of the element\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('');\n   *   div.size(100, 100);\n   *\n   *   // Set the inner HTML to \"hi\".\n   *   div.html('hi');\n   *\n   *   describe('A gray square with the word \"hi\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('Hello ');\n   *   div.size(100, 100);\n   *\n   *   // Append \"World\" to the div's HTML.\n   *   div.html('World', true);\n   *\n   *   describe('A gray square with the text \"Hello World\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element.\n   *   let div = createDiv('Hello');\n   *\n   *   // Prints \"Hello\" to the console.\n   *   print(div.html());\n   *\n   *   describe('A gray square with the word \"Hello!\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} [html] the HTML to be placed inside the element\n   * @param  {Boolean} [append] whether to append HTML to existing\n   * @chainable\n   */\n  html(...args) {\n    if (args.length === 0) {\n      return this.elt.innerHTML;\n    } else if (args[1]) {\n      this.elt.insertAdjacentHTML('beforeend', args[0]);\n      return this;\n    } else {\n      this.elt.innerHTML = args[0];\n      return this;\n    }\n  }\n\n  /**\n   * Sets the element's ID using a given string.\n   *\n   * Calling `myElement.id()` without an argument returns its ID as a string.\n   *\n   * @param  {String} id ID of the element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the canvas' ID\n   *   // to \"mycanvas\".\n   *   cnv.id('mycanvas');\n   *\n   *   // Get the canvas' ID.\n   *   let id = cnv.id();\n   *   text(id, 24, 54);\n   *\n   *   describe('The text \"mycanvas\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} ID of the element.\n   */\n  id(id) {\n    if (typeof id === 'undefined') {\n      return this.elt.id;\n    }\n\n    this.elt.id = id;\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n    return this;\n  }\n\n  /**\n   * Adds a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\" target=\"_blank\">class attribute</a>\n   * to the element using a given string.\n   *\n   * Calling `myElement.class()` without an argument returns a string with its current classes.\n   *\n   * @param  {String} class class to add.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Add the class \"small\" to the\n   *   // canvas element.\n   *   cnv.class('small');\n   *\n   *   // Get the canvas element's class\n   *   // and display it.\n   *   let c = cnv.class();\n   *   text(c, 35, 54);\n   *\n   *   describe('The word \"small\" written in black on a gray canvas.');\n   *\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} element's classes, if any.\n   */\n  class(c) {\n    if (typeof c === 'undefined') {\n      return this.elt.className;\n    }\n\n    this.elt.className = c;\n    return this;\n  }\n\n  /**\n   *\n   * Adds a class to the element.\n   *\n   * @for p5.Element\n   * @param  {String} class name of class to add.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  addClass(c) {\n    if (this.elt.className) {\n      if (!this.hasClass(c)) {\n        this.elt.className = this.elt.className + ' ' + c;\n      }\n    } else {\n      this.elt.className = c;\n    }\n    return this;\n  }\n\n  /**\n   * Removes a class from the element.\n   *\n   * @param  {String} class name of class to remove.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * // In this example, a class is set when the div is created\n   * // and removed when mouse is pressed. This could link up\n   * // with a CSS style rule to toggle style properties.\n   *\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Remove 'myClass' from the div when the user presses the mouse.\n   * function mousePressed() {\n   *   div.removeClass('myClass');\n   * }\n   * </code>\n   * </div>\n   */\n  removeClass(c) {\n    // Note: Removing a class that does not exist does NOT throw an error in classList.remove method\n    this.elt.classList.remove(c);\n    return this;\n  }\n\n  /**\n   * Checks if a class is already applied to element.\n   *\n   * @returns {boolean} a boolean value if element has specified class.\n   * @param c {String} name of class to check.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the class 'show' to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the class 'show' when the mouse is pressed.\n   * function mousePressed() {\n   *   if (div.hasClass('show')) {\n   *     div.addClass('show');\n   *   } else {\n   *     div.removeClass('show');\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hasClass(c) {\n    return this.elt.classList.contains(c);\n  }\n\n  /**\n   * Toggles whether a class is applied to the element.\n   *\n   * @param c {String} class name to toggle.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the 'show' class to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the 'show' class when the mouse is pressed.\n   * function mousePressed() {\n   *   div.toggleClass('show');\n   * }\n   * </code>\n   * </div>\n   */\n  toggleClass(c) {\n    // classList also has a toggle() method, but we cannot use that yet as support is unclear.\n    // See https://github.com/processing/p5.js/issues/3631\n    // this.elt.classList.toggle(c);\n    if (this.elt.classList.contains(c)) {\n      this.elt.classList.remove(c);\n    } else {\n      this.elt.classList.add(c);\n    }\n    return this;\n  }\n\n  /**\n   * Centers the element either vertically, horizontally, or both.\n   *\n   * `center()` will center the element relative to its parent or according to\n   * the page's body if the element has no parent.\n   *\n   * If no argument is passed, as in `myElement.center()` the element is aligned\n   * both vertically and horizontally.\n   *\n   * @param  {String} [align] passing 'vertical', 'horizontal' aligns element accordingly\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and style it.\n   *   let div = createDiv('');\n   *   div.size(10, 10);\n   *   div.style('background-color', 'orange');\n   *\n   *   // Center the div relative to the page's body.\n   *   div.center();\n   *\n   *   describe('A gray square and an orange rectangle. The rectangle is at the center of the page.');\n   * }\n   * </code>\n   * </div>\n   */\n  center(align) {\n    const style = this.elt.style.display;\n    const hidden = this.elt.style.display === 'none';\n    const parentHidden = this.parent().style.display === 'none';\n    const pos = { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n\n    if (hidden) this.show();\n    if (parentHidden) this.parent().show();\n    this.elt.style.display = 'block';\n\n    this.position(0, 0);\n    const wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);\n    const hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n\n    if (align === 'both' || align === undefined) {\n      this.position(\n        wOffset / 2 + this.parent().offsetLeft,\n        hOffset / 2 + this.parent().offsetTop\n      );\n    } else if (align === 'horizontal') {\n      this.position(wOffset / 2 + this.parent().offsetLeft, pos.y);\n    } else if (align === 'vertical') {\n      this.position(pos.x, hOffset / 2 + this.parent().offsetTop);\n    }\n\n    this.style('display', style);\n    if (hidden) this.hide();\n    if (parentHidden) this.parent().hide();\n\n    return this;\n  }\n\n  /**\n   * Sets the element's position.\n   *\n   * The first two parameters, `x` and `y`, set the element's position relative\n   * to the top-left corner of the web page.\n   *\n   * The third parameter, `positionType`, is optional. It sets the element's\n   * <a target=\"_blank\"\n   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.\n   * `positionType` is a string that can be either `'static'`, `'fixed'`,\n   * `'relative'`, `'sticky'`, `'initial'`, or `'inherit'`.\n   *\n   * If no arguments passed, as in `myElement.position()`, the method returns\n   * the element's position in an object, as in `{ x: 0, y: 0 }`.\n   *\n   * @returns {Object} object of form `{ x: 0, y: 0 }` containing the element's position.\n   *\n   * @example\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas 50px to the right and 100px\n   *   // below the top-left corner of the window.\n   *   cnv.position(50, 100);\n   *\n   *   describe('A gray square that is 50 pixels to the right and 100 pixels down from the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas at the top-left corner\n   *   // of the window with a 'fixed' position type.\n   *   cnv.position(0, 0, 'fixed');\n   *\n   *   describe('A gray square in the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} [x] x-position relative to top-left of window (optional)\n   * @param  {Number} [y] y-position relative to top-left of window (optional)\n   * @param  {String} [positionType] it can be static, fixed, relative, sticky, initial or inherit (optional)\n   * @chainable\n   */\n  position(...args) {\n    if (args.length === 0) {\n      return { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n    } else {\n      let positionType = 'absolute';\n      if (\n        args[2] === 'static' ||\n        args[2] === 'fixed' ||\n        args[2] === 'relative' ||\n        args[2] === 'sticky' ||\n        args[2] === 'initial' ||\n        args[2] === 'inherit'\n      ) {\n        positionType = args[2];\n      }\n      this.elt.style.position = positionType;\n      this.elt.style.left = args[0] + 'px';\n      this.elt.style.top = args[1] + 'px';\n      this.x = args[0];\n      this.y = args[1];\n      return this;\n    }\n  }\n\n  /**\n   * Shows the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and hide it.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *   p.hide();\n   *\n   *   describe('A gray square. The text \"p5*js\" appears when the user double-clicks the square.');\n   * }\n   *\n   * // Show the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.show();\n   * }\n   * </code>\n   * </div>\n   */\n  show() {\n    this.elt.style.display = 'block';\n    return this;\n  }\n\n  /**\n   * Hides the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" at the center of a gray square. The text disappears when the user double-clicks the square.');\n   * }\n   *\n   * // Hide the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.hide();\n   * }\n   * </code>\n   * </div>\n   */\n  hide() {\n    this.elt.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Sets the element's width and height.\n   *\n   * Calling `myElement.size()` without an argument returns the element's size\n   * as an object with the properties `width` and `height`. For example,\n   *  `{ width: 20, height: 10 }`.\n   *\n   * The first parameter, `width`, is optional. It's a number used to set the\n   * element's width. Calling `myElement.size(10)`\n   *\n   * The second parameter, 'height`, is also optional. It's a\n   * number used to set the element's height. For example, calling\n   * `myElement.size(20, 10)` sets the element's width to 20 pixels and height\n   * to 10 pixels.\n   *\n   * The constant `AUTO` can be used to adjust one dimension at a time while\n   * maintaining the aspect ratio, which is `width / height`. For example,\n   * consider an element that's 200 pixels wide and 100 pixels tall. Calling\n   * `myElement.size(20, AUTO)` sets the width to 20 pixels and height to 10\n   * pixels.\n   *\n   * Note: In the case of elements that need to load data, such as images, wait\n   * to call `myElement.size()` until after the data loads.\n   *\n   * @return {Object} width and height of the element in an object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 20 pixels.\n   *   div.size(80, 20);\n   *\n   *   describe('A gray square with a pink rectangle near its top.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 40 pixels.\n   *   div.size(80, 40);\n   *\n   *   // Get the div's size as an object.\n   *   let s = div.size();\n   *\n   *   // Display the div's dimensions.\n   *   div.html(`${s.width} x ${s.height}`);\n   *\n   *   describe('A gray square with a pink rectangle near its top. The text \"80 x 40\" is written within the rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let img1;\n   * let img2;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   img1 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     ''\n   *   );\n   *   img1.position(0, 0);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   // Resize the image once it's loaded.\n   *   img2 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     '',\n   *     resizeImage\n   *   );\n   *   img2.position(0, 0);\n   *\n   *   describe('A gray square two copies of a space image at the top-left. The copy in front is smaller.');\n   * }\n   *\n   * // Resize img2 and keep its aspect ratio.\n   * function resizeImage() {\n   *   img2.size(50, AUTO);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {(Number|AUTO)} [w]   width of the element, either AUTO, or a number.\n   * @param  {(Number|AUTO)} [h] height of the element, either AUTO, or a number.\n   * @chainable\n   */\n  size(w, h) {\n    if (arguments.length === 0) {\n      return { width: this.elt.offsetWidth, height: this.elt.offsetHeight };\n    } else {\n      let aW = w;\n      let aH = h;\n      const AUTO$1 = AUTO;\n      if (aW !== AUTO$1 || aH !== AUTO$1) {\n        if (aW === AUTO$1) {\n          aW = h * this.width / this.height;\n        } else if (aH === AUTO$1) {\n          aH = w * this.height / this.width;\n        }\n        // set diff for cnv vs normal div\n        if (this.elt instanceof HTMLCanvasElement) {\n          const j = {};\n          const k = this.elt.getContext('2d');\n          let prop;\n          for (prop in k) {\n            j[prop] = k[prop];\n          }\n          this.elt.setAttribute('width', aW * this._pInst._pixelDensity);\n          this.elt.setAttribute('height', aH * this._pInst._pixelDensity);\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n          for (prop in j) {\n            this.elt.getContext('2d')[prop] = j[prop];\n          }\n        } else {\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this.elt.width = aW;\n          this.elt.height = aH;\n        }\n        this.width = aW;\n        this.height = aH;\n        if (this._pInst && this._pInst._curElement) {\n          // main canvas associated with p5 instance\n          if (this._pInst._curElement.elt === this.elt) {\n            this._pInst.width = aW;\n            this._pInst.height = aH;\n          }\n        }\n      }\n      return this;\n    }\n  }\n\n  /**\n   * Applies a style to the element by adding a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax\" target=\"_blank\">CSS declaration</a>.\n   *\n   * The first parameter, `property`, is a string. If the name of a style\n   * property is passed, as in `myElement.style('color')`, the method returns\n   * the current value as a string or `null` if it hasn't been set. If a\n   * `property:style` string is passed, as in\n   * `myElement.style('color:deeppink')`, the method sets the style `property`\n   * to `value`.\n   *\n   * The second parameter, `value`, is optional. It sets the property's value.\n   * `value` can be a string, as in\n   * `myElement.style('color', 'deeppink')`, or a\n   * <a href=\"#/p5.Color\">p5.Color</a> object, as in\n   * `myElement.style('color', myColor)`.\n   *\n   * @param  {String} property style property to set.\n   * @returns {String} value of the property.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\".\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', 'deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Create a paragraph element and set its font color using a p5.Color object.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', c);\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\"\n   *   // using property:value syntax.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color:deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an empty paragraph element and set its font color to \"deeppink\".\n   *   let p = createP();\n   *   p.position(5, 5);\n   *   p.style('color', 'deeppink');\n   *\n   *   // Get the element's color as an  RGB color string.\n   *   let c = p.style('color');\n   *\n   *   // Set the element's inner HTML using the RGB color string.\n   *   p.html(c);\n   *\n   *   describe('The text \"rgb(255, 20, 147)\" written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} property\n   * @param  {String|p5.Color} value value to assign to the property.\n   * @return {String} value of the property.\n   * @chainable\n   */\n  style(prop, val) {\n    const self = this;\n\n    if (val instanceof Color) {\n      val = val.toString();\n    }\n\n    if (typeof val === 'undefined') {\n      if (prop.indexOf(':') === -1) {\n        // no value set, so assume requesting a value\n        let styles = window.getComputedStyle(self.elt);\n        let style = styles.getPropertyValue(prop);\n        return style;\n      } else {\n        // value set using `:` in a single line string\n        const attrs = prop.split(';');\n        for (let i = 0; i < attrs.length; i++) {\n          const parts = attrs[i].split(':');\n          if (parts[0] && parts[1]) {\n            this.elt.style[parts[0].trim()] = parts[1].trim();\n          }\n        }\n      }\n    } else {\n      // input provided as key,val pair\n      this.elt.style[prop] = val;\n      if (\n        prop === 'width' ||\n        prop === 'height' ||\n        prop === 'left' ||\n        prop === 'top'\n      ) {\n        let styles = window.getComputedStyle(self.elt);\n        let styleVal = styles.getPropertyValue(prop);\n        let numVal = styleVal.replace(/[^\\d.]/g, '');\n        this[prop] = Math.round(parseFloat(numVal, 10));\n      }\n    }\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _translate(...args) {\n    this.elt.style.position = 'absolute';\n    // save out initial non-translate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, '');\n      transform = transform.replace(/translate[X-Z]?\\(.*\\)/g, '');\n    }\n    if (args.length === 2) {\n      this.elt.style.transform =\n        'translate(' + args[0] + 'px, ' + args[1] + 'px)';\n    } else if (args.length > 2) {\n      this.elt.style.transform =\n        'translate3d(' +\n        args[0] +\n        'px,' +\n        args[1] +\n        'px,' +\n        args[2] +\n        'px)';\n      if (args.length === 3) {\n        this.elt.parentElement.style.perspective = '1000px';\n      } else {\n        this.elt.parentElement.style.perspective = args[3] + 'px';\n      }\n    }\n    // add any extra transform styling back on end\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _rotate(...args) {\n    // save out initial non-rotate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, '');\n      transform = transform.replace(/rotate[X-Z]?\\(.*\\)/g, '');\n    }\n\n    if (args.length === 1) {\n      this.elt.style.transform = 'rotate(' + args[0] + 'deg)';\n    } else if (args.length === 2) {\n      this.elt.style.transform =\n        'rotate(' + args[0] + 'deg, ' + args[1] + 'deg)';\n    } else if (args.length === 3) {\n      this.elt.style.transform = 'rotateX(' + args[0] + 'deg)';\n      this.elt.style.transform += 'rotateY(' + args[1] + 'deg)';\n      this.elt.style.transform += 'rotateZ(' + args[2] + 'deg)';\n    }\n    // add remaining transform back on\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /**\n   * Adds an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#attributes\" target=\"_blank\">attribute</a>\n   * to the element.\n   *\n   * This method is useful for advanced tasks. Most commonly-used attributes,\n   * such as `id`, can be set with their dedicated methods. For example,\n   * `nextButton.id('next')` sets an element's `id` attribute. Calling\n   * `nextButton.attribute('id', 'next')` has the same effect.\n   *\n   * The first parameter, `attr`, is the attribute's name as a string. Calling\n   * `myElement.attribute('align')` returns the attribute's current value as a\n   * string or `null` if it hasn't been set.\n   *\n   * The second parameter, `value`, is optional. It's a string used to set the\n   * attribute's value. For example, calling\n   * `myElement.attribute('align', 'center')` sets the element's horizontal\n   * alignment to `center`.\n   *\n   * @return {String} value of the attribute.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a container div element and place it at the top-left corner.\n   *   let container = createDiv();\n   *   container.position(0, 0);\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"left\".\n   *   let p1 = createP('hi');\n   *   p1.parent(container);\n   *   p1.attribute('align', 'left');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"center\".\n   *   let p2 = createP('hi');\n   *   p2.parent(container);\n   *   p2.attribute('align', 'center');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"right\".\n   *   let p3 = createP('hi');\n   *   p3.parent(container);\n   *   p3.attribute('align', 'right');\n   *\n   *   describe('A gray square with the text \"hi\" written on three separate lines, each placed further to the right.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} attr       attribute to set.\n   * @param  {String} value      value to assign to the attribute.\n   * @chainable\n   */\n  attribute(attr, value) {\n    //handling for checkboxes and radios to ensure options get\n    //attributes not divs\n    if (\n      this.elt.firstChild != null &&\n      (this.elt.firstChild.type === 'checkbox' ||\n        this.elt.firstChild.type === 'radio')\n    ) {\n      if (typeof value === 'undefined') {\n        return this.elt.firstChild.getAttribute(attr);\n      } else {\n        for (let i = 0; i < this.elt.childNodes.length; i++) {\n          this.elt.childNodes[i].setAttribute(attr, value);\n        }\n      }\n    } else if (typeof value === 'undefined') {\n      return this.elt.getAttribute(attr);\n    } else {\n      this.elt.setAttribute(attr, value);\n      return this;\n    }\n  }\n\n  /**\n   * Removes an attribute from the element.\n   *\n   * The parameter `attr` is the attribute's name as a string. For example,\n   * calling `myElement.removeAttribute('align')` removes its `align`\n   * attribute if it's been set.\n   *\n   * @param  {String} attr       attribute to remove.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place it in the center of the canvas.\n   *   // Set its \"align\" attribute to \"center\".\n   *   p = createP('hi');\n   *   p.position(0, 20);\n   *   p.attribute('align', 'center');\n   *\n   *   describe('The text \"hi\" written in black at the center of a gray square. The text moves to the left edge when double-clicked.');\n   * }\n   *\n   * // Remove the 'align' attribute when the user double-clicks the paragraph.\n   * function doubleClicked() {\n   *   p.removeAttribute('align');\n   * }\n   * </code>\n   * </div>\n   */\n  removeAttribute(attr) {\n    if (\n      this.elt.firstChild != null &&\n      (this.elt.firstChild.type === 'checkbox' ||\n        this.elt.firstChild.type === 'radio')\n    ) {\n      for (let i = 0; i < this.elt.childNodes.length; i++) {\n        this.elt.childNodes[i].removeAttribute(attr);\n      }\n    }\n    this.elt.removeAttribute(attr);\n    return this;\n  }\n\n  /**\n   * Returns or sets the element's value.\n   *\n   * Calling `myElement.value()` returns the element's current value.\n   *\n   * The parameter, `value`, is an optional number or string. If provided,\n   * as in `myElement.value(123)`, it's used to set the element's value.\n   *\n   * @return {String|Number} value of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square. The text resets to \"hello\" when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   *\n   * // Reset the input's value.\n   * function doubleClicked() {\n   *   input.value('hello');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|Number}     value\n   * @chainable\n   */\n  value(...args) {\n    if (args.length > 0) {\n      this.elt.value = args[0];\n      return this;\n    } else {\n      if (this.elt.type === 'range') {\n        return parseFloat(this.elt.value);\n      } else return this.elt.value;\n    }\n  }\n\n  /**\n   * Calls a function when the mouse is pressed over the element.\n   *\n   * Calling `myElement.mousePressed(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the canvas\n   *   // is pressed.\n   *   cnv.mousePressed(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse is pressed.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mousePressed(fxn) {\n    // Prepend the mouse property setters to the event-listener.\n    // This is required so that mouseButton is set correctly prior to calling the callback (fxn).\n    // For details, see https://github.com/processing/p5.js/issues/3087.\n    const eventPrependedFxn = function (event) {\n      this._pInst.mouseIsPressed = true;\n      this._pInst._activePointers.set(event.pointerId, event);\n      this._pInst._setMouseButton(event);\n      this._pInst._updatePointerCoords(event);\n      // Pass along the return-value of the callback:\n      return fxn.call(this, event);\n    };\n    // Pass along the event-prepended form of the callback.\n    Element._adjustListener('pointerdown', eventPrependedFxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed twice over the element.\n   *\n   * Calling `myElement.doubleClicked(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                double clicked over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // canvas is double-clicked.\n   *   cnv.doubleClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user double-clicks the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  doubleClicked(fxn) {\n    Element._adjustListener('dblclick', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse wheel scrolls over the element.\n   *\n   * The callback function, `fxn`, is passed an `event` object. `event` has\n   * two numeric properties, `deltaY` and `deltaX`. `event.deltaY` is\n   * negative if the mouse wheel rotates away from the user. It's positive if\n   * the mouse wheel rotates toward the user. `event.deltaX` is positive if\n   * the mouse wheel moves to the right. It's negative if the mouse wheel moves\n   * to the left.\n   *\n   * Calling `myElement.mouseWheel(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse wheel is\n   *                                scrolled over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(randomColor);\n   *\n   *   describe('A gray square changes color when the user scrolls the mouse wheel over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call changeBackground() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(changeBackground);\n   *\n   *   describe('A gray square. When the mouse wheel scrolls over the square, it changes color and displays shapes.');\n   * }\n   *\n   * function changeBackground(event) {\n   *   // Change the background color\n   *   // based on deltaY.\n   *   if (event.deltaY > 0) {\n   *     background('deeppink');\n   *   } else if (event.deltaY < 0) {\n   *     background('cornflowerblue');\n   *   } else {\n   *     background(200);\n   *   }\n   *\n   *   // Draw a shape based on deltaX.\n   *   if (event.deltaX > 0) {\n   *     circle(50, 50, 20);\n   *   } else if (event.deltaX < 0) {\n   *     square(40, 40, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  mouseWheel(fxn) {\n    Element._adjustListener('wheel', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseReleased(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseReleased(fxn) {\n    Element._adjustListener('pointerup', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed and released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed and released over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseClicked(fxn) {\n    Element._adjustListener('click', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves over the element.\n   *\n   * Calling `myElement.mouseMoved(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves.\n   *   cnv.mouseMoved(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseMoved(fxn) {\n    Element._adjustListener('pointermove', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves onto the element.\n   *\n   * Calling `myElement.mouseOver(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves onto the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves onto the canvas.\n   *   cnv.mouseOver(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves onto the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOver(fxn) {\n    Element._adjustListener('pointerover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves off the element.\n   *\n   * Calling `myElement.mouseOut(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves off the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves off the canvas.\n   *   cnv.mouseOut(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves off the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOut(fxn) {\n    Element._adjustListener('pointerout', fxn, this);\n    return this;\n  }\n\n    /**\n   * Calls a function when a file is dragged over the element.\n   *\n   * Calling `myElement.dragOver(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the file is\n   *                                dragged over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Drag a file over the canvas to test.\n   *\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call helloFile() when a\n   *   // file is dragged over\n   *   // the canvas.\n   *   cnv.dragOver(helloFile);\n   *\n   *   describe('A gray square. The text \"hello, file\" appears when a file is dragged over the square.');\n   * }\n   *\n   * function helloFile() {\n   *   text('hello, file', 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  dragOver(fxn) {\n    Element._adjustListener('dragover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when a file is dragged off the element.\n   *\n   * Calling `myElement.dragLeave(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the file is\n   *                                dragged off the element.\n   *                                `false` disables the function.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * // Drag a file over, then off\n   * // the canvas to test.\n   *\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call byeFile() when a\n   *   // file is dragged over,\n   *   // then off the canvas.\n   *   cnv.dragLeave(byeFile);\n   *\n   *   describe('A gray square. The text \"bye, file\" appears when a file is dragged over, then off the square.');\n   * }\n   *\n   * function byeFile() {\n   *   text('bye, file', 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  dragLeave(fxn) {\n    Element._adjustListener('dragleave', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element changes.\n   *\n   * Calling `myElement.changed(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the element changes.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dropdown;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a dropdown menu and add a few color options.\n   *   dropdown = createSelect();\n   *   dropdown.position(0, 0);\n   *   dropdown.option('red');\n   *   dropdown.option('green');\n   *   dropdown.option('blue');\n   *\n   *   // Call paintBackground() when the color option changes.\n   *   dropdown.changed(paintBackground);\n   *\n   *   describe('A gray square with a dropdown menu at the top. The square changes color when an option is selected.');\n   * }\n   *\n   * // Paint the background with the selected color.\n   * function paintBackground() {\n   *   let c = dropdown.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox(' circle');\n   *   checkbox.position(0, 100);\n   *\n   *   // Call repaint() when the checkbox changes.\n   *   checkbox.changed(repaint);\n   *\n   *   describe('A gray square with a checkbox underneath it that says \"circle\". A white circle appears when the box is checked and disappears otherwise.');\n   * }\n   *\n   * // Paint the background gray and determine whether to draw a circle.\n   * function repaint() {\n   *   background(200);\n   *   if (checkbox.checked() === true) {\n   *     circle(50, 50, 30);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  changed(fxn) {\n    Element._adjustListener('change', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element receives input.\n   *\n   * `myElement.input()` is often used to with text inputs and sliders. Calling\n   * `myElement.input(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when input is detected within\n   *                                the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a slider and place it beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   // Call repaint() when the slider changes.\n   *   slider.input(repaint);\n   *\n   *   describe('A gray square with a range slider underneath it. The background changes shades of gray when the slider is moved.');\n   * }\n   *\n   * // Paint the background using slider's value.\n   * function repaint() {\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an input and place it beneath the canvas.\n   *   input = createInput('');\n   *   input.position(0, 100);\n   *\n   *   // Call repaint() when input is detected.\n   *   input.input(repaint);\n   *\n   *   describe('A gray square with a text input bar beneath it. Any text written in the input appears in the middle of the square.');\n   * }\n   *\n   * // Paint the background gray and display the input's value.\n   * function repaint() {\n   *   background(200);\n   *   let msg = input.value();\n   *   text(msg, 5, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  input(fxn) {\n    Element._adjustListener('input', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the user drops a file on the element.\n   *\n   * The first parameter, `callback`, is a function to call once the file loads.\n   * The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object. If the user drops multiple files on\n   * the element, `callback`, is called once for each file.\n   *\n   * The second parameter, `fxn`, is a function to call when the browser detects\n   * one or more dropped files. The callback function should have one\n   * parameter, `event`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\n   *\n   * @param  {Function} callback  called when a file loads. Called once for each file dropped.\n   * @param  {Function} [fxn]     called once when any files are dropped.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call handleFile() when a file that's dropped on the canvas has loaded.\n   *   c.drop(handleFile);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed.');\n   * }\n   *\n   * // Remove the existing image and display the new one.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an <img> element with the\n   *   // dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   * let msg;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call functions when the user drops a file on the canvas\n   *   // and when the file loads.\n   *   c.drop(handleFile, handleDrop);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed. The id attribute of canvas element is also displayed.');\n   * }\n   *\n   * // Display the image when it loads.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an img element with the dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   *\n   * // Display the file's name when it loads.\n   * function handleDrop(event) {\n   *   // Remove current paragraph, if any.\n   *   if (msg) {\n   *     msg.remove();\n   *   }\n   *\n   *   // Use event to get the drop target's id.\n   *   let id = event.target.id;\n   *\n   *   // Write the canvas' id beneath it.\n   *   msg = createP(id);\n   *   msg.position(0, 100);\n   *\n   *   // Set the font color randomly for each drop.\n   *   let c = random(['red', 'green', 'blue']);\n   *   msg.style('color', c);\n   *   msg.style('font-size', '12px');\n   * }\n   * </code>\n   * </div>\n   */\n  drop(callback, fxn) {\n    // Is the file stuff supported?\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      if (!this._dragDisabled) {\n        this._dragDisabled = true;\n\n        const preventDefault = function (evt) {\n          evt.preventDefault();\n        };\n\n        // If you want to be able to drop you've got to turn off\n        // a lot of default behavior.\n        // avoid `attachListener` here, since it overrides other handlers.\n        this.elt.addEventListener('dragover', preventDefault);\n\n        // If this is a drag area we need to turn off the default behavior\n        this.elt.addEventListener('dragleave', preventDefault);\n      }\n\n      // Deal with the files\n      Element._attachListener(\n        'drop',\n        function (evt) {\n          evt.preventDefault();\n          // Call the second argument as a callback that receives the raw drop event\n          if (typeof fxn === 'function') {\n            fxn.call(this, evt);\n          }\n          // A FileList\n          const files = evt.dataTransfer.files;\n\n          // Load each one and trigger the callback\n          for (const f of files) {\n            File._load(f, callback);\n          }\n        },\n        this\n      );\n    } else {\n      console.log('The File APIs are not fully supported in this browser.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Makes the element draggable.\n   *\n   * The parameter, `elmnt`, is optional. If another\n   * <a href=\"#/p5.Element\">p5.Element</a> object is passed, as in\n   * `myElement.draggable(otherElement)`, the other element will become draggable.\n   *\n   * @param  {p5.Element} [elmnt]  another <a href=\"#/p5.Element\">p5.Element</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let stickyNote;\n   * let textInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and style it.\n   *   stickyNote = createDiv('Note');\n   *   stickyNote.position(5, 5);\n   *   stickyNote.size(80, 20);\n   *   stickyNote.style('font-size', '16px');\n   *   stickyNote.style('font-family', 'Comic Sans MS');\n   *   stickyNote.style('background', 'orchid');\n   *   stickyNote.style('padding', '5px');\n   *\n   *   // Make the note draggable.\n   *   stickyNote.draggable();\n   *\n   *   // Create a panel div and style it.\n   *   let panel = createDiv('');\n   *   panel.position(5, 40);\n   *   panel.size(80, 50);\n   *   panel.style('background', 'orchid');\n   *   panel.style('font-size', '16px');\n   *   panel.style('padding', '5px');\n   *   panel.style('text-align', 'center');\n   *\n   *   // Make the panel draggable.\n   *   panel.draggable();\n   *\n   *   // Create a text input and style it.\n   *   textInput = createInput('Note');\n   *   textInput.size(70);\n   *\n   *   // Add the input to the panel.\n   *   textInput.parent(panel);\n   *\n   *   // Call handleInput() when text is input.\n   *   textInput.input(handleInput);\n   *\n   *   describe(\n   *     'A gray square with two purple rectangles that move when dragged. The top rectangle displays the text that is typed into the bottom rectangle.'\n   *   );\n   * }\n   *\n   * // Update stickyNote's HTML when text is input.\n   * function handleInput() {\n   *   stickyNote.html(textInput.value());\n   * }\n   * </code>\n   * </div>\n   */\n  draggable(elmMove) {\n    let isTouch = 'ontouchstart' in window;\n\n    let x = 0,\n      y = 0,\n      px = 0,\n      py = 0,\n      elmDrag,\n      dragMouseDownEvt = isTouch ? 'touchstart' : 'mousedown',\n      closeDragElementEvt = isTouch ? 'touchend' : 'mouseup',\n      elementDragEvt = isTouch ? 'touchmove' : 'mousemove';\n\n    if (elmMove === undefined) {\n      elmMove = this.elt;\n      elmDrag = elmMove;\n    } else if (elmMove !== this.elt && elmMove.elt !== this.elt) {\n      elmMove = elmMove.elt;\n      elmDrag = this.elt;\n    }\n\n    elmDrag.addEventListener(dragMouseDownEvt, dragMouseDown, false);\n    elmDrag.style.cursor = 'move';\n\n    function dragMouseDown(e) {\n      e = e || window.event;\n\n      if (isTouch) {\n        const touches = e.changedTouches;\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n\n      document.addEventListener(closeDragElementEvt, closeDragElement, false);\n      document.addEventListener(elementDragEvt, elementDrag, false);\n      return false;\n    }\n\n    function elementDrag(e) {\n      e = e || window.event;\n\n      if (isTouch) {\n        const touches = e.changedTouches;\n        x = px - parseInt(touches[0].clientX);\n        y = py - parseInt(touches[0].clientY);\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        x = px - parseInt(e.clientX);\n        y = py - parseInt(e.clientY);\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n\n      elmMove.style.left = elmMove.offsetLeft - x + 'px';\n      elmMove.style.top = elmMove.offsetTop - y + 'px';\n    }\n\n    function closeDragElement() {\n      document.removeEventListener(closeDragElementEvt, closeDragElement, false);\n      document.removeEventListener(elementDragEvt, elementDrag, false);\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Boolean|Function} fxn\n   * @param {Element} ctx\n   * @chainable\n   * @alt\n   * General handler for event attaching and detaching\n   */\n  static _adjustListener(ev, fxn, ctx) {\n    if (fxn === false) {\n      Element._detachListener(ev, ctx);\n    } else {\n      Element._attachListener(ev, fxn, ctx);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Function} fxn\n   * @param {Element} ctx\n   */\n  static _attachListener(ev, fxn, ctx) {\n    // detach the old listener if there was one\n    if (ctx._events[ev]) {\n      Element._detachListener(ev, ctx);\n    }\n    const f = fxn.bind(ctx);\n    ctx.elt.addEventListener(ev, f, false);\n    ctx._events[ev] = f;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Element} ctx\n   */\n  static _detachListener(ev, ctx) {\n    const f = ctx._events[ev];\n    ctx.elt.removeEventListener(ev, f, false);\n    ctx._events[ev] = null;\n  }\n}\nfunction element(p5, fn){\n  /**\n   * A class to describe an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\" target=\"_blank\">HTML element</a>.\n   *\n   * Sketches can use many elements. Common elements include the drawing canvas,\n   * buttons, sliders, webcam feeds, and so on.\n   *\n   * All elements share the methods of the `p5.Element` class. They're created\n   * with functions such as <a href=\"#/p5/createCanvas\">createCanvas()</a> and\n   * <a href=\"#/p5/createButton\">createButton()</a>.\n   *\n   * @class p5.Element\n   * @param {HTMLElement} elt wrapped DOM element.\n   * @param {p5} [pInst] pointer to p5 instance.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button element and\n   *   // place it beneath the canvas.\n   *   let btn = createButton('change');\n   *   btn.position(0, 100);\n   *\n   *   // Call randomColor() when\n   *   // the button is pressed.\n   *   btn.mousePressed(randomColor);\n   *\n   *   describe('A gray square with a button that says \"change\" beneath it. The square changes color when the user presses the button.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Element = Element;\n\n  /**\n   * A `Number` property that stores the element's width.\n   *\n   * @type {Number}\n   * @property width\n   * @for p5.Element\n   */\n\n  /**\n   * A `Number` property that stores the element's height.\n   *\n   * @type {Number}\n   * @property height\n   * @for p5.Element\n   */\n\n  /**\n   * The element's underlying `HTMLElement` object.\n   *\n   * The\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a>\n   * object's properties and methods can be used directly.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the border style for the\n   *   // canvas.\n   *   cnv.elt.style.border = '5px dashed deeppink';\n   *\n   *   describe('A gray square with a pink border drawn with dashed lines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @property elt\n   * @for p5.Element\n   * @name elt\n   * @readOnly\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  element(p5, p5.prototype);\n}\n\nexport { Element, element as default };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,cAAc;AACnC,SAASC,CAAC,IAAIC,KAAK,QAAQ,iCAAiC;AAC5D,SAASC,CAAC,IAAIC,IAAI,QAAQ,0BAA0B;AACpD,OAAO,iBAAiB;AACxB,OAAO,eAAe;AACtB,OAAO,8BAA8B;;AAErC;AACA;AACA;AACA;;AAGA,MAAMC,OAAO,CAAC;EACZC,KAAK;EACLC,MAAM;EACNC,GAAG;EAEHC,WAAWA,CAACD,GAAG,EAAEE,KAAK,EAAE;IACtB,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACG,MAAM,GAAG,IAAI,CAACC,YAAY,GAAGF,KAAK;IACvC,IAAI,CAACG,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACP,KAAK,GAAG,IAAI,CAACE,GAAG,CAACM,WAAW;IACjC,IAAI,CAACP,MAAM,GAAG,IAAI,CAACC,GAAG,CAACO,YAAY;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAAA,EAAG;IACP;IACA;IACA;IACA,IAAG,IAAI,CAACC,IAAI,EAAC;MACX,IAAI,CAACA,IAAI,CAAC,CAAC;MACX,MAAMC,OAAO,GAAG,IAAI,CAACV,GAAG,CAACW,SAAS;MAClC,IAAID,OAAO,KAAK,IAAI,EAAE;QACpB,MAAME,MAAM,GAAGF,OAAO,CAACG,SAAS,CAAC,CAAC;QAClCD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;UACtBA,KAAK,CAACN,IAAI,CAAC,CAAC;QACd,CAAC,CAAC;MACJ;IACF;;IAEA;IACA,MAAMO,KAAK,GAAG,IAAI,CAACb,MAAM,CAACc,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC;IACjD,IAAIF,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACb,MAAM,CAACc,SAAS,CAACE,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IACxC;;IAEA;IACA,KAAK,IAAII,EAAE,IAAI,IAAI,CAACf,OAAO,EAAE;MAC3B,IAAI,CAACL,GAAG,CAACqB,mBAAmB,CAACD,EAAE,EAAE,IAAI,CAACf,OAAO,CAACe,EAAE,CAAC,CAAC;IACpD;IACA,IAAI,IAAI,CAACpB,GAAG,IAAI,IAAI,CAACA,GAAG,CAACsB,UAAU,EAAE;MACnC,IAAI,CAACtB,GAAG,CAACsB,UAAU,CAACC,WAAW,CAAC,IAAI,CAACvwB,MAAMA,CAACC,CAAC,EAAE;IACR,IAAI,OAAOA,CAAC,KAAK,WAAW,EAAE;MAC5B,OAAO,IAAI,CAACzB,GAAG,CAACsB,UAAU;IAC5B;IAEA,IAAI,OAAOG,CAAC,KAAK,QAAQ,EAAE;MACzB,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAChBA,CAAC,GAAGA,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;MACpB;MACAD,CAAC,GAAGE,QAAQ,CAACC,cAAc,CAACH,CAAC,CAAC;IAChC,CAAC,MAAM,IAAIA,CAAC,YAAY5B,OAAO,EAAE;MAC/B4B,CAAC,GAAGA,CAAC,CAACzB,GAAG;IACX;IACAyB,CAAC,CAACI,WAAW,CAAC,IAAI,CAAC7B,GAAG,CAAC;IACvB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACE8B,KAAKA,CAACC,SAAS,EAAE;IACf,IAAI,OAAOA,SAAS,KAAK,WAAW,EAAE;MACpC,OAAO,IAAI,CAAC/B,GAAG,CAACgC,UAAU;IAC5B;IACA,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;MACjC,IAAIA,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACxBA,SAAS,GAAGA,SAAS,CAACL,SAAS,CAAC,CAAC,CAAC;MACpC;MACAK,SAAS,GAAGJ,QAAQ,CAACC,cAAc,CAACG,SAAS,CAAC;IAChD,CAAC,MAAM,IAAIA,SAAS,YAAYlC,OAAO,EAAE;MACvCkC,SAAS,GAAGA,SAAS,CAAC/B,GAAG;IAC3B;IAEA,IAAI+B,SAAS,YAAYE,WAAW,EAAE;MACpC,IAAI,CAACjC,GAAG,CAAC6B,WAAW,CAACE,SAAS,CAAC;IACjC;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACEG,IAAIA,CAAC,GAAGC,IAAI,EAAE;IACZ,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACrB,OAAO,IAAI,CAACpC,GAAG,CAACqC,SAAS;IAC3B,CAAC,MAAM,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;MAClB,IAAI,CAACnC,GAAG,CAACsC,kBAAkB,CAAC,WAAW,EAAEH,IAAI,CAAC,CAAC,CAAC,CAAC;MACjD,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACnC,GAAG,CAACqC,SAAS,GAAGF,IAAI,CAAC,CAAC,CAAC;MAC5B,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;EACEI,EAAEA,CAACA,EAAE,EAAE;IACL,IAAI,OAAOA,EAAE,KAAK,WAAW,EAAE;MAC7B,OAAO,IAAI,CAACvC,GAAG,CAACuC,EAAE;IACpB;IAEA,IAAI,CAACvC,GAAG,CAACuC,EAAE,GAAGA,EAAE;IAChB,IAAI,CAACzC,KAAK,GAAG,IAAI,CAACE,GAAG,CAACM,WAAW;IACjC,IAAI,CAACP,MAAM,GAAG,IAAI,CAACC,GAAG,CAACO,YAAY;IACnC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;EACEiC,KAAKA,CAACC,CAAC,EAAE;IACP,IAAI,OAAOA,CAAC,KAAK,WAAW,EAAE;MAC5B,OAAO,IAAI,CAACzC,GAAG,CAAC0C,SAAS;IAC3B;IAEA,IAAI,CAAC1C,GAAG,CAAC0C,SAAS,GAAGD,CAAC;IACtB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,QAAQA,CAACF,CAAC,EAAE;IACV,IAAI,IAAI,CAACzC,GAAG,CAAC0C,SAAS,EAAE;MACtB,IAAI,CAAC,IAAI,CAACE,QAAQ,CAACH,CAAC,CAAC,EAAE;QACrB,IAAI,CAACzC,GAAG,CAAC0C,SAAS,GAAG,IAAI,CAAC1C,GAAG,CAAC0C,SAAS,GAAG,GAAG,GAAGD,CAAC;MACnD;IACF,CAAC,MAAM;MACL,IAAI,CAACzC,GAAG,CAAC0C,SAAS,GAAGD,CAAC;IACxB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,WAAWA,CAACJ,CAAC,EAAE;IACb;IACA,IAAI,CAACzC,GAAG,CAAC8C,SAAS,CAACtC,MAAM,CAACiC,CAAC,CAAC;IAC5B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,QAAQA,CAACH,CAAC,EAAE;IACV,OAAO,IAAI,CAACzC,GAAG,CAAC8C,SAAS,CAACC,QAAQ,CAACN,CAAC,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,WAAWA,CAACP,CAAC,EAAE;IACb;IACA;IACA;IACA,IAAI,IAAI,CAACzC,GAAG,CAAC8C,SAAS,CAACC,QAAQ,CAACN,CAAC,CAAC,EAAE;MAClC,IAAI,CAACzC,GAAG,CAAC8C,SAAS,CAACtC,MAAM,CAACiC,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,IAAI,CAACzC,GAAG,CAAC8C,SAAS,CAACG,GAAG,CAACR,CAAC,CAAC;IAC3B;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,MAAMA,CA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ACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,eAAeA,CAACL,IAAI,EAAE;IACpB,IACE,IAAI,CAAC9G,GAAG,CAACgH,UAAU,IAAI,IAAI,KAC1B,IAAI,CAAChH,GAAG,CAACgH,UAAU,CAACC,IAAI,KAAK,UAAU,IACtC,IAAI,CAACjH,GAAG,CAACgH,UAAU,CAACC,IAAI,KAAK,OAAO,CAAC,EACvC;MACA,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChG,GAAG,CAACgC,UAAU,CAACI,MAAM,EAAE4D,CAAC,EAAE,EAAE;QACnD,IAAI,CAAChG,GAAG,CAACgC,UAAU,CAACgE,CAAC,CAAC,CAACmB,eAAe,CAACL,IAAI,CAAC;MAC9C;IACF;IACA,IAAI,CAAC9G,GAAG,CAACmH,eAAe,CAACL,IAAI,CAAC;IAC9B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEC,KAAKA,CAAC,GAAG5E,IAAI,EAAE;IACb,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACnB,IAAI,CAACpC,GAAG,CAAC+G,KAAK,GAAG5E,IAAI,CAAC,CAAC,CAAC;MACxB,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,IAAI,CAACnC,GAAG,CAACiH,IAAI,KAAK,OAAO,EAAE;QAC7B,OAAOV,UAAU,CAAC,IAAI,CAACvG,GAAG,CAAC+G,KAAK,CAAC;MACnC,CAAC,MAAM,OAAO,IAAI,CAAC/G,GAAG,CAAC+G,KAAK;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,YAAYA,CAACC,GAAG,EAAE;IAChB;IACA;IACA;IACA,MAAMC,iBAAiB,GAAG,SAAAA,CAAUC,KAAK,EAAE;MACzC,IAAI,CAACpH,MAAM,CAACqH,cAAc,GAAG,IAAI;MACjC,IAAI,CAACrH,MAAM,CAACsH,eAAe,CAACC,GAAG,CAACH,KAAK,CAACI,SAAS,EAAEJ,KAAK,CAAC;MACvD,IAAI,CAACpH,MAAM,CAACyH,eAAe,CAACL,KAAK,CAAC;MAClC,IAAI,CAACpH,MAAM,CAAC0H,oBAAoB,CAACN,KAAK,CAAC;MACvC;MACA,OAAOF,GAAG,CAACS,IAAI,CAAC,IAAI,EAAEP,KAAK,CAAC;IAC9B,CAAC;IACD;IACA1H,OAAO,CAACkI,eAAe,CAAC,aAAa,EAAET,iBAAiB,EAAE,IAAI,CAAC;IAC/D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEU,aAAaA,CAACX,GAAG,EAAE;IACjBxH,OAAO,CAACkI,eAAe,CAAC,UAAU,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC9C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,UAAUA,CAACZ,GAAG,EAAE;IACdxH,OAAO,CAACkI,eAAe,CAAC,OAAO,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC3C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,aAAaA,CAACb,GAAG,EAAE;IACjBxH,OAAO,CAACkI,eAAe,CAAC,WAAW,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC/C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,YAAYA,CAACd,GAAG,EAAE;IAChBxH,OAAO,CAACkI,eAAe,CAAC,OAAO,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC3C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,UAAUA,CAACf,GAAG,EAAE;IACdxH,OAAO,CAACkI,eAAe,CAAC,aAAa,EAAEV,GAAG,EAAE,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,SAASA,CAAChB,GAAG,EAAE;IACbxH,OAAO,CAACkI,eAAe,CAAC,aAAa,EAAEV,GAAG,EAAE,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEiB,QAAQA,CAACjB,GAAG,EAAE;IACZxH,OAAO,CAACkI,eAAe,CAAC,YAAY,EAAEV,GAAG,EAAE,IAAI,CAAC;IAChD,OAAO,IAAI;EACb;;EAEE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,QAAQA,CAAClB,GAAG,EAAE;IACZxH,OAAO,CAACkI,eAAe,CAAC,UAAU,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC9C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmB,SAASA,CAACnB,GAAG,EAAE;IACbxH,OAAO,CAACkI,eAAe,CAAC,WAAW,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC/C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,OAAOA,CAACpB,GAAG,EAAE;IACXxH,OAAO,CAACkI,eAAe,CAAC,QAAQ,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC5C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqB,KAAKA,CAACrB,GAAG,EAAE;IACTxH,OAAO,CAACkI,eAAe,CAAC,OAAO,EAAEV,GAAG,EAAE,IAAI,CAAC;IAC3C,OAAO,IAAI;EACbsB,IAAIA,CAACC,QAAQ,EAAEvB,GAAG,EAAE;IAClB;IACA,IAAI1B,MAAM,CAACnG,IAAI,IAAImG,MAAM,CAACkD,UAAU,IAAIlD,MAAM,CAACmD,QAAQ,IAAInD,MAAM,CAACoD,IAAI,EAAE;MACtE,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;QACvB,IAAI,CAACA,aAAa,GAAG,IAAI;QAEzB,MAAMC,cAAc,GAAG,SAAAA,CAAUC,GAAG,EAAE;UACpCA,GAAG,CAACD,cAAc,CAAC,CAAC;QACtB,CAAC;;QAED;QACA;QACA;QACA,IAAI,CAACjJ,GAAG,CAACmJ,gBAAgB,CAAC,UAAU,EAAEF,cAAc,CAAC;;QAErD;QACA,IAAI,CAACjJ,GAAG,CAACmJ,gBAAgB,CAAC,WAAW,EAAEF,cAAc,CAAC;MACxD;;MAEA;MACApJ,OAAO,CAACuJ,eAAe,CACrB,MAAM,EACN,UAAUF,GAAG,EAAE;QACbA,GAAG,CAACD,cAAc,CAAC,CAAC;QACpB;QACA,IAAI,OAAO5B,GAAG,KAAK,UAAU,EAAE;UAC7BA,GAAG,CAACS,IAAI,CAAC,IAAI,EAAEoB,GAAG,CAAC;QACrB;QACA;QACA,MAAMG,KAAK,GAAGH,GAAG,CAACI,YAAY,CAACD,KAAK;;QAEpC;QACA,KAAK,MAAME,CAAC,IAAIF,KAAK,EAAE;UACrB7J,IAAI,CAACgK,KAAK,CAACD,CAAC,EAAEX,QAAQ,CAAC;QACzB;MACF,CAAC,EACD,IACF,CAAC;IACH,CAAC,MAAM;MACLa,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACvE;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAASA,CAACC,OAAO,EAAE;IACjB,IAAIC,OAAO,GAAG,cAAc,IAAIlE,MAAM;IAEtC,IAAIlC,CAAC,GAAG,CAAC;MACPE,CAAC,GAAG,CAAC;MACLmG,EAAE,GAAG,CAAC;MACNC,EAA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ACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO1B,eAAeA,CAAChI,EAAE,EAAEiG,GAAG,EAAEyD,GAAG,EAAE;IACnC;IACA,IAAIA,GAAG,CAACzK,OAAO,CAACe,EAAE,CAAC,EAAE;MACnBvB,OAAO,CAACkL,eAAe,CAAC3J,EAAE,EAAE0J,GAAG,CAAC;IAClC;IACA,MAAMvB,CAAC,GAAGlC,GAAG,CAAC2D,IAAI,CAACF,GAAG,CAAC;IACvBA,GAAG,CAAC9K,GAAG,CAACmJ,gBAAgB,CAAC/H,EAAE,EAAEmI,CAAC,EAAE,KAAK,CAAC;IACtCuB,GAAG,CAACzK,OAAO,CAACe,EAAE,CAAC,GAAGmI,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOwB,eAAeA,CAAC3J,EAAE,EAAE0J,GAAG,EAAE;IAC9B,MAAMvB,CAAC,GAAGuB,GAAG,CAACzK,OAAO,CAACe,EAAE,CAAC;IACzB0J,GAAG,CAAC9K,GAAG,CAACqB,mBAAmB,CAACD,EAAE,EAAEmI,CAAC,EAAE,KAAK,CAAC;IACzCuB,GAAG,CAACzK,OAAO,CAACe,EAAE,CAAC,GAAG,IAAI;EACxB;AACF;AACA,SAAS6J,OAAOA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACED,EAAE,CAACrL,OAAO,GAAGA,OAAO;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAG,OAAOqL,EAAE,KAAK,WAAW,EAAC;EAC3BD,OAAO,CAACC,EAAE,EAAEA,EAAE,CAACE,SAAS,CAAC;AAC3B;AAEA,SAASvL,OAAO,EAAEoL,OAAO,IAAII,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}