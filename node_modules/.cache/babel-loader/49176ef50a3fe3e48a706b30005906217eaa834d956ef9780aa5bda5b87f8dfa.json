{"ast":null,"code":"import { translator } from '../internationalization.js';\nimport strings from './browser_errors.js';\nimport { v as constants } from '../../constants-BRcElHU3.js';\nimport 'i18next';\nimport 'i18next-browser-languagedetector';\n\n/**\n * @for p5\n * @requires core\n *\n * This is the main file for the Friendly Error System (FES), containing\n * the core as well as miscellaneous functionality of the FES. Here is a\n * brief outline of the functions called in this system.\n *\n * The FES may be invoked by a call to either\n * (1) _validateParameters, (2) _friendlyFileLoadError, (3) _friendlyError,\n * (4) helpForMisusedAtTopLevelCode, or (5) _fesErrorMonitor.\n *\n * _validateParameters is located in validate_params.js along with other code\n * used for parameter validation.\n * _friendlyFileLoadError is located in file_errors.js along with other code\n * used for dealing with file load errors.\n * Apart from this, there's also a file stacktrace.js, which contains the code\n * to parse the error stack, borrowed from:\n * https://github.com/stacktracejs/stacktrace.js\n *\n * For more detailed information on the FES functions, including the call\n * sequence of each function, please look at the FES Reference + Dev Notes:\n * https://github.com/processing/p5.js/blob/main/contributor_docs/fes_reference_dev_notes.md\n */\n\nfunction fesCore(p5, fn) {\n  // p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta\n  // See testColors below for all the color codes and names\n  const typeColors = ['#2D7BB6', '#EE9900', '#4DB200', '#C83C00'];\n  let misusedAtTopLevelCode = null;\n  let defineMisusedAtTopLevelCode = null;\n\n  // the threshold for the maximum allowed levenshtein distance\n  // used in misspelling detection\n  const EDIT_DIST_THRESHOLD = 2;\n\n  // Used for internally thrown errors that should not get wrapped by another\n  // friendly error handler\n  class FESError extends Error {}\n  if (typeof IS_MINIFIED !== 'undefined') {\n    p5._friendlyError = p5._checkForUserDefinedFunctions = p5._fesErrorMonitor = () => {};\n  } else {\n    // const errorTable = require('./browser_errors').default;\n\n    // -- Borrowed from jQuery 1.11.3 --\n    const class2type = {};\n    const toString = class2type.toString;\n    const names = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error'];\n    for (let n = 0; n < names.length; n++) {\n      class2type[`[object ${names[n]}]`] = names[n].toLowerCase();\n    }\n    const getType = obj => {\n      if (obj == null) {\n        return `${obj}`;\n      }\n      return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;\n    };\n\n    // -- End borrow --\n\n    // entry points into user-defined code\n    const entryPoints = ['setup', 'draw', 'deviceMoved', 'deviceTurned', 'deviceShaken', 'doubleClicked', 'mousePressed', 'mouseReleased', 'mouseMoved', 'mouseDragged', 'mouseClicked', 'mouseWheel', 'touchStarted', 'touchMoved', 'touchEnded', 'keyPressed', 'keyReleased', 'keyTyped', 'windowResized'];\n\n    /**\n     * Takes a message and a p5 function func, and adds a link pointing to\n     * the reference documentation of func at the end of the message\n     *\n     * @method mapToReference\n     * @private\n     * @param {String}  message   the words to be said\n     * @param {String}  [func]    the name of function\n     *\n     * @returns {String}\n     */\n    const mapToReference = (message, func) => {\n      let msgWithReference = '';\n      if (func == null || func.substring(0, 4) === 'load') {\n        msgWithReference = message;\n      } else {\n        const methodParts = func.split('.');\n        const referenceSection = methodParts.length > 1 ? `${methodParts[0]}.${methodParts[1]}` : 'p5';\n        const funcName = methodParts.length === 1 ? func : methodParts.slice(2).join('/');\n\n        //Whenever func having p5.[Class] is encountered, we need to have the error link as mentioned below else different link\n        funcName.startsWith('p5.') ? msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}.${funcName})` : msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}/${funcName})`;\n      }\n      return msgWithReference;\n    };\n\n    /**\n     * Prints out a fancy, colorful message to the console log\n     * Attaches Friendly Errors prefix [fes.pre] to the message.\n     *\n     * @method _report\n     * @private\n     * @param  {String}          message  Message to be printed\n     * @param  {String}          [func]   Name of function\n     * @param  {Number|String}   [color]  CSS color code\n     *\n     * @return console logs\n     */\n    p5._report = (message, func, color) => {\n      // if p5._fesLogger is set ( i.e we are running tests ), use that\n      // instead of console.log\n      const log = p5._fesLogger == null ? console.log.bind(console) : p5._fesLogger;\n      if ('undefined' === getType(color)) {\n        color = '#B40033'; // dark magenta\n      } else if (getType(color) === 'number') {\n        // Type to color\n        color = typeColors[color];\n      }\n\n      // Add a link to the reference docs of func at the end of the message\n      message = mapToReference(message, func);\n      const prefixedMsg = translator('fes.pre', {\n        message\n      });\n      {\n        log(prefixedMsg);\n      }\n    };\n\n    /**\n     * Throws an error with helpful p5 context. Similar to _report, but\n     * this will stop other code execution to prevent downstream errors\n     * from being logged.\n     *\n     * @method _error\n     * @private\n     * @param                    context  p5 instance the error is from\n     * @param  {String}          message  Message to be printed\n     * @param  {String}          [func]   Name of function\n     */\n    p5._error = (context, message, func) => {\n      p5._report(message, func);\n      context.hitCriticalError = true;\n      // Throw an error to stop the current function (e.g. setup or draw) from\n      // running more code\n      throw new FESError('Stopping sketch to prevent more errors');\n    };\n\n    /**\n     * This is a generic method that can be called from anywhere in the p5\n     * library to alert users to a common error.\n     *\n     * @method _friendlyError\n     * @private\n     * @param  {String}         message   Message to be printed\n     * @param  {String}         [func]    Name of the function linked to error\n     * @param  {Number|String}  [color]   CSS color code\n     */\n    p5._friendlyError = function (message, func, color) {\n      p5._report(message, func, color);\n    };\n\n    /**\n     * This is called internally if there is an error with autoplay. Generates\n     * and prints a friendly error message [fes.autoplay].\n     *\n     * @method _friendlyAutoplayError\n     * @private\n     */\n    p5._friendlyAutoplayError = function (src) {\n      const message = translator('fes.autoplay', {\n        src,\n        url: 'https://developer.mozilla.org/docs/Web/Media/Autoplay_guide'\n      });\n      console.log(translator('fes.pre', {\n        message\n      }));\n    };\n\n    /**\n     * Measures dissimilarity between two strings by calculating\n     * the Levenshtein distance.\n     *\n     * If the \"distance\" between them is small enough, it is\n     * reasonable to think that one is the misspelled version of the other.\n     *\n     * Specifically, this uses the Wagner–Fischer algorithm.\n     * @method computeEditDistance\n     * @private\n     * @param {String} w1 the first word\n     * @param {String} w2 the second word\n     *\n     * @returns {Number} the \"distance\" between the two words, a smaller value\n     *                   indicates that the words are similar\n     */\n    const computeEditDistance = (w1, w2) => {\n      const l1 = w1.length,\n        l2 = w2.length;\n      if (l1 === 0) return w2;\n      if (l2 === 0) return w1;\n      let prev = [];\n      let cur = [];\n      for (let j = 0; j < l2 + 1; j++) {\n        cur[j] = j;\n      }\n      prev = cur;\n      for (let i = 1; i < l1 + 1; i++) {\n        cur = [];\n        for (let j = 0; j < l2 + 1; j++) {\n          if (j === 0) {\n            cur[j] = i;\n          } else {\n            let a1 = w1[i - 1],\n              a2 = w2[j - 1];\n            let temp = 999999;\n            let cost = a1.toLowerCase() === a2.toLowerCase() ? 0 : 1;\n            temp = temp > cost + prev[j - 1] ? cost + prev[j - 1] : temp;\n            temp = temp > 1 + cur[j - 1] ? 1 + cur[j - 1] : temp;\n            temp = temp > 1 + prev[j] ? 1 + prev[j] : temp;\n            cur[j] = temp;\n          }\n        }\n        prev = cur;\n      }\n      return cur[l2];\n    };\n\n    /**\n     * Whether or not p5.js is running in an environment where `preload` will be\n     * run before `setup`.\n     *\n     * This will return false for default builds >= 2.0, but backwards compatibility\n     * addons may set this to true.\n     *\n     * @private\n     */\n    p5.isPreloadSupported = function () {\n      return false;\n    };\n\n    /**\n     * Checks capitalization for user defined functions.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.checkUserDefinedFns\".\n     *\n     * @method checkForUserDefinedFunctions\n     * @private\n     * @param {*} context   Current default context. Set to window in\n     *                      \"global mode\" and to a p5 instance in \"instance mode\"\n     */\n    const checkForUserDefinedFunctions = context => {\n      if (p5.disableFriendlyErrors) return;\n\n      // if using instance mode, this function would be called with the current\n      // instance as context\n      const instanceMode = context instanceof p5;\n      context = instanceMode ? context : window;\n      const fnNames = entryPoints;\n      if (context.preload && !p5.isPreloadSupported()) {\n        p5._error(context, translator('fes.preloadDisabled'));\n      }\n      const fxns = {};\n      // lowercasename -> actualName mapping\n      fnNames.forEach(symbol => {\n        fxns[symbol.toLowerCase()] = symbol;\n      });\n      for (const prop of Object.keys(context)) {\n        const lowercase = prop.toLowerCase();\n\n        // check if the lowercase property name has an entry in fxns, if the\n        // actual name with correct capitalization doesnt exist in context,\n        // and if the user-defined symbol is of the type function\n        if (fxns.hasOwnProperty(lowercase) && !context[fxns[lowercase]] && typeof context[prop] === 'function') {\n          const msg = translator('fes.checkUserDefinedFns', {\n            name: prop,\n            actualName: fxns[lowercase]\n          });\n          p5._friendlyError(msg, fxns[lowercase]);\n        }\n      }\n    };\n\n    /**\n     * Compares the symbol caught in the ReferenceError to everything in\n     * misusedAtTopLevel ( all public p5 properties ).\n     *\n     * Generates and prints a friendly error message using key: \"fes.misspelling\".\n     *\n     * @method handleMisspelling\n     * @private\n     * @param {String} errSym   Symbol to whose spelling to check\n     * @param {Error} error     ReferenceError object\n     *\n     * @returns {Boolean} tell whether error was likely due to typo\n     */\n    const handleMisspelling = (errSym, error) => {\n      if (!misusedAtTopLevelCode) {\n        defineMisusedAtTopLevelCode();\n      }\n      const distanceMap = {};\n      let min = 999999;\n      // compute the levenshtein distance for the symbol against all known\n      // public p5 properties. Find the property with the minimum distance\n      misusedAtTopLevelCode.forEach(symbol => {\n        let dist = computeEditDistance(errSym, symbol.name);\n        if (distanceMap[dist]) distanceMap[dist].push(symbol);else distanceMap[dist] = [symbol];\n        if (dist < min) min = dist;\n      });\n\n      // if the closest match has more \"distance\" than the max allowed threshold\n      if (min > Math.min(EDIT_DIST_THRESHOLD, errSym.length)) return false;\n\n      // Show a message only if the caught symbol and the matched property name\n      // differ in their name ( either letter difference or difference of case )\n      const matchedSymbols = distanceMap[min].filter(symbol => symbol.name !== errSym);\n      if (matchedSymbols.length !== 0) {\n        const parsed = p5._getErrorStackParser().parse(error);\n        let locationObj;\n        if (parsed && parsed[0] && parsed[0].fileName && parsed[0].lineNumber && parsed[0].columnNumber) {\n          locationObj = {\n            location: `${parsed[0].fileName}:${parsed[0].lineNumber}:${parsed[0].columnNumber}`,\n            file: parsed[0].fileName.split('/').slice(-1),\n            line: parsed[0].lineNumber\n          };\n        }\n        let msg;\n        if (matchedSymbols.length === 1) {\n          // To be used when there is only one closest match. The count parameter\n          // allows i18n to pick between the keys \"fes.misspelling\" and\n          // \"fes.misspelling_plural\"\n          msg = translator('fes.misspelling', {\n            name: errSym,\n            actualName: matchedSymbols[0].name,\n            type: matchedSymbols[0].type,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            count: matchedSymbols.length\n          });\n        } else {\n          // To be used when there are multiple closest matches. Gives each\n          // suggestion on its own line, the function name followed by a link to\n          // reference documentation\n          const suggestions = matchedSymbols.map(symbol => {\n            const message = '▶️ ' + symbol.name + (symbol.type === 'function' ? '()' : '');\n            return mapToReference(message, symbol.name);\n          }).join('\\n');\n          msg = translator('fes.misspelling', {\n            name: errSym,\n            suggestions,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            count: matchedSymbols.length\n          });\n        }\n\n        // If there is only one closest match, tell _friendlyError to also add\n        // a link to the reference documentation. In case of multiple matches,\n        // this is already done in the suggestions variable, one link for each\n        // suggestion.\n        p5._friendlyError(msg, matchedSymbols.length === 1 ? matchedSymbols[0].name : undefined);\n        return true;\n      }\n      return false;\n    };\n\n    /**\n     * Prints a friendly stacktrace for user-written functions for \"global\" errors\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.globalErrors.stackTop\", \"fes.globalErrors.stackSubseq\".\n     *\n     * @method printFriendlyStack\n     * @private\n     * @param {Array} friendlyStack\n     */\n    const printFriendlyStack = friendlyStack => {\n      const log = p5._fesLogger && typeof p5._fesLogger === 'function' ? p5._fesLogger : console.log.bind(console);\n      if (friendlyStack.length > 1) {\n        let stacktraceMsg = '';\n        friendlyStack.forEach((frame, idx) => {\n          const location = `${frame.fileName}:${frame.lineNumber}:${frame.columnNumber}`;\n          let frameMsg,\n            translationObj = {\n              func: frame.functionName,\n              line: frame.lineNumber,\n              location,\n              file: frame.fileName.split('/').slice(-1)\n            };\n          if (idx === 0) {\n            frameMsg = translator('fes.globalErrors.stackTop', translationObj);\n          } else {\n            frameMsg = translator('fes.globalErrors.stackSubseq', translationObj);\n          }\n          stacktraceMsg += frameMsg;\n        });\n        log(stacktraceMsg);\n      }\n    };\n\n    /**\n     * Takes a stacktrace array and filters out all frames that show internal p5\n     * details.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.wrongPreload\", \"fes.libraryError\".\n     *\n     * The processed stack is used to find whether the error happened internally\n     * within the library, and if the error was due to a non-loadX() method\n     * being used in preload.\n     *\n     * \"Internally\" here means that the exact location of the error (the top of\n     * the stack) is a piece of code written in the p5.js library (which may or\n     * may not have been called from the user's sketch).\n     *\n     * @method processStack\n     * @private\n     * @param {Error} error\n     * @param {Array} stacktrace\n     *\n     * @returns {Array} An array with two elements, [isInternal, friendlyStack]\n     *                 isInternal: a boolean value indicating whether the error\n     *                             happened internally\n     *                 friendlyStack: the filtered (simplified) stacktrace\n     */\n    const processStack = (error, stacktrace) => {\n      // cannot process a stacktrace that doesn't exist\n      if (!stacktrace) return [false, null];\n      stacktrace.forEach(frame => {\n        frame.functionName = frame.functionName || '';\n      });\n\n      // isInternal - Did this error happen inside the library\n      let isInternal = false;\n      let p5FileName, friendlyStack, currentEntryPoint;\n\n      // Intentionally throw an error that we catch so that we can check the name\n      // of the current file. Any errors we see from this file, we treat as\n      // internal errors.\n      try {\n        throw new Error();\n      } catch (testError) {\n        const testStacktrace = p5._getErrorStackParser().parse(testError);\n        p5FileName = testStacktrace[0].fileName;\n      }\n      for (let i = stacktrace.length - 1; i >= 0; i--) {\n        let splitted = stacktrace[i].functionName.split('.');\n        if (entryPoints.includes(splitted[splitted.length - 1])) {\n          // remove everything below an entry point function (setup, draw, etc).\n          // (it's usually the internal initialization calls)\n          friendlyStack = stacktrace.slice(0, i + 1);\n          currentEntryPoint = splitted[splitted.length - 1];\n          // We call the error \"internal\" if the source of the error was a\n          // function from within the p5.js library file, but called from the\n          // user's code directly. We only need to check the topmost frame in\n          // the stack trace since any function internal to p5 should pass this\n          // check, not just public p5 functions.\n          if (stacktrace[0].fileName === p5FileName) {\n            isInternal = true;\n            break;\n          }\n          break;\n        }\n      }\n\n      // in some cases ( errors in promises, callbacks, etc), no entry-point\n      // function may be found in the stacktrace. In that case just use the\n      // entire stacktrace for friendlyStack\n      if (!friendlyStack) friendlyStack = stacktrace;\n      if (isInternal) {\n        // the frameIndex property is added before the filter, so frameIndex\n        // corresponds to the index of a frame in the original stacktrace.\n        // Then we filter out all frames which belong to the file that contains\n        // the p5 library\n        friendlyStack = friendlyStack.map((frame, index) => {\n          frame.frameIndex = index;\n          return frame;\n        }).filter(frame => frame.fileName !== p5FileName);\n\n        // a weird case, if for some reason we can't identify the function called\n        // from user's code\n        if (friendlyStack.length === 0) return [true, null];\n\n        // get the function just above the topmost frame in the friendlyStack.\n        // i.e the name of the library function called from user's code\n        const func = stacktrace[friendlyStack[0].frameIndex - 2].functionName.split('.').slice(-1)[0];\n\n        // Try and get the location (line no.) from the top element of the stack\n        let locationObj;\n        if (friendlyStack[0].fileName && friendlyStack[0].lineNumber && friendlyStack[0].columnNumber) {\n          locationObj = {\n            location: `${friendlyStack[0].fileName}:${friendlyStack[0].lineNumber}:${friendlyStack[0].columnNumber}`,\n            file: friendlyStack[0].fileName.split('/').slice(-1),\n            line: friendlyStack[0].lineNumber\n          };\n\n          // if already handled by another part of the FES, don't handle again\n          if (p5._fesLogCache[locationObj.location]) return [true, null];\n        }\n\n        // Check if the error is due to a non loadX method being used incorrectly\n        // in preload\n        if (currentEntryPoint === 'preload' && fn._preloadMethods[func] == null) {\n          p5._friendlyError(translator('fes.wrongPreload', {\n            func,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            error: error.message\n          }), 'preload');\n        } else {\n          // Library error\n          p5._friendlyError(translator('fes.libraryError', {\n            func,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            error: error.message\n          }), func);\n        }\n\n        // Finally, if it's an internal error, print the friendlyStack\n        // ( fesErrorMonitor won't handle this error )\n        if (friendlyStack && friendlyStack.length) {\n          printFriendlyStack(friendlyStack);\n        }\n      }\n      return [isInternal, friendlyStack];\n    };\n\n    /**\n     * Handles \"global\" errors that the browser catches.\n     *\n     * Called when an error event happens and detects the type of error.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.globalErrors.syntax.[*]\", \"fes.globalErrors.reference.[*]\",\n     * \"fes.globalErrors.type.[*]\".\n     *\n     * @method fesErrorMonitor\n     * @private\n     * @param {*} e  Event object to extract error details from\n     */\n    const fesErrorMonitor = e => {\n      if (p5.disableFriendlyErrors) return;\n\n      // Don't try to handle an error intentionally emitted by FES to halt execution\n      if (e && (e instanceof FESError || e.reason instanceof FESError)) return;\n\n      // Try to get the error object from e\n      let error;\n      if (e instanceof Error) {\n        error = e;\n      } else if (e instanceof ErrorEvent) {\n        error = e.error;\n      } else if (e instanceof PromiseRejectionEvent) {\n        error = e.reason;\n        if (!(error instanceof Error)) return;\n      }\n      if (!error) return;\n      let stacktrace = p5._getErrorStackParser().parse(error);\n      // process the stacktrace from the browser and simplify it to give\n      // friendlyStack.\n      let [isInternal, friendlyStack] = processStack(error, stacktrace);\n\n      // if this is an internal library error, the type of the error is not relevant,\n      // only the user code that lead to it is.\n      if (isInternal) {\n        return;\n      }\n      const errList = strings[error.name];\n      if (!errList) return; // this type of error can't be handled yet\n      let matchedError;\n      for (const obj of errList) {\n        let string = obj.msg;\n        // capture the primary symbol mentioned in the error\n        string = string.replace(new RegExp('{{}}', 'g'), '([a-zA-Z0-9_]+)');\n        string = string.replace(new RegExp('{{.}}', 'g'), '(.+)');\n        string = string.replace(new RegExp('{}', 'g'), '(?:[a-zA-Z0-9_]+)');\n        let matched = error.message.match(string);\n        if (matched) {\n          matchedError = Object.assign({}, obj);\n          matchedError.match = matched;\n          break;\n        }\n      }\n      if (!matchedError) return;\n\n      // Try and get the location from the top element of the stack\n      let locationObj;\n      if (stacktrace && stacktrace[0].fileName && stacktrace[0].lineNumber && stacktrace[0].columnNumber) {\n        locationObj = {\n          location: `${stacktrace[0].fileName}:${stacktrace[0].lineNumber}:${stacktrace[0].columnNumber}`,\n          file: stacktrace[0].fileName.split('/').slice(-1),\n          line: friendlyStack[0].lineNumber\n        };\n      }\n      switch (error.name) {\n        case 'SyntaxError':\n          {\n            // We can't really do much with syntax errors other than try to use\n            // a simpler framing of the error message. The stack isn't available\n            // for syntax errors\n            switch (matchedError.type) {\n              case 'INVALIDTOKEN':\n                {\n                  //Error if there is an invalid or unexpected token that doesn't belong at this position in the code\n                  //let x = “not a string”; -> string not in proper quotes\n                  let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Illegal_character#What_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.syntax.invalidToken', {\n                    url\n                  }));\n                  break;\n                }\n              case 'UNEXPECTEDTOKEN':\n                {\n                  //Error if a specific language construct(, { ; etc) was expected, but something else was provided\n                  //for (let i = 0; i < 5,; ++i) -> a comma after i<5 instead of a semicolon\n                  let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Unexpected_token#What_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.syntax.unexpectedToken', {\n                    url\n                  }));\n                  break;\n                }\n              case 'REDECLAREDVARIABLE':\n                {\n                  //Error if a variable is redeclared by the user. Example=>\n                  //let a = 10;\n                  //let a = 100;\n                  let errSym = matchedError.match[1];\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.syntax.redeclaredVariable', {\n                    symbol: errSym,\n                    url\n                  }));\n                  break;\n                }\n              case 'MISSINGINITIALIZER':\n                {\n                  //Error if a const variable is not initialized during declaration\n                  //Example => const a;\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.syntax.missingInitializer', {\n                    url\n                  }));\n                  break;\n                }\n              case 'BADRETURNORYIELD':\n                {\n                  //Error when a return statement is misplaced(usually outside of a function)\n                  // const a = function(){\n                  //  .....\n                  //  }\n                  //  return; -> misplaced return statement\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.syntax.badReturnOrYield', {\n                    url\n                  }));\n                  break;\n                }\n            }\n            break;\n          }\n        case 'ReferenceError':\n          {\n            switch (matchedError.type) {\n              case 'NOTDEFINED':\n                {\n                  //Error if there is a non-existent variable referenced somewhere\n                  //let a = 10;\n                  //console.log(x);\n                  let errSym = matchedError.match[1];\n                  if (errSym && handleMisspelling(errSym, error)) {\n                    break;\n                  }\n\n                  // if the flow gets this far, this is likely not a misspelling\n                  // of a p5 property/function\n                  let url = 'https://p5js.org/examples/data-variable-scope.html';\n                  p5._friendlyError(translator('fes.globalErrors.reference.notDefined', {\n                    url,\n                    symbol: errSym,\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  }));\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n              case 'CANNOTACCESS':\n                {\n                  //Error if a lexical variable was accessed before it was initialized\n                  //console.log(a); -> variable accessed before it was initialized\n                  //let a=100;\n                  let errSym = matchedError.match[1];\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.reference.cannotAccess', {\n                    url,\n                    symbol: errSym,\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  }));\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n            }\n            break;\n          }\n        case 'TypeError':\n          {\n            switch (matchedError.type) {\n              case 'NOTFUNC':\n                {\n                  //Error when some code expects you to provide a function, but that didn't happen\n                  //let a = document.getElementByID('foo'); -> getElementById instead of getElementByID\n                  let errSym = matchedError.match[1];\n                  let splitSym = errSym.split('.');\n                  let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_a_function#What_went_wrong';\n\n                  // if errSym is aa.bb.cc , symbol would be cc and obj would aa.bb\n                  let translationObj = {\n                    url,\n                    symbol: splitSym[splitSym.length - 1],\n                    obj: splitSym.slice(0, splitSym.length - 1).join('.'),\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  };\n\n                  // There are two cases to handle here. When the function is called\n                  // as a property of an object and when it's called independently.\n                  // Both have different explanations.\n                  if (splitSym.length > 1) {\n                    p5._friendlyError(translator('fes.globalErrors.type.notfuncObj', translationObj));\n                  } else {\n                    p5._friendlyError(translator('fes.globalErrors.type.notfunc', translationObj));\n                  }\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n              case 'READNULL':\n                {\n                  //Error if a property of null is accessed\n                  //let a = null;\n                  //console.log(a.property); -> a is null\n                  let errSym = matchedError.match[1];\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';\n                  /*let url2 =\n                    'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null';*/\n                  p5._friendlyError(translator('fes.globalErrors.type.readFromNull', {\n                    url,\n                    symbol: errSym,\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  }));\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n              case 'READUDEFINED':\n                {\n                  //Error if a property of undefined is accessed\n                  //let a; -> default value of a is undefined\n                  //console.log(a.property); -> a is undefined\n                  let errSym = matchedError.match[1];\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';\n                  /*let url2 =\n                    'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined#description';*/\n                  p5._friendlyError(translator('fes.globalErrors.type.readFromUndefined', {\n                    url,\n                    symbol: errSym,\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  }));\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n              case 'CONSTASSIGN':\n                {\n                  //Error when a const variable is reassigned a value\n                  //const a = 100;\n                  //a=10;\n                  let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong';\n                  p5._friendlyError(translator('fes.globalErrors.type.constAssign', {\n                    url,\n                    location: locationObj ? translator('fes.location', locationObj) : ''\n                  }));\n                  if (friendlyStack) printFriendlyStack(friendlyStack);\n                  break;\n                }\n            }\n          }\n      }\n    };\n    p5._fesErrorMonitor = fesErrorMonitor;\n    p5._checkForUserDefinedFunctions = checkForUserDefinedFunctions;\n\n    // logger for testing purposes.\n    p5._fesLogger = null;\n    p5._fesLogCache = {};\n    window.addEventListener('load', checkForUserDefinedFunctions, false);\n    window.addEventListener('error', p5._fesErrorMonitor, false);\n    window.addEventListener('unhandledrejection', p5._fesErrorMonitor, false);\n\n    /**\n     * Prints out all the colors in the color pallete with white text.\n     * For color blindness testing.\n     */\n    /* function testColors() {\n      const str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';\n      p5._friendlyError(str, 'print', '#ED225D'); // p5.js magenta\n      p5._friendlyError(str, 'print', '#2D7BB6'); // p5.js blue\n      p5._friendlyError(str, 'print', '#EE9900'); // p5.js orange\n      p5._friendlyError(str, 'print', '#A67F59'); // p5.js light brown\n      p5._friendlyError(str, 'print', '#704F21'); // p5.js gold\n      p5._friendlyError(str, 'print', '#1CC581'); // auto cyan\n      p5._friendlyError(str, 'print', '#FF6625'); // auto orange\n      p5._friendlyError(str, 'print', '#79EB22'); // auto green\n      p5._friendlyError(str, 'print', '#B40033'); // p5.js darkened magenta\n      p5._friendlyError(str, 'print', '#084B7F'); // p5.js darkened blue\n      p5._friendlyError(str, 'print', '#945F00'); // p5.js darkened orange\n      p5._friendlyError(str, 'print', '#6B441D'); // p5.js darkened brown\n      p5._friendlyError(str, 'print', '#2E1B00'); // p5.js darkened gold\n      p5._friendlyError(str, 'print', '#008851'); // auto dark cyan\n      p5._friendlyError(str, 'print', '#C83C00'); // auto dark orange\n      p5._friendlyError(str, 'print', '#4DB200'); // auto dark green\n    } */\n  }\n\n  // This is a lazily-defined list of p5 symbols that may be\n  // misused by beginners at top-level code, outside of setup/draw. We'd like\n  // to detect these errors and help the user by suggesting they move them\n  // into setup/draw.\n  //\n  // For more details, see https://github.com/processing/p5.js/issues/1121.\n  misusedAtTopLevelCode = null;\n  const FAQ_URL = 'https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup';\n\n  /**\n   * A helper function for populating misusedAtTopLevel list.\n   *\n   * @method defineMisusedAtTopLevelCode\n   * @private\n   */\n  defineMisusedAtTopLevelCode = () => {\n    const uniqueNamesFound = {};\n    const getSymbols = obj => Object.getOwnPropertyNames(obj).filter(name => {\n      if (name[0] === '_') {\n        return false;\n      }\n      if (name in uniqueNamesFound) {\n        return false;\n      }\n      uniqueNamesFound[name] = true;\n      return true;\n    }).map(name => {\n      let type;\n      if (typeof obj[name] === 'function') {\n        type = 'function';\n      } else if (name === name.toUpperCase()) {\n        type = 'constant';\n      } else {\n        type = 'variable';\n      }\n      return {\n        name,\n        type\n      };\n    });\n    misusedAtTopLevelCode = [].concat(getSymbols(fn),\n    // At present, p5 only adds its constants to fn during\n    // construction, which may not have happened at the time a\n    // ReferenceError is thrown, so we'll manually add them to our list.\n    getSymbols(constants));\n\n    // This will ultimately ensure that we report the most specific error\n    // possible to the user, e.g. advising them about HALF_PI instead of PI\n    // when their code misuses the former.\n    misusedAtTopLevelCode.sort((a, b) => b.name.length - a.name.length);\n  };\n\n  /**\n   * Detects browser level error event for p5 constants/functions used outside\n   * of setup() and draw().\n   *\n   * Generates and prints a friendly error message using key:\n   * \"fes.misusedTopLevel\".\n   *\n   * @method helpForMisusedAtTopLevelCode\n   * @private\n   * @param {Event} e       Error event\n   * @param {Boolean} log   false\n   *\n   * @returns {Boolean} true\n   */\n  const helpForMisusedAtTopLevelCode = (e, log) => {\n    if (!log) {\n      log = console.log.bind(console);\n    }\n    if (!misusedAtTopLevelCode) {\n      defineMisusedAtTopLevelCode();\n    }\n\n    // If we find that we're logging lots of false positives, we can\n    // uncomment the following code to avoid displaying anything if the\n    // user's code isn't likely to be using p5's global mode. (Note that\n    // setup/draw are more likely to be defined due to JS function hoisting.)\n    //\n    //if (!('setup' in window || 'draw' in window)) {\n    //  return;\n    //}\n\n    misusedAtTopLevelCode.some(symbol => {\n      // Note that while just checking for the occurrence of the\n      // symbol name in the error message could result in false positives,\n      // a more rigorous test is difficult because different browsers\n      // log different messages, and the format of those messages may\n      // change over time.\n      //\n      // For example, if the user uses 'PI' in their code, it may result\n      // in any one of the following messages:\n      //\n      //   * 'PI' is undefined                           (Microsoft Edge)\n      //   * ReferenceError: PI is undefined             (Firefox)\n      //   * Uncaught ReferenceError: PI is not defined  (Chrome)\n\n      if (e.message && e.message.match(`\\\\W?${symbol.name}\\\\W`) !== null) {\n        const symbolName = symbol.type === 'function' ? `${symbol.name}()` : symbol.name;\n        if (typeof IS_MINIFIED !== 'undefined') {\n          log(`Did you just try to use p5.js's ${symbolName} ${symbol.type}? If so, you may want to move it into your sketch's setup() function.\\n\\nFor more details, see: ${FAQ_URL}`);\n        } else {\n          log(translator('fes.misusedTopLevel', {\n            symbolName,\n            symbolType: symbol.type,\n            url: FAQ_URL\n          }));\n        }\n        return true;\n      }\n    });\n  };\n\n  // Exposing this primarily for unit testing.\n  fn._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;\n  if (document.readyState !== 'complete') {\n    window.addEventListener('error', helpForMisusedAtTopLevelCode, false);\n\n    // Our job is only to catch ReferenceErrors that are thrown when\n    // global (non-instance mode) p5 APIs are used at the top-level\n    // scope of a file, so we'll unbind our error listener now to make\n    // sure we don't log false positives later.\n    window.addEventListener('load', () => {\n      window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);\n    });\n  }\n}\nif (typeof p5 !== 'undefined') {\n  fesCore(p5, p5.prototype);\n}\nexport { fesCore as default };","map":{"version":3,"names":["translator","strings","v","constants","fesCore","p5","fn","typeColors","misusedAtTopLevelCode","defineMisusedAtTopLevelCode","EDIT_DIST_THRESHOLD","FESError","Error","IS_MINIFIED","_friendlyError","_checkForUserDefinedFunctions","_fesErrorMonitor","class2type","toString","names","n","length","toLowerCase","getType","obj","call","entryPoints","mapToReference","message","func","msgWithReference","substring","methodParts","split","referenceSection","funcName","slice","join","startsWith","_report","color","log","_fesLogger","console","bind","prefixedMsg","_error","context","hitCriticalError","_friendlyAutoplayError","src","url","computeEditDistance","w1","w2","l1","l2","prev","cur","j","i","a1","a2","temp","cost","isPreloadSupported","checkForUserDefinedFunctions","disableFriendlyErrors","instanceMode","window","fnNames","preload","fxns","forEach","symbol","prop","Object","keys","lowercase","hasOwnProperty","msg","name","actualName","handleMisspelling","errSym","error","distanceMap","min","dist","push","Math","matchedSymbols","filter","parsed","_getErrorStackParser","parse","locationObj","fileName","lineNumber","columnNumber","location","file","line","type","count","suggestions","map","undefined","printFriendlyStack","friendlyStack","stacktraceMsg","frame","idx","frameMsg","translationObj","functionName","processStack","stacktrace","isInternal","p5FileName","currentEntryPoint","testError","testStacktrace","splitted","includes","index","frameIndex","_fesLogCache","_preloadMethods","fesErrorMonitor","e","reason","ErrorEvent","PromiseRejectionEvent","errList","matchedError","string","replace","RegExp","matched","match","assign","splitSym","addEventListener","FAQ_URL","uniqueNamesFound","getSymbols","getOwnPropertyNames","toUpperCase","concat","sort","a","b","helpForMisusedAtTopLevelCode","some","symbolName","symbolType","_helpForMisusedAtTopLevelCode","document","readyState","removeEventListener","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/core/friendly_errors/fes_core.js"],"sourcesContent":["import { translator } from '../internationalization.js';\nimport strings from './browser_errors.js';\nimport { v as constants } from '../../constants-BRcElHU3.js';\nimport 'i18next';\nimport 'i18next-browser-languagedetector';\n\n/**\n * @for p5\n * @requires core\n *\n * This is the main file for the Friendly Error System (FES), containing\n * the core as well as miscellaneous functionality of the FES. Here is a\n * brief outline of the functions called in this system.\n *\n * The FES may be invoked by a call to either\n * (1) _validateParameters, (2) _friendlyFileLoadError, (3) _friendlyError,\n * (4) helpForMisusedAtTopLevelCode, or (5) _fesErrorMonitor.\n *\n * _validateParameters is located in validate_params.js along with other code\n * used for parameter validation.\n * _friendlyFileLoadError is located in file_errors.js along with other code\n * used for dealing with file load errors.\n * Apart from this, there's also a file stacktrace.js, which contains the code\n * to parse the error stack, borrowed from:\n * https://github.com/stacktracejs/stacktrace.js\n *\n * For more detailed information on the FES functions, including the call\n * sequence of each function, please look at the FES Reference + Dev Notes:\n * https://github.com/processing/p5.js/blob/main/contributor_docs/fes_reference_dev_notes.md\n */\n\nfunction fesCore(p5, fn){\n  // p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta\n  // See testColors below for all the color codes and names\n  const typeColors = ['#2D7BB6', '#EE9900', '#4DB200', '#C83C00'];\n  let misusedAtTopLevelCode = null;\n  let defineMisusedAtTopLevelCode = null;\n\n  // the threshold for the maximum allowed levenshtein distance\n  // used in misspelling detection\n  const EDIT_DIST_THRESHOLD = 2;\n\n  // Used for internally thrown errors that should not get wrapped by another\n  // friendly error handler\n  class FESError extends Error {}\n  if (typeof IS_MINIFIED !== 'undefined') {\n    p5._friendlyError =\n      p5._checkForUserDefinedFunctions =\n      p5._fesErrorMonitor =\n      () => {};\n  } else {\n\n    // const errorTable = require('./browser_errors').default;\n\n    // -- Borrowed from jQuery 1.11.3 --\n    const class2type = {};\n    const toString = class2type.toString;\n    const names = [\n      'Boolean',\n      'Number',\n      'String',\n      'Function',\n      'Array',\n      'Date',\n      'RegExp',\n      'Object',\n      'Error'\n    ];\n    for (let n = 0; n < names.length; n++) {\n      class2type[`[object ${names[n]}]`] = names[n].toLowerCase();\n    }\n    const getType = obj => {\n      if (obj == null) {\n        return `${obj}`;\n      }\n      return typeof obj === 'object' || typeof obj === 'function'\n        ? class2type[toString.call(obj)] || 'object'\n        : typeof obj;\n    };\n\n    // -- End borrow --\n\n    // entry points into user-defined code\n    const entryPoints = [\n      'setup',\n      'draw',\n      'deviceMoved',\n      'deviceTurned',\n      'deviceShaken',\n      'doubleClicked',\n      'mousePressed',\n      'mouseReleased',\n      'mouseMoved',\n      'mouseDragged',\n      'mouseClicked',\n      'mouseWheel',\n      'touchStarted',\n      'touchMoved',\n      'touchEnded',\n      'keyPressed',\n      'keyReleased',\n      'keyTyped',\n      'windowResized'\n    ];\n\n    /**\n     * Takes a message and a p5 function func, and adds a link pointing to\n     * the reference documentation of func at the end of the message\n     *\n     * @method mapToReference\n     * @private\n     * @param {String}  message   the words to be said\n     * @param {String}  [func]    the name of function\n     *\n     * @returns {String}\n     */\n    const mapToReference = (message, func) => {\n      let msgWithReference = '';\n      if (func == null || func.substring(0, 4) === 'load') {\n        msgWithReference = message;\n      } else {\n        const methodParts = func.split('.');\n        const referenceSection =\n          methodParts.length > 1 ? `${methodParts[0]}.${methodParts[1]}` : 'p5';\n\n        const funcName =\n          methodParts.length === 1 ? func : methodParts.slice(2).join('/');\n\n        //Whenever func having p5.[Class] is encountered, we need to have the error link as mentioned below else different link\n        funcName.startsWith('p5.')  ?\n          msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}.${funcName})` :\n          msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}/${funcName})`;\n      }\n      return msgWithReference;\n    };\n\n    /**\n     * Prints out a fancy, colorful message to the console log\n     * Attaches Friendly Errors prefix [fes.pre] to the message.\n     *\n     * @method _report\n     * @private\n     * @param  {String}          message  Message to be printed\n     * @param  {String}          [func]   Name of function\n     * @param  {Number|String}   [color]  CSS color code\n     *\n     * @return console logs\n     */\n    p5._report = (message, func, color) => {\n      // if p5._fesLogger is set ( i.e we are running tests ), use that\n      // instead of console.log\n      const log =\n        p5._fesLogger == null ? console.log.bind(console) : p5._fesLogger;\n      if ('undefined' === getType(color)) {\n        color = '#B40033'; // dark magenta\n      } else if (getType(color) === 'number') {\n        // Type to color\n        color = typeColors[color];\n      }\n\n      // Add a link to the reference docs of func at the end of the message\n      message = mapToReference(message, func);\n      const prefixedMsg = translator('fes.pre', { message });\n\n      {\n        log(prefixedMsg);\n      }\n    };\n\n    /**\n     * Throws an error with helpful p5 context. Similar to _report, but\n     * this will stop other code execution to prevent downstream errors\n     * from being logged.\n     *\n     * @method _error\n     * @private\n     * @param                    context  p5 instance the error is from\n     * @param  {String}          message  Message to be printed\n     * @param  {String}          [func]   Name of function\n     */\n    p5._error = (context, message, func) => {\n      p5._report(message, func);\n      context.hitCriticalError = true;\n      // Throw an error to stop the current function (e.g. setup or draw) from\n      // running more code\n      throw new FESError('Stopping sketch to prevent more errors');\n    };\n\n    /**\n     * This is a generic method that can be called from anywhere in the p5\n     * library to alert users to a common error.\n     *\n     * @method _friendlyError\n     * @private\n     * @param  {String}         message   Message to be printed\n     * @param  {String}         [func]    Name of the function linked to error\n     * @param  {Number|String}  [color]   CSS color code\n     */\n    p5._friendlyError = function(message, func, color) {\n      p5._report(message, func, color);\n    };\n\n    /**\n     * This is called internally if there is an error with autoplay. Generates\n     * and prints a friendly error message [fes.autoplay].\n     *\n     * @method _friendlyAutoplayError\n     * @private\n     */\n    p5._friendlyAutoplayError = function(src) {\n      const message = translator('fes.autoplay', {\n        src,\n        url: 'https://developer.mozilla.org/docs/Web/Media/Autoplay_guide'\n      });\n      console.log(translator('fes.pre', { message }));\n    };\n\n    /**\n     * Measures dissimilarity between two strings by calculating\n     * the Levenshtein distance.\n     *\n     * If the \"distance\" between them is small enough, it is\n     * reasonable to think that one is the misspelled version of the other.\n     *\n     * Specifically, this uses the Wagner–Fischer algorithm.\n     * @method computeEditDistance\n     * @private\n     * @param {String} w1 the first word\n     * @param {String} w2 the second word\n     *\n     * @returns {Number} the \"distance\" between the two words, a smaller value\n     *                   indicates that the words are similar\n     */\n    const computeEditDistance = (w1, w2) => {\n      const l1 = w1.length,\n        l2 = w2.length;\n      if (l1 === 0) return w2;\n      if (l2 === 0) return w1;\n\n      let prev = [];\n      let cur = [];\n\n      for (let j = 0; j < l2 + 1; j++) {\n        cur[j] = j;\n      }\n\n      prev = cur;\n\n      for (let i = 1; i < l1 + 1; i++) {\n        cur = [];\n        for (let j = 0; j < l2 + 1; j++) {\n          if (j === 0) {\n            cur[j] = i;\n          } else {\n            let a1 = w1[i - 1],\n              a2 = w2[j - 1];\n            let temp = 999999;\n            let cost = a1.toLowerCase() === a2.toLowerCase() ? 0 : 1;\n            temp = temp > cost + prev[j - 1] ? cost + prev[j - 1] : temp;\n            temp = temp > 1 + cur[j - 1] ? 1 + cur[j - 1] : temp;\n            temp = temp > 1 + prev[j] ? 1 + prev[j] : temp;\n            cur[j] = temp;\n          }\n        }\n        prev = cur;\n      }\n\n      return cur[l2];\n    };\n\n    /**\n     * Whether or not p5.js is running in an environment where `preload` will be\n     * run before `setup`.\n     *\n     * This will return false for default builds >= 2.0, but backwards compatibility\n     * addons may set this to true.\n     *\n     * @private\n     */\n    p5.isPreloadSupported = function() {\n      return false;\n    };\n\n    /**\n     * Checks capitalization for user defined functions.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.checkUserDefinedFns\".\n     *\n     * @method checkForUserDefinedFunctions\n     * @private\n     * @param {*} context   Current default context. Set to window in\n     *                      \"global mode\" and to a p5 instance in \"instance mode\"\n     */\n    const checkForUserDefinedFunctions = context => {\n      if (p5.disableFriendlyErrors) return;\n\n      // if using instance mode, this function would be called with the current\n      // instance as context\n      const instanceMode = context instanceof p5;\n      context = instanceMode ? context : window;\n      const fnNames = entryPoints;\n\n      if (context.preload && !p5.isPreloadSupported()) {\n        p5._error(context, translator('fes.preloadDisabled'));\n      }\n\n      const fxns = {};\n      // lowercasename -> actualName mapping\n      fnNames.forEach(symbol => {\n        fxns[symbol.toLowerCase()] = symbol;\n      });\n\n      for (const prop of Object.keys(context)) {\n        const lowercase = prop.toLowerCase();\n\n        // check if the lowercase property name has an entry in fxns, if the\n        // actual name with correct capitalization doesnt exist in context,\n        // and if the user-defined symbol is of the type function\n        if (\n          fxns.hasOwnProperty(lowercase) &&\n          !context[fxns[lowercase]] &&\n          typeof context[prop] === 'function'\n        ) {\n          const msg = translator('fes.checkUserDefinedFns', {\n            name: prop,\n            actualName: fxns[lowercase]\n          });\n\n          p5._friendlyError(msg, fxns[lowercase]);\n        }\n      }\n    };\n\n    /**\n     * Compares the symbol caught in the ReferenceError to everything in\n     * misusedAtTopLevel ( all public p5 properties ).\n     *\n     * Generates and prints a friendly error message using key: \"fes.misspelling\".\n     *\n     * @method handleMisspelling\n     * @private\n     * @param {String} errSym   Symbol to whose spelling to check\n     * @param {Error} error     ReferenceError object\n     *\n     * @returns {Boolean} tell whether error was likely due to typo\n     */\n    const handleMisspelling = (errSym, error) => {\n      if (!misusedAtTopLevelCode) {\n        defineMisusedAtTopLevelCode();\n      }\n\n      const distanceMap = {};\n      let min = 999999;\n      // compute the levenshtein distance for the symbol against all known\n      // public p5 properties. Find the property with the minimum distance\n      misusedAtTopLevelCode.forEach(symbol => {\n        let dist = computeEditDistance(errSym, symbol.name);\n        if (distanceMap[dist]) distanceMap[dist].push(symbol);\n        else distanceMap[dist] = [symbol];\n\n        if (dist < min) min = dist;\n      });\n\n      // if the closest match has more \"distance\" than the max allowed threshold\n      if (min > Math.min(EDIT_DIST_THRESHOLD, errSym.length)) return false;\n\n      // Show a message only if the caught symbol and the matched property name\n      // differ in their name ( either letter difference or difference of case )\n      const matchedSymbols = distanceMap[min].filter(\n        symbol => symbol.name !== errSym\n      );\n      if (matchedSymbols.length !== 0) {\n        const parsed = p5._getErrorStackParser().parse(error);\n        let locationObj;\n        if (\n          parsed &&\n          parsed[0] &&\n          parsed[0].fileName &&\n          parsed[0].lineNumber &&\n          parsed[0].columnNumber\n        ) {\n          locationObj = {\n            location: `${parsed[0].fileName}:${parsed[0].lineNumber}:${\n              parsed[0].columnNumber\n            }`,\n            file: parsed[0].fileName.split('/').slice(-1),\n            line: parsed[0].lineNumber\n          };\n        }\n\n        let msg;\n        if (matchedSymbols.length === 1) {\n          // To be used when there is only one closest match. The count parameter\n          // allows i18n to pick between the keys \"fes.misspelling\" and\n          // \"fes.misspelling_plural\"\n          msg = translator('fes.misspelling', {\n            name: errSym,\n            actualName: matchedSymbols[0].name,\n            type: matchedSymbols[0].type,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            count: matchedSymbols.length\n          });\n        } else {\n          // To be used when there are multiple closest matches. Gives each\n          // suggestion on its own line, the function name followed by a link to\n          // reference documentation\n          const suggestions = matchedSymbols\n            .map(symbol => {\n              const message =\n                '▶️ ' + symbol.name + (symbol.type === 'function' ? '()' : '');\n              return mapToReference(message, symbol.name);\n            })\n            .join('\\n');\n\n          msg = translator('fes.misspelling', {\n            name: errSym,\n            suggestions,\n            location: locationObj ? translator('fes.location', locationObj) : '',\n            count: matchedSymbols.length\n          });\n        }\n\n        // If there is only one closest match, tell _friendlyError to also add\n        // a link to the reference documentation. In case of multiple matches,\n        // this is already done in the suggestions variable, one link for each\n        // suggestion.\n        p5._friendlyError(\n          msg,\n          matchedSymbols.length === 1 ? matchedSymbols[0].name : undefined\n        );\n        return true;\n      }\n      return false;\n    };\n\n    /**\n     * Prints a friendly stacktrace for user-written functions for \"global\" errors\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.globalErrors.stackTop\", \"fes.globalErrors.stackSubseq\".\n     *\n     * @method printFriendlyStack\n     * @private\n     * @param {Array} friendlyStack\n     */\n    const printFriendlyStack = friendlyStack => {\n      const log =\n        p5._fesLogger && typeof p5._fesLogger === 'function'\n          ? p5._fesLogger\n          : console.log.bind(console);\n      if (friendlyStack.length > 1) {\n        let stacktraceMsg = '';\n        friendlyStack.forEach((frame, idx) => {\n          const location = `${frame.fileName}:${frame.lineNumber}:${\n            frame.columnNumber\n          }`;\n          let frameMsg,\n            translationObj = {\n              func: frame.functionName,\n              line: frame.lineNumber,\n              location,\n              file: frame.fileName.split('/').slice(-1)\n            };\n          if (idx === 0) {\n            frameMsg = translator('fes.globalErrors.stackTop', translationObj);\n          } else {\n            frameMsg = translator('fes.globalErrors.stackSubseq', translationObj);\n          }\n          stacktraceMsg += frameMsg;\n        });\n        log(stacktraceMsg);\n      }\n    };\n\n    /**\n     * Takes a stacktrace array and filters out all frames that show internal p5\n     * details.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.wrongPreload\", \"fes.libraryError\".\n     *\n     * The processed stack is used to find whether the error happened internally\n     * within the library, and if the error was due to a non-loadX() method\n     * being used in preload.\n     *\n     * \"Internally\" here means that the exact location of the error (the top of\n     * the stack) is a piece of code written in the p5.js library (which may or\n     * may not have been called from the user's sketch).\n     *\n     * @method processStack\n     * @private\n     * @param {Error} error\n     * @param {Array} stacktrace\n     *\n     * @returns {Array} An array with two elements, [isInternal, friendlyStack]\n     *                 isInternal: a boolean value indicating whether the error\n     *                             happened internally\n     *                 friendlyStack: the filtered (simplified) stacktrace\n     */\n    const processStack = (error, stacktrace) => {\n      // cannot process a stacktrace that doesn't exist\n      if (!stacktrace) return [false, null];\n\n      stacktrace.forEach(frame => {\n        frame.functionName = frame.functionName || '';\n      });\n\n      // isInternal - Did this error happen inside the library\n      let isInternal = false;\n      let p5FileName, friendlyStack, currentEntryPoint;\n\n      // Intentionally throw an error that we catch so that we can check the name\n      // of the current file. Any errors we see from this file, we treat as\n      // internal errors.\n      try {\n        throw new Error();\n      } catch (testError) {\n        const testStacktrace = p5._getErrorStackParser().parse(testError);\n        p5FileName = testStacktrace[0].fileName;\n      }\n\n      for (let i = stacktrace.length - 1; i >= 0; i--) {\n        let splitted = stacktrace[i].functionName.split('.');\n        if (entryPoints.includes(splitted[splitted.length - 1])) {\n          // remove everything below an entry point function (setup, draw, etc).\n          // (it's usually the internal initialization calls)\n          friendlyStack = stacktrace.slice(0, i + 1);\n          currentEntryPoint = splitted[splitted.length - 1];\n          // We call the error \"internal\" if the source of the error was a\n          // function from within the p5.js library file, but called from the\n          // user's code directly. We only need to check the topmost frame in\n          // the stack trace since any function internal to p5 should pass this\n          // check, not just public p5 functions.\n          if (stacktrace[0].fileName === p5FileName) {\n            isInternal = true;\n            break;\n          }\n          break;\n        }\n      }\n\n      // in some cases ( errors in promises, callbacks, etc), no entry-point\n      // function may be found in the stacktrace. In that case just use the\n      // entire stacktrace for friendlyStack\n      if (!friendlyStack) friendlyStack = stacktrace;\n\n      if (isInternal) {\n        // the frameIndex property is added before the filter, so frameIndex\n        // corresponds to the index of a frame in the original stacktrace.\n        // Then we filter out all frames which belong to the file that contains\n        // the p5 library\n        friendlyStack = friendlyStack\n          .map((frame, index) => {\n            frame.frameIndex = index;\n            return frame;\n          })\n          .filter(frame => frame.fileName !== p5FileName);\n\n        // a weird case, if for some reason we can't identify the function called\n        // from user's code\n        if (friendlyStack.length === 0) return [true, null];\n\n        // get the function just above the topmost frame in the friendlyStack.\n        // i.e the name of the library function called from user's code\n        const func = stacktrace[friendlyStack[0].frameIndex - 2].functionName\n          .split('.')\n          .slice(-1)[0];\n\n        // Try and get the location (line no.) from the top element of the stack\n        let locationObj;\n        if (\n          friendlyStack[0].fileName &&\n          friendlyStack[0].lineNumber &&\n          friendlyStack[0].columnNumber\n        ) {\n          locationObj = {\n            location: `${friendlyStack[0].fileName}:${\n              friendlyStack[0].lineNumber\n            }:${friendlyStack[0].columnNumber}`,\n            file: friendlyStack[0].fileName.split('/').slice(-1),\n            line: friendlyStack[0].lineNumber\n          };\n\n          // if already handled by another part of the FES, don't handle again\n          if (p5._fesLogCache[locationObj.location]) return [true, null];\n        }\n\n        // Check if the error is due to a non loadX method being used incorrectly\n        // in preload\n        if (\n          currentEntryPoint === 'preload' &&\n          fn._preloadMethods[func] == null\n        ) {\n          p5._friendlyError(\n            translator('fes.wrongPreload', {\n              func,\n              location: locationObj\n                ? translator('fes.location', locationObj)\n                : '',\n              error: error.message\n            }),\n            'preload'\n          );\n        } else {\n          // Library error\n          p5._friendlyError(\n            translator('fes.libraryError', {\n              func,\n              location: locationObj\n                ? translator('fes.location', locationObj)\n                : '',\n              error: error.message\n            }),\n            func\n          );\n        }\n\n        // Finally, if it's an internal error, print the friendlyStack\n        // ( fesErrorMonitor won't handle this error )\n        if (friendlyStack && friendlyStack.length) {\n          printFriendlyStack(friendlyStack);\n        }\n      }\n      return [isInternal, friendlyStack];\n    };\n\n    /**\n     * Handles \"global\" errors that the browser catches.\n     *\n     * Called when an error event happens and detects the type of error.\n     *\n     * Generates and prints a friendly error message using key:\n     * \"fes.globalErrors.syntax.[*]\", \"fes.globalErrors.reference.[*]\",\n     * \"fes.globalErrors.type.[*]\".\n     *\n     * @method fesErrorMonitor\n     * @private\n     * @param {*} e  Event object to extract error details from\n     */\n    const fesErrorMonitor = e => {\n      if (p5.disableFriendlyErrors) return;\n\n      // Don't try to handle an error intentionally emitted by FES to halt execution\n      if (e && (e instanceof FESError || e.reason instanceof FESError)) return;\n\n      // Try to get the error object from e\n      let error;\n      if (e instanceof Error) {\n        error = e;\n      } else if (e instanceof ErrorEvent) {\n        error = e.error;\n      } else if (e instanceof PromiseRejectionEvent) {\n        error = e.reason;\n        if (!(error instanceof Error)) return;\n      }\n      if (!error) return;\n\n      let stacktrace = p5._getErrorStackParser().parse(error);\n      // process the stacktrace from the browser and simplify it to give\n      // friendlyStack.\n      let [isInternal, friendlyStack] = processStack(error, stacktrace);\n\n      // if this is an internal library error, the type of the error is not relevant,\n      // only the user code that lead to it is.\n      if (isInternal) {\n        return;\n      }\n\n      const errList = strings[error.name];\n      if (!errList) return; // this type of error can't be handled yet\n      let matchedError;\n      for (const obj of errList) {\n        let string = obj.msg;\n        // capture the primary symbol mentioned in the error\n        string = string.replace(new RegExp('{{}}', 'g'), '([a-zA-Z0-9_]+)');\n        string = string.replace(new RegExp('{{.}}', 'g'), '(.+)');\n        string = string.replace(new RegExp('{}', 'g'), '(?:[a-zA-Z0-9_]+)');\n        let matched = error.message.match(string);\n\n        if (matched) {\n          matchedError = Object.assign({}, obj);\n          matchedError.match = matched;\n          break;\n        }\n      }\n\n      if (!matchedError) return;\n\n      // Try and get the location from the top element of the stack\n      let locationObj;\n      if (\n        stacktrace &&\n        stacktrace[0].fileName &&\n        stacktrace[0].lineNumber &&\n        stacktrace[0].columnNumber\n      ) {\n        locationObj = {\n          location: `${stacktrace[0].fileName}:${stacktrace[0].lineNumber}:${\n            stacktrace[0].columnNumber\n          }`,\n          file: stacktrace[0].fileName.split('/').slice(-1),\n          line: friendlyStack[0].lineNumber\n        };\n      }\n\n      switch (error.name) {\n        case 'SyntaxError': {\n          // We can't really do much with syntax errors other than try to use\n          // a simpler framing of the error message. The stack isn't available\n          // for syntax errors\n          switch (matchedError.type) {\n            case 'INVALIDTOKEN': {\n              //Error if there is an invalid or unexpected token that doesn't belong at this position in the code\n              //let x = “not a string”; -> string not in proper quotes\n              let url =\n                'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Illegal_character#What_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.syntax.invalidToken', {\n                  url\n                })\n              );\n              break;\n            }\n            case 'UNEXPECTEDTOKEN': {\n              //Error if a specific language construct(, { ; etc) was expected, but something else was provided\n              //for (let i = 0; i < 5,; ++i) -> a comma after i<5 instead of a semicolon\n              let url =\n                'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Unexpected_token#What_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.syntax.unexpectedToken', {\n                  url\n                })\n              );\n              break;\n            }\n            case 'REDECLAREDVARIABLE': {\n              //Error if a variable is redeclared by the user. Example=>\n              //let a = 10;\n              //let a = 100;\n              let errSym = matchedError.match[1];\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.syntax.redeclaredVariable', {\n                  symbol: errSym,\n                  url\n                })\n              );\n              break;\n            }\n            case 'MISSINGINITIALIZER': {\n              //Error if a const variable is not initialized during declaration\n              //Example => const a;\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.syntax.missingInitializer', {\n                  url\n                })\n              );\n              break;\n            }\n            case 'BADRETURNORYIELD': {\n              //Error when a return statement is misplaced(usually outside of a function)\n              // const a = function(){\n              //  .....\n              //  }\n              //  return; -> misplaced return statement\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.syntax.badReturnOrYield', {\n                  url\n                })\n              );\n              break;\n            }\n          }\n          break;\n        }\n        case 'ReferenceError': {\n          switch (matchedError.type) {\n            case 'NOTDEFINED': {\n              //Error if there is a non-existent variable referenced somewhere\n              //let a = 10;\n              //console.log(x);\n              let errSym = matchedError.match[1];\n\n              if (errSym && handleMisspelling(errSym, error)) {\n                break;\n              }\n\n              // if the flow gets this far, this is likely not a misspelling\n              // of a p5 property/function\n              let url = 'https://p5js.org/examples/data-variable-scope.html';\n              p5._friendlyError(\n                translator('fes.globalErrors.reference.notDefined', {\n                  url,\n                  symbol: errSym,\n                  location: locationObj\n                    ? translator('fes.location', locationObj)\n                    : ''\n                })\n              );\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n            case 'CANNOTACCESS': {\n              //Error if a lexical variable was accessed before it was initialized\n              //console.log(a); -> variable accessed before it was initialized\n              //let a=100;\n              let errSym = matchedError.match[1];\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.reference.cannotAccess', {\n                  url,\n                  symbol: errSym,\n                  location: locationObj\n                    ? translator('fes.location', locationObj)\n                    : ''\n                })\n              );\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n          }\n          break;\n        }\n\n        case 'TypeError': {\n          switch (matchedError.type) {\n            case 'NOTFUNC': {\n              //Error when some code expects you to provide a function, but that didn't happen\n              //let a = document.getElementByID('foo'); -> getElementById instead of getElementByID\n              let errSym = matchedError.match[1];\n              let splitSym = errSym.split('.');\n              let url =\n                'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_a_function#What_went_wrong';\n\n              // if errSym is aa.bb.cc , symbol would be cc and obj would aa.bb\n              let translationObj = {\n                url,\n                symbol: splitSym[splitSym.length - 1],\n                obj: splitSym.slice(0, splitSym.length - 1).join('.'),\n                location: locationObj\n                  ? translator('fes.location', locationObj)\n                  : ''\n              };\n\n              // There are two cases to handle here. When the function is called\n              // as a property of an object and when it's called independently.\n              // Both have different explanations.\n              if (splitSym.length > 1) {\n                p5._friendlyError(\n                  translator('fes.globalErrors.type.notfuncObj', translationObj)\n                );\n              } else {\n                p5._friendlyError(\n                  translator('fes.globalErrors.type.notfunc', translationObj)\n                );\n              }\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n            case 'READNULL': {\n              //Error if a property of null is accessed\n              //let a = null;\n              //console.log(a.property); -> a is null\n              let errSym = matchedError.match[1];\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';\n              /*let url2 =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null';*/\n              p5._friendlyError(\n                translator('fes.globalErrors.type.readFromNull', {\n                  url,\n                  symbol: errSym,\n                  location: locationObj\n                    ? translator('fes.location', locationObj)\n                    : ''\n                })\n              );\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n            case 'READUDEFINED': {\n              //Error if a property of undefined is accessed\n              //let a; -> default value of a is undefined\n              //console.log(a.property); -> a is undefined\n              let errSym = matchedError.match[1];\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';\n              /*let url2 =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined#description';*/\n              p5._friendlyError(\n                translator('fes.globalErrors.type.readFromUndefined', {\n                  url,\n                  symbol: errSym,\n                  location: locationObj\n                    ? translator('fes.location', locationObj)\n                    : ''\n                })\n              );\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n            case 'CONSTASSIGN': {\n              //Error when a const variable is reassigned a value\n              //const a = 100;\n              //a=10;\n              let url =\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong';\n              p5._friendlyError(\n                translator('fes.globalErrors.type.constAssign', {\n                  url,\n                  location: locationObj\n                    ? translator('fes.location', locationObj)\n                    : ''\n                })\n              );\n\n              if (friendlyStack) printFriendlyStack(friendlyStack);\n              break;\n            }\n          }\n        }\n      }\n    };\n\n    p5._fesErrorMonitor = fesErrorMonitor;\n    p5._checkForUserDefinedFunctions = checkForUserDefinedFunctions;\n\n    // logger for testing purposes.\n    p5._fesLogger = null;\n    p5._fesLogCache = {};\n\n    window.addEventListener('load', checkForUserDefinedFunctions, false);\n    window.addEventListener('error', p5._fesErrorMonitor, false);\n    window.addEventListener('unhandledrejection', p5._fesErrorMonitor, false);\n\n    /**\n     * Prints out all the colors in the color pallete with white text.\n     * For color blindness testing.\n     */\n    /* function testColors() {\n      const str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';\n      p5._friendlyError(str, 'print', '#ED225D'); // p5.js magenta\n      p5._friendlyError(str, 'print', '#2D7BB6'); // p5.js blue\n      p5._friendlyError(str, 'print', '#EE9900'); // p5.js orange\n      p5._friendlyError(str, 'print', '#A67F59'); // p5.js light brown\n      p5._friendlyError(str, 'print', '#704F21'); // p5.js gold\n      p5._friendlyError(str, 'print', '#1CC581'); // auto cyan\n      p5._friendlyError(str, 'print', '#FF6625'); // auto orange\n      p5._friendlyError(str, 'print', '#79EB22'); // auto green\n      p5._friendlyError(str, 'print', '#B40033'); // p5.js darkened magenta\n      p5._friendlyError(str, 'print', '#084B7F'); // p5.js darkened blue\n      p5._friendlyError(str, 'print', '#945F00'); // p5.js darkened orange\n      p5._friendlyError(str, 'print', '#6B441D'); // p5.js darkened brown\n      p5._friendlyError(str, 'print', '#2E1B00'); // p5.js darkened gold\n      p5._friendlyError(str, 'print', '#008851'); // auto dark cyan\n      p5._friendlyError(str, 'print', '#C83C00'); // auto dark orange\n      p5._friendlyError(str, 'print', '#4DB200'); // auto dark green\n    } */\n  }\n\n  // This is a lazily-defined list of p5 symbols that may be\n  // misused by beginners at top-level code, outside of setup/draw. We'd like\n  // to detect these errors and help the user by suggesting they move them\n  // into setup/draw.\n  //\n  // For more details, see https://github.com/processing/p5.js/issues/1121.\n  misusedAtTopLevelCode = null;\n  const FAQ_URL =\n    'https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup';\n\n  /**\n   * A helper function for populating misusedAtTopLevel list.\n   *\n   * @method defineMisusedAtTopLevelCode\n   * @private\n   */\n  defineMisusedAtTopLevelCode = () => {\n    const uniqueNamesFound = {};\n\n    const getSymbols = obj =>\n      Object.getOwnPropertyNames(obj)\n        .filter(name => {\n          if (name[0] === '_') {\n            return false;\n          }\n          if (name in uniqueNamesFound) {\n            return false;\n          }\n\n          uniqueNamesFound[name] = true;\n\n          return true;\n        })\n        .map(name => {\n          let type;\n\n          if (typeof obj[name] === 'function') {\n            type = 'function';\n          } else if (name === name.toUpperCase()) {\n            type = 'constant';\n          } else {\n            type = 'variable';\n          }\n\n          return { name, type };\n        });\n\n    misusedAtTopLevelCode = [].concat(\n      getSymbols(fn),\n      // At present, p5 only adds its constants to fn during\n      // construction, which may not have happened at the time a\n      // ReferenceError is thrown, so we'll manually add them to our list.\n      getSymbols(constants)\n    );\n\n    // This will ultimately ensure that we report the most specific error\n    // possible to the user, e.g. advising them about HALF_PI instead of PI\n    // when their code misuses the former.\n    misusedAtTopLevelCode.sort((a, b) => b.name.length - a.name.length);\n  };\n\n  /**\n   * Detects browser level error event for p5 constants/functions used outside\n   * of setup() and draw().\n   *\n   * Generates and prints a friendly error message using key:\n   * \"fes.misusedTopLevel\".\n   *\n   * @method helpForMisusedAtTopLevelCode\n   * @private\n   * @param {Event} e       Error event\n   * @param {Boolean} log   false\n   *\n   * @returns {Boolean} true\n   */\n  const helpForMisusedAtTopLevelCode = (e, log) => {\n    if (!log) {\n      log = console.log.bind(console);\n    }\n\n    if (!misusedAtTopLevelCode) {\n      defineMisusedAtTopLevelCode();\n    }\n\n    // If we find that we're logging lots of false positives, we can\n    // uncomment the following code to avoid displaying anything if the\n    // user's code isn't likely to be using p5's global mode. (Note that\n    // setup/draw are more likely to be defined due to JS function hoisting.)\n    //\n    //if (!('setup' in window || 'draw' in window)) {\n    //  return;\n    //}\n\n    misusedAtTopLevelCode.some(symbol => {\n      // Note that while just checking for the occurrence of the\n      // symbol name in the error message could result in false positives,\n      // a more rigorous test is difficult because different browsers\n      // log different messages, and the format of those messages may\n      // change over time.\n      //\n      // For example, if the user uses 'PI' in their code, it may result\n      // in any one of the following messages:\n      //\n      //   * 'PI' is undefined                           (Microsoft Edge)\n      //   * ReferenceError: PI is undefined             (Firefox)\n      //   * Uncaught ReferenceError: PI is not defined  (Chrome)\n\n      if (e.message && e.message.match(`\\\\W?${symbol.name}\\\\W`) !== null) {\n        const symbolName =\n          symbol.type === 'function' ? `${symbol.name}()` : symbol.name;\n        if (typeof IS_MINIFIED !== 'undefined') {\n          log(\n            `Did you just try to use p5.js's ${symbolName} ${\n              symbol.type\n            }? If so, you may want to move it into your sketch's setup() function.\\n\\nFor more details, see: ${FAQ_URL}`\n          );\n        } else {\n          log(\n            translator('fes.misusedTopLevel', {\n              symbolName,\n              symbolType: symbol.type,\n              url: FAQ_URL\n            })\n          );\n        }\n        return true;\n      }\n    });\n  };\n\n  // Exposing this primarily for unit testing.\n  fn._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;\n\n  if (document.readyState !== 'complete') {\n    window.addEventListener('error', helpForMisusedAtTopLevelCode, false);\n\n    // Our job is only to catch ReferenceErrors that are thrown when\n    // global (non-instance mode) p5 APIs are used at the top-level\n    // scope of a file, so we'll unbind our error listener now to make\n    // sure we don't log false positives later.\n    window.addEventListener('load', () => {\n      window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);\n    });\n  }\n}\n\nif (typeof p5 !== 'undefined') {\n  fesCore(p5, p5.prototype);\n}\n\nexport { fesCore as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}