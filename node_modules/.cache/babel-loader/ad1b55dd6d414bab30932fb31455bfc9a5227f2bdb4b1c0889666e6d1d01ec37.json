{"ast":null,"code":"import RGBColorSpace from \"../rgbspace.js\";\nimport \"../CATs.js\"; // because of the funky whitepoint\nimport ACEScg from \"./acescg.js\";\nconst ε = 2 ** -16;\n\n// the smallest value which, in the 32bit IEEE 754 float encoding,\n// decodes as a non-negative value\nconst ACES_min_nonzero = -0.35828683;\n\n// brightest encoded value, decodes to 65504\nconst ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468\n\nexport default new RGBColorSpace({\n  id: \"acescc\",\n  cssId: \"--acescc\",\n  name: \"ACEScc\",\n  // see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\n  // https://docs.acescentral.com/specifications/acescc/\n  // uses the AP1 primaries, see section 4.3.1 Color primaries\n\n  // Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\n  // below 18% middle gray are encoded as negative ACEScc values.\n  // These values should be preserved per the encoding in Section 4.4\n  // so that all positive ACES values are maintained.\"\n  coords: {\n    r: {\n      range: [ACES_min_nonzero, ACES_cc_max],\n      name: \"Red\"\n    },\n    g: {\n      range: [ACES_min_nonzero, ACES_cc_max],\n      name: \"Green\"\n    },\n    b: {\n      range: [ACES_min_nonzero, ACES_cc_max],\n      name: \"Blue\"\n    }\n  },\n  referred: \"scene\",\n  base: ACEScg,\n  // from section 4.4.2 Decoding Function\n  toBase(RGB) {\n    const low = (9.72 - 15) / 17.52; // -0.3014\n\n    return RGB.map(function (val) {\n      if (val <= low) {\n        return (2 ** (val * 17.52 - 9.72) - ε) * 2; // very low values, below -0.3014\n      } else if (val < ACES_cc_max) {\n        return 2 ** (val * 17.52 - 9.72);\n      } else {\n        // val >= ACES_cc_max\n        return 65504;\n      }\n    });\n  },\n  // Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\n  fromBase(RGB) {\n    return RGB.map(function (val) {\n      if (val <= 0) {\n        return (Math.log2(ε) + 9.72) / 17.52; // -0.3584\n      } else if (val < ε) {\n        return (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\n      } else {\n        // val >= ε\n        return (Math.log2(val) + 9.72) / 17.52;\n      }\n    });\n  }\n  // encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\n  // encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\n});","map":{"version":3,"names":["RGBColorSpace","ACEScg","ε","ACES_min_nonzero","ACES_cc_max","Math","log2","id","cssId","name","coords","r","range","g","b","referred","base","toBase","RGB","low","map","val","fromBase"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/spaces/acescc.js"],"sourcesContent":["import RGBColorSpace from \"../rgbspace.js\";\nimport \"../CATs.js\"; // because of the funky whitepoint\nimport ACEScg from \"./acescg.js\";\n\nconst ε = 2 ** -16;\n\n// the smallest value which, in the 32bit IEEE 754 float encoding,\n// decodes as a non-negative value\nconst ACES_min_nonzero = -0.35828683;\n\n// brightest encoded value, decodes to 65504\nconst ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468\n\nexport default new RGBColorSpace({\n\tid: \"acescc\",\n\tcssId: \"--acescc\",\n\tname: \"ACEScc\",\n\t// see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\n\t// https://docs.acescentral.com/specifications/acescc/\n\t// uses the AP1 primaries, see section 4.3.1 Color primaries\n\n\t// Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\n\t// below 18% middle gray are encoded as negative ACEScc values.\n\t// These values should be preserved per the encoding in Section 4.4\n\t// so that all positive ACES values are maintained.\"\n\tcoords: {\n\t\tr: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Red\",\n\t\t},\n\t\tg: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Green\",\n\t\t},\n\t\tb: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Blue\",\n\t\t},\n\t},\n\treferred: \"scene\",\n\n\tbase: ACEScg,\n\t// from section 4.4.2 Decoding Function\n\ttoBase (RGB) {\n\t\tconst low = (9.72 - 15) / 17.52; // -0.3014\n\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val <= low) {\n\t\t\t\treturn (2 ** ((val * 17.52) - 9.72) - ε) * 2; // very low values, below -0.3014\n\t\t\t}\n\t\t\telse if (val < ACES_cc_max) {\n\t\t\t\treturn 2 ** ((val * 17.52) - 9.72);\n\t\t\t}\n\t\t\telse { // val >= ACES_cc_max\n\t\t\t\treturn 65504;\n\t\t\t}\n\t\t});\n\t},\n\n\t// Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\n\tfromBase (RGB) {\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val <= 0) {\n\t\t\t\treturn (Math.log2(ε) + 9.72) / 17.52; // -0.3584\n\t\t\t}\n\t\t\telse if (val < ε) {\n\t\t\t\treturn  (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\n\t\t\t}\n\t\t\telse { // val >= ε\n\t\t\t\treturn  (Math.log2(val) + 9.72) / 17.52;\n\t\t\t}\n\t\t});\n\t},\n\t// encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\n\t// encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\n});\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,gBAAgB;AAC1C,OAAO,YAAY,CAAC,CAAC;AACrB,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;AAElB;AACA;AACA,MAAMC,gBAAgB,GAAG,CAAC,UAAU;;AAEpC;AACA,MAAMC,WAAW,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC,CAAC;;AAEvD,eAAe,IAAIN,aAAa,CAAC;EAChCO,EAAE,EAAE,QAAQ;EACZC,KAAK,EAAE,UAAU;EACjBC,IAAI,EAAE,QAAQ;EACd;EACA;EACA;;EAEA;EACA;EACA;EACA;EACAC,MAAM,EAAE;IACPC,CAAC,EAAE;MACFC,KAAK,EAAE,CAACT,gBAAgB,EAAEC,WAAW,CAAC;MACtCK,IAAI,EAAE;IACP,CAAC;IACDI,CAAC,EAAE;MACFD,KAAK,EAAE,CAACT,gBAAgB,EAAEC,WAAW,CAAC;MACtCK,IAAI,EAAE;IACP,CAAC;IACDK,CAAC,EAAE;MACFF,KAAK,EAAE,CAACT,gBAAgB,EAAEC,WAAW,CAAC;MACtCK,IAAI,EAAE;IACP;EACD,CAAC;EACDM,QAAQ,EAAE,OAAO;EAEjBC,IAAI,EAAEf,MAAM;EACZ;EACAgB,MAAMA,CAAEC,GAAG,EAAE;IACZ,MAAMC,GAAG,GAAG,CAAC,IAAI,GAAG,EAAE,IAAI,KAAK,CAAC,CAAC;;IAEjC,OAAOD,GAAG,CAACE,GAAG,CAAC,UAAUC,GAAG,EAAE;MAC7B,IAAIA,GAAG,IAAIF,GAAG,EAAE;QACf,OAAO,CAAC,CAAC,KAAME,GAAG,GAAG,KAAK,GAAI,IAAI,CAAC,GAAGnB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC/C,CAAC,MACI,IAAImB,GAAG,GAAGjB,WAAW,EAAE;QAC3B,OAAO,CAAC,KAAMiB,GAAG,GAAG,KAAK,GAAI,IAAI,CAAC;MACnC,CAAC,MACI;QAAE;QACN,OAAO,KAAK;MACb;IACD,CAAC,CAAC;EACH,CAAC;EAED;EACAC,QAAQA,CAAEJ,GAAG,EAAE;IACd,OAAOA,GAAG,CAACE,GAAG,CAAC,UAAUC,GAAG,EAAE;MAC7B,IAAIA,GAAG,IAAI,CAAC,EAAE;QACb,OAAO,CAAChB,IAAI,CAACC,IAAI,CAACJ,CAAC,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC,CAAC;MACvC,CAAC,MACI,IAAImB,GAAG,GAAGnB,CAAC,EAAE;QACjB,OAAQ,CAACG,IAAI,CAACC,IAAI,CAACJ,CAAC,GAAGmB,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,IAAI,KAAK;MAClD,CAAC,MACI;QAAE;QACN,OAAQ,CAAChB,IAAI,CAACC,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,IAAI,KAAK;MACxC;IACD,CAAC,CAAC;EACH;EACA;EACA;AACD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}