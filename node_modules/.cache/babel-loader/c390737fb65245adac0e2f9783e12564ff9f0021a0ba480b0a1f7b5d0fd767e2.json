{"ast":null,"code":"/**\n * @module Constants\n * @submodule Constants\n * @for p5\n */\n\nconst _PI = Math.PI;\n\n/**\n * Version of this p5.js.\n * @property {String} VERSION\n * @final\n */\nconst VERSION = '2.0.3';\n\n// GRAPHICS RENDERER\n/**\n * The default, two-dimensional renderer in p5.js.\n *\n * Use this when calling <a href=\"#/p5/createCanvas\"> (for example,\n * `createCanvas(400, 400, P2D)`) to specify a 2D context.\n *\n * @typedef {'p2d'} P2D\n * @property {P2D} P2D\n * @final\n */\nconst P2D = 'p2d';\n\n/**\n * A high-dynamic-range (HDR) variant of the default, two-dimensional renderer.\n *\n * When available, this mode can allow for extended color ranges and more\n * dynamic color representation. Use it similarly to `P2D`:\n * `createCanvas(400, 400, P2DHDR)`.\n *\n * @typedef {'p2d-hdr'} P2DHDR\n * @property {P2DHDR} P2DHDR\n * @final\n */\n\nconst P2DHDR = 'p2d-hdr';\n\n/**\n * One of the two render modes in p5.js, used for computationally intensive tasks like 3D rendering and shaders.\n *\n * `WEBGL` differs from the default <a href=\"/reference/p5/P2D\">`P2D`</a> renderer in the following ways:\n *\n * - **Coordinate System** - When drawing in `WEBGL` mode, the origin point (0,0,0) is located at the center of the screen, not the top-left corner. See <a href=\"https://p5js.org/tutorials/coordinates-and-transformations/\">the tutorial page about coordinates and transformations</a>.\n * - **3D Shapes** - `WEBGL` mode can be used to draw 3-dimensional shapes like <a href=\"#/p5/box\">box()</a>, <a href=\"#/p5/sphere\">sphere()</a>, <a href=\"#/p5/cone\">cone()</a>, and <a href=\"https://p5js.org/reference/#3D%20Primitives\">more</a>. See <a href=\"https://p5js.org/tutorials/custom-geometry/\">the tutorial page about custom geometry</a> to make more complex objects.\n * - **Shape Detail** - When drawing in `WEBGL` mode, you can specify how smooth curves should be drawn by using a `detail` parameter. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#3d-primitives-shapes\">the wiki section about shapes</a> for a more information and an example.\n * - **Textures** - A texture is like a skin that wraps onto a shape. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#textures\">the wiki section about textures</a> for examples of mapping images onto surfaces with textures.\n * - **Materials and Lighting** - `WEBGL` offers different types of lights like <a href=\"#/p5/ambientLight\">ambientLight()</a> to place around a scene. Materials like <a href=\"#/p5/specularMaterial\">specularMaterial()</a> reflect the lighting to convey shape and depth. See <a href=\"https://p5js.org/tutorials/lights-camera-materials/\">the tutorial page for styling and appearance</a> to experiment with different combinations.\n * - **Camera** - The viewport of a `WEBGL` sketch can be adjusted by changing camera attributes. See <a href=\"https://p5js.org/tutorials/lights-camera-materials#camera-and-view\">the tutorial page section about cameras</a> for an explanation of camera controls.\n * - **Text** - `WEBGL` requires opentype/truetype font files to be preloaded using <a href=\"#/p5/loadFont\">loadFont()</a>. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text\">the wiki section about text</a> for details, along with a workaround.\n * - **Shaders** - Shaders are hardware accelerated programs that can be used for a variety of effects and graphics. See the <a href=\"https://p5js.org/tutorials/intro-to-shaders/\">introduction to shaders</a> to get started with shaders in p5.js.\n * - **Graphics Acceleration** - `WEBGL` mode uses the graphics card instead of the CPU, so it may help boost the performance of your sketch (example: drawing more shapes on the screen at once).\n *\n * To learn more about WEBGL mode, check out <a href=\"https://p5js.org/tutorials/#webgl\">all the interactive WEBGL tutorials</a> in the \"Tutorials\" section of this website, or read the wiki article <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\"Getting started with WebGL in p5\"</a>.\n *\n * @typedef {unique symbol} WEBGL\n * @property {WEBGL} WEBGL\n * @final\n */\nconst WEBGL = 'webgl';\n/**\n * One of the two possible values of a WebGL canvas (either WEBGL or WEBGL2),\n * which can be used to determine what capabilities the rendering environment\n * has.\n * @typedef {unique symbol} WEBGL2\n * @property {WEBGL2} WEBGL2\n * @final\n */\nconst WEBGL2 = 'webgl2';\n\n// ENVIRONMENT\n/**\n * @typedef {'default'} ARROW\n * @property {ARROW} ARROW\n * @final\n */\nconst ARROW = 'default';\n\n/**\n * @property {String} SIMPLE\n * @final\n */\nconst SIMPLE = 'simple';\n/**\n * @property {String} FULL\n * @final\n */\nconst FULL = 'full';\n\n/**\n * @typedef {'crosshair'} CROSS\n * @property {CROSS} CROSS\n * @final\n */\nconst CROSS = 'crosshair';\n/**\n * @typedef {'pointer'} HAND\n * @property {HAND} HAND\n * @final\n */\nconst HAND = 'pointer';\n/**\n * @typedef {'move'} MOVE\n * @property {MOVE} MOVE\n * @final\n */\nconst MOVE = 'move';\n/**\n * @typedef {'text'} TEXT\n * @property {TEXT} TEXT\n * @final\n */\nconst TEXT = 'text';\n/**\n * @typedef {'wait'} WAIT\n * @property {WAIT} WAIT\n * @final\n */\nconst WAIT = 'wait';\n\n// TRIGONOMETRY\n\n/**\n * A `Number` constant that's approximately 1.5708.\n *\n * `HALF_PI` is half the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(HALF_PI)` rotates the coordinate system `HALF_PI` radians, which is\n * a quarter turn (90˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} HALF_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to HALF_PI.\n *   arc(50, 50, 80, 80, 0, HALF_PI);\n *\n *   describe('The bottom-right quarter of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a quarter turn.\n *   rotate(HALF_PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('Two black lines on a gray background. One line extends from the center to the right. The other line extends from the center to the bottom.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The red circle appears to chase the blue circle.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + HALF_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst HALF_PI = _PI / 2;\n\n/**\n * A `Number` constant that's approximately 3.1416.\n *\n * `PI` is the mathematical constant π. It's useful for many tasks that\n * involve rotation and oscillation. For example, calling `rotate(PI)` rotates\n * the coordinate system `PI` radians, which is a half turn (180˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to PI.\n *   arc(50, 50, 80, 80, 0, PI);\n *\n *   describe('The bottom half of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a half turn.\n *   rotate(PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('A horizontal black line on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The circles drift apart, then meet in the middle, over and over again.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst PI = _PI;\n\n/**\n * A `Number` constant that's approximately 0.7854.\n *\n * `QUARTER_PI` is one-fourth the value of the mathematical constant π. It's\n * useful for many tasks that involve rotation and oscillation. For example,\n * calling `rotate(QUARTER_PI)` rotates the coordinate system `QUARTER_PI`\n * radians, which is an eighth of a turn (45˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} QUARTER_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to QUARTER_PI.\n *   arc(50, 50, 80, 80, 0, QUARTER_PI);\n *\n *   describe('A one-eighth slice of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate an eighth turn.\n *   rotate(QUARTER_PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('Two black lines that form a \"V\" opening towards the bottom-right corner of a gray square.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The red circle appears to chase the blue circle.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + QUARTER_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst QUARTER_PI = _PI / 4;\n\n/**\n * A `Number` constant that's approximately 6.2382.\n *\n * `TAU` is twice the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(TAU)` rotates the coordinate system `TAU` radians, which is one\n * full turn (360˚). `TAU` and `TWO_PI` are equal.\n *\n * Note: `TAU` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} TAU\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to TAU.\n *   arc(50, 50, 80, 80, 0, TAU);\n *\n *   describe('A white circle drawn on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a full turn.\n *   rotate(TAU);\n *\n *   // Style the second line.\n *   strokeWeight(5);\n *\n *   // Draw the same line, shorter and rotated.\n *   line(0, 0, 20, 0);\n *\n *   describe(\n *     'Two horizontal black lines on a gray background. A thick line extends from the center toward the right. A thin line extends from the end of the thick line.'\n *   );\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle with a blue center oscillates from left to right on a gray background.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + TAU);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator, smaller.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 10);\n * }\n * </code>\n * </div>\n */\nconst TAU = _PI * 2;\n\n/**\n * A `Number` constant that's approximately 6.2382.\n *\n * `TWO_PI` is twice the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(TWO_PI)` rotates the coordinate system `TWO_PI` radians, which is\n * one full turn (360˚). `TWO_PI` and `TAU` are equal.\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} TWO_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to TWO_PI.\n *   arc(50, 50, 80, 80, 0, TWO_PI);\n *\n *   describe('A white circle drawn on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a full turn.\n *   rotate(TWO_PI);\n *\n *   // Style the second line.\n *   strokeWeight(5);\n *\n *   // Draw the same line, shorter and rotated.\n *   line(0, 0, 20, 0);\n *\n *   describe(\n *     'Two horizontal black lines on a gray background. A thick line extends from the center toward the right. A thin line extends from the end of the thick line.'\n *   );\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle with a blue center oscillates from left to right on a gray background.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + TWO_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator, smaller.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 10);\n * }\n * </code>\n * </div>\n */\nconst TWO_PI = _PI * 2;\n\n/**\n * A `String` constant that's used to set the\n * <a href=\"#/p5/angleMode\">angleMode()</a>.\n *\n * By default, functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n * <a href=\"#/p5/sin\">sin()</a> expect angles measured in units of radians.\n * Calling `angleMode(DEGREES)` ensures that angles are measured in units of\n * degrees.\n *\n * Note: `TWO_PI` radians equals 360˚.\n *\n * @typedef {unique symbol} DEGREES\n * @property {DEGREES} DEGREES\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw a red arc from 0 to HALF_PI radians.\n *   fill(255, 0, 0);\n *   arc(50, 50, 80, 80, 0, HALF_PI);\n *\n *   // Use degrees.\n *   angleMode(DEGREES);\n *\n *   // Draw a blue arc from 90˚ to 180˚.\n *   fill(0, 0, 255);\n *   arc(50, 50, 80, 80, 90, 180);\n *\n *   describe('The bottom half of a circle drawn on a gray background. The bottom-right quarter is red. The bottom-left quarter is blue.');\n * }\n * </code>\n * </div>\n */\n// export const DEGREES = Symbol('degrees');\n\n/**\n * A `String` constant that's used to set the\n * <a href=\"#/p5/angleMode\">angleMode()</a>.\n *\n * By default, functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n * <a href=\"#/p5/sin\">sin()</a> expect angles measured in units of radians.\n * Calling `angleMode(RADIANS)` ensures that angles are measured in units of\n * radians. Doing so can be useful if the\n * <a href=\"#/p5/angleMode\">angleMode()</a> has been set to\n * <a href=\"#/p5/DEGREES\">DEGREES</a>.\n *\n * Note: `TWO_PI` radians equals 360˚.\n *\n * @typedef {unique symbol} RADIANS\n * @property {RADIANS} RADIANS\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Use degrees.\n *   angleMode(DEGREES);\n *\n *   // Draw a red arc from 0˚ to 90˚.\n *   fill(255, 0, 0);\n *   arc(50, 50, 80, 80, 0, 90);\n *\n *   // Use radians.\n *   angleMode(RADIANS);\n *\n *   // Draw a blue arc from HALF_PI to PI.\n *   fill(0, 0, 255);\n *   arc(50, 50, 80, 80, HALF_PI, PI);\n *\n *   describe('The bottom half of a circle drawn on a gray background. The bottom-right quarter is red. The bottom-left quarter is blue.');\n * }\n * </code>\n * </div>\n */\n// export const RADIANS = Symbol('radians');\nconst DEG_TO_RAD = _PI / 180.0;\nconst RAD_TO_DEG = 180.0 / _PI;\n\n// SHAPE\n/**\n * @typedef {'corner'} CORNER\n * @property {CORNER} CORNER\n * @final\n */\nconst CORNER = 'corner';\n/**\n * @typedef {'corners'} CORNERS\n * @property {CORNERS} CORNERS\n * @final\n */\nconst CORNERS = 'corners';\n/**\n * @typedef {'radius'} RADIUS\n * @property {RADIUS} RADIUS\n * @final\n */\nconst RADIUS = 'radius';\n/**\n * @typedef {'right'} RIGHT\n * @property {RIGHT} RIGHT\n * @final\n */\nconst RIGHT = 'right';\n/**\n * @typedef {'left'} LEFT\n * @property {LEFT} LEFT\n * @final\n */\nconst LEFT = 'left';\n/**\n * @typedef {'center'} CENTER\n * @property {CENTER} CENTER\n * @final\n */\nconst CENTER = 'center';\n/**\n * @typedef {'top'} TOP\n * @property {TOP} TOP\n * @final\n */\nconst TOP = 'top';\n/**\n * @typedef {'bottom'} BOTTOM\n * @property {BOTTOM} BOTTOM\n * @final\n */\nconst BOTTOM = 'bottom';\n/**\n * @typedef {'alphabetic'} BASELINE\n * @property {BASELINE} BASELINE\n * @final\n */\nconst BASELINE = 'alphabetic';\n/**\n * @typedef {0x0000} POINTS\n * @property {POINTS} POINTS\n * @final\n */\nconst POINTS = 0x0000;\n/**\n * @typedef {0x0001} LINES\n * @property {LINES} LINES\n * @final\n */\nconst LINES = 0x0001;\n/**\n * @property {0x0003} LINE_STRIP\n * @property {LINE_STRIP} LINE_STRIP\n * @final\n */\nconst LINE_STRIP = 0x0003;\n/**\n * @typedef {0x0002} LINE_LOOP\n * @property {LINE_LOOP} LINE_LOOP\n * @final\n */\nconst LINE_LOOP = 0x0002;\n/**\n * @typedef {0x0004} TRIANGLES\n * @property {TRIANGLES} TRIANGLES\n * @final\n */\nconst TRIANGLES = 0x0004;\n/**\n * @typedef {0x0006} TRIANGLE_FAN\n * @property {TRIANGLE_FAN} TRIANGLE_FAN\n * @final\n */\nconst TRIANGLE_FAN = 0x0006;\n/**\n * @typedef {0x0005} TRIANGLE_STRIP\n * @property {TRIANGLE_STRIP} TRIANGLE_STRIP\n * @final\n */\nconst TRIANGLE_STRIP = 0x0005;\n/**\n * @typedef {'quads'} QUADS\n * @property {QUADS} QUADS\n * @final\n */\nconst QUADS = 'quads';\n/**\n * @typedef {'quad_strip'} QUAD_STRIP\n * @property {QUAD_STRIP} QUAD_STRIP\n * @final\n */\nconst QUAD_STRIP = 'quad_strip';\n/**\n * @typedef {'tess'} TESS\n * @property {TESS} TESS\n * @final\n */\nconst TESS = 'tess';\n/**\n * @typedef {0x0007} EMPTY_PATH\n * @property {EMPTY_PATH} EMPTY_PATH\n * @final\n */\nconst EMPTY_PATH = 0x0007;\n/**\n * @typedef {0x0008} PATH\n * @property {PATH} PATH\n * @final\n */\nconst PATH = 0x0008;\n/**\n * @typedef {'close'} CLOSE\n * @property {CLOSE} CLOSE\n * @final\n */\nconst CLOSE = 'close';\n/**\n * @typedef {'open'} OPEN\n * @property {OPEN} OPEN\n * @final\n */\nconst OPEN = 'open';\n/**\n * @typedef {'chord'} CHORD\n * @property {CHORD} CHORD\n * @final\n */\nconst CHORD = 'chord';\n/**\n * @typedef {'pie'} PIE\n * @property {PIE} PIE\n * @final\n */\nconst PIE = 'pie';\n/**\n * @typedef {'square'} PROJECT\n * @property {PROJECT} PROJECT\n * @final\n */\nconst PROJECT = 'square'; // PEND: careful this is counterintuitive\n/**\n * @typedef {'butt'} SQUARE\n * @property {SQUERE} SQUARE\n * @final\n */\nconst SQUARE = 'butt';\n/**\n * @typedef {'round'} ROUND\n * @property {ROUND} ROUND\n * @final\n */\nconst ROUND = 'round';\n/**\n * @typedef {'bevel'} BEVEL\n * @property {BEVEL} BEVEL\n * @final\n */\nconst BEVEL = 'bevel';\n/**\n * @typedef {'miter'} MITER\n * @property {MITER} MITER\n * @final\n */\nconst MITER = 'miter';\n\n// DOM EXTENSION\n/**\n * AUTO allows us to automatically set the width or height of an element (but not both),\n * based on the current height and width of the element. Only one parameter can\n * be passed to the <a href=\"/reference/p5.Element/size\">size</a> function as AUTO, at a time.\n *\n * @typedef {'auto'} AUTO\n * @property {AUTO} AUTO\n * @final\n */\nconst AUTO = 'auto';\n// INPUT\n/**\n * @typedef {'Alt'} ALT\n * @property {ALT} ALT\n * @final\n */\nconst ALT = 'Alt';\n\n/**\n * @typedef {'Backspace'} BACKSPACE\n * @property {BACKSPACE} BACKSPACE\n * @final\n */\nconst BACKSPACE = 'Backspace';\n\n/**\n * @typedef {'Control' | 'Control'} CONTROL\n * @property {CONTROL} CONTROL\n * @final\n */\nconst CONTROL = 'Control';\n\n/**\n * @typedef {'Delete'} DELETE\n * @property {DELETE} DELETE\n * @final\n */\nconst DELETE = 'Delete';\n\n/**\n * @typedef {'ArrowDown'} DOWN_ARROW\n * @property {DOWN_ARROW} DOWN_ARROW\n * @final\n */\nconst DOWN_ARROW = 'ArrowDown';\n\n/**\n * @typedef {'Enter'} ENTER\n * @property {ENTER} ENTER\n * @final\n */\nconst ENTER = 'Enter';\n\n/**\n * @typedef {'Escape'} ESCAPE\n * @property {ESCAPE} ESCAPE\n * @final\n */\nconst ESCAPE = 'Escape';\n\n/**\n * @typedef {'ArrowLeft'} LEFT_ARROW\n * @property {LEFT_ARROW} LEFT_ARROW\n * @final\n */\nconst LEFT_ARROW = 'ArrowLeft';\n\n/**\n * @typedef {'Alt'} OPTION\n * @property {OPTION} OPTION\n * @final\n */\nconst OPTION = 'Alt';\n\n/**\n * @typedef {'Enter'} RETURN\n * @property {RETURN} RETURN\n * @final\n */\nconst RETURN = 'Enter';\n\n/**\n * @typedef {'ArrowRight'} RIGHT_ARROW\n * @property {RIGHT_ARROW} RIGHT_ARROW\n * @final\n */\nconst RIGHT_ARROW = 'ArrowRight';\n\n/**\n * @typedef {'Shift'} SHIFT\n * @property {SHIFT} SHIFT\n * @final\n */\nconst SHIFT = 'Shift';\n\n/**\n * @typedef {'Tab'} TAB\n * @property {TAB} TAB\n * @final\n */\nconst TAB = 'Tab';\n\n/**\n * @typedef {'ArrowUp'} UP_ARROW\n * @property {UP_ARROW} UP_ARROW\n * @final\n */\nconst UP_ARROW = 'ArrowUp';\n\n// RENDERING\n/**\n * @typedef {'source-over'} BLEND\n * @property {BLEND} BLEND\n * @final\n */\nconst BLEND = 'source-over';\n/**\n * @typedef {'destination-out'} REMOVE\n * @property {REMOVE} REMOVE\n * @final\n */\nconst REMOVE = 'destination-out';\n/**\n * @typedef {'lighter'} ADD\n * @property {ADD} ADD\n * @final\n */\nconst ADD = 'lighter';\n/**\n * @typedef {'darken'} DARKEST\n * @property {DARKEST} DARKEST\n * @final\n */\nconst DARKEST = 'darken';\n/**\n * @typedef {'lighten'} LIGHTEST\n * @property {LIGHTEST} LIGHTEST\n * @final\n */\nconst LIGHTEST = 'lighten';\n/**\n * @typedef {'difference'} DIFFERENCE\n * @property {DIFFERENCE} DIFFERENCE\n * @final\n */\nconst DIFFERENCE = 'difference';\n/**\n * @typedef {'subtract'} SUBTRACT\n * @property {SUBTRACT} SUBTRACT\n * @final\n */\nconst SUBTRACT = 'subtract';\n/**\n * @typedef {'exclusion'} EXCLUSION\n * @property {EXCLUSION} EXCLUSION\n * @final\n */\nconst EXCLUSION = 'exclusion';\n/**\n * @typedef {'multiply'} MULTIPLY\n * @property {MULTIPLY} MULTIPLY\n * @final\n */\nconst MULTIPLY = 'multiply';\n/**\n * @typedef {'screen'} SCREEN\n * @property {SCREEN} SCREEN\n * @final\n */\nconst SCREEN = 'screen';\n/**\n * @typedef {'copy'} REPLACE\n * @property {REPLACE} REPLACE\n * @final\n */\nconst REPLACE = 'copy';\n/**\n * @typedef {'overlay'} OVERLAY\n * @property {OVERLAY} OVERLAY\n * @final\n */\nconst OVERLAY = 'overlay';\n/**\n * @typedef {'hard-light'} HARD_LIGHT\n * @property {HARD_LIGHT} HARD_LIGHT\n * @final\n */\nconst HARD_LIGHT = 'hard-light';\n/**\n * @typedef {'soft-light'} SOFT_LIGHT\n * @property {SOFT_LIGHT} SOFT_LIGHT\n * @final\n */\nconst SOFT_LIGHT = 'soft-light';\n/**\n * @typedef {'color-dodge'} DODGE\n * @property {DODGE} DODGE\n * @final\n */\nconst DODGE = 'color-dodge';\n/**\n * @typedef {'color-burn'} BURN\n * @property {BURN} BURN\n * @final\n */\nconst BURN = 'color-burn';\n\n// FILTERS\n/**\n * @typedef {'threshold'} THRESHOLD\n * @property {THRESHOLD} THRESHOLD\n * @final\n */\nconst THRESHOLD = 'threshold';\n/**\n * @typedef {'gray'} GRAY\n * @property {GRAY} GRAY\n * @final\n */\nconst GRAY = 'gray';\n/**\n * @typedef {'opaque'} OPAQUE\n * @property {OPAQUE} OPAQUE\n * @final\n */\nconst OPAQUE = 'opaque';\n/**\n * @typedef {'invert'} INVERT\n * @property {INVERT} INVERT\n * @final\n */\nconst INVERT = 'invert';\n/**\n * @typedef {'posterize'} POSTERIZE\n * @property {POSTERIZE} POSTERIZE\n * @final\n */\nconst POSTERIZE = 'posterize';\n/**\n * @typedef {'dilate'} DILATE\n * @property {DILATE} DILATE\n * @final\n */\nconst DILATE = 'dilate';\n/**\n * @typedef {'erode'} ERODE\n * @property {ERODE} ERODE\n * @final\n */\nconst ERODE = 'erode';\n/**\n * @typedef {'blur'} BLUR\n * @property {BLUR} BLUR\n * @final\n */\nconst BLUR = 'blur';\n\n// TYPOGRAPHY\n/**\n * @typedef {'normal'} NORMAL\n * @property {NORMAL} NORMAL\n * @final\n */\nconst NORMAL = 'normal';\n/**\n * @typedef {'italic'} ITALIC\n * @property {ITALIC} ITALIC\n * @final\n */\nconst ITALIC = 'italic';\n/**\n * @typedef {'bold'} BOLD\n * @property {BOLD} BOLD\n * @final\n */\nconst BOLD = 'bold';\n/**\n * @typedef {'bold italic'} BOLDITALIC\n * @property {BOLDITALIC} BOLDITALIC\n * @final\n */\nconst BOLDITALIC = 'bold italic';\n/**\n * @typedef {'CHAR'} CHAR\n * @property {CHAR} CHAR\n * @final\n */\nconst CHAR = 'CHAR';\n/**\n * @typedef {'WORD'} WORD\n * @property {WORD} WORD\n * @final\n */\nconst WORD = 'WORD';\n\n// TYPOGRAPHY-INTERNAL\nconst _DEFAULT_TEXT_FILL = '#000000';\nconst _DEFAULT_LEADMULT = 1.25;\nconst _CTX_MIDDLE = 'middle';\n\n// VERTICES\n/**\n * @typedef {'linear'} LINEAR\n * @property {LINEAR} LINEAR\n * @final\n */\nconst LINEAR = 'linear';\n/**\n * @typedef {'quadratic'} QUADRATIC\n * @property {QUADRATIC} QUADRATIC\n * @final\n */\nconst QUADRATIC = 'quadratic';\n/**\n * @typedef {'bezier'} BEZIER\n * @property {BEZIER} BEZIER\n * @final\n */\nconst BEZIER = 'bezier';\n/**\n * @typedef {'curve'} CURVE\n * @property {CURVE} CURVE\n * @final\n */\nconst CURVE = 'curve';\n\n// WEBGL DRAWMODES\n/**\n * @typedef {'stroke'} STROKE\n * @property {STROKE} STROKE\n * @final\n */\nconst STROKE = 'stroke';\n/**\n * @typedef {'fill'} FILL\n * @property {FILL} FILL\n * @final\n */\nconst FILL = 'fill';\n/**\n * @typedef {'texture'} TEXTURE\n * @property {TEXTURE} TEXTURE\n * @final\n */\nconst TEXTURE = 'texture';\n/**\n * @typedef {'immediate'} IMMEDIATE\n * @property {IMMEDIATE} IMMEDIATE\n * @final\n */\nconst IMMEDIATE = 'immediate';\n\n// WEBGL TEXTURE MODE\n// NORMAL already exists for typography\n/**\n * @typedef {'image'} IMAGE\n * @property {IMAGE} IMAGE\n * @final\n */\nconst IMAGE = 'image';\n\n// WEBGL TEXTURE WRAP AND FILTERING\n// LINEAR already exists above\n/**\n * @typedef {'nearest'} NEAREST\n * @property {NEAREST} NEAREST\n * @final\n */\nconst NEAREST = 'nearest';\n/**\n * @typedef {'repeat'} REPEAT\n * @property {REPEAT} REPEAT\n * @final\n */\nconst REPEAT = 'repeat';\n/**\n * @typedef {'clamp'} CLAMP\n * @property {CLAMP} CLAMP\n * @final\n */\nconst CLAMP = 'clamp';\n/**\n * @typedef {'mirror'} MIRROR\n * @property {MIRROR} MIRROR\n * @final\n */\nconst MIRROR = 'mirror';\n\n// WEBGL GEOMETRY SHADING\n/**\n * @typedef {'flat'} FLAT\n * @property {FLAT} FLAT\n * @final\n */\nconst FLAT = 'flat';\n/**\n * @typedef {'smooth'} SMOOTH\n * @property {SMOOTH} SMOOTH\n * @final\n */\nconst SMOOTH = 'smooth';\n\n// DEVICE-ORIENTATION\n/**\n * @typedef {'landscape'} LANDSCAPE\n * @property {LANDSCAPE} LANDSCAPE\n * @final\n */\nconst LANDSCAPE = 'landscape';\n/**\n * @typedef {'portrait'} PORTRAIT\n * @property {PORTRAIT} PORTRAIT\n * @final\n */\nconst PORTRAIT = 'portrait';\n\n// DEFAULTS\nconst _DEFAULT_STROKE = '#000000';\nconst _DEFAULT_FILL = '#FFFFFF';\n\n/**\n * @typedef {'grid'} GRID\n * @property {GRID} GRID\n * @final\n */\nconst GRID = 'grid';\n\n/**\n * @typedef {'axes'} AXES\n * @property {AXES} AXES\n * @final\n */\nconst AXES = 'axes';\n\n/**\n * @typedef {'label'} LABEL\n * @property {LABEL} LABEL\n * @final\n */\nconst LABEL = 'label';\n/**\n * @typedef {'fallback'} FALLBACK\n * @property {FALLBACK} FALLBACK\n * @final\n */\nconst FALLBACK = 'fallback';\n\n/**\n * @typedef {'contain'} CONTAIN\n * @property {CONTAIN} CONTAIN\n * @final\n */\nconst CONTAIN = 'contain';\n\n/**\n * @typedef {'cover'} COVER\n * @property {COVER} COVER\n * @final\n */\nconst COVER = 'cover';\n\n/**\n * @typedef {'unsigned-byte'} UNSIGNED_BYTE\n * @property {UNSIGNED_BYTE} UNSIGNED_BYTE\n * @final\n */\nconst UNSIGNED_BYTE = 'unsigned-byte';\n\n/**\n * @typedef {'unsigned-int'} UNSIGNED_INT\n * @property {UNSIGNED_INT} UNSIGNED_INT\n * @final\n */\nconst UNSIGNED_INT = 'unsigned-int';\n\n/**\n * @typedef {'float'} FLOAT\n * @property {FLOAT} FLOAT\n * @final\n */\nconst FLOAT = 'float';\n\n/**\n * @typedef {'half-float'} HALF_FLOAT\n * @property {HALF_FLOAT} HALF_FLOAT\n * @final\n */\nconst HALF_FLOAT = 'half-float';\n\n/**\n * The `splineProperty('ends')` mode where splines curve through\n * their first and last points.\n * @typedef {unique symbol} INCLUDE\n * @property {INCLUDE} INCLUDE\n * @final\n */\nconst INCLUDE = Symbol('include');\n\n/**\n * The `splineProperty('ends')` mode where the first and last points in a spline\n * affect the direction of the curve, but are not rendered.\n * @typedef {unique symbol} EXCLUDE\n * @property {EXCLUDE} EXCLUDE\n * @final\n */\nconst EXCLUDE = Symbol('exclude');\n\n/**\n * The `splineProperty('ends')` mode where the spline loops back to its first point.\n * Only used internally.\n * @typedef {unique symbol} JOIN\n * @property {JOIN} JOIN\n * @final\n * @private\n */\nconst JOIN = Symbol('join');\nvar constants = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ADD: ADD,\n  ALT: ALT,\n  ARROW: ARROW,\n  AUTO: AUTO,\n  AXES: AXES,\n  BACKSPACE: BACKSPACE,\n  BASELINE: BASELINE,\n  BEVEL: BEVEL,\n  BEZIER: BEZIER,\n  BLEND: BLEND,\n  BLUR: BLUR,\n  BOLD: BOLD,\n  BOLDITALIC: BOLDITALIC,\n  BOTTOM: BOTTOM,\n  BURN: BURN,\n  CENTER: CENTER,\n  CHAR: CHAR,\n  CHORD: CHORD,\n  CLAMP: CLAMP,\n  CLOSE: CLOSE,\n  CONTAIN: CONTAIN,\n  CONTROL: CONTROL,\n  CORNER: CORNER,\n  CORNERS: CORNERS,\n  COVER: COVER,\n  CROSS: CROSS,\n  CURVE: CURVE,\n  DARKEST: DARKEST,\n  DEG_TO_RAD: DEG_TO_RAD,\n  DELETE: DELETE,\n  DIFFERENCE: DIFFERENCE,\n  DILATE: DILATE,\n  DODGE: DODGE,\n  DOWN_ARROW: DOWN_ARROW,\n  EMPTY_PATH: EMPTY_PATH,\n  ENTER: ENTER,\n  ERODE: ERODE,\n  ESCAPE: ESCAPE,\n  EXCLUDE: EXCLUDE,\n  EXCLUSION: EXCLUSION,\n  FALLBACK: FALLBACK,\n  FILL: FILL,\n  FLAT: FLAT,\n  FLOAT: FLOAT,\n  FULL: FULL,\n  GRAY: GRAY,\n  GRID: GRID,\n  HALF_FLOAT: HALF_FLOAT,\n  HALF_PI: HALF_PI,\n  HAND: HAND,\n  HARD_LIGHT: HARD_LIGHT,\n  IMAGE: IMAGE,\n  IMMEDIATE: IMMEDIATE,\n  INCLUDE: INCLUDE,\n  INVERT: INVERT,\n  ITALIC: ITALIC,\n  JOIN: JOIN,\n  LABEL: LABEL,\n  LANDSCAPE: LANDSCAPE,\n  LEFT: LEFT,\n  LEFT_ARROW: LEFT_ARROW,\n  LIGHTEST: LIGHTEST,\n  LINEAR: LINEAR,\n  LINES: LINES,\n  LINE_LOOP: LINE_LOOP,\n  LINE_STRIP: LINE_STRIP,\n  MIRROR: MIRROR,\n  MITER: MITER,\n  MOVE: MOVE,\n  MULTIPLY: MULTIPLY,\n  NEAREST: NEAREST,\n  NORMAL: NORMAL,\n  OPAQUE: OPAQUE,\n  OPEN: OPEN,\n  OPTION: OPTION,\n  OVERLAY: OVERLAY,\n  P2D: P2D,\n  P2DHDR: P2DHDR,\n  PATH: PATH,\n  PI: PI,\n  PIE: PIE,\n  POINTS: POINTS,\n  PORTRAIT: PORTRAIT,\n  POSTERIZE: POSTERIZE,\n  PROJECT: PROJECT,\n  QUADRATIC: QUADRATIC,\n  QUADS: QUADS,\n  QUAD_STRIP: QUAD_STRIP,\n  QUARTER_PI: QUARTER_PI,\n  RADIUS: RADIUS,\n  RAD_TO_DEG: RAD_TO_DEG,\n  REMOVE: REMOVE,\n  REPEAT: REPEAT,\n  REPLACE: REPLACE,\n  RETURN: RETURN,\n  RIGHT: RIGHT,\n  RIGHT_ARROW: RIGHT_ARROW,\n  ROUND: ROUND,\n  SCREEN: SCREEN,\n  SHIFT: SHIFT,\n  SIMPLE: SIMPLE,\n  SMOOTH: SMOOTH,\n  SOFT_LIGHT: SOFT_LIGHT,\n  SQUARE: SQUARE,\n  STROKE: STROKE,\n  SUBTRACT: SUBTRACT,\n  TAB: TAB,\n  TAU: TAU,\n  TESS: TESS,\n  TEXT: TEXT,\n  TEXTURE: TEXTURE,\n  THRESHOLD: THRESHOLD,\n  TOP: TOP,\n  TRIANGLES: TRIANGLES,\n  TRIANGLE_FAN: TRIANGLE_FAN,\n  TRIANGLE_STRIP: TRIANGLE_STRIP,\n  TWO_PI: TWO_PI,\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_INT: UNSIGNED_INT,\n  UP_ARROW: UP_ARROW,\n  VERSION: VERSION,\n  WAIT: WAIT,\n  WEBGL: WEBGL,\n  WEBGL2: WEBGL2,\n  WORD: WORD,\n  _CTX_MIDDLE: _CTX_MIDDLE,\n  _DEFAULT_FILL: _DEFAULT_FILL,\n  _DEFAULT_LEADMULT: _DEFAULT_LEADMULT,\n  _DEFAULT_STROKE: _DEFAULT_STROKE,\n  _DEFAULT_TEXT_FILL: _DEFAULT_TEXT_FILL\n});\nexport { BLUR as $, AXES as A, BEVEL as B, CENTER as C, DEG_TO_RAD as D, EMPTY_PATH as E, FLAT as F, GRID as G, HAND as H, INCLUDE as I, JOIN as J, OPAQUE as K, LINES as L, MOVE as M, NORMAL as N, OPEN as O, P2D as P, QUADS as Q, RIGHT as R, SQUARE as S, TEXTURE as T, POSTERIZE as U, DILATE as V, WAIT as W, GRAY as X, ERODE as Y, THRESHOLD as Z, INVERT as _, RADIUS as a, BOLDITALIC as a$, WEBGL as a0, IMAGE as a1, _DEFAULT_FILL as a2, _DEFAULT_STROKE as a3, REMOVE as a4, SUBTRACT as a5, DARKEST as a6, LIGHTEST as a7, DIFFERENCE as a8, MULTIPLY as a9, MIRROR as aA, FLOAT as aB, LINEAR as aC, HALF_FLOAT as aD, P2DHDR as aE, QUARTER_PI as aF, TAU as aG, TOP as aH, LINE_STRIP as aI, LINE_LOOP as aJ, TESS as aK, ALT as aL, BACKSPACE as aM, CONTROL as aN, DELETE as aO, DOWN_ARROW as aP, ENTER as aQ, ESCAPE as aR, LEFT_ARROW as aS, OPTION as aT, RETURN as aU, RIGHT_ARROW as aV, SHIFT as aW, TAB as aX, UP_ARROW as aY, ITALIC as aZ, BOLD as a_, EXCLUSION as aa, SCREEN as ab, REPLACE as ac, OVERLAY as ad, HARD_LIGHT as ae, SOFT_LIGHT as af, DODGE as ag, BURN as ah, ADD as ai, PIE as aj, CHORD as ak, VERSION as al, WORD as am, BASELINE as an, LEFT as ao, COVER as ap, CONTAIN as aq, BOTTOM as ar, FILL as as, CLAMP as at, UNSIGNED_INT as au, UNSIGNED_BYTE as av, SIMPLE as aw, FULL as ax, NEAREST as ay, REPEAT as az, ARROW as b, CHAR as b0, _DEFAULT_TEXT_FILL as b1, _DEFAULT_LEADMULT as b2, _CTX_MIDDLE as b3, QUADRATIC as b4, BEZIER as b5, CURVE as b6, STROKE as b7, IMMEDIATE as b8, LANDSCAPE as b9, PORTRAIT as ba, LABEL as bb, FALLBACK as bc, CROSS as c, TEXT as d, CORNER as e, TWO_PI as f, HALF_PI as g, PI as h, CORNERS as i, ROUND as j, PROJECT as k, MITER as l, PATH as m, CLOSE as n, POINTS as o, TRIANGLES as p, TRIANGLE_FAN as q, TRIANGLE_STRIP as r, QUAD_STRIP as s, EXCLUDE as t, BLEND as u, constants as v, AUTO as w, RAD_TO_DEG as x, SMOOTH as y, WEBGL2 as z };","map":{"version":3,"names":["_PI","Math","PI","VERSION","P2D","P2DHDR","WEBGL","WEBGL2","ARROW","SIMPLE","FULL","CROSS","HAND","MOVE","TEXT","WAIT","HALF_PI","QUARTER_PI","TAU","TWO_PI","DEG_TO_RAD","RAD_TO_DEG","CORNER","CORNERS","RADIUS","RIGHT","LEFT","CENTER","TOP","BOTTOM","BASELINE","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","QUADS","QUAD_STRIP","TESS","EMPTY_PATH","PATH","CLOSE","OPEN","CHORD","PIE","PROJECT","SQUARE","ROUND","BEVEL","MITER","AUTO","ALT","BACKSPACE","CONTROL","DELETE","DOWN_ARROW","ENTER","ESCAPE","LEFT_ARROW","OPTION","RETURN","RIGHT_ARROW","SHIFT","TAB","UP_ARROW","BLEND","REMOVE","ADD","DARKEST","LIGHTEST","DIFFERENCE","SUBTRACT","EXCLUSION","MULTIPLY","SCREEN","REPLACE","OVERLAY","HARD_LIGHT","SOFT_LIGHT","DODGE","BURN","THRESHOLD","GRAY","OPAQUE","INVERT","POSTERIZE","DILATE","ERODE","BLUR","NORMAL","ITALIC","BOLD","BOLDITALIC","CHAR","WORD","_DEFAULT_TEXT_FILL","_DEFAULT_LEADMULT","_CTX_MIDDLE","LINEAR","QUADRATIC","BEZIER","CURVE","STROKE","FILL","TEXTURE","IMMEDIATE","IMAGE","NEAREST","REPEAT","CLAMP","MIRROR","FLAT","SMOOTH","LANDSCAPE","PORTRAIT","_DEFAULT_STROKE","_DEFAULT_FILL","GRID","AXES","LABEL","FALLBACK","CONTAIN","COVER","UNSIGNED_BYTE","UNSIGNED_INT","FLOAT","HALF_FLOAT","INCLUDE","Symbol","EXCLUDE","JOIN","constants","Object","freeze","__proto__","$","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_","a","a$","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aA","aB","aC","aD","aE","aF","aG","aH","aI","aJ","aK","aL","aM","aN","aO","aP","aQ","aR","aS","aT","aU","aV","aW","aX","aY","aZ","a_","aa","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","b","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/constants-BRcElHU3.js"],"sourcesContent":["/**\n * @module Constants\n * @submodule Constants\n * @for p5\n */\n\nconst _PI = Math.PI;\n\n/**\n * Version of this p5.js.\n * @property {String} VERSION\n * @final\n */\nconst VERSION = '2.0.3';\n\n// GRAPHICS RENDERER\n/**\n * The default, two-dimensional renderer in p5.js.\n *\n * Use this when calling <a href=\"#/p5/createCanvas\"> (for example,\n * `createCanvas(400, 400, P2D)`) to specify a 2D context.\n *\n * @typedef {'p2d'} P2D\n * @property {P2D} P2D\n * @final\n */\nconst P2D = 'p2d';\n\n/**\n * A high-dynamic-range (HDR) variant of the default, two-dimensional renderer.\n *\n * When available, this mode can allow for extended color ranges and more\n * dynamic color representation. Use it similarly to `P2D`:\n * `createCanvas(400, 400, P2DHDR)`.\n *\n * @typedef {'p2d-hdr'} P2DHDR\n * @property {P2DHDR} P2DHDR\n * @final\n */\n\nconst P2DHDR = 'p2d-hdr';\n\n/**\n * One of the two render modes in p5.js, used for computationally intensive tasks like 3D rendering and shaders.\n *\n * `WEBGL` differs from the default <a href=\"/reference/p5/P2D\">`P2D`</a> renderer in the following ways:\n *\n * - **Coordinate System** - When drawing in `WEBGL` mode, the origin point (0,0,0) is located at the center of the screen, not the top-left corner. See <a href=\"https://p5js.org/tutorials/coordinates-and-transformations/\">the tutorial page about coordinates and transformations</a>.\n * - **3D Shapes** - `WEBGL` mode can be used to draw 3-dimensional shapes like <a href=\"#/p5/box\">box()</a>, <a href=\"#/p5/sphere\">sphere()</a>, <a href=\"#/p5/cone\">cone()</a>, and <a href=\"https://p5js.org/reference/#3D%20Primitives\">more</a>. See <a href=\"https://p5js.org/tutorials/custom-geometry/\">the tutorial page about custom geometry</a> to make more complex objects.\n * - **Shape Detail** - When drawing in `WEBGL` mode, you can specify how smooth curves should be drawn by using a `detail` parameter. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#3d-primitives-shapes\">the wiki section about shapes</a> for a more information and an example.\n * - **Textures** - A texture is like a skin that wraps onto a shape. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#textures\">the wiki section about textures</a> for examples of mapping images onto surfaces with textures.\n * - **Materials and Lighting** - `WEBGL` offers different types of lights like <a href=\"#/p5/ambientLight\">ambientLight()</a> to place around a scene. Materials like <a href=\"#/p5/specularMaterial\">specularMaterial()</a> reflect the lighting to convey shape and depth. See <a href=\"https://p5js.org/tutorials/lights-camera-materials/\">the tutorial page for styling and appearance</a> to experiment with different combinations.\n * - **Camera** - The viewport of a `WEBGL` sketch can be adjusted by changing camera attributes. See <a href=\"https://p5js.org/tutorials/lights-camera-materials#camera-and-view\">the tutorial page section about cameras</a> for an explanation of camera controls.\n * - **Text** - `WEBGL` requires opentype/truetype font files to be preloaded using <a href=\"#/p5/loadFont\">loadFont()</a>. See <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text\">the wiki section about text</a> for details, along with a workaround.\n * - **Shaders** - Shaders are hardware accelerated programs that can be used for a variety of effects and graphics. See the <a href=\"https://p5js.org/tutorials/intro-to-shaders/\">introduction to shaders</a> to get started with shaders in p5.js.\n * - **Graphics Acceleration** - `WEBGL` mode uses the graphics card instead of the CPU, so it may help boost the performance of your sketch (example: drawing more shapes on the screen at once).\n *\n * To learn more about WEBGL mode, check out <a href=\"https://p5js.org/tutorials/#webgl\">all the interactive WEBGL tutorials</a> in the \"Tutorials\" section of this website, or read the wiki article <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\"Getting started with WebGL in p5\"</a>.\n *\n * @typedef {unique symbol} WEBGL\n * @property {WEBGL} WEBGL\n * @final\n */\nconst WEBGL = 'webgl';\n/**\n * One of the two possible values of a WebGL canvas (either WEBGL or WEBGL2),\n * which can be used to determine what capabilities the rendering environment\n * has.\n * @typedef {unique symbol} WEBGL2\n * @property {WEBGL2} WEBGL2\n * @final\n */\nconst WEBGL2 = 'webgl2';\n\n// ENVIRONMENT\n/**\n * @typedef {'default'} ARROW\n * @property {ARROW} ARROW\n * @final\n */\nconst ARROW = 'default';\n\n/**\n * @property {String} SIMPLE\n * @final\n */\nconst SIMPLE = 'simple';\n/**\n * @property {String} FULL\n * @final\n */\nconst FULL = 'full';\n\n/**\n * @typedef {'crosshair'} CROSS\n * @property {CROSS} CROSS\n * @final\n */\nconst CROSS = 'crosshair';\n/**\n * @typedef {'pointer'} HAND\n * @property {HAND} HAND\n * @final\n */\nconst HAND = 'pointer';\n/**\n * @typedef {'move'} MOVE\n * @property {MOVE} MOVE\n * @final\n */\nconst MOVE = 'move';\n/**\n * @typedef {'text'} TEXT\n * @property {TEXT} TEXT\n * @final\n */\nconst TEXT = 'text';\n/**\n * @typedef {'wait'} WAIT\n * @property {WAIT} WAIT\n * @final\n */\nconst WAIT = 'wait';\n\n// TRIGONOMETRY\n\n/**\n * A `Number` constant that's approximately 1.5708.\n *\n * `HALF_PI` is half the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(HALF_PI)` rotates the coordinate system `HALF_PI` radians, which is\n * a quarter turn (90˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} HALF_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to HALF_PI.\n *   arc(50, 50, 80, 80, 0, HALF_PI);\n *\n *   describe('The bottom-right quarter of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a quarter turn.\n *   rotate(HALF_PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('Two black lines on a gray background. One line extends from the center to the right. The other line extends from the center to the bottom.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The red circle appears to chase the blue circle.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + HALF_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst HALF_PI = _PI / 2;\n\n/**\n * A `Number` constant that's approximately 3.1416.\n *\n * `PI` is the mathematical constant π. It's useful for many tasks that\n * involve rotation and oscillation. For example, calling `rotate(PI)` rotates\n * the coordinate system `PI` radians, which is a half turn (180˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to PI.\n *   arc(50, 50, 80, 80, 0, PI);\n *\n *   describe('The bottom half of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a half turn.\n *   rotate(PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('A horizontal black line on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The circles drift apart, then meet in the middle, over and over again.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst PI = _PI;\n\n/**\n * A `Number` constant that's approximately 0.7854.\n *\n * `QUARTER_PI` is one-fourth the value of the mathematical constant π. It's\n * useful for many tasks that involve rotation and oscillation. For example,\n * calling `rotate(QUARTER_PI)` rotates the coordinate system `QUARTER_PI`\n * radians, which is an eighth of a turn (45˚).\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} QUARTER_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to QUARTER_PI.\n *   arc(50, 50, 80, 80, 0, QUARTER_PI);\n *\n *   describe('A one-eighth slice of a circle drawn in white on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate an eighth turn.\n *   rotate(QUARTER_PI);\n *\n *   // Draw the same line, rotated.\n *   line(0, 0, 40, 0);\n *\n *   describe('Two black lines that form a \"V\" opening towards the bottom-right corner of a gray square.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle and a blue circle oscillate from left to right on a gray background. The red circle appears to chase the blue circle.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + QUARTER_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 20);\n * }\n * </code>\n * </div>\n */\nconst QUARTER_PI = _PI / 4;\n\n/**\n * A `Number` constant that's approximately 6.2382.\n *\n * `TAU` is twice the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(TAU)` rotates the coordinate system `TAU` radians, which is one\n * full turn (360˚). `TAU` and `TWO_PI` are equal.\n *\n * Note: `TAU` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} TAU\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to TAU.\n *   arc(50, 50, 80, 80, 0, TAU);\n *\n *   describe('A white circle drawn on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a full turn.\n *   rotate(TAU);\n *\n *   // Style the second line.\n *   strokeWeight(5);\n *\n *   // Draw the same line, shorter and rotated.\n *   line(0, 0, 20, 0);\n *\n *   describe(\n *     'Two horizontal black lines on a gray background. A thick line extends from the center toward the right. A thin line extends from the end of the thick line.'\n *   );\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle with a blue center oscillates from left to right on a gray background.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + TAU);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator, smaller.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 10);\n * }\n * </code>\n * </div>\n */\nconst TAU = _PI * 2;\n\n/**\n * A `Number` constant that's approximately 6.2382.\n *\n * `TWO_PI` is twice the value of the mathematical constant π. It's useful for\n * many tasks that involve rotation and oscillation. For example, calling\n * `rotate(TWO_PI)` rotates the coordinate system `TWO_PI` radians, which is\n * one full turn (360˚). `TWO_PI` and `TAU` are equal.\n *\n * Note: `TWO_PI` radians equals 360˚, `PI` radians equals 180˚, `HALF_PI`\n * radians equals 90˚, and `QUARTER_PI` radians equals 45˚.\n *\n * @property {Number} TWO_PI\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw an arc from 0 to TWO_PI.\n *   arc(50, 50, 80, 80, 0, TWO_PI);\n *\n *   describe('A white circle drawn on a gray background.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Draw a line.\n *   line(0, 0, 40, 0);\n *\n *   // Rotate a full turn.\n *   rotate(TWO_PI);\n *\n *   // Style the second line.\n *   strokeWeight(5);\n *\n *   // Draw the same line, shorter and rotated.\n *   line(0, 0, 20, 0);\n *\n *   describe(\n *     'Two horizontal black lines on a gray background. A thick line extends from the center toward the right. A thin line extends from the end of the thick line.'\n *   );\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   describe(\n *     'A red circle with a blue center oscillates from left to right on a gray background.'\n *   );\n * }\n *\n * function draw() {\n *   background(200);\n *\n *   // Translate the origin to the center.\n *   translate(50, 50);\n *\n *   // Calculate the x-coordinates.\n *   let x1 = 40 * sin(frameCount * 0.05);\n *   let x2 = 40 * sin(frameCount * 0.05 + TWO_PI);\n *\n *   // Style the oscillators.\n *   noStroke();\n *\n *   // Draw the red oscillator.\n *   fill(255, 0, 0);\n *   circle(x1, 0, 20);\n *\n *   // Draw the blue oscillator, smaller.\n *   fill(0, 0, 255);\n *   circle(x2, 0, 10);\n * }\n * </code>\n * </div>\n */\nconst TWO_PI = _PI * 2;\n\n/**\n * A `String` constant that's used to set the\n * <a href=\"#/p5/angleMode\">angleMode()</a>.\n *\n * By default, functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n * <a href=\"#/p5/sin\">sin()</a> expect angles measured in units of radians.\n * Calling `angleMode(DEGREES)` ensures that angles are measured in units of\n * degrees.\n *\n * Note: `TWO_PI` radians equals 360˚.\n *\n * @typedef {unique symbol} DEGREES\n * @property {DEGREES} DEGREES\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Draw a red arc from 0 to HALF_PI radians.\n *   fill(255, 0, 0);\n *   arc(50, 50, 80, 80, 0, HALF_PI);\n *\n *   // Use degrees.\n *   angleMode(DEGREES);\n *\n *   // Draw a blue arc from 90˚ to 180˚.\n *   fill(0, 0, 255);\n *   arc(50, 50, 80, 80, 90, 180);\n *\n *   describe('The bottom half of a circle drawn on a gray background. The bottom-right quarter is red. The bottom-left quarter is blue.');\n * }\n * </code>\n * </div>\n */\n// export const DEGREES = Symbol('degrees');\n\n/**\n * A `String` constant that's used to set the\n * <a href=\"#/p5/angleMode\">angleMode()</a>.\n *\n * By default, functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n * <a href=\"#/p5/sin\">sin()</a> expect angles measured in units of radians.\n * Calling `angleMode(RADIANS)` ensures that angles are measured in units of\n * radians. Doing so can be useful if the\n * <a href=\"#/p5/angleMode\">angleMode()</a> has been set to\n * <a href=\"#/p5/DEGREES\">DEGREES</a>.\n *\n * Note: `TWO_PI` radians equals 360˚.\n *\n * @typedef {unique symbol} RADIANS\n * @property {RADIANS} RADIANS\n * @final\n *\n * @example\n * <div>\n * <code>\n * function setup() {\n *   createCanvas(100, 100);\n *\n *   background(200);\n *\n *   // Use degrees.\n *   angleMode(DEGREES);\n *\n *   // Draw a red arc from 0˚ to 90˚.\n *   fill(255, 0, 0);\n *   arc(50, 50, 80, 80, 0, 90);\n *\n *   // Use radians.\n *   angleMode(RADIANS);\n *\n *   // Draw a blue arc from HALF_PI to PI.\n *   fill(0, 0, 255);\n *   arc(50, 50, 80, 80, HALF_PI, PI);\n *\n *   describe('The bottom half of a circle drawn on a gray background. The bottom-right quarter is red. The bottom-left quarter is blue.');\n * }\n * </code>\n * </div>\n */\n// export const RADIANS = Symbol('radians');\nconst DEG_TO_RAD = _PI / 180.0;\nconst RAD_TO_DEG = 180.0 / _PI;\n\n// SHAPE\n/**\n * @typedef {'corner'} CORNER\n * @property {CORNER} CORNER\n * @final\n */\nconst CORNER = 'corner';\n/**\n * @typedef {'corners'} CORNERS\n * @property {CORNERS} CORNERS\n * @final\n */\nconst CORNERS = 'corners';\n/**\n * @typedef {'radius'} RADIUS\n * @property {RADIUS} RADIUS\n * @final\n */\nconst RADIUS = 'radius';\n/**\n * @typedef {'right'} RIGHT\n * @property {RIGHT} RIGHT\n * @final\n */\nconst RIGHT = 'right';\n/**\n * @typedef {'left'} LEFT\n * @property {LEFT} LEFT\n * @final\n */\nconst LEFT = 'left';\n/**\n * @typedef {'center'} CENTER\n * @property {CENTER} CENTER\n * @final\n */\nconst CENTER = 'center';\n/**\n * @typedef {'top'} TOP\n * @property {TOP} TOP\n * @final\n */\nconst TOP = 'top';\n/**\n * @typedef {'bottom'} BOTTOM\n * @property {BOTTOM} BOTTOM\n * @final\n */\nconst BOTTOM = 'bottom';\n/**\n * @typedef {'alphabetic'} BASELINE\n * @property {BASELINE} BASELINE\n * @final\n */\nconst BASELINE = 'alphabetic';\n/**\n * @typedef {0x0000} POINTS\n * @property {POINTS} POINTS\n * @final\n */\nconst POINTS = 0x0000;\n/**\n * @typedef {0x0001} LINES\n * @property {LINES} LINES\n * @final\n */\nconst LINES = 0x0001;\n/**\n * @property {0x0003} LINE_STRIP\n * @property {LINE_STRIP} LINE_STRIP\n * @final\n */\nconst LINE_STRIP = 0x0003;\n/**\n * @typedef {0x0002} LINE_LOOP\n * @property {LINE_LOOP} LINE_LOOP\n * @final\n */\nconst LINE_LOOP = 0x0002;\n/**\n * @typedef {0x0004} TRIANGLES\n * @property {TRIANGLES} TRIANGLES\n * @final\n */\nconst TRIANGLES = 0x0004;\n/**\n * @typedef {0x0006} TRIANGLE_FAN\n * @property {TRIANGLE_FAN} TRIANGLE_FAN\n * @final\n */\nconst TRIANGLE_FAN = 0x0006;\n/**\n * @typedef {0x0005} TRIANGLE_STRIP\n * @property {TRIANGLE_STRIP} TRIANGLE_STRIP\n * @final\n */\nconst TRIANGLE_STRIP = 0x0005;\n/**\n * @typedef {'quads'} QUADS\n * @property {QUADS} QUADS\n * @final\n */\nconst QUADS = 'quads';\n/**\n * @typedef {'quad_strip'} QUAD_STRIP\n * @property {QUAD_STRIP} QUAD_STRIP\n * @final\n */\nconst QUAD_STRIP = 'quad_strip';\n/**\n * @typedef {'tess'} TESS\n * @property {TESS} TESS\n * @final\n */\nconst TESS = 'tess';\n/**\n * @typedef {0x0007} EMPTY_PATH\n * @property {EMPTY_PATH} EMPTY_PATH\n * @final\n */\nconst EMPTY_PATH = 0x0007;\n/**\n * @typedef {0x0008} PATH\n * @property {PATH} PATH\n * @final\n */\nconst PATH = 0x0008;\n/**\n * @typedef {'close'} CLOSE\n * @property {CLOSE} CLOSE\n * @final\n */\nconst CLOSE = 'close';\n/**\n * @typedef {'open'} OPEN\n * @property {OPEN} OPEN\n * @final\n */\nconst OPEN = 'open';\n/**\n * @typedef {'chord'} CHORD\n * @property {CHORD} CHORD\n * @final\n */\nconst CHORD = 'chord';\n/**\n * @typedef {'pie'} PIE\n * @property {PIE} PIE\n * @final\n */\nconst PIE = 'pie';\n/**\n * @typedef {'square'} PROJECT\n * @property {PROJECT} PROJECT\n * @final\n */\nconst PROJECT = 'square'; // PEND: careful this is counterintuitive\n/**\n * @typedef {'butt'} SQUARE\n * @property {SQUERE} SQUARE\n * @final\n */\nconst SQUARE = 'butt';\n/**\n * @typedef {'round'} ROUND\n * @property {ROUND} ROUND\n * @final\n */\nconst ROUND = 'round';\n/**\n * @typedef {'bevel'} BEVEL\n * @property {BEVEL} BEVEL\n * @final\n */\nconst BEVEL = 'bevel';\n/**\n * @typedef {'miter'} MITER\n * @property {MITER} MITER\n * @final\n */\nconst MITER = 'miter';\n\n// DOM EXTENSION\n/**\n * AUTO allows us to automatically set the width or height of an element (but not both),\n * based on the current height and width of the element. Only one parameter can\n * be passed to the <a href=\"/reference/p5.Element/size\">size</a> function as AUTO, at a time.\n *\n * @typedef {'auto'} AUTO\n * @property {AUTO} AUTO\n * @final\n */\nconst AUTO = 'auto';\n// INPUT\n/**\n * @typedef {'Alt'} ALT\n * @property {ALT} ALT\n * @final\n */\nconst ALT = 'Alt';\n\n/**\n * @typedef {'Backspace'} BACKSPACE\n * @property {BACKSPACE} BACKSPACE\n * @final\n */\nconst BACKSPACE = 'Backspace';\n\n/**\n * @typedef {'Control' | 'Control'} CONTROL\n * @property {CONTROL} CONTROL\n * @final\n */\nconst CONTROL = 'Control';\n\n/**\n * @typedef {'Delete'} DELETE\n * @property {DELETE} DELETE\n * @final\n */\nconst DELETE = 'Delete';\n\n/**\n * @typedef {'ArrowDown'} DOWN_ARROW\n * @property {DOWN_ARROW} DOWN_ARROW\n * @final\n */\nconst DOWN_ARROW = 'ArrowDown';\n\n/**\n * @typedef {'Enter'} ENTER\n * @property {ENTER} ENTER\n * @final\n */\nconst ENTER = 'Enter';\n\n/**\n * @typedef {'Escape'} ESCAPE\n * @property {ESCAPE} ESCAPE\n * @final\n */\nconst ESCAPE = 'Escape';\n\n/**\n * @typedef {'ArrowLeft'} LEFT_ARROW\n * @property {LEFT_ARROW} LEFT_ARROW\n * @final\n */\nconst LEFT_ARROW = 'ArrowLeft';\n\n/**\n * @typedef {'Alt'} OPTION\n * @property {OPTION} OPTION\n * @final\n */\nconst OPTION = 'Alt';\n\n/**\n * @typedef {'Enter'} RETURN\n * @property {RETURN} RETURN\n * @final\n */\nconst RETURN = 'Enter';\n\n/**\n * @typedef {'ArrowRight'} RIGHT_ARROW\n * @property {RIGHT_ARROW} RIGHT_ARROW\n * @final\n */\nconst RIGHT_ARROW = 'ArrowRight';\n\n/**\n * @typedef {'Shift'} SHIFT\n * @property {SHIFT} SHIFT\n * @final\n */\nconst SHIFT = 'Shift';\n\n/**\n * @typedef {'Tab'} TAB\n * @property {TAB} TAB\n * @final\n */\nconst TAB = 'Tab';\n\n/**\n * @typedef {'ArrowUp'} UP_ARROW\n * @property {UP_ARROW} UP_ARROW\n * @final\n */\nconst UP_ARROW = 'ArrowUp';\n\n// RENDERING\n/**\n * @typedef {'source-over'} BLEND\n * @property {BLEND} BLEND\n * @final\n */\nconst BLEND = 'source-over';\n/**\n * @typedef {'destination-out'} REMOVE\n * @property {REMOVE} REMOVE\n * @final\n */\nconst REMOVE = 'destination-out';\n/**\n * @typedef {'lighter'} ADD\n * @property {ADD} ADD\n * @final\n */\nconst ADD = 'lighter';\n/**\n * @typedef {'darken'} DARKEST\n * @property {DARKEST} DARKEST\n * @final\n */\nconst DARKEST = 'darken';\n/**\n * @typedef {'lighten'} LIGHTEST\n * @property {LIGHTEST} LIGHTEST\n * @final\n */\nconst LIGHTEST = 'lighten';\n/**\n * @typedef {'difference'} DIFFERENCE\n * @property {DIFFERENCE} DIFFERENCE\n * @final\n */\nconst DIFFERENCE = 'difference';\n/**\n * @typedef {'subtract'} SUBTRACT\n * @property {SUBTRACT} SUBTRACT\n * @final\n */\nconst SUBTRACT = 'subtract';\n/**\n * @typedef {'exclusion'} EXCLUSION\n * @property {EXCLUSION} EXCLUSION\n * @final\n */\nconst EXCLUSION = 'exclusion';\n/**\n * @typedef {'multiply'} MULTIPLY\n * @property {MULTIPLY} MULTIPLY\n * @final\n */\nconst MULTIPLY = 'multiply';\n/**\n * @typedef {'screen'} SCREEN\n * @property {SCREEN} SCREEN\n * @final\n */\nconst SCREEN = 'screen';\n/**\n * @typedef {'copy'} REPLACE\n * @property {REPLACE} REPLACE\n * @final\n */\nconst REPLACE = 'copy';\n/**\n * @typedef {'overlay'} OVERLAY\n * @property {OVERLAY} OVERLAY\n * @final\n */\nconst OVERLAY = 'overlay';\n/**\n * @typedef {'hard-light'} HARD_LIGHT\n * @property {HARD_LIGHT} HARD_LIGHT\n * @final\n */\nconst HARD_LIGHT = 'hard-light';\n/**\n * @typedef {'soft-light'} SOFT_LIGHT\n * @property {SOFT_LIGHT} SOFT_LIGHT\n * @final\n */\nconst SOFT_LIGHT = 'soft-light';\n/**\n * @typedef {'color-dodge'} DODGE\n * @property {DODGE} DODGE\n * @final\n */\nconst DODGE = 'color-dodge';\n/**\n * @typedef {'color-burn'} BURN\n * @property {BURN} BURN\n * @final\n */\nconst BURN = 'color-burn';\n\n// FILTERS\n/**\n * @typedef {'threshold'} THRESHOLD\n * @property {THRESHOLD} THRESHOLD\n * @final\n */\nconst THRESHOLD = 'threshold';\n/**\n * @typedef {'gray'} GRAY\n * @property {GRAY} GRAY\n * @final\n */\nconst GRAY = 'gray';\n/**\n * @typedef {'opaque'} OPAQUE\n * @property {OPAQUE} OPAQUE\n * @final\n */\nconst OPAQUE = 'opaque';\n/**\n * @typedef {'invert'} INVERT\n * @property {INVERT} INVERT\n * @final\n */\nconst INVERT = 'invert';\n/**\n * @typedef {'posterize'} POSTERIZE\n * @property {POSTERIZE} POSTERIZE\n * @final\n */\nconst POSTERIZE = 'posterize';\n/**\n * @typedef {'dilate'} DILATE\n * @property {DILATE} DILATE\n * @final\n */\nconst DILATE = 'dilate';\n/**\n * @typedef {'erode'} ERODE\n * @property {ERODE} ERODE\n * @final\n */\nconst ERODE = 'erode';\n/**\n * @typedef {'blur'} BLUR\n * @property {BLUR} BLUR\n * @final\n */\nconst BLUR = 'blur';\n\n// TYPOGRAPHY\n/**\n * @typedef {'normal'} NORMAL\n * @property {NORMAL} NORMAL\n * @final\n */\nconst NORMAL = 'normal';\n/**\n * @typedef {'italic'} ITALIC\n * @property {ITALIC} ITALIC\n * @final\n */\nconst ITALIC = 'italic';\n/**\n * @typedef {'bold'} BOLD\n * @property {BOLD} BOLD\n * @final\n */\nconst BOLD = 'bold';\n/**\n * @typedef {'bold italic'} BOLDITALIC\n * @property {BOLDITALIC} BOLDITALIC\n * @final\n */\nconst BOLDITALIC = 'bold italic';\n/**\n * @typedef {'CHAR'} CHAR\n * @property {CHAR} CHAR\n * @final\n */\nconst CHAR = 'CHAR';\n/**\n * @typedef {'WORD'} WORD\n * @property {WORD} WORD\n * @final\n */\nconst WORD = 'WORD';\n\n// TYPOGRAPHY-INTERNAL\nconst _DEFAULT_TEXT_FILL = '#000000';\nconst _DEFAULT_LEADMULT = 1.25;\nconst _CTX_MIDDLE = 'middle';\n\n// VERTICES\n/**\n * @typedef {'linear'} LINEAR\n * @property {LINEAR} LINEAR\n * @final\n */\nconst LINEAR = 'linear';\n/**\n * @typedef {'quadratic'} QUADRATIC\n * @property {QUADRATIC} QUADRATIC\n * @final\n */\nconst QUADRATIC = 'quadratic';\n/**\n * @typedef {'bezier'} BEZIER\n * @property {BEZIER} BEZIER\n * @final\n */\nconst BEZIER = 'bezier';\n/**\n * @typedef {'curve'} CURVE\n * @property {CURVE} CURVE\n * @final\n */\nconst CURVE = 'curve';\n\n// WEBGL DRAWMODES\n/**\n * @typedef {'stroke'} STROKE\n * @property {STROKE} STROKE\n * @final\n */\nconst STROKE = 'stroke';\n/**\n * @typedef {'fill'} FILL\n * @property {FILL} FILL\n * @final\n */\nconst FILL = 'fill';\n/**\n * @typedef {'texture'} TEXTURE\n * @property {TEXTURE} TEXTURE\n * @final\n */\nconst TEXTURE = 'texture';\n/**\n * @typedef {'immediate'} IMMEDIATE\n * @property {IMMEDIATE} IMMEDIATE\n * @final\n */\nconst IMMEDIATE = 'immediate';\n\n// WEBGL TEXTURE MODE\n// NORMAL already exists for typography\n/**\n * @typedef {'image'} IMAGE\n * @property {IMAGE} IMAGE\n * @final\n */\nconst IMAGE = 'image';\n\n// WEBGL TEXTURE WRAP AND FILTERING\n// LINEAR already exists above\n/**\n * @typedef {'nearest'} NEAREST\n * @property {NEAREST} NEAREST\n * @final\n */\nconst NEAREST = 'nearest';\n/**\n * @typedef {'repeat'} REPEAT\n * @property {REPEAT} REPEAT\n * @final\n */\nconst REPEAT = 'repeat';\n/**\n * @typedef {'clamp'} CLAMP\n * @property {CLAMP} CLAMP\n * @final\n */\nconst CLAMP = 'clamp';\n/**\n * @typedef {'mirror'} MIRROR\n * @property {MIRROR} MIRROR\n * @final\n */\nconst MIRROR = 'mirror';\n\n// WEBGL GEOMETRY SHADING\n/**\n * @typedef {'flat'} FLAT\n * @property {FLAT} FLAT\n * @final\n */\nconst FLAT = 'flat';\n/**\n * @typedef {'smooth'} SMOOTH\n * @property {SMOOTH} SMOOTH\n * @final\n */\nconst SMOOTH = 'smooth';\n\n// DEVICE-ORIENTATION\n/**\n * @typedef {'landscape'} LANDSCAPE\n * @property {LANDSCAPE} LANDSCAPE\n * @final\n */\nconst LANDSCAPE = 'landscape';\n/**\n * @typedef {'portrait'} PORTRAIT\n * @property {PORTRAIT} PORTRAIT\n * @final\n */\nconst PORTRAIT = 'portrait';\n\n// DEFAULTS\nconst _DEFAULT_STROKE = '#000000';\nconst _DEFAULT_FILL = '#FFFFFF';\n\n/**\n * @typedef {'grid'} GRID\n * @property {GRID} GRID\n * @final\n */\nconst GRID = 'grid';\n\n/**\n * @typedef {'axes'} AXES\n * @property {AXES} AXES\n * @final\n */\nconst AXES = 'axes';\n\n/**\n * @typedef {'label'} LABEL\n * @property {LABEL} LABEL\n * @final\n */\nconst LABEL = 'label';\n/**\n * @typedef {'fallback'} FALLBACK\n * @property {FALLBACK} FALLBACK\n * @final\n */\nconst FALLBACK = 'fallback';\n\n/**\n * @typedef {'contain'} CONTAIN\n * @property {CONTAIN} CONTAIN\n * @final\n */\nconst CONTAIN = 'contain';\n\n/**\n * @typedef {'cover'} COVER\n * @property {COVER} COVER\n * @final\n */\nconst COVER = 'cover';\n\n/**\n * @typedef {'unsigned-byte'} UNSIGNED_BYTE\n * @property {UNSIGNED_BYTE} UNSIGNED_BYTE\n * @final\n */\nconst UNSIGNED_BYTE = 'unsigned-byte';\n\n/**\n * @typedef {'unsigned-int'} UNSIGNED_INT\n * @property {UNSIGNED_INT} UNSIGNED_INT\n * @final\n */\nconst UNSIGNED_INT = 'unsigned-int';\n\n/**\n * @typedef {'float'} FLOAT\n * @property {FLOAT} FLOAT\n * @final\n */\nconst FLOAT = 'float';\n\n/**\n * @typedef {'half-float'} HALF_FLOAT\n * @property {HALF_FLOAT} HALF_FLOAT\n * @final\n */\nconst HALF_FLOAT = 'half-float';\n\n/**\n * The `splineProperty('ends')` mode where splines curve through\n * their first and last points.\n * @typedef {unique symbol} INCLUDE\n * @property {INCLUDE} INCLUDE\n * @final\n */\nconst INCLUDE = Symbol('include');\n\n/**\n * The `splineProperty('ends')` mode where the first and last points in a spline\n * affect the direction of the curve, but are not rendered.\n * @typedef {unique symbol} EXCLUDE\n * @property {EXCLUDE} EXCLUDE\n * @final\n */\nconst EXCLUDE = Symbol('exclude');\n\n/**\n * The `splineProperty('ends')` mode where the spline loops back to its first point.\n * Only used internally.\n * @typedef {unique symbol} JOIN\n * @property {JOIN} JOIN\n * @final\n * @private\n */\nconst JOIN = Symbol('join');\n\nvar constants = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tADD: ADD,\n\tALT: ALT,\n\tARROW: ARROW,\n\tAUTO: AUTO,\n\tAXES: AXES,\n\tBACKSPACE: BACKSPACE,\n\tBASELINE: BASELINE,\n\tBEVEL: BEVEL,\n\tBEZIER: BEZIER,\n\tBLEND: BLEND,\n\tBLUR: BLUR,\n\tBOLD: BOLD,\n\tBOLDITALIC: BOLDITALIC,\n\tBOTTOM: BOTTOM,\n\tBURN: BURN,\n\tCENTER: CENTER,\n\tCHAR: CHAR,\n\tCHORD: CHORD,\n\tCLAMP: CLAMP,\n\tCLOSE: CLOSE,\n\tCONTAIN: CONTAIN,\n\tCONTROL: CONTROL,\n\tCORNER: CORNER,\n\tCORNERS: CORNERS,\n\tCOVER: COVER,\n\tCROSS: CROSS,\n\tCURVE: CURVE,\n\tDARKEST: DARKEST,\n\tDEG_TO_RAD: DEG_TO_RAD,\n\tDELETE: DELETE,\n\tDIFFERENCE: DIFFERENCE,\n\tDILATE: DILATE,\n\tDODGE: DODGE,\n\tDOWN_ARROW: DOWN_ARROW,\n\tEMPTY_PATH: EMPTY_PATH,\n\tENTER: ENTER,\n\tERODE: ERODE,\n\tESCAPE: ESCAPE,\n\tEXCLUDE: EXCLUDE,\n\tEXCLUSION: EXCLUSION,\n\tFALLBACK: FALLBACK,\n\tFILL: FILL,\n\tFLAT: FLAT,\n\tFLOAT: FLOAT,\n\tFULL: FULL,\n\tGRAY: GRAY,\n\tGRID: GRID,\n\tHALF_FLOAT: HALF_FLOAT,\n\tHALF_PI: HALF_PI,\n\tHAND: HAND,\n\tHARD_LIGHT: HARD_LIGHT,\n\tIMAGE: IMAGE,\n\tIMMEDIATE: IMMEDIATE,\n\tINCLUDE: INCLUDE,\n\tINVERT: INVERT,\n\tITALIC: ITALIC,\n\tJOIN: JOIN,\n\tLABEL: LABEL,\n\tLANDSCAPE: LANDSCAPE,\n\tLEFT: LEFT,\n\tLEFT_ARROW: LEFT_ARROW,\n\tLIGHTEST: LIGHTEST,\n\tLINEAR: LINEAR,\n\tLINES: LINES,\n\tLINE_LOOP: LINE_LOOP,\n\tLINE_STRIP: LINE_STRIP,\n\tMIRROR: MIRROR,\n\tMITER: MITER,\n\tMOVE: MOVE,\n\tMULTIPLY: MULTIPLY,\n\tNEAREST: NEAREST,\n\tNORMAL: NORMAL,\n\tOPAQUE: OPAQUE,\n\tOPEN: OPEN,\n\tOPTION: OPTION,\n\tOVERLAY: OVERLAY,\n\tP2D: P2D,\n\tP2DHDR: P2DHDR,\n\tPATH: PATH,\n\tPI: PI,\n\tPIE: PIE,\n\tPOINTS: POINTS,\n\tPORTRAIT: PORTRAIT,\n\tPOSTERIZE: POSTERIZE,\n\tPROJECT: PROJECT,\n\tQUADRATIC: QUADRATIC,\n\tQUADS: QUADS,\n\tQUAD_STRIP: QUAD_STRIP,\n\tQUARTER_PI: QUARTER_PI,\n\tRADIUS: RADIUS,\n\tRAD_TO_DEG: RAD_TO_DEG,\n\tREMOVE: REMOVE,\n\tREPEAT: REPEAT,\n\tREPLACE: REPLACE,\n\tRETURN: RETURN,\n\tRIGHT: RIGHT,\n\tRIGHT_ARROW: RIGHT_ARROW,\n\tROUND: ROUND,\n\tSCREEN: SCREEN,\n\tSHIFT: SHIFT,\n\tSIMPLE: SIMPLE,\n\tSMOOTH: SMOOTH,\n\tSOFT_LIGHT: SOFT_LIGHT,\n\tSQUARE: SQUARE,\n\tSTROKE: STROKE,\n\tSUBTRACT: SUBTRACT,\n\tTAB: TAB,\n\tTAU: TAU,\n\tTESS: TESS,\n\tTEXT: TEXT,\n\tTEXTURE: TEXTURE,\n\tTHRESHOLD: THRESHOLD,\n\tTOP: TOP,\n\tTRIANGLES: TRIANGLES,\n\tTRIANGLE_FAN: TRIANGLE_FAN,\n\tTRIANGLE_STRIP: TRIANGLE_STRIP,\n\tTWO_PI: TWO_PI,\n\tUNSIGNED_BYTE: UNSIGNED_BYTE,\n\tUNSIGNED_INT: UNSIGNED_INT,\n\tUP_ARROW: UP_ARROW,\n\tVERSION: VERSION,\n\tWAIT: WAIT,\n\tWEBGL: WEBGL,\n\tWEBGL2: WEBGL2,\n\tWORD: WORD,\n\t_CTX_MIDDLE: _CTX_MIDDLE,\n\t_DEFAULT_FILL: _DEFAULT_FILL,\n\t_DEFAULT_LEADMULT: _DEFAULT_LEADMULT,\n\t_DEFAULT_STROKE: _DEFAULT_STROKE,\n\t_DEFAULT_TEXT_FILL: _DEFAULT_TEXT_FILL\n});\n\nexport { BLUR as $, AXES as A, BEVEL as B, CENTER as C, DEG_TO_RAD as D, EMPTY_PATH as E, FLAT as F, GRID as G, HAND as H, INCLUDE as I, JOIN as J, OPAQUE as K, LINES as L, MOVE as M, NORMAL as N, OPEN as O, P2D as P, QUADS as Q, RIGHT as R, SQUARE as S, TEXTURE as T, POSTERIZE as U, DILATE as V, WAIT as W, GRAY as X, ERODE as Y, THRESHOLD as Z, INVERT as _, RADIUS as a, BOLDITALIC as a$, WEBGL as a0, IMAGE as a1, _DEFAULT_FILL as a2, _DEFAULT_STROKE as a3, REMOVE as a4, SUBTRACT as a5, DARKEST as a6, LIGHTEST as a7, DIFFERENCE as a8, MULTIPLY as a9, MIRROR as aA, FLOAT as aB, LINEAR as aC, HALF_FLOAT as aD, P2DHDR as aE, QUARTER_PI as aF, TAU as aG, TOP as aH, LINE_STRIP as aI, LINE_LOOP as aJ, TESS as aK, ALT as aL, BACKSPACE as aM, CONTROL as aN, DELETE as aO, DOWN_ARROW as aP, ENTER as aQ, ESCAPE as aR, LEFT_ARROW as aS, OPTION as aT, RETURN as aU, RIGHT_ARROW as aV, SHIFT as aW, TAB as aX, UP_ARROW as aY, ITALIC as aZ, BOLD as a_, EXCLUSION as aa, SCREEN as ab, REPLACE as ac, OVERLAY as ad, HARD_LIGHT as ae, SOFT_LIGHT as af, DODGE as ag, BURN as ah, ADD as ai, PIE as aj, CHORD as ak, VERSION as al, WORD as am, BASELINE as an, LEFT as ao, COVER as ap, CONTAIN as aq, BOTTOM as ar, FILL as as, CLAMP as at, UNSIGNED_INT as au, UNSIGNED_BYTE as av, SIMPLE as aw, FULL as ax, NEAREST as ay, REPEAT as az, ARROW as b, CHAR as b0, _DEFAULT_TEXT_FILL as b1, _DEFAULT_LEADMULT as b2, _CTX_MIDDLE as b3, QUADRATIC as b4, BEZIER as b5, CURVE as b6, STROKE as b7, IMMEDIATE as b8, LANDSCAPE as b9, PORTRAIT as ba, LABEL as bb, FALLBACK as bc, CROSS as c, TEXT as d, CORNER as e, TWO_PI as f, HALF_PI as g, PI as h, CORNERS as i, ROUND as j, PROJECT as k, MITER as l, PATH as m, CLOSE as n, POINTS as o, TRIANGLES as p, TRIANGLE_FAN as q, TRIANGLE_STRIP as r, QUAD_STRIP as s, EXCLUDE as t, BLEND as u, constants as v, AUTO as w, RAD_TO_DEG as x, SMOOTH as y, WEBGL2 as z };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAGC,IAAI,CAACC,EAAE;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,OAAO;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,KAAK;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,SAAS;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,SAAS;;AAEvB;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGhB,GAAG,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,EAAE,GAAGF,GAAG;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,UAAU,GAAGjB,GAAG,GAAG,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkB,GAAG,GAAGlB,GAAG,GAAG,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,MAAM,GAAGnB,GAAG,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoB,UAAU,GAAGpB,GAAG,GAAG,KAAK;AAC9B,MAAMqB,UAAU,GAAG,KAAK,GAAGrB,GAAG;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsB,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,QAAQ,CAAC,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,KAAK;;AAEjB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;;AAE7B;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,WAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,WAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,OAAO;;AAEtB;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,YAAY;;AAEhC;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,KAAK;;AAEjB;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,SAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,YAAY;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;AACA,MAAMC,kBAAkB,GAAG,SAAS;AACpC,MAAMC,iBAAiB,GAAG,IAAI;AAC9B,MAAMC,WAAW,GAAG,QAAQ;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,UAAU;;AAE3B;AACA,MAAMC,eAAe,GAAG,SAAS;AACjC,MAAMC,aAAa,GAAG,SAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,UAAU;;AAE3B;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,eAAe;;AAErC;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,cAAc;;AAEnC;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,YAAY;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGC,MAAM,CAAC,SAAS,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGD,MAAM,CAAC,SAAS,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,IAAI,GAAGF,MAAM,CAAC,MAAM,CAAC;AAE3B,IAAIG,SAAS,GAAG,aAAaC,MAAM,CAACC,MAAM,CAAC;EAC1CC,SAAS,EAAE,IAAI;EACfnE,GAAG,EAAEA,GAAG;EACRhB,GAAG,EAAEA,GAAG;EACR7C,KAAK,EAAEA,KAAK;EACZ4C,IAAI,EAAEA,IAAI;EACVoE,IAAI,EAAEA,IAAI;EACVlE,SAAS,EAAEA,SAAS;EACpBxB,QAAQ,EAAEA,QAAQ;EAClBoB,KAAK,EAAEA,KAAK;EACZoD,MAAM,EAAEA,MAAM;EACdnC,KAAK,EAAEA,KAAK;EACZuB,IAAI,EAAEA,IAAI;EACVG,IAAI,EAAEA,IAAI;EACVC,UAAU,EAAEA,UAAU;EACtBjE,MAAM,EAAEA,MAAM;EACdqD,IAAI,EAAEA,IAAI;EACVvD,MAAM,EAAEA,MAAM;EACdoE,IAAI,EAAEA,IAAI;EACVlD,KAAK,EAAEA,KAAK;EACZkE,KAAK,EAAEA,KAAK;EACZpE,KAAK,EAAEA,KAAK;EACZgF,OAAO,EAAEA,OAAO;EAChBpE,OAAO,EAAEA,OAAO;EAChBjC,MAAM,EAAEA,MAAM;EACdC,OAAO,EAAEA,OAAO;EAChBqG,KAAK,EAAEA,KAAK;EACZjH,KAAK,EAAEA,KAAK;EACZ4F,KAAK,EAAEA,KAAK;EACZjC,OAAO,EAAEA,OAAO;EAChBlD,UAAU,EAAEA,UAAU;EACtBoC,MAAM,EAAEA,MAAM;EACdgB,UAAU,EAAEA,UAAU;EACtBgB,MAAM,EAAEA,MAAM;EACdP,KAAK,EAAEA,KAAK;EACZxB,UAAU,EAAEA,UAAU;EACtBhB,UAAU,EAAEA,UAAU;EACtBiB,KAAK,EAAEA,KAAK;EACZ+B,KAAK,EAAEA,KAAK;EACZ9B,MAAM,EAAEA,MAAM;EACdwE,OAAO,EAAEA,OAAO;EAChBzD,SAAS,EAAEA,SAAS;EACpBgD,QAAQ,EAAEA,QAAQ;EAClBjB,IAAI,EAAEA,IAAI;EACVQ,IAAI,EAAEA,IAAI;EACVc,KAAK,EAAEA,KAAK;EACZrH,IAAI,EAAEA,IAAI;EACV0E,IAAI,EAAEA,IAAI;EACVmC,IAAI,EAAEA,IAAI;EACVS,UAAU,EAAEA,UAAU;EACtBhH,OAAO,EAAEA,OAAO;EAChBJ,IAAI,EAAEA,IAAI;EACVmE,UAAU,EAAEA,UAAU;EACtB6B,KAAK,EAAEA,KAAK;EACZD,SAAS,EAAEA,SAAS;EACpBsB,OAAO,EAAEA,OAAO;EAChB3C,MAAM,EAAEA,MAAM;EACdM,MAAM,EAAEA,MAAM;EACdwC,IAAI,EAAEA,IAAI;EACVX,KAAK,EAAEA,KAAK;EACZN,SAAS,EAAEA,SAAS;EACpBzF,IAAI,EAAEA,IAAI;EACVkC,UAAU,EAAEA,UAAU;EACtBW,QAAQ,EAAEA,QAAQ;EAClB6B,MAAM,EAAEA,MAAM;EACdpE,KAAK,EAAEA,KAAK;EACZE,SAAS,EAAEA,SAAS;EACpBD,UAAU,EAAEA,UAAU;EACtB+E,MAAM,EAAEA,MAAM;EACd7D,KAAK,EAAEA,KAAK;EACZtC,IAAI,EAAEA,IAAI;EACV8D,QAAQ,EAAEA,QAAQ;EAClBkC,OAAO,EAAEA,OAAO;EAChBlB,MAAM,EAAEA,MAAM;EACdN,MAAM,EAAEA,MAAM;EACdzC,IAAI,EAAEA,IAAI;EACViB,MAAM,EAAEA,MAAM;EACdiB,OAAO,EAAEA,OAAO;EAChB1E,GAAG,EAAEA,GAAG;EACRC,MAAM,EAAEA,MAAM;EACdqC,IAAI,EAAEA,IAAI;EACVxC,EAAE,EAAEA,EAAE;EACN4C,GAAG,EAAEA,GAAG;EACRf,MAAM,EAAEA,MAAM;EACdqF,QAAQ,EAAEA,QAAQ;EAClB7B,SAAS,EAAEA,SAAS;EACpBxC,OAAO,EAAEA,OAAO;EAChBsD,SAAS,EAAEA,SAAS;EACpB/D,KAAK,EAAEA,KAAK;EACZC,UAAU,EAAEA,UAAU;EACtBtB,UAAU,EAAEA,UAAU;EACtBO,MAAM,EAAEA,MAAM;EACdH,UAAU,EAAEA,UAAU;EACtB+C,MAAM,EAAEA,MAAM;EACd0C,MAAM,EAAEA,MAAM;EACdjC,OAAO,EAAEA,OAAO;EAChBf,MAAM,EAAEA,MAAM;EACdrC,KAAK,EAAEA,KAAK;EACZsC,WAAW,EAAEA,WAAW;EACxBd,KAAK,EAAEA,KAAK;EACZ2B,MAAM,EAAEA,MAAM;EACdZ,KAAK,EAAEA,KAAK;EACZvD,MAAM,EAAEA,MAAM;EACdyG,MAAM,EAAEA,MAAM;EACdlC,UAAU,EAAEA,UAAU;EACtBhC,MAAM,EAAEA,MAAM;EACdwD,MAAM,EAAEA,MAAM;EACd/B,QAAQ,EAAEA,QAAQ;EAClBR,GAAG,EAAEA,GAAG;EACR/C,GAAG,EAAEA,GAAG;EACRsB,IAAI,EAAEA,IAAI;EACV1B,IAAI,EAAEA,IAAI;EACV4F,OAAO,EAAEA,OAAO;EAChBvB,SAAS,EAAEA,SAAS;EACpBvD,GAAG,EAAEA,GAAG;EACRO,SAAS,EAAEA,SAAS;EACpBC,YAAY,EAAEA,YAAY;EAC1BC,cAAc,EAAEA,cAAc;EAC9BlB,MAAM,EAAEA,MAAM;EACd0G,aAAa,EAAEA,aAAa;EAC5BC,YAAY,EAAEA,YAAY;EAC1B5D,QAAQ,EAAEA,QAAQ;EAClB/D,OAAO,EAAEA,OAAO;EAChBY,IAAI,EAAEA,IAAI;EACVT,KAAK,EAAEA,KAAK;EACZC,MAAM,EAAEA,MAAM;EACdyF,IAAI,EAAEA,IAAI;EACVG,WAAW,EAAEA,WAAW;EACxBmB,aAAa,EAAEA,aAAa;EAC5BpB,iBAAiB,EAAEA,iBAAiB;EACpCmB,eAAe,EAAEA,eAAe;EAChCpB,kBAAkB,EAAEA;AACrB,CAAC,CAAC;AAEF,SAASP,IAAI,IAAI+C,CAAC,EAAEjB,IAAI,IAAIkB,CAAC,EAAExF,KAAK,IAAIyF,CAAC,EAAEhH,MAAM,IAAIiH,CAAC,EAAExH,UAAU,IAAIyH,CAAC,EAAEpG,UAAU,IAAIqG,CAAC,EAAE7B,IAAI,IAAI8B,CAAC,EAAExB,IAAI,IAAIyB,CAAC,EAAEpI,IAAI,IAAIqI,CAAC,EAAEhB,OAAO,IAAIiB,CAAC,EAAEd,IAAI,IAAIe,CAAC,EAAE9D,MAAM,IAAI+D,CAAC,EAAEpH,KAAK,IAAIqH,CAAC,EAAExI,IAAI,IAAIyI,CAAC,EAAE3D,MAAM,IAAI4D,CAAC,EAAE3G,IAAI,IAAI4G,CAAC,EAAEpJ,GAAG,IAAIqJ,CAAC,EAAEnH,KAAK,IAAIoH,CAAC,EAAEjI,KAAK,IAAIkI,CAAC,EAAE3G,MAAM,IAAI4G,CAAC,EAAElD,OAAO,IAAImD,CAAC,EAAEtE,SAAS,IAAIuE,CAAC,EAAEtE,MAAM,IAAIuE,CAAC,EAAEhJ,IAAI,IAAIiJ,CAAC,EAAE5E,IAAI,IAAI6E,CAAC,EAAExE,KAAK,IAAIyE,CAAC,EAAE/E,SAAS,IAAIgF,CAAC,EAAE7E,MAAM,IAAI8E,CAAC,EAAE5I,MAAM,IAAI6I,CAAC,EAAEvE,UAAU,IAAIwE,EAAE,EAAEhK,KAAK,IAAIiK,EAAE,EAAE3D,KAAK,IAAI4D,EAAE,EAAElD,aAAa,IAAImD,EAAE,EAAEpD,eAAe,IAAIqD,EAAE,EAAEtG,MAAM,IAAIuG,EAAE,EAAElG,QAAQ,IAAImG,EAAE,EAAEtG,OAAO,IAAIuG,EAAE,EAAEtG,QAAQ,IAAIuG,EAAE,EAAEtG,UAAU,IAAIuG,EAAE,EAAEpG,QAAQ,IAAIqG,EAAE,EAAEhE,MAAM,IAAIiE,EAAE,EAAElD,KAAK,IAAImD,EAAE,EAAE9E,MAAM,IAAI+E,EAAE,EAAEnD,UAAU,IAAIoD,EAAE,EAAE/K,MAAM,IAAIgL,EAAE,EAAEpK,UAAU,IAAIqK,EAAE,EAAEpK,GAAG,IAAIqK,EAAE,EAAE3J,GAAG,IAAI4J,EAAE,EAAEvJ,UAAU,IAAIwJ,EAAE,EAAEvJ,SAAS,IAAIwJ,EAAE,EAAElJ,IAAI,IAAImJ,EAAE,EAAEtI,GAAG,IAAIuI,EAAE,EAAEtI,SAAS,IAAIuI,EAAE,EAAEtI,OAAO,IAAIuI,EAAE,EAAEtI,MAAM,IAAIuI,EAAE,EAAEtI,UAAU,IAAIuI,EAAE,EAAEtI,KAAK,IAAIuI,EAAE,EAAEtI,MAAM,IAAIuI,EAAE,EAAEtI,UAAU,IAAIuI,EAAE,EAAEtI,MAAM,IAAIuI,EAAE,EAAEtI,MAAM,IAAIuI,EAAE,EAAEtI,WAAW,IAAIuI,EAAE,EAAEtI,KAAK,IAAIuI,EAAE,EAAEtI,GAAG,IAAIuI,EAAE,EAAEtI,QAAQ,IAAIuI,EAAE,EAAE7G,MAAM,IAAI8G,EAAE,EAAE7G,IAAI,IAAI8G,EAAE,EAAEjI,SAAS,IAAIkI,EAAE,EAAEhI,MAAM,IAAIiI,EAAE,EAAEhI,OAAO,IAAIiI,EAAE,EAAEhI,OAAO,IAAIiI,EAAE,EAAEhI,UAAU,IAAIiI,EAAE,EAAEhI,UAAU,IAAIiI,EAAE,EAAEhI,KAAK,IAAIiI,EAAE,EAAEhI,IAAI,IAAIiI,EAAE,EAAE9I,GAAG,IAAI+I,EAAE,EAAEtK,GAAG,IAAIuK,EAAE,EAAExK,KAAK,IAAIyK,EAAE,EAAEnN,OAAO,IAAIoN,EAAE,EAAEvH,IAAI,IAAIwH,EAAE,EAAE1L,QAAQ,IAAI2L,EAAE,EAAE/L,IAAI,IAAIgM,EAAE,EAAE9F,KAAK,IAAI+F,EAAE,EAAEhG,OAAO,IAAIiG,EAAE,EAAE/L,MAAM,IAAIgM,EAAE,EAAEpH,IAAI,IAAIqH,EAAE,EAAE/G,KAAK,IAAIgH,EAAE,EAAEjG,YAAY,IAAIkG,EAAE,EAAEnG,aAAa,IAAIoG,EAAE,EAAExN,MAAM,IAAIyN,EAAE,EAAExN,IAAI,IAAIyN,EAAE,EAAEtH,OAAO,IAAIuH,EAAE,EAAEtH,MAAM,IAAIuH,EAAE,EAAE7N,KAAK,IAAI8N,CAAC,EAAEvI,IAAI,IAAIwI,EAAE,EAAEtI,kBAAkB,IAAIuI,EAAE,EAAEtI,iBAAiB,IAAIuI,EAAE,EAAEtI,WAAW,IAAIuI,EAAE,EAAErI,SAAS,IAAIsI,EAAE,EAAErI,MAAM,IAAIsI,EAAE,EAAErI,KAAK,IAAIsI,EAAE,EAAErI,MAAM,IAAIsI,EAAE,EAAEnI,SAAS,IAAIoI,EAAE,EAAE5H,SAAS,IAAI6H,EAAE,EAAE5H,QAAQ,IAAI6H,EAAE,EAAExH,KAAK,IAAIyH,EAAE,EAAExH,QAAQ,IAAIyH,EAAE,EAAExO,KAAK,IAAIyO,CAAC,EAAEtO,IAAI,IAAIuO,CAAC,EAAE/N,MAAM,IAAIgO,CAAC,EAAEnO,MAAM,IAAIoO,CAAC,EAAEvO,OAAO,IAAIwO,CAAC,EAAEtP,EAAE,IAAIuP,CAAC,EAAElO,OAAO,IAAImO,CAAC,EAAEzM,KAAK,IAAI0M,CAAC,EAAE5M,OAAO,IAAI6M,CAAC,EAAEzM,KAAK,IAAI0M,CAAC,EAAEnN,IAAI,IAAIoN,CAAC,EAAEnN,KAAK,IAAIoN,CAAC,EAAEhO,MAAM,IAAIiO,CAAC,EAAE7N,SAAS,IAAI8N,CAAC,EAAE7N,YAAY,IAAI8N,CAAC,EAAE7N,cAAc,IAAI8N,CAAC,EAAE5N,UAAU,IAAI6N,CAAC,EAAEjI,OAAO,IAAIkI,CAAC,EAAElM,KAAK,IAAImM,CAAC,EAAEjI,SAAS,IAAIkI,CAAC,EAAEnN,IAAI,IAAIoN,CAAC,EAAEnP,UAAU,IAAIoP,CAAC,EAAEvJ,MAAM,IAAIwJ,CAAC,EAAEnQ,MAAM,IAAIoQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}