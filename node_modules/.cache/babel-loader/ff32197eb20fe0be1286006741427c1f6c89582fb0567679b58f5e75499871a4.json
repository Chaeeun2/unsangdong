{"ast":null,"code":"/**\n * @module Structure\n * @submodule Structure\n * @for p5\n * @requires core\n */\n\nfunction structure(p5, fn) {\n  /**\n   * Stops the code in <a href=\"#/p5/draw\">draw()</a> from running repeatedly.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling `noLoop()` stops <a href=\"#/p5/draw\">draw()</a> from\n   * repeating. The draw loop can be restarted by calling\n   * <a href=\"#/p5/loop\">loop()</a>. <a href=\"#/p5/draw\">draw()</a> can be run\n   * once by calling <a href=\"#/p5/redraw\">redraw()</a>.\n   *\n   * The <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\n   * whether a sketch is looping, as in `isLooping() === true`.\n   *\n   * @method noLoop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe('A white half-circle on the left edge of a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's x-coordinate.\n   *   let x = frameCount;\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Double-click to stop the draw loop.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A white circle moves randomly on a gray background. It stops moving when the user double-clicks.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   *\n   * // Stop the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   noLoop();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let startButton;\n   * let stopButton;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the button elements and place them\n   *   // beneath the canvas.\n   *   startButton = createButton('▶');\n   *   startButton.position(0, 100);\n   *   startButton.size(50, 20);\n   *   stopButton = createButton('◾');\n   *   stopButton.position(50, 100);\n   *   stopButton.size(50, 20);\n   *\n   *   // Set functions to call when the buttons are pressed.\n   *   startButton.mousePressed(loop);\n   *   stopButton.mousePressed(noLoop);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe(\n   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noLoop = function () {\n    this._loop = false;\n  };\n\n  /**\n   * Resumes the draw loop after <a href=\"#/p5/noLoop\">noLoop()</a> has been\n   * called.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\n   * restarted by calling `loop()`.\n   *\n   * The <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\n   * whether a sketch is looping, as in `isLooping() === true`.\n   *\n   * @method loop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle starts moving to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's x-coordinate.\n   *   let x = frameCount;\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   * }\n   *\n   * // Resume the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   loop();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let startButton;\n   * let stopButton;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the button elements and place them\n   *   // beneath the canvas.\n   *   startButton = createButton('▶');\n   *   startButton.position(0, 100);\n   *   startButton.size(50, 20);\n   *   stopButton = createButton('◾');\n   *   stopButton.position(50, 100);\n   *   stopButton.size(50, 20);\n   *\n   *   // Set functions to call when the buttons are pressed.\n   *   startButton.mousePressed(loop);\n   *   stopButton.mousePressed(noLoop);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe(\n   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.loop = function () {\n    if (!this._loop) {\n      this._loop = true;\n      if (this._setupDone) {\n        this._draw();\n      }\n    }\n  };\n\n  /**\n   * Returns `true` if the draw loop is running and `false` if not.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\n   * restarted by calling <a href=\"#/p5/loop\">loop()</a>.\n   *\n   * The `isLooping()` function can be used to check whether a sketch is\n   * looping, as in `isLooping() === true`.\n   *\n   * @method isLooping\n   * @returns {boolean}\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle drawn against a gray background. When the user double-clicks, the circle stops or resumes following the mouse.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle at the mouse's position.\n   *   circle(mouseX, mouseY, 20);\n   * }\n   *\n   * // Toggle the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   if (isLooping() === true) {\n   *     noLoop();\n   *   } else {\n   *     loop();\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.isLooping = function () {\n    return this._loop;\n  };\n\n  /**\n   * Runs the code in <a href=\"#/p5/draw\">draw()</a> once.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. Calling `redraw()` will\n   * execute the code in the <a href=\"#/p5/draw\">draw()</a> function a set\n   * number of times.\n   *\n   * The parameter, `n`, is optional. If a number is passed, as in `redraw(5)`,\n   * then the draw loop will run the given number of times. By default, `n` is\n   * 1.\n   *\n   * @method redraw\n   * @param  {Integer} [n] number of times to run <a href=\"#/p5/draw\">draw()</a>. Defaults to 1.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click the canvas to move the circle.\n   *\n   * let x = 0;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle moves a little to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   *\n   *   // Increment x.\n   *   x += 5;\n   * }\n   *\n   * // Run the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   redraw();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Double-click the canvas to move the circle.\n   *\n   * let x = 0;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle hops to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   *\n   *   // Increment x.\n   *   x += 5;\n   * }\n   *\n   * // Run the draw loop three times when the user double-clicks.\n   * function doubleClicked() {\n   *   redraw(3);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.redraw = async function (n) {\n    if (this._inUserDraw || !this._setupDone) {\n      return;\n    }\n    let numberOfRedraws = parseInt(n);\n    if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {\n      numberOfRedraws = 1;\n    }\n    const context = this._isGlobal ? window : this;\n    if (typeof context.draw === 'function') {\n      if (typeof context.setup === 'undefined') {\n        context.scale(context._pixelDensity, context._pixelDensity);\n      }\n      for (let idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {\n        context.resetMatrix();\n        if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n          this._updateAccsOutput();\n        }\n        if (this._renderer.isP3D) {\n          this._renderer._update();\n        }\n        this.frameCount = context.frameCount + 1;\n        await this._runLifecycleHook('predraw');\n        this._inUserDraw = true;\n        try {\n          await context.draw();\n        } finally {\n          this._inUserDraw = false;\n        }\n        await this._runLifecycleHook('postdraw');\n      }\n    }\n  };\n\n  /**\n   * Creates a new sketch in \"instance\" mode.\n   *\n   * All p5.js sketches are instances of the `p5` class. Put another way, all\n   * p5.js sketches are objects with methods including `pInst.setup()`,\n   * `pInst.draw()`, `pInst.circle()`, and `pInst.fill()`. By default, sketches\n   * run in \"global mode\" to hide some of this complexity.\n   *\n   * In global mode, a default instance of the `p5` class is created\n   * automatically. The default `p5` instance searches the web page's source\n   * code for declarations of system functions such as `setup()`, `draw()`,\n   * and `mousePressed()`, then attaches those functions to itself as methods.\n   * Calling a function such as `circle()` in global mode actually calls the\n   * default `p5` object's `pInst.circle()` method.\n   *\n   * It's often helpful to isolate the code within sketches from the rest of the\n   * code on a web page. Two common use cases are web pages that use other\n   * JavaScript libraries and web pages with multiple sketches. \"Instance mode\"\n   * makes it easy to support both of these scenarios.\n   *\n   * Instance mode sketches support the same API as global mode sketches. They\n   * use a function to bundle, or encapsulate, an entire sketch. The function\n   * containing the sketch is then passed to the `p5()` constructor.\n   *\n   * The first parameter, `sketch`, is a function that contains the sketch. For\n   * example, the statement `new p5(mySketch)` would create a new instance mode\n   * sketch from a function named `mySketch`. The function should have one\n   * parameter, `p`, that's a `p5` object.\n   *\n   * The second parameter, `node`, is optional. If a string is passed, as in\n   * `new p5(mySketch, 'sketch-one')` the new instance mode sketch will become a\n   * child of the HTML element with the id `sketch-one`. If an HTML element is\n   * passed, as in `new p5(mySketch, myElement)`, then the new instance mode\n   * sketch will become a child of the `Element` object called `myElement`.\n   *\n   * @method p5\n   * @param {Object} sketch function containing the sketch.\n   * @param {String|HTMLElement} node ID or reference to the HTML element that will contain the sketch.\n   *\n   * @example\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle drawn on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(50, 50, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *   // Create the sketch's variables within its scope.\n   *   let x = 50;\n   *   let y = 50;\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle moves randomly on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Update x and y.\n   *     x += p.random(-1, 1);\n   *     y += p.random(-1, 1);\n   *\n   *     // Draw the circle.\n   *     p.circle(x, y, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle drawn on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(50, 50, 20);\n   *   };\n   * }\n   *\n   * // Select the web page's body element.\n   * let body = document.querySelector('body');\n   *\n   * // Initialize the sketch and attach it to the web page's body.\n   * new p5(sketch, body);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe(\n   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves.'\n   *     );\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(p.mouseX, p.mouseY, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe(\n   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves. The circle becomes black when the user double-clicks.'\n   *     );\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(p.mouseX, p.mouseY, 20);\n   *   };\n   *\n   *   // Declare the doubleClicked() method.\n   *   p.doubleClicked = function () {\n   *     // Change the fill color when the user double-clicks.\n   *     p.fill(0);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   */\n}\nif (typeof p5 !== 'undefined') {\n  structure(p5, p5.prototype);\n}\nexport { structure as default };","map":{"version":3,"names":["structure","p5","fn","noLoop","_loop","loop","_setupDone","_draw","isLooping","redraw","n","_inUserDraw","numberOfRedraws","parseInt","isNaN","context","_isGlobal","window","draw","setup","scale","_pixelDensity","idxRedraw","resetMatrix","_accessibleOutputs","grid","text","_updateAccsOutput","_renderer","isP3D","_update","frameCount","_runLifecycleHook","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/core/structure.js"],"sourcesContent":["/**\n * @module Structure\n * @submodule Structure\n * @for p5\n * @requires core\n */\n\nfunction structure(p5, fn){\n  /**\n   * Stops the code in <a href=\"#/p5/draw\">draw()</a> from running repeatedly.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling `noLoop()` stops <a href=\"#/p5/draw\">draw()</a> from\n   * repeating. The draw loop can be restarted by calling\n   * <a href=\"#/p5/loop\">loop()</a>. <a href=\"#/p5/draw\">draw()</a> can be run\n   * once by calling <a href=\"#/p5/redraw\">redraw()</a>.\n   *\n   * The <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\n   * whether a sketch is looping, as in `isLooping() === true`.\n   *\n   * @method noLoop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe('A white half-circle on the left edge of a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's x-coordinate.\n   *   let x = frameCount;\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Double-click to stop the draw loop.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A white circle moves randomly on a gray background. It stops moving when the user double-clicks.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   *\n   * // Stop the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   noLoop();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let startButton;\n   * let stopButton;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the button elements and place them\n   *   // beneath the canvas.\n   *   startButton = createButton('▶');\n   *   startButton.position(0, 100);\n   *   startButton.size(50, 20);\n   *   stopButton = createButton('◾');\n   *   stopButton.position(50, 100);\n   *   stopButton.size(50, 20);\n   *\n   *   // Set functions to call when the buttons are pressed.\n   *   startButton.mousePressed(loop);\n   *   stopButton.mousePressed(noLoop);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe(\n   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noLoop = function() {\n    this._loop = false;\n  };\n\n  /**\n   * Resumes the draw loop after <a href=\"#/p5/noLoop\">noLoop()</a> has been\n   * called.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\n   * restarted by calling `loop()`.\n   *\n   * The <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\n   * whether a sketch is looping, as in `isLooping() === true`.\n   *\n   * @method loop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle starts moving to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's x-coordinate.\n   *   let x = frameCount;\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   * }\n   *\n   * // Resume the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   loop();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let startButton;\n   * let stopButton;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the button elements and place them\n   *   // beneath the canvas.\n   *   startButton = createButton('▶');\n   *   startButton.position(0, 100);\n   *   startButton.size(50, 20);\n   *   stopButton = createButton('◾');\n   *   stopButton.position(50, 100);\n   *   stopButton.size(50, 20);\n   *\n   *   // Set functions to call when the buttons are pressed.\n   *   startButton.mousePressed(loop);\n   *   stopButton.mousePressed(noLoop);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe(\n   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the circle's coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the circle.\n   *   // Normally, the circle would move from left to right.\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.loop = function() {\n    if (!this._loop) {\n      this._loop = true;\n      if (this._setupDone) {\n        this._draw();\n      }\n    }\n  };\n\n  /**\n   * Returns `true` if the draw loop is running and `false` if not.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\n   * restarted by calling <a href=\"#/p5/loop\">loop()</a>.\n   *\n   * The `isLooping()` function can be used to check whether a sketch is\n   * looping, as in `isLooping() === true`.\n   *\n   * @method isLooping\n   * @returns {boolean}\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle drawn against a gray background. When the user double-clicks, the circle stops or resumes following the mouse.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle at the mouse's position.\n   *   circle(mouseX, mouseY, 20);\n   * }\n   *\n   * // Toggle the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   if (isLooping() === true) {\n   *     noLoop();\n   *   } else {\n   *     loop();\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.isLooping = function() {\n    return this._loop;\n  };\n\n  /**\n   * Runs the code in <a href=\"#/p5/draw\">draw()</a> once.\n   *\n   * By default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\n   * second. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n   * <a href=\"#/p5/draw\">draw()</a> from repeating. Calling `redraw()` will\n   * execute the code in the <a href=\"#/p5/draw\">draw()</a> function a set\n   * number of times.\n   *\n   * The parameter, `n`, is optional. If a number is passed, as in `redraw(5)`,\n   * then the draw loop will run the given number of times. By default, `n` is\n   * 1.\n   *\n   * @method redraw\n   * @param  {Integer} [n] number of times to run <a href=\"#/p5/draw\">draw()</a>. Defaults to 1.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click the canvas to move the circle.\n   *\n   * let x = 0;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle moves a little to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   *\n   *   // Increment x.\n   *   x += 5;\n   * }\n   *\n   * // Run the draw loop when the user double-clicks.\n   * function doubleClicked() {\n   *   redraw();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Double-click the canvas to move the circle.\n   *\n   * let x = 0;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Turn off the draw loop.\n   *   noLoop();\n   *\n   *   describe(\n   *     'A white half-circle on the left edge of a gray square. The circle hops to the right when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 20);\n   *\n   *   // Increment x.\n   *   x += 5;\n   * }\n   *\n   * // Run the draw loop three times when the user double-clicks.\n   * function doubleClicked() {\n   *   redraw(3);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.redraw = async function(n) {\n    if (this._inUserDraw || !this._setupDone) {\n      return;\n    }\n\n    let numberOfRedraws = parseInt(n);\n    if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {\n      numberOfRedraws = 1;\n    }\n\n    const context = this._isGlobal ? window : this;\n    if (typeof context.draw === 'function') {\n      if (typeof context.setup === 'undefined') {\n        context.scale(context._pixelDensity, context._pixelDensity);\n      }\n      for (let idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {\n        context.resetMatrix();\n        if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n          this._updateAccsOutput();\n        }\n        if (this._renderer.isP3D) {\n          this._renderer._update();\n        }\n        this.frameCount = context.frameCount + 1;\n        await this._runLifecycleHook('predraw');\n        this._inUserDraw = true;\n        try {\n          await context.draw();\n        } finally {\n          this._inUserDraw = false;\n        }\n        await this._runLifecycleHook('postdraw');\n      }\n    }\n  };\n\n  /**\n   * Creates a new sketch in \"instance\" mode.\n   *\n   * All p5.js sketches are instances of the `p5` class. Put another way, all\n   * p5.js sketches are objects with methods including `pInst.setup()`,\n   * `pInst.draw()`, `pInst.circle()`, and `pInst.fill()`. By default, sketches\n   * run in \"global mode\" to hide some of this complexity.\n   *\n   * In global mode, a default instance of the `p5` class is created\n   * automatically. The default `p5` instance searches the web page's source\n   * code for declarations of system functions such as `setup()`, `draw()`,\n   * and `mousePressed()`, then attaches those functions to itself as methods.\n   * Calling a function such as `circle()` in global mode actually calls the\n   * default `p5` object's `pInst.circle()` method.\n   *\n   * It's often helpful to isolate the code within sketches from the rest of the\n   * code on a web page. Two common use cases are web pages that use other\n   * JavaScript libraries and web pages with multiple sketches. \"Instance mode\"\n   * makes it easy to support both of these scenarios.\n   *\n   * Instance mode sketches support the same API as global mode sketches. They\n   * use a function to bundle, or encapsulate, an entire sketch. The function\n   * containing the sketch is then passed to the `p5()` constructor.\n   *\n   * The first parameter, `sketch`, is a function that contains the sketch. For\n   * example, the statement `new p5(mySketch)` would create a new instance mode\n   * sketch from a function named `mySketch`. The function should have one\n   * parameter, `p`, that's a `p5` object.\n   *\n   * The second parameter, `node`, is optional. If a string is passed, as in\n   * `new p5(mySketch, 'sketch-one')` the new instance mode sketch will become a\n   * child of the HTML element with the id `sketch-one`. If an HTML element is\n   * passed, as in `new p5(mySketch, myElement)`, then the new instance mode\n   * sketch will become a child of the `Element` object called `myElement`.\n   *\n   * @method p5\n   * @param {Object} sketch function containing the sketch.\n   * @param {String|HTMLElement} node ID or reference to the HTML element that will contain the sketch.\n   *\n   * @example\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle drawn on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(50, 50, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *   // Create the sketch's variables within its scope.\n   *   let x = 50;\n   *   let y = 50;\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle moves randomly on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Update x and y.\n   *     x += p.random(-1, 1);\n   *     y += p.random(-1, 1);\n   *\n   *     // Draw the circle.\n   *     p.circle(x, y, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe('A white circle drawn on a gray background.');\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(50, 50, 20);\n   *   };\n   * }\n   *\n   * // Select the web page's body element.\n   * let body = document.querySelector('body');\n   *\n   * // Initialize the sketch and attach it to the web page's body.\n   * new p5(sketch, body);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe(\n   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves.'\n   *     );\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(p.mouseX, p.mouseY, 20);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // Declare the function containing the sketch.\n   * function sketch(p) {\n   *\n   *   // Declare the setup() method.\n   *   p.setup = function () {\n   *     p.createCanvas(100, 100);\n   *\n   *     p.describe(\n   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves. The circle becomes black when the user double-clicks.'\n   *     );\n   *   };\n   *\n   *   // Declare the draw() method.\n   *   p.draw = function () {\n   *     p.background(200);\n   *\n   *     // Draw the circle.\n   *     p.circle(p.mouseX, p.mouseY, 20);\n   *   };\n   *\n   *   // Declare the doubleClicked() method.\n   *   p.doubleClicked = function () {\n   *     // Change the fill color when the user double-clicks.\n   *     p.fill(0);\n   *   };\n   * }\n   *\n   * // Initialize the sketch.\n   * new p5(sketch);\n   * </code>\n   * </div>\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  structure(p5, p5.prototype);\n}\n\nexport { structure as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAASA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACxrB,IAAI,CAACC,KAAK,GAAG,KAAK;EACpB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,EAAE,CAACG,IAAI,GAAG,YAAW;IACnB,IAAI,CAAC,IAAI,CAACD,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAG,IAAI;MACjB,IAAI,IAAI,CAACE,UAAU,EAAE;QACnB,IAAI,CAACC,KAAK,CAAC,CAAC;MACd;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACM,SAAS,GAAG,YAAW;IACxB,OAAO,IAAI,CAACJ,KAAK;EACnB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,EAAE,CAACO,MAAM,GAAG,gBAAeC,CAAC,EAAE;IAC5B,IAAI,IAAI,CAACC,WAAW,IAAI,CAAC,IAAI,CAACL,UAAU,EAAE;MACxC;IACF;IAEA,IAAIM,eAAe,GAAGC,QAAQ,CAACH,CAAC,CAAC;IACjC,IAAII,KAAK,CAACF,eAAe,CAAC,IAAIA,eAAe,GAAG,CAAC,EAAE;MACjDA,eAAe,GAAG,CAAC;IACrB;IAEA,MAAMG,OAAO,GAAG,IAAI,CAACC,SAAS,GAAGC,MAAM,GAAG,IAAI;IAC9C,IAAI,OAAOF,OAAO,CAACG,IAAI,KAAK,UAAU,EAAE;MACtC,IAAI,OAAOH,OAAO,CAACI,KAAK,KAAK,WAAW,EAAE;QACxCJ,OAAO,CAACK,KAAK,CAACL,OAAO,CAACM,aAAa,EAAEN,OAAO,CAACM,aAAa,CAAC;MAC7D;MACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGV,eAAe,EAAEU,SAAS,EAAE,EAAE;QAChEP,OAAO,CAACQ,WAAW,CAAC,CAAC;QACrB,IAAI,IAAI,CAACC,kBAAkB,CAACC,IAAI,IAAI,IAAI,CAACD,kBAAkB,CAACE,IAAI,EAAE;UAChE,IAAI,CAACC,iBAAiB,CAAC,CAAC;QAC1B;QACA,IAAI,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE;UACxB,IAAI,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC;QAC1B;QACA,IAAI,CAACC,UAAU,GAAGhB,OAAO,CAACgB,UAAU,GAAG,CAAC;QACxC,MAAM,IAAI,CAACC,iBAAiB,CAAC,SAAS,CAAC;QACvC,IAAI,CAACrB,WAAW,GAAG,IAAI;QACvB,IAAI;UACF,MAAMI,OAAO,CAACG,IAAI,CAAC,CAAC;QACtB,CAAC,SAAS;UACR,IAAI,CAACP,WAAW,GAAG,KAAK;QAC1B;QACA,MAAM,IAAI,CAACqB,iBAAiB,CAAC,UAAU,CAAC;MAC1C;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAG,OAAO/B,EAAE,KAAK,WAAW,EAAC;EAC3BD,SAAS,CAACC,EAAE,EAAEA,EAAE,CAACgC,SAAS,CAAC;AAC7B;AAEA,SAASjC,SAAS,IAAIkC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}