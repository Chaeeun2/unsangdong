{"ast":null,"code":"import { Element } from './p5.Element.js';\nimport { MediaElement } from './p5.MediaElement.js';\nimport { File } from './p5.File.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-BRcElHU3.js';\nimport '../io/p5.XML.js';\n\n/**\n * The web is much more than just canvas and the DOM functionality makes it easy to interact\n * with other HTML5 objects, including text, hyperlink, image, input, video,\n * audio, and webcam.\n * There is a set of creation methods, DOM manipulation methods, and\n * an extended <a href=\"#/p5.Element\">p5.Element</a> that supports a range of HTML elements. See the\n * <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>\n * beyond the canvas tutorial</a> for a full overview of how this addon works.\n *\n * See <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>tutorial: beyond the canvas</a>\n * for more info on how to use this library.</a>\n *\n * @module DOM\n * @submodule DOM\n * @for p5\n * @requires p5\n */\n\nfunction dom(p5, fn) {\n  /**\n   * Searches the page for the first element that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `select()` returns a <a href=\"#/p5.Element\">p5.Element</a> object if it\n   * finds a match and `null` if not.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method select\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element|null} <a href=\"#/p5.Element\">p5.Element</a> containing the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(200);\n   *\n   *   // Select the canvas by its tag.\n   *   let cnv = select('canvas');\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Add a class attribute to the canvas.\n   *   cnv.class('pinkborder');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its class.\n   *   cnv = select('.pinkborder');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Set the canvas' ID.\n   *   cnv.id('mycanvas');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its ID.\n   *   cnv = select('#mycanvas');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.select = function (e, p) {\n    // p5._validateParameters('select', arguments);\n    const container = this._getContainer(p);\n    const res = container.querySelector(e);\n    if (res) {\n      return this._wrapElement(res);\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   * Searches the page for all elements that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `selectAll()` returns an array of <a href=\"#/p5.Element\">p5.Element</a>\n   * objects if it finds any matches and an empty array if none are found.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method selectAll\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element[]} array of <a href=\"#/p5.Element\">p5.Element</a>s containing any elements found.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create three buttons.\n   *   createButton('1');\n   *   createButton('2');\n   *   createButton('3');\n   *\n   *   // Select the buttons by their tag.\n   *   let buttons = selectAll('button');\n   *\n   *   // Position the buttons.\n   *   for (let i = 0; i < 3; i += 1) {\n   *     buttons[i].position(0, i * 30);\n   *   }\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\".');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create three buttons and position them.\n   *   let b1 = createButton('1');\n   *   b1.position(0, 0);\n   *   let b2 = createButton('2');\n   *   b2.position(0, 30);\n   *   let b3 = createButton('3');\n   *   b3.position(0, 60);\n   *\n   *   // Add a class attribute to each button.\n   *   b1.class('btn');\n   *   b2.class('btn btn-pink');\n   *   b3.class('btn');\n   *\n   *   // Select the buttons by their class.\n   *   let buttons = selectAll('.btn');\n   *   let pinkButtons = selectAll('.btn-pink');\n   *\n   *   // Style the selected buttons.\n   *   buttons.forEach(setFont);\n   *   pinkButtons.forEach(setColor);\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\". Buttons \"1\" and \"3\" are gray. Button \"2\" is pink.');\n   * }\n   *\n   * // Set a button's font to Comic Sans MS.\n   * function setFont(btn) {\n   *   btn.style('font-family', 'Comic Sans MS');\n   * }\n   *\n   * // Set a button's background and font color.\n   * function setColor(btn) {\n   *   btn.style('background', 'deeppink');\n   *   btn.style('color', 'white');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.selectAll = function (e, p) {\n    // p5._validateParameters('selectAll', arguments);\n    const arr = [];\n    const container = this._getContainer(p);\n    const res = container.querySelectorAll(e);\n    if (res) {\n      for (let j = 0; j < res.length; j++) {\n        const obj = this._wrapElement(res[j]);\n        arr.push(obj);\n      }\n    }\n    return arr;\n  };\n\n  /**\n   * Helper function for select and selectAll\n   */\n  fn._getContainer = function (p) {\n    let container = document;\n    if (typeof p === 'string') {\n      container = document.querySelector(p) || document;\n    } else if (p instanceof Element) {\n      container = p.elt;\n    } else if (p instanceof HTMLElement) {\n      container = p;\n    }\n    return container;\n  };\n\n  /**\n   * Helper function for getElement and getElements.\n   */\n  fn._wrapElement = function (elt) {\n    const children = Array.prototype.slice.call(elt.children);\n    if (elt.tagName === 'INPUT' && elt.type === 'checkbox') {\n      let converted = new Element(elt, this);\n      converted.checked = function (...args) {\n        if (args.length === 0) {\n          return this.elt.checked;\n        } else if (args[0]) {\n          this.elt.checked = true;\n        } else {\n          this.elt.checked = false;\n        }\n        return this;\n      };\n      return converted;\n    } else if (elt.tagName === 'VIDEO' || elt.tagName === 'AUDIO') {\n      return new MediaElement(elt, this);\n    } else if (elt.tagName === 'SELECT') {\n      return this.createSelect(new Element(elt, this));\n    } else if (children.length > 0 && children.every(function (c) {\n      return c.tagName === 'INPUT' || c.tagName === 'LABEL';\n    }) && (elt.tagName === 'DIV' || elt.tagName === 'SPAN')) {\n      return this.createRadio(new Element(elt, this));\n    } else {\n      return new Element(elt, this);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * The first parameter, `tag`, is a string an HTML tag such as `'h5'`.\n   *\n   * The second parameter, `content`, is optional. It's a string that sets the\n   * HTML content to insert into the new element. New elements have no content\n   * by default.\n   *\n   * @method createElement\n   * @param  {String} tag tag for the new element.\n   * @param  {String} [content] HTML content to insert into the element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with nothing in it.\n   *   createElement('h5');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with the content \"p5*js\".\n   *   let h5 = createElement('h5', 'p5*js');\n   *\n   *   // Set the element's style and position.\n   *   h5.style('color', 'deeppink');\n   *   h5.position(30, 15);\n   *\n   *   describe('The text \"p5*js\" written in pink in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createElement = function (tag, content) {\n    // p5._validateParameters('createElement', arguments);\n    const elt = document.createElement(tag);\n    if (typeof content !== 'undefined') {\n      elt.innerHTML = content;\n    }\n    return addElement(elt, this);\n  };\n\n  /**\n   * Removes all elements created by p5.js, including any event handlers.\n   *\n   * There are two exceptions:\n   * canvas elements created by <a href=\"#/p5/createCanvas\">createCanvas()</a>\n   * and <a href=\"#/p5.Renderer\">p5.Render</a> objects created by\n   * <a href=\"#/p5/createGraphics\">createGraphics()</a>.\n   *\n   * @method removeElements\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place\n   *   // it in the middle of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center. The text disappears when the mouse is pressed.');\n   * }\n   *\n   * // Remove all elements when the mouse is pressed.\n   * function mousePressed() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(200, 200);\n   *\n   *   // Create a paragraph element and place\n   *   // it at the top of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   // Create a slider element and place it\n   *   // beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center and a range slider beneath it. The square changes color when the slider is moved. The text and slider disappear when the square is double-clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider value to change the background color.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   *\n   * // Remove all elements when the mouse is double-clicked.\n   * function doubleClicked() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.removeElements = function (e) {\n    // p5._validateParameters('removeElements', arguments);\n    // el.remove splices from this._elements, so don't mix iteration with it\n    const isNotCanvasElement = el => !(el.elt instanceof HTMLCanvasElement);\n    const removeableElements = this._elements.filter(isNotCanvasElement);\n    removeableElements.map(el => el.remove());\n  };\n\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media ? new MediaElement(elt, pInst) : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /**\n   * Creates a `&lt;div&gt;&lt;/div&gt;` element.\n   *\n   * `&lt;div&gt;&lt;/div&gt;` elements are commonly used as containers for\n   * other elements.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;div&gt;&lt;/div&gt;`.\n   *\n   * @method createDiv\n   * @param  {String} [html] inner HTML for the new `&lt;div&gt;&lt;/div&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and set its position.\n   *   let div = createDiv('p5*js');\n   *   div.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h3 element within the div.\n   *   let div = createDiv('<h3>p5*js</h3>');\n   *   div.position(20, 5);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createDiv = function (html = '') {\n    let elt = document.createElement('div');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a paragraph element.\n   *\n   * `&lt;p&gt;&lt;/p&gt;` elements are commonly used for paragraph-length text.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;p&gt;&lt;/p&gt;`.\n   *\n   * @method createP\n   * @param  {String} [html] inner HTML for the new `&lt;p&gt;&lt;/p&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its position.\n   *   let p = createP('Tell me a story.');\n   *   p.position(5, 0);\n   *\n   *   describe('A gray square displaying the text \"Tell me a story.\" written in black.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createP = function (html = '') {\n    let elt = document.createElement('p');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;span&gt;&lt;/span&gt;` element.\n   *\n   * `&lt;span&gt;&lt;/span&gt;` elements are commonly used as containers\n   * for inline elements. For example, a `&lt;span&gt;&lt;/span&gt;`\n   * can hold part of a sentence that's a\n   * <span style=\"color: deeppink;\">different</span> style.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;span&gt;&lt;/span&gt;`.\n   *\n   * @method createSpan\n   * @param  {String} [html] inner HTML for the new `&lt;span&gt;&lt;/span&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a span element and set its position.\n   *   let span = createSpan('p5*js');\n   *   span.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create a div element as a container.\n   *   let div = createDiv();\n   *\n   *   // Place the div at the center.\n   *   div.position(25, 35);\n   *\n   *   // Create a span element.\n   *   let s1 = createSpan('p5');\n   *\n   *   // Create a second span element.\n   *   let s2 = createSpan('*');\n   *\n   *   // Set the second span's font color.\n   *   s2.style('color', 'deeppink');\n   *\n   *   // Create a third span element.\n   *   let s3 = createSpan('js');\n   *\n   *   // Add all the spans to the container div.\n   *   s1.parent(div);\n   *   s2.parent(div);\n   *   s3.parent(div);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in black at its center. The asterisk is pink.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSpan = function (html = '') {\n    let elt = document.createElement('span');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;img&gt;` element that can appear outside of the canvas.\n   *\n   * The first parameter, `src`, is a string with the path to the image file.\n   * `src` should be a relative path, as in `'assets/image.png'`, or a URL, as\n   * in `'https://example.com/image.png'`.\n   *\n   * The second parameter, `alt`, is a string with the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#usage_notes\" target=\"_blank\">alternate text</a>\n   * for the image. An empty string `''` can be used for images that aren't displayed.\n   *\n   * The third parameter, `crossOrigin`, is optional. It's a string that sets the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\" target=\"_blank\">crossOrigin property</a>\n   * of the image. Use `'anonymous'` or `'use-credentials'` to fetch the image\n   * with cross-origin access.\n   *\n   * The fourth parameter, `callback`, is also optional. It sets a function to\n   * call after the image loads. The new image is passed to the callback\n   * function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @method createImg\n   * @param  {String} src relative path or URL for the image.\n   * @param  {String} alt alternate text for the image.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   let img = createImg(\n   *     '/assets/cat.jpg',\n   *     'image of a cat'\n   *   );\n   *   img.position(0, 10);\n   *\n   *   describe('A gray square with a magenta asterisk in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createImg\n   * @param  {String} src\n   * @param  {String} alt\n   * @param  {String} [crossOrigin] crossOrigin property to use when fetching the image.\n   * @param  {Function} [successCallback] function to call once the image loads. The new image will be passed\n   *                                      to the function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  fn.createImg = function () {\n    // p5._validateParameters('createImg', arguments);\n    const elt = document.createElement('img');\n    const args = arguments;\n    let self;\n    if (args.length > 1 && typeof args[1] === 'string') {\n      elt.alt = args[1];\n    }\n    if (args.length > 2 && typeof args[2] === 'string') {\n      elt.crossOrigin = args[2];\n    }\n    elt.src = args[0];\n    self = addElement(elt, this);\n    elt.addEventListener('load', function () {\n      self.width = elt.offsetWidth || elt.width;\n      self.height = elt.offsetHeight || elt.height;\n      const last = args[args.length - 1];\n      if (typeof last === 'function') last(self);\n    });\n    return self;\n  };\n\n  /**\n   * Creates an `&lt;a&gt;&lt;/a&gt;` element that links to another web page.\n   *\n   * The first parmeter, `href`, is a string that sets the URL of the linked\n   * page.\n   *\n   * The second parameter, `html`, is a string that sets the inner HTML of the\n   * link. It's common to use text, images, or buttons as links.\n   *\n   * The third parameter, `target`, is optional. It's a string that tells the\n   * web browser where to open the link. By default, links open in the current\n   * browser tab. Passing `'_blank'` will cause the link to open in a new\n   * browser tab. MDN describes a few\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target\" target=\"_blank\">other options</a>.\n   *\n   * @method createA\n   * @param  {String} href       URL of linked page.\n   * @param  {String} html       inner HTML of link element to display.\n   * @param  {String} [target]   target where the new link should open,\n   *                             either `'_blank'`, `'_self'`, `'_parent'`, or `'_top'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an anchor element that links to p5js.org.\n   *   let a = createA('https://p5js.org/', 'p5*js');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create an anchor tag that links to p5js.org.\n   *   // Open the link in a new tab.\n   *   let a = createA('https://p5js.org/', 'p5*js', '_blank');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createA = function (href, html, target) {\n    // p5._validateParameters('createA', arguments);\n    const elt = document.createElement('a');\n    elt.href = href;\n    elt.innerHTML = html;\n    if (target) elt.target = target;\n    return addElement(elt, this);\n  };\n\n  /* INPUT */\n  /**\n   * Creates a slider `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Range sliders are useful for quickly selecting numbers from a given range.\n   *\n   * The first two parameters, `min` and `max`, are numbers that set the\n   * slider's minimum and maximum.\n   *\n   * The third parameter, `value`, is optional. It's a number that sets the\n   * slider's default value.\n   *\n   * The fourth parameter, `step`, is also optional. It's a number that sets the\n   * spacing between each value in the slider's range. Setting `step` to 0\n   * allows the slider to move smoothly from `min` to `max`.\n   *\n   * @method createSlider\n   * @param  {Number} min minimum value of the slider.\n   * @param  {Number} max maximum value of the slider.\n   * @param  {Number} [value] default value of the slider.\n   * @param  {Number} [step] size for each step in the slider's range.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   slider = createSlider(0, 255);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A dark gray square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   slider = createSlider(0, 255, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 50.\n   *   slider = createSlider(0, 255, 0, 50);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 0 so that it moves smoothly.\n   *   slider = createSlider(0, 255, 0, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSlider = function (min, max, value, step) {\n    // p5._validateParameters('createSlider', arguments);\n    const elt = document.createElement('input');\n    elt.type = 'range';\n    elt.min = min;\n    elt.max = max;\n    if (step === 0) {\n      elt.step = 0.000000000000000001; // smallest valid step\n    } else if (step) {\n      elt.step = step;\n    }\n    if (typeof value === 'number') elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;button&gt;&lt;/button&gt;` element.\n   *\n   * The first parameter, `label`, is a string that sets the label displayed on\n   * the button.\n   *\n   * The second parameter, `value`, is optional. It's a string that sets the\n   * button's value. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#value\" target=\"_blank\">MDN</a>\n   * for more details.\n   *\n   * @method createButton\n   * @param  {String} label label displayed on the button.\n   * @param  {String} [value] value of the button.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let button = createButton('click me');\n   *   button.position(0, 100);\n   *\n   *   // Call repaint() when the button is pressed.\n   *   button.mousePressed(repaint);\n   *\n   *   describe('A gray square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * // Change the background color.\n   * function repaint() {\n   *   let g = random(255);\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let button;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and set its value to 0.\n   *   // Place the button beneath the canvas.\n   *   button = createButton('click me', 'red');\n   *   button.position(0, 100);\n   *\n   *   // Call randomColor() when the button is pressed.\n   *   button.mousePressed(randomColor);\n   *\n   *   describe('A red square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the button's value to set the background color.\n   *   let c = button.value();\n   *   background(c);\n   * }\n   *\n   * // Set the button's value to a random color.\n   * function randomColor() {\n   *   let c = random(['red', 'green', 'blue', 'yellow']);\n   *   button.value(c);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createButton = function (label, value) {\n    // p5._validateParameters('createButton', arguments);\n    const elt = document.createElement('button');\n    elt.innerHTML = label;\n    if (value) elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a checkbox `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Checkboxes extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * `checked()` method. Calling `myBox.checked()` returns `true` if it the box\n   * is checked and `false` if not.\n   *\n   * The first parameter, `label`, is optional. It's a string that sets the label\n   * to display next to the checkbox.\n   *\n   * The second parameter, `value`, is also optional. It's a boolean that sets the\n   * checkbox's value.\n   *\n   * @method createCheckbox\n   * @param  {String} [label] label displayed after the checkbox.\n   * @param  {Boolean} [value] value of the checkbox. Checked is `true` and unchecked is `false`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox();\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A black square with a checkbox beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\".\n   *   checkbox = createCheckbox(' white');\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A black square with a checkbox labeled \"white\" beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\" and set its value to true.\n   *   checkbox = createCheckbox(' white', true);\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A white square with a checkbox labeled \"white\" beneath it. The square turns black when the box is unchecked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCheckbox = function (...args) {\n    // p5._validateParameters('createCheckbox', args);\n\n    // Create a container element\n    const elt = document.createElement('div');\n\n    // Create checkbox type input element\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n\n    // Create label element and wrap it around checkbox\n    const label = document.createElement('label');\n    label.appendChild(checkbox);\n\n    // Append label element inside the container\n    elt.appendChild(label);\n\n    //checkbox must be wrapped in p5.Element before label so that label appears after\n    const self = addElement(elt, this);\n    self.checked = function (...args) {\n      const cb = self.elt.firstElementChild.getElementsByTagName('input')[0];\n      if (cb) {\n        if (args.length === 0) {\n          return cb.checked;\n        } else if (args[0]) {\n          cb.checked = true;\n        } else {\n          cb.checked = false;\n        }\n      }\n      return self;\n    };\n    this.value = function (val) {\n      self.value = val;\n      return this;\n    };\n\n    // Set the span element innerHTML as the label value if passed\n    if (args[0]) {\n      self.value(args[0]);\n      const span = document.createElement('span');\n      span.innerHTML = args[0];\n      label.appendChild(span);\n    }\n\n    // Set the checked value of checkbox if passed\n    if (args[1]) {\n      checkbox.checked = true;\n    }\n    return self;\n  };\n\n  /**\n   * Creates a dropdown menu `&lt;select&gt;&lt;/select&gt;` element.\n   *\n   * The parameter is optional. If `true` is passed, as in\n   * `let mySelect = createSelect(true)`, then the dropdown will support\n   * multiple selections. If an existing `&lt;select&gt;&lt;/select&gt;` element\n   * is passed, as in `let mySelect = createSelect(otherSelect)`, the existing\n   * element will be wrapped in a new <a href=\"#/p5.Element\">p5.Element</a>\n   * object.\n   *\n   * Dropdowns extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `mySelect.option(name, [value])` adds an option to the menu. The first paremeter, `name`, is a string that sets the option's name and value. The second parameter, `value`, is optional. If provided, it sets the value that corresponds to the key `name`. If an option with `name` already exists, its value is changed to `value`.\n   * - `mySelect.value()` returns the currently-selected option's value.\n   * - `mySelect.selected()` returns the currently-selected option.\n   * - `mySelect.selected(option)` selects the given option by default.\n   * - `mySelect.disable()` marks the whole dropdown element as disabled.\n   * - `mySelect.disable(option)` marks a given option as disabled.\n   * - `mySelect.enable()` marks the whole dropdown element as enabled.\n   * - `mySelect.enable(option)` marks a given option as enabled.\n   *\n   * @method createSelect\n   * @param {Boolean} [multiple] support multiple selections.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   // Disable the \"yellow\" option.\n   *   mySelect.disable('yellow');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options with names and values.\n   *   mySelect.option('one', 'red');\n   *   mySelect.option('two', 'green');\n   *   mySelect.option('three', 'blue');\n   *   mySelect.option('four', 'yellow');\n   *\n   *   // Set the selected option to \"one\".\n   *   mySelect.selected('one');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Hold CTRL to select multiple options on Windows and Linux.\n   * // Hold CMD to select multiple options on macOS.\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and allow multiple selections.\n   *   // Place it beneath the canvas.\n   *   mySelect = createSelect(true);\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   describe('A gray square with a dropdown menu beneath it. Colorful circles appear when their color is selected.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the selected value(s) to draw circles.\n   *   let colors = mySelect.selected();\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = 10 + i * 20;\n   *\n   *     // Access the color.\n   *     let c = colors[i];\n   *\n   *     // Draw the circle.\n   *     fill(c);\n   *     circle(x, 50, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createSelect\n   * @param {Object} existing select element to wrap, either as a <a href=\"#/p5.Element\">p5.Element</a> or\n   *                          a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\" target=\"_blank\">HTMLSelectElement</a>.\n   * @return {p5.Element}\n   */\n\n  fn.createSelect = function (...args) {\n    // p5._validateParameters('createSelect', args);\n    let self;\n    let arg = args[0];\n    if (arg instanceof Element && arg.elt instanceof HTMLSelectElement) {\n      // If given argument is p5.Element of select type\n      self = arg;\n      this.elt = arg.elt;\n    } else if (arg instanceof HTMLSelectElement) {\n      self = addElement(arg, this);\n      this.elt = arg;\n    } else {\n      const elt = document.createElement('select');\n      if (arg && typeof arg === 'boolean') {\n        elt.setAttribute('multiple', 'true');\n      }\n      self = addElement(elt, this);\n      this.elt = elt;\n    }\n    self.option = function (name, value) {\n      let index;\n\n      // if no name is passed, return\n      if (name === undefined) {\n        return;\n      }\n      //see if there is already an option with this name\n      for (let i = 0; i < this.elt.length; i += 1) {\n        if (this.elt[i].textContent === name) {\n          index = i;\n          break;\n        }\n      }\n      //if there is an option with this name we will modify it\n      if (index !== undefined) {\n        //if the user passed in false then delete that option\n        if (value === false) {\n          this.elt.remove(index);\n        } else {\n          // Update the option at index with the value\n          this.elt[index].value = value;\n        }\n      } else {\n        //if it doesn't exist create it\n        const opt = document.createElement('option');\n        opt.textContent = name;\n        opt.value = value === undefined ? name : value;\n        this.elt.appendChild(opt);\n        this._pInst._elements.push(opt);\n      }\n    };\n    self.selected = function (value) {\n      // Update selected status of option\n      if (value !== undefined) {\n        for (let i = 0; i < this.elt.length; i += 1) {\n          if (this.elt[i].value.toString() === value.toString()) {\n            this.elt.selectedIndex = i;\n          }\n        }\n        return this;\n      } else {\n        if (this.elt.getAttribute('multiple')) {\n          let arr = [];\n          for (const selectedOption of this.elt.selectedOptions) {\n            arr.push(selectedOption.value);\n          }\n          return arr;\n        } else {\n          return this.elt.value;\n        }\n      }\n    };\n    self.disable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = true;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = true;\n      }\n      return this;\n    };\n    self.enable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = false;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = false;\n        for (let i = 0; i < this.elt.length; i++) {\n          this.elt[i].disabled = false;\n          this.elt[i].selected = false;\n        }\n      }\n      return this;\n    };\n    return self;\n  };\n\n  /**\n   * Creates a radio button element.\n   *\n   * The parameter is optional. If a string is passed, as in\n   * `let myRadio = createSelect('food')`, then each radio option will\n   * have `\"food\"` as its `name` parameter: `&lt;input name=\"food\"&gt;&lt;/input&gt;`.\n   * If an existing `&lt;div&gt;&lt;/div&gt;` or `&lt;span&gt;&lt;/span&gt;`\n   * element is passed, as in `let myRadio = createSelect(container)`, it will\n   * become the radio button's parent element.\n   *\n   * Radio buttons extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `myRadio.option(value, [label])` adds an option to the menu. The first paremeter, `value`, is a string that sets the option's value and label. The second parameter, `label`, is optional. If provided, it sets the label displayed for the `value`. If an option with `value` already exists, its label is changed and its value is returned.\n   * - `myRadio.value()` returns the currently-selected option's value.\n   * - `myRadio.selected()` returns the currently-selected option.\n   * - `myRadio.selected(value)` selects the given option and returns it as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\" target=\"_blank\">`HTMLInputElement`</a>.\n   * - `myRadio.disable(shouldDisable)` enables the entire radio button if `true` is passed and disables it if `false` is passed.\n   *\n   * @method createRadio\n   * @param  {Object} [containerElement] container HTML Element, either a `&lt;div&gt;&lt;/div&gt;`\n   * or `&lt;span&gt;&lt;/span&gt;`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let style = document.createElement('style');\n   * style.innerHTML = `\n   * .p5-radio label {\n   *    display: flex;\n   *    align-items: center;\n   *  }\n   *  .p5-radio input {\n   *    margin-right: 5px;\n   *  }\n   *  `;\n   * document.head.appendChild(style);\n   *\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.class('p5-radio');\n   *   myRadio.size(60);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three color options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let g = myRadio.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   // Color values are labeled with\n   *   // emotions they evoke.\n   *   myRadio.option('red', 'love');\n   *   myRadio.option('yellow', 'joy');\n   *   myRadio.option('blue', 'trust');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three options listed, \"love\", \"joy\", and \"trust\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let btn = createButton('disable');\n   *   btn.position(0, 100);\n   *\n   *   // Call disableRadio() when btn is pressed.\n   *   btn.mousePressed(disableRadio);\n   *\n   *   describe('A yellow square with three options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option. A \"disable\" button beneath the canvas disables the color options when pressed.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   *\n   * // Disable myRadio.\n   * function disableRadio() {\n   *   myRadio.disable(true);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createRadio\n   * @param {String} [name] name parameter assigned to each option's `&lt;input&gt;&lt;/input&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  /**\n   * @method createRadio\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  //counter for unique names on radio button\n  let counter = 0;\n  fn.createRadio = function (...args) {\n    // Creates a div, adds each option as an individual input inside it.\n    // If already given with a containerEl, will search for all input[radio]\n    // it, create a p5.Element out of it, add options to it and return the p5.Element.\n\n    let self;\n    let radioElement;\n    let name;\n    const arg0 = args[0];\n    if (arg0 instanceof Element && (arg0.elt instanceof HTMLDivElement || arg0.elt instanceof HTMLSpanElement)) {\n      // If given argument is p5.Element of div/span type\n      self = arg0;\n      this.elt = arg0.elt;\n    } else if (\n    // If existing radio Element is provided as argument 0\n    arg0 instanceof HTMLDivElement || arg0 instanceof HTMLSpanElement) {\n      self = addElement(arg0, this);\n      this.elt = arg0;\n      radioElement = arg0;\n      if (typeof args[1] === 'string') name = args[1];\n    } else {\n      if (typeof arg0 === 'string') name = arg0;\n      radioElement = document.createElement('div');\n      self = addElement(radioElement, this);\n      this.elt = radioElement;\n    }\n    self._name = name || `radioOption_${counter++}`;\n\n    // setup member functions\n    const isRadioInput = el => el instanceof HTMLInputElement && el.type === 'radio';\n    const isLabelElement = el => el instanceof HTMLLabelElement;\n    const isSpanElement = el => el instanceof HTMLSpanElement;\n    self._getOptionsArray = function () {\n      return Array.from(this.elt.children).filter(el => isRadioInput(el) || isLabelElement(el) && isRadioInput(el.firstElementChild)).map(el => isRadioInput(el) ? el : el.firstElementChild);\n    };\n    self.option = function (value, label) {\n      // return an option with this value, create if not exists.\n      let optionEl;\n      for (const option of self._getOptionsArray()) {\n        if (option.value === value) {\n          optionEl = option;\n          break;\n        }\n      }\n\n      // Create a new option, add it to radioElement and return it.\n      if (optionEl === undefined) {\n        optionEl = document.createElement('input');\n        optionEl.setAttribute('type', 'radio');\n        optionEl.setAttribute('value', value);\n      }\n      optionEl.setAttribute('name', self._name);\n\n      // Check if label element exists, else create it\n      let labelElement;\n      if (!isLabelElement(optionEl.parentElement)) {\n        labelElement = document.createElement('label');\n        labelElement.insertAdjacentElement('afterbegin', optionEl);\n      } else {\n        labelElement = optionEl.parentElement;\n      }\n\n      // Check if span element exists, else create it\n      let spanElement;\n      if (!isSpanElement(labelElement.lastElementChild)) {\n        spanElement = document.createElement('span');\n        optionEl.insertAdjacentElement('afterend', spanElement);\n      } else {\n        spanElement = labelElement.lastElementChild;\n      }\n\n      // Set the innerHTML of span element as the label text\n      spanElement.innerHTML = label === undefined ? value : label;\n\n      // Append the label element, which includes option element and\n      // span element to the radio container element\n      this.elt.appendChild(labelElement);\n      return optionEl;\n    };\n    self.remove = function (value) {\n      for (const optionEl of self._getOptionsArray()) {\n        if (optionEl.value === value) {\n          if (isLabelElement(optionEl.parentElement)) {\n            // Remove parent label which also removes children elements\n            optionEl.parentElement.remove();\n          } else {\n            // Remove the option input if parent label does not exist\n            optionEl.remove();\n          }\n          return;\n        }\n      }\n    };\n    self.value = function () {\n      let result = '';\n      for (const option of self._getOptionsArray()) {\n        if (option.checked) {\n          result = option.value;\n          break;\n        }\n      }\n      return result;\n    };\n    self.selected = function (value) {\n      let result = null;\n      if (value === undefined) {\n        for (const option of self._getOptionsArray()) {\n          if (option.checked) {\n            result = option;\n            break;\n          }\n        }\n      } else {\n        // forEach loop to uncheck all radio buttons before\n        // setting any one as checked.\n        self._getOptionsArray().forEach(option => {\n          option.checked = false;\n          option.removeAttribute('checked');\n        });\n        for (const option of self._getOptionsArray()) {\n          if (option.value === value) {\n            option.setAttribute('checked', true);\n            option.checked = true;\n            result = option;\n          }\n        }\n      }\n      return result;\n    };\n    self.disable = function (shouldDisable = true) {\n      for (const radioInput of self._getOptionsArray()) {\n        radioInput.setAttribute('disabled', shouldDisable);\n      }\n    };\n    return self;\n  };\n\n  /**\n   * Creates a color picker element.\n   *\n   * The parameter, `value`, is optional. If a color string or\n   * <a href=\"#/p5.Color\">p5.Color</a> object is passed, it will set the default\n   * color.\n   *\n   * Color pickers extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * couple of helpful methods for managing colors:\n   * - `myPicker.value()` returns the current color as a hex string in the format `'#rrggbb'`.\n   * - `myPicker.color()` returns the current color as a <a href=\"#/p5.Color\">p5.Color</a> object.\n   *\n   * @method createColorPicker\n   * @param {String|p5.Color} [value] default color as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\" target=\"_blank\">CSS color string</a>.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A pink square with a color picker beneath it. The square changes color when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.color();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A number with the format \"#rrggbb\" is displayed on a pink canvas. The background color and number change when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.value();\n   *   background(c);\n   *\n   *   // Display the current color as a hex string.\n   *   text(c, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createColorPicker = function (value) {\n    // p5._validateParameters('createColorPicker', arguments);\n    // TODO: This implementation needs to be rechecked or reimplemented\n    // The way it worked with color is a bit too complex\n    const elt = document.createElement('input');\n    let self;\n    elt.type = 'color';\n    if (value) {\n      if (value instanceof p5.Color) {\n        elt.value = value.toString('#rrggbb');\n      } else {\n        this.push();\n        this.colorMode('rgb');\n        elt.value = this.color(value).toString('#rrggbb');\n        this.pop();\n      }\n    } else {\n      elt.value = '#000000';\n    }\n    self = addElement(elt, this);\n    // Method to return a p5.Color object for the given color.\n    const inst = this;\n    self.color = function () {\n      inst.push();\n      if (value) {\n        if (value.mode) {\n          inst.colorMode(value.mode, ...(value?.maxes ? value.maxes[value.mode] || [] : []));\n        }\n      }\n      const c = inst.color(this.elt.value);\n      inst.pop();\n      return c;\n    };\n    return self;\n  };\n\n  /**\n   * Creates a text `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Call `myInput.size()` to set the length of the text box.\n   *\n   * The first parameter, `value`, is optional. It's a string that sets the\n   * input's default value. The input is blank by default.\n   *\n   * The second parameter, `type`, is also optional. It's a string that\n   * specifies the type of text being input. See MDN for a full\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\" target=\"_blank\">list of options</a>.\n   * The default is `'text'`.\n   *\n   * @method createInput\n   * @param {String} [value] default value of the input box. Defaults to an empty string `''`.\n   * @param {String} [type] type of input. Defaults to `'text'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas.\n   *   myInput = createInput();\n   *   myInput.position(0, 100);\n   *\n   *   describe('A gray square with a text box beneath it. The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas. Set its default\n   *   // text to \"hello!\".\n   *   myInput = createInput('hello!');\n   *   myInput.position(0, 100);\n   *\n   *   describe('The text \"hello!\" written at the center of a gray square. A text box beneath the square also says \"hello!\". The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createInput\n   * @param {String} [value]\n   * @return {p5.Element}\n   */\n  fn.createInput = function (value = '', type = 'text') {\n    // p5._validateParameters('createInput', arguments);\n    let elt = document.createElement('input');\n    elt.setAttribute('value', value);\n    elt.setAttribute('type', type);\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;input&gt;&lt;/input&gt;` element of type `'file'`.\n   *\n   * `createFileInput()` allows users to select local files for use in a sketch.\n   * It returns a <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The first parameter, `callback`, is a function that's called when the file\n   * loads. The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The second parameter, `multiple`, is optional. It's a boolean value that\n   * allows loading multiple files if set to `true`. If `true`, `callback`\n   * will be called once per file.\n   *\n   * @method createFileInput\n   * @param  {Function} callback function to call once the file loads.\n   * @param  {Boolean} [multiple] allow multiple files to be selected.\n   * @return {p5.File} new <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let input;\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(200, 200);\n   *\n   *   // Create a file input and place it beneath\n   *   // the canvas.\n   *   input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if loaded.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Create an image if the file is an image.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     img = createImg(file.data, '');\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select multiple images\n   * // to load and display.\n   * let input;\n   * let images = [];\n   *\n   * function setup() {\n   *   // Create a file input and place it beneath\n   *   // the canvas. Allow it to load multiple files.\n   *   input = createFileInput(handleImage, true);\n   *   input.position(0, 100);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the images if loaded. Each image\n   *   // is drawn 20 pixels lower than the\n   *   // previous image.\n   *   for (let i = 0; i < images.length; i += 1) {\n   *     // Calculate the y-coordinate.\n   *     let y = i * 20;\n   *\n   *     // Draw the image.\n   *     image(img, 0, y, 100, 100);\n   *   }\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects multiple image files to load, they are displayed on the square.');\n   * }\n   *\n   * // Create an image if the file is an image,\n   * // then add it to the images array.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     let img = createImg(file.data, '');\n   *     img.hide();\n   *     images.push(img);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createFileInput = function (callback, multiple = false) {\n    // p5._validateParameters('createFileInput', arguments);\n\n    const handleFileSelect = function (event) {\n      for (const file of event.target.files) {\n        File._load(file, callback);\n      }\n    };\n\n    // If File API's are not supported, throw Error\n    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n      console.log('The File APIs are not fully supported in this browser. Cannot create element.');\n      return;\n    }\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    if (multiple) fileInput.setAttribute('multiple', true);\n    fileInput.addEventListener('change', handleFileSelect, false);\n    return addElement(fileInput, this);\n  };\n}\nif (typeof p5 !== 'undefined') {\n  dom(p5, p5.prototype);\n}\nexport { dom as default };","map":{"version":3,"names":["Element","MediaElement","File","dom","p5","fn","select","e","p","container","_getContainer","res","querySelector","_wrapElement","selectAll","arr","querySelectorAll","j","length","obj","push","document","elt","HTMLElement","children","Array","prototype","slice","call","tagName","type","converted","checked","args","createSelect","every","c","createRadio","createElement","tag","content","innerHTML","addElement","removeElements","isNotCanvasElement","el","HTMLCanvasElement","removeableElements","_elements","filter","map","remove","pInst","media","node","_userNode","body","appendChild","createDiv","html","createP","createSpan","createImg","arguments","self","alt","crossOrigin","src","addEventListener","width","offsetWidth","height","offsetHeight","last","createA","href","target","createSlider","min","max","value","step","createButton","label","createCheckbox","checkbox","cb","firstElementChild","getElementsByTagName","val","span","arg","HTMLSelectElement","setAttribute","option","name","index","undefined","i","textContent","opt","_pInst","selected","toString","selectedIndex","getAttribute","selectedOption","selectedOptions","disable","disabled","enable","counter","radioElement","arg0","HTMLDivElement","HTMLSpanElement","_name","isRadioInput","HTMLInputElement","isLabelElement","HTMLLabelElement","isSpanElement","_getOptionsArray","from","optionEl","labelElement","parentElement","insertAdjacentElement","spanElement","lastElementChild","result","forEach","removeAttribute","shouldDisable","radioInput","createColorPicker","Color","colorMode","color","pop","inst","mode","maxes","createInput","createFileInput","callback","multiple","handleFileSelect","event","file","files","_load","window","FileReader","FileList","Blob","console","log","fileInput","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/dom/dom.js"],"sourcesContent":["import { Element } from './p5.Element.js';\nimport { MediaElement } from './p5.MediaElement.js';\nimport { File } from './p5.File.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-BRcElHU3.js';\nimport '../io/p5.XML.js';\n\n/**\n * The web is much more than just canvas and the DOM functionality makes it easy to interact\n * with other HTML5 objects, including text, hyperlink, image, input, video,\n * audio, and webcam.\n * There is a set of creation methods, DOM manipulation methods, and\n * an extended <a href=\"#/p5.Element\">p5.Element</a> that supports a range of HTML elements. See the\n * <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>\n * beyond the canvas tutorial</a> for a full overview of how this addon works.\n *\n * See <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>tutorial: beyond the canvas</a>\n * for more info on how to use this library.</a>\n *\n * @module DOM\n * @submodule DOM\n * @for p5\n * @requires p5\n */\n\n\nfunction dom(p5, fn){\n  /**\n   * Searches the page for the first element that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `select()` returns a <a href=\"#/p5.Element\">p5.Element</a> object if it\n   * finds a match and `null` if not.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method select\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element|null} <a href=\"#/p5.Element\">p5.Element</a> containing the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(200);\n   *\n   *   // Select the canvas by its tag.\n   *   let cnv = select('canvas');\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Add a class attribute to the canvas.\n   *   cnv.class('pinkborder');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its class.\n   *   cnv = select('.pinkborder');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Set the canvas' ID.\n   *   cnv.id('mycanvas');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its ID.\n   *   cnv = select('#mycanvas');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.select = function (e, p) {\n    // p5._validateParameters('select', arguments);\n    const container = this._getContainer(p);\n    const res = container.querySelector(e);\n    if (res) {\n      return this._wrapElement(res);\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   * Searches the page for all elements that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `selectAll()` returns an array of <a href=\"#/p5.Element\">p5.Element</a>\n   * objects if it finds any matches and an empty array if none are found.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method selectAll\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element[]} array of <a href=\"#/p5.Element\">p5.Element</a>s containing any elements found.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create three buttons.\n   *   createButton('1');\n   *   createButton('2');\n   *   createButton('3');\n   *\n   *   // Select the buttons by their tag.\n   *   let buttons = selectAll('button');\n   *\n   *   // Position the buttons.\n   *   for (let i = 0; i < 3; i += 1) {\n   *     buttons[i].position(0, i * 30);\n   *   }\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\".');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create three buttons and position them.\n   *   let b1 = createButton('1');\n   *   b1.position(0, 0);\n   *   let b2 = createButton('2');\n   *   b2.position(0, 30);\n   *   let b3 = createButton('3');\n   *   b3.position(0, 60);\n   *\n   *   // Add a class attribute to each button.\n   *   b1.class('btn');\n   *   b2.class('btn btn-pink');\n   *   b3.class('btn');\n   *\n   *   // Select the buttons by their class.\n   *   let buttons = selectAll('.btn');\n   *   let pinkButtons = selectAll('.btn-pink');\n   *\n   *   // Style the selected buttons.\n   *   buttons.forEach(setFont);\n   *   pinkButtons.forEach(setColor);\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\". Buttons \"1\" and \"3\" are gray. Button \"2\" is pink.');\n   * }\n   *\n   * // Set a button's font to Comic Sans MS.\n   * function setFont(btn) {\n   *   btn.style('font-family', 'Comic Sans MS');\n   * }\n   *\n   * // Set a button's background and font color.\n   * function setColor(btn) {\n   *   btn.style('background', 'deeppink');\n   *   btn.style('color', 'white');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.selectAll = function (e, p) {\n    // p5._validateParameters('selectAll', arguments);\n    const arr = [];\n    const container = this._getContainer(p);\n    const res = container.querySelectorAll(e);\n    if (res) {\n      for (let j = 0; j < res.length; j++) {\n        const obj = this._wrapElement(res[j]);\n        arr.push(obj);\n      }\n    }\n    return arr;\n  };\n\n  /**\n   * Helper function for select and selectAll\n   */\n  fn._getContainer = function (p) {\n    let container = document;\n    if (typeof p === 'string') {\n      container = document.querySelector(p) || document;\n    } else if (p instanceof Element) {\n      container = p.elt;\n    } else if (p instanceof HTMLElement) {\n      container = p;\n    }\n    return container;\n  };\n\n  /**\n   * Helper function for getElement and getElements.\n   */\n  fn._wrapElement = function (elt) {\n    const children = Array.prototype.slice.call(elt.children);\n    if (elt.tagName === 'INPUT' && elt.type === 'checkbox') {\n      let converted = new Element(elt, this);\n      converted.checked = function (...args) {\n        if (args.length === 0) {\n          return this.elt.checked;\n        } else if (args[0]) {\n          this.elt.checked = true;\n        } else {\n          this.elt.checked = false;\n        }\n        return this;\n      };\n      return converted;\n    } else if (elt.tagName === 'VIDEO' || elt.tagName === 'AUDIO') {\n      return new MediaElement(elt, this);\n    } else if (elt.tagName === 'SELECT') {\n      return this.createSelect(new Element(elt, this));\n    } else if (\n      children.length > 0 &&\n      children.every(function (c) {\n        return c.tagName === 'INPUT' || c.tagName === 'LABEL';\n      }) &&\n      (elt.tagName === 'DIV' || elt.tagName === 'SPAN')\n    ) {\n      return this.createRadio(new Element(elt, this));\n    } else {\n      return new Element(elt, this);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * The first parameter, `tag`, is a string an HTML tag such as `'h5'`.\n   *\n   * The second parameter, `content`, is optional. It's a string that sets the\n   * HTML content to insert into the new element. New elements have no content\n   * by default.\n   *\n   * @method createElement\n   * @param  {String} tag tag for the new element.\n   * @param  {String} [content] HTML content to insert into the element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with nothing in it.\n   *   createElement('h5');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with the content \"p5*js\".\n   *   let h5 = createElement('h5', 'p5*js');\n   *\n   *   // Set the element's style and position.\n   *   h5.style('color', 'deeppink');\n   *   h5.position(30, 15);\n   *\n   *   describe('The text \"p5*js\" written in pink in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createElement = function (tag, content) {\n    // p5._validateParameters('createElement', arguments);\n    const elt = document.createElement(tag);\n    if (typeof content !== 'undefined') {\n      elt.innerHTML = content;\n    }\n    return addElement(elt, this);\n  };\n\n  /**\n   * Removes all elements created by p5.js, including any event handlers.\n   *\n   * There are two exceptions:\n   * canvas elements created by <a href=\"#/p5/createCanvas\">createCanvas()</a>\n   * and <a href=\"#/p5.Renderer\">p5.Render</a> objects created by\n   * <a href=\"#/p5/createGraphics\">createGraphics()</a>.\n   *\n   * @method removeElements\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place\n   *   // it in the middle of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center. The text disappears when the mouse is pressed.');\n   * }\n   *\n   * // Remove all elements when the mouse is pressed.\n   * function mousePressed() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(200, 200);\n   *\n   *   // Create a paragraph element and place\n   *   // it at the top of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   // Create a slider element and place it\n   *   // beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center and a range slider beneath it. The square changes color when the slider is moved. The text and slider disappear when the square is double-clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider value to change the background color.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   *\n   * // Remove all elements when the mouse is double-clicked.\n   * function doubleClicked() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.removeElements = function (e) {\n    // p5._validateParameters('removeElements', arguments);\n    // el.remove splices from this._elements, so don't mix iteration with it\n    const isNotCanvasElement = el => !(el.elt instanceof HTMLCanvasElement);\n    const removeableElements = this._elements.filter(isNotCanvasElement);\n    removeableElements.map(el => el.remove());\n  };\n\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media\n      ? new MediaElement(elt, pInst)\n      : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /**\n   * Creates a `&lt;div&gt;&lt;/div&gt;` element.\n   *\n   * `&lt;div&gt;&lt;/div&gt;` elements are commonly used as containers for\n   * other elements.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;div&gt;&lt;/div&gt;`.\n   *\n   * @method createDiv\n   * @param  {String} [html] inner HTML for the new `&lt;div&gt;&lt;/div&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and set its position.\n   *   let div = createDiv('p5*js');\n   *   div.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h3 element within the div.\n   *   let div = createDiv('<h3>p5*js</h3>');\n   *   div.position(20, 5);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createDiv = function (html = '') {\n    let elt = document.createElement('div');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a paragraph element.\n   *\n   * `&lt;p&gt;&lt;/p&gt;` elements are commonly used for paragraph-length text.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;p&gt;&lt;/p&gt;`.\n   *\n   * @method createP\n   * @param  {String} [html] inner HTML for the new `&lt;p&gt;&lt;/p&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its position.\n   *   let p = createP('Tell me a story.');\n   *   p.position(5, 0);\n   *\n   *   describe('A gray square displaying the text \"Tell me a story.\" written in black.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createP = function (html = '') {\n    let elt = document.createElement('p');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;span&gt;&lt;/span&gt;` element.\n   *\n   * `&lt;span&gt;&lt;/span&gt;` elements are commonly used as containers\n   * for inline elements. For example, a `&lt;span&gt;&lt;/span&gt;`\n   * can hold part of a sentence that's a\n   * <span style=\"color: deeppink;\">different</span> style.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;span&gt;&lt;/span&gt;`.\n   *\n   * @method createSpan\n   * @param  {String} [html] inner HTML for the new `&lt;span&gt;&lt;/span&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a span element and set its position.\n   *   let span = createSpan('p5*js');\n   *   span.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create a div element as a container.\n   *   let div = createDiv();\n   *\n   *   // Place the div at the center.\n   *   div.position(25, 35);\n   *\n   *   // Create a span element.\n   *   let s1 = createSpan('p5');\n   *\n   *   // Create a second span element.\n   *   let s2 = createSpan('*');\n   *\n   *   // Set the second span's font color.\n   *   s2.style('color', 'deeppink');\n   *\n   *   // Create a third span element.\n   *   let s3 = createSpan('js');\n   *\n   *   // Add all the spans to the container div.\n   *   s1.parent(div);\n   *   s2.parent(div);\n   *   s3.parent(div);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in black at its center. The asterisk is pink.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSpan = function (html = '') {\n    let elt = document.createElement('span');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;img&gt;` element that can appear outside of the canvas.\n   *\n   * The first parameter, `src`, is a string with the path to the image file.\n   * `src` should be a relative path, as in `'assets/image.png'`, or a URL, as\n   * in `'https://example.com/image.png'`.\n   *\n   * The second parameter, `alt`, is a string with the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#usage_notes\" target=\"_blank\">alternate text</a>\n   * for the image. An empty string `''` can be used for images that aren't displayed.\n   *\n   * The third parameter, `crossOrigin`, is optional. It's a string that sets the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\" target=\"_blank\">crossOrigin property</a>\n   * of the image. Use `'anonymous'` or `'use-credentials'` to fetch the image\n   * with cross-origin access.\n   *\n   * The fourth parameter, `callback`, is also optional. It sets a function to\n   * call after the image loads. The new image is passed to the callback\n   * function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @method createImg\n   * @param  {String} src relative path or URL for the image.\n   * @param  {String} alt alternate text for the image.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   let img = createImg(\n   *     '/assets/cat.jpg',\n   *     'image of a cat'\n   *   );\n   *   img.position(0, 10);\n   *\n   *   describe('A gray square with a magenta asterisk in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createImg\n   * @param  {String} src\n   * @param  {String} alt\n   * @param  {String} [crossOrigin] crossOrigin property to use when fetching the image.\n   * @param  {Function} [successCallback] function to call once the image loads. The new image will be passed\n   *                                      to the function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  fn.createImg = function () {\n    // p5._validateParameters('createImg', arguments);\n    const elt = document.createElement('img');\n    const args = arguments;\n    let self;\n    if (args.length > 1 && typeof args[1] === 'string') {\n      elt.alt = args[1];\n    }\n    if (args.length > 2 && typeof args[2] === 'string') {\n      elt.crossOrigin = args[2];\n    }\n    elt.src = args[0];\n    self = addElement(elt, this);\n    elt.addEventListener('load', function () {\n      self.width = elt.offsetWidth || elt.width;\n      self.height = elt.offsetHeight || elt.height;\n      const last = args[args.length - 1];\n      if (typeof last === 'function') last(self);\n    });\n    return self;\n  };\n\n  /**\n   * Creates an `&lt;a&gt;&lt;/a&gt;` element that links to another web page.\n   *\n   * The first parmeter, `href`, is a string that sets the URL of the linked\n   * page.\n   *\n   * The second parameter, `html`, is a string that sets the inner HTML of the\n   * link. It's common to use text, images, or buttons as links.\n   *\n   * The third parameter, `target`, is optional. It's a string that tells the\n   * web browser where to open the link. By default, links open in the current\n   * browser tab. Passing `'_blank'` will cause the link to open in a new\n   * browser tab. MDN describes a few\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target\" target=\"_blank\">other options</a>.\n   *\n   * @method createA\n   * @param  {String} href       URL of linked page.\n   * @param  {String} html       inner HTML of link element to display.\n   * @param  {String} [target]   target where the new link should open,\n   *                             either `'_blank'`, `'_self'`, `'_parent'`, or `'_top'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an anchor element that links to p5js.org.\n   *   let a = createA('https://p5js.org/', 'p5*js');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create an anchor tag that links to p5js.org.\n   *   // Open the link in a new tab.\n   *   let a = createA('https://p5js.org/', 'p5*js', '_blank');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createA = function (href, html, target) {\n    // p5._validateParameters('createA', arguments);\n    const elt = document.createElement('a');\n    elt.href = href;\n    elt.innerHTML = html;\n    if (target) elt.target = target;\n    return addElement(elt, this);\n  };\n\n  /* INPUT */\n  /**\n   * Creates a slider `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Range sliders are useful for quickly selecting numbers from a given range.\n   *\n   * The first two parameters, `min` and `max`, are numbers that set the\n   * slider's minimum and maximum.\n   *\n   * The third parameter, `value`, is optional. It's a number that sets the\n   * slider's default value.\n   *\n   * The fourth parameter, `step`, is also optional. It's a number that sets the\n   * spacing between each value in the slider's range. Setting `step` to 0\n   * allows the slider to move smoothly from `min` to `max`.\n   *\n   * @method createSlider\n   * @param  {Number} min minimum value of the slider.\n   * @param  {Number} max maximum value of the slider.\n   * @param  {Number} [value] default value of the slider.\n   * @param  {Number} [step] size for each step in the slider's range.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   slider = createSlider(0, 255);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A dark gray square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   slider = createSlider(0, 255, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 50.\n   *   slider = createSlider(0, 255, 0, 50);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 0 so that it moves smoothly.\n   *   slider = createSlider(0, 255, 0, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSlider = function (min, max, value, step) {\n    // p5._validateParameters('createSlider', arguments);\n    const elt = document.createElement('input');\n    elt.type = 'range';\n    elt.min = min;\n    elt.max = max;\n    if (step === 0) {\n      elt.step = 0.000000000000000001; // smallest valid step\n    } else if (step) {\n      elt.step = step;\n    }\n    if (typeof value === 'number') elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;button&gt;&lt;/button&gt;` element.\n   *\n   * The first parameter, `label`, is a string that sets the label displayed on\n   * the button.\n   *\n   * The second parameter, `value`, is optional. It's a string that sets the\n   * button's value. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#value\" target=\"_blank\">MDN</a>\n   * for more details.\n   *\n   * @method createButton\n   * @param  {String} label label displayed on the button.\n   * @param  {String} [value] value of the button.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let button = createButton('click me');\n   *   button.position(0, 100);\n   *\n   *   // Call repaint() when the button is pressed.\n   *   button.mousePressed(repaint);\n   *\n   *   describe('A gray square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * // Change the background color.\n   * function repaint() {\n   *   let g = random(255);\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let button;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and set its value to 0.\n   *   // Place the button beneath the canvas.\n   *   button = createButton('click me', 'red');\n   *   button.position(0, 100);\n   *\n   *   // Call randomColor() when the button is pressed.\n   *   button.mousePressed(randomColor);\n   *\n   *   describe('A red square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the button's value to set the background color.\n   *   let c = button.value();\n   *   background(c);\n   * }\n   *\n   * // Set the button's value to a random color.\n   * function randomColor() {\n   *   let c = random(['red', 'green', 'blue', 'yellow']);\n   *   button.value(c);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createButton = function (label, value) {\n    // p5._validateParameters('createButton', arguments);\n    const elt = document.createElement('button');\n    elt.innerHTML = label;\n    if (value) elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a checkbox `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Checkboxes extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * `checked()` method. Calling `myBox.checked()` returns `true` if it the box\n   * is checked and `false` if not.\n   *\n   * The first parameter, `label`, is optional. It's a string that sets the label\n   * to display next to the checkbox.\n   *\n   * The second parameter, `value`, is also optional. It's a boolean that sets the\n   * checkbox's value.\n   *\n   * @method createCheckbox\n   * @param  {String} [label] label displayed after the checkbox.\n   * @param  {Boolean} [value] value of the checkbox. Checked is `true` and unchecked is `false`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox();\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A black square with a checkbox beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\".\n   *   checkbox = createCheckbox(' white');\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A black square with a checkbox labeled \"white\" beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\" and set its value to true.\n   *   checkbox = createCheckbox(' white', true);\n   *   checkbox.position(0, 70);\n   *\n   *   describe('A white square with a checkbox labeled \"white\" beneath it. The square turns black when the box is unchecked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCheckbox = function (...args) {\n    // p5._validateParameters('createCheckbox', args);\n\n    // Create a container element\n    const elt = document.createElement('div');\n\n    // Create checkbox type input element\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n\n    // Create label element and wrap it around checkbox\n    const label = document.createElement('label');\n    label.appendChild(checkbox);\n\n    // Append label element inside the container\n    elt.appendChild(label);\n\n    //checkbox must be wrapped in p5.Element before label so that label appears after\n    const self = addElement(elt, this);\n\n    self.checked = function (...args) {\n      const cb = self.elt.firstElementChild.getElementsByTagName('input')[0];\n      if (cb) {\n        if (args.length === 0) {\n          return cb.checked;\n        } else if (args[0]) {\n          cb.checked = true;\n        } else {\n          cb.checked = false;\n        }\n      }\n      return self;\n    };\n\n    this.value = function (val) {\n      self.value = val;\n      return this;\n    };\n\n    // Set the span element innerHTML as the label value if passed\n    if (args[0]) {\n      self.value(args[0]);\n      const span = document.createElement('span');\n      span.innerHTML = args[0];\n      label.appendChild(span);\n    }\n\n    // Set the checked value of checkbox if passed\n    if (args[1]) {\n      checkbox.checked = true;\n    }\n\n    return self;\n  };\n\n  /**\n   * Creates a dropdown menu `&lt;select&gt;&lt;/select&gt;` element.\n   *\n   * The parameter is optional. If `true` is passed, as in\n   * `let mySelect = createSelect(true)`, then the dropdown will support\n   * multiple selections. If an existing `&lt;select&gt;&lt;/select&gt;` element\n   * is passed, as in `let mySelect = createSelect(otherSelect)`, the existing\n   * element will be wrapped in a new <a href=\"#/p5.Element\">p5.Element</a>\n   * object.\n   *\n   * Dropdowns extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `mySelect.option(name, [value])` adds an option to the menu. The first paremeter, `name`, is a string that sets the option's name and value. The second parameter, `value`, is optional. If provided, it sets the value that corresponds to the key `name`. If an option with `name` already exists, its value is changed to `value`.\n   * - `mySelect.value()` returns the currently-selected option's value.\n   * - `mySelect.selected()` returns the currently-selected option.\n   * - `mySelect.selected(option)` selects the given option by default.\n   * - `mySelect.disable()` marks the whole dropdown element as disabled.\n   * - `mySelect.disable(option)` marks a given option as disabled.\n   * - `mySelect.enable()` marks the whole dropdown element as enabled.\n   * - `mySelect.enable(option)` marks a given option as enabled.\n   *\n   * @method createSelect\n   * @param {Boolean} [multiple] support multiple selections.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   // Disable the \"yellow\" option.\n   *   mySelect.disable('yellow');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options with names and values.\n   *   mySelect.option('one', 'red');\n   *   mySelect.option('two', 'green');\n   *   mySelect.option('three', 'blue');\n   *   mySelect.option('four', 'yellow');\n   *\n   *   // Set the selected option to \"one\".\n   *   mySelect.selected('one');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Hold CTRL to select multiple options on Windows and Linux.\n   * // Hold CMD to select multiple options on macOS.\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and allow multiple selections.\n   *   // Place it beneath the canvas.\n   *   mySelect = createSelect(true);\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   describe('A gray square with a dropdown menu beneath it. Colorful circles appear when their color is selected.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the selected value(s) to draw circles.\n   *   let colors = mySelect.selected();\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = 10 + i * 20;\n   *\n   *     // Access the color.\n   *     let c = colors[i];\n   *\n   *     // Draw the circle.\n   *     fill(c);\n   *     circle(x, 50, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createSelect\n   * @param {Object} existing select element to wrap, either as a <a href=\"#/p5.Element\">p5.Element</a> or\n   *                          a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\" target=\"_blank\">HTMLSelectElement</a>.\n   * @return {p5.Element}\n   */\n\n  fn.createSelect = function (...args) {\n    // p5._validateParameters('createSelect', args);\n    let self;\n    let arg = args[0];\n    if (arg instanceof Element && arg.elt instanceof HTMLSelectElement) {\n      // If given argument is p5.Element of select type\n      self = arg;\n      this.elt = arg.elt;\n    } else if (arg instanceof HTMLSelectElement) {\n      self = addElement(arg, this);\n      this.elt = arg;\n    } else {\n      const elt = document.createElement('select');\n      if (arg && typeof arg === 'boolean') {\n        elt.setAttribute('multiple', 'true');\n      }\n      self = addElement(elt, this);\n      this.elt = elt;\n    }\n    self.option = function (name, value) {\n      let index;\n\n      // if no name is passed, return\n      if (name === undefined) {\n        return;\n      }\n      //see if there is already an option with this name\n      for (let i = 0; i < this.elt.length; i += 1) {\n        if (this.elt[i].textContent === name) {\n          index = i;\n          break;\n        }\n      }\n      //if there is an option with this name we will modify it\n      if (index !== undefined) {\n        //if the user passed in false then delete that option\n        if (value === false) {\n          this.elt.remove(index);\n        } else {\n          // Update the option at index with the value\n          this.elt[index].value = value;\n        }\n      } else {\n        //if it doesn't exist create it\n        const opt = document.createElement('option');\n        opt.textContent = name;\n        opt.value = value === undefined ? name : value;\n        this.elt.appendChild(opt);\n        this._pInst._elements.push(opt);\n      }\n    };\n\n    self.selected = function (value) {\n      // Update selected status of option\n      if (value !== undefined) {\n        for (let i = 0; i < this.elt.length; i += 1) {\n          if (this.elt[i].value.toString() === value.toString()) {\n            this.elt.selectedIndex = i;\n          }\n        }\n        return this;\n      } else {\n        if (this.elt.getAttribute('multiple')) {\n          let arr = [];\n          for (const selectedOption of this.elt.selectedOptions) {\n            arr.push(selectedOption.value);\n          }\n          return arr;\n        } else {\n          return this.elt.value;\n        }\n      }\n    };\n\n    self.disable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = true;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = true;\n      }\n      return this;\n    };\n\n    self.enable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = false;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = false;\n        for (let i = 0; i < this.elt.length; i++) {\n          this.elt[i].disabled = false;\n          this.elt[i].selected = false;\n        }\n      }\n      return this;\n    };\n\n    return self;\n  };\n\n  /**\n   * Creates a radio button element.\n   *\n   * The parameter is optional. If a string is passed, as in\n   * `let myRadio = createSelect('food')`, then each radio option will\n   * have `\"food\"` as its `name` parameter: `&lt;input name=\"food\"&gt;&lt;/input&gt;`.\n   * If an existing `&lt;div&gt;&lt;/div&gt;` or `&lt;span&gt;&lt;/span&gt;`\n   * element is passed, as in `let myRadio = createSelect(container)`, it will\n   * become the radio button's parent element.\n   *\n   * Radio buttons extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `myRadio.option(value, [label])` adds an option to the menu. The first paremeter, `value`, is a string that sets the option's value and label. The second parameter, `label`, is optional. If provided, it sets the label displayed for the `value`. If an option with `value` already exists, its label is changed and its value is returned.\n   * - `myRadio.value()` returns the currently-selected option's value.\n   * - `myRadio.selected()` returns the currently-selected option.\n   * - `myRadio.selected(value)` selects the given option and returns it as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\" target=\"_blank\">`HTMLInputElement`</a>.\n   * - `myRadio.disable(shouldDisable)` enables the entire radio button if `true` is passed and disables it if `false` is passed.\n   *\n   * @method createRadio\n   * @param  {Object} [containerElement] container HTML Element, either a `&lt;div&gt;&lt;/div&gt;`\n   * or `&lt;span&gt;&lt;/span&gt;`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let style = document.createElement('style');\n   * style.innerHTML = `\n   * .p5-radio label {\n   *    display: flex;\n   *    align-items: center;\n   *  }\n   *  .p5-radio input {\n   *    margin-right: 5px;\n   *  }\n   *  `;\n   * document.head.appendChild(style);\n   *\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.class('p5-radio');\n   *   myRadio.size(60);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three color options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let g = myRadio.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   // Color values are labeled with\n   *   // emotions they evoke.\n   *   myRadio.option('red', 'love');\n   *   myRadio.option('yellow', 'joy');\n   *   myRadio.option('blue', 'trust');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three options listed, \"love\", \"joy\", and \"trust\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let btn = createButton('disable');\n   *   btn.position(0, 100);\n   *\n   *   // Call disableRadio() when btn is pressed.\n   *   btn.mousePressed(disableRadio);\n   *\n   *   describe('A yellow square with three options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option. A \"disable\" button beneath the canvas disables the color options when pressed.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   *\n   * // Disable myRadio.\n   * function disableRadio() {\n   *   myRadio.disable(true);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createRadio\n   * @param {String} [name] name parameter assigned to each option's `&lt;input&gt;&lt;/input&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  /**\n   * @method createRadio\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  //counter for unique names on radio button\n  let counter = 0;\n  fn.createRadio = function (...args) {\n    // Creates a div, adds each option as an individual input inside it.\n    // If already given with a containerEl, will search for all input[radio]\n    // it, create a p5.Element out of it, add options to it and return the p5.Element.\n\n    let self;\n    let radioElement;\n    let name;\n    const arg0 = args[0];\n    if (\n      arg0 instanceof Element &&\n      (arg0.elt instanceof HTMLDivElement || arg0.elt instanceof HTMLSpanElement)\n    ) {\n      // If given argument is p5.Element of div/span type\n      self = arg0;\n      this.elt = arg0.elt;\n    } else if (\n      // If existing radio Element is provided as argument 0\n      arg0 instanceof HTMLDivElement ||\n      arg0 instanceof HTMLSpanElement\n    ) {\n      self = addElement(arg0, this);\n      this.elt = arg0;\n      radioElement = arg0;\n      if (typeof args[1] === 'string') name = args[1];\n    } else {\n      if (typeof arg0 === 'string') name = arg0;\n      radioElement = document.createElement('div');\n      self = addElement(radioElement, this);\n      this.elt = radioElement;\n    }\n    self._name = name || `radioOption_${counter++}`;\n\n    // setup member functions\n    const isRadioInput = el =>\n      el instanceof HTMLInputElement && el.type === 'radio';\n    const isLabelElement = el => el instanceof HTMLLabelElement;\n    const isSpanElement = el => el instanceof HTMLSpanElement;\n\n    self._getOptionsArray = function () {\n      return Array.from(this.elt.children)\n        .filter(\n          el =>\n            isRadioInput(el) ||\n            (isLabelElement(el) && isRadioInput(el.firstElementChild))\n        )\n        .map(el => (isRadioInput(el) ? el : el.firstElementChild));\n    };\n\n    self.option = function (value, label) {\n      // return an option with this value, create if not exists.\n      let optionEl;\n      for (const option of self._getOptionsArray()) {\n        if (option.value === value) {\n          optionEl = option;\n          break;\n        }\n      }\n\n      // Create a new option, add it to radioElement and return it.\n      if (optionEl === undefined) {\n        optionEl = document.createElement('input');\n        optionEl.setAttribute('type', 'radio');\n        optionEl.setAttribute('value', value);\n      }\n      optionEl.setAttribute('name', self._name);\n\n      // Check if label element exists, else create it\n      let labelElement;\n      if (!isLabelElement(optionEl.parentElement)) {\n        labelElement = document.createElement('label');\n        labelElement.insertAdjacentElement('afterbegin', optionEl);\n      } else {\n        labelElement = optionEl.parentElement;\n      }\n\n      // Check if span element exists, else create it\n      let spanElement;\n      if (!isSpanElement(labelElement.lastElementChild)) {\n        spanElement = document.createElement('span');\n        optionEl.insertAdjacentElement('afterend', spanElement);\n      } else {\n        spanElement = labelElement.lastElementChild;\n      }\n\n      // Set the innerHTML of span element as the label text\n      spanElement.innerHTML = label === undefined ? value : label;\n\n      // Append the label element, which includes option element and\n      // span element to the radio container element\n      this.elt.appendChild(labelElement);\n\n      return optionEl;\n    };\n\n    self.remove = function (value) {\n      for (const optionEl of self._getOptionsArray()) {\n        if (optionEl.value === value) {\n          if (isLabelElement(optionEl.parentElement)) {\n            // Remove parent label which also removes children elements\n            optionEl.parentElement.remove();\n          } else {\n            // Remove the option input if parent label does not exist\n            optionEl.remove();\n          }\n          return;\n        }\n      }\n    };\n\n    self.value = function () {\n      let result = '';\n      for (const option of self._getOptionsArray()) {\n        if (option.checked) {\n          result = option.value;\n          break;\n        }\n      }\n      return result;\n    };\n\n    self.selected = function (value) {\n      let result = null;\n      if (value === undefined) {\n        for (const option of self._getOptionsArray()) {\n          if (option.checked) {\n            result = option;\n            break;\n          }\n        }\n      } else {\n        // forEach loop to uncheck all radio buttons before\n        // setting any one as checked.\n        self._getOptionsArray().forEach(option => {\n          option.checked = false;\n          option.removeAttribute('checked');\n        });\n\n        for (const option of self._getOptionsArray()) {\n          if (option.value === value) {\n            option.setAttribute('checked', true);\n            option.checked = true;\n            result = option;\n          }\n        }\n      }\n      return result;\n    };\n\n    self.disable = function (shouldDisable = true) {\n      for (const radioInput of self._getOptionsArray()) {\n        radioInput.setAttribute('disabled', shouldDisable);\n      }\n    };\n\n    return self;\n  };\n\n  /**\n   * Creates a color picker element.\n   *\n   * The parameter, `value`, is optional. If a color string or\n   * <a href=\"#/p5.Color\">p5.Color</a> object is passed, it will set the default\n   * color.\n   *\n   * Color pickers extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * couple of helpful methods for managing colors:\n   * - `myPicker.value()` returns the current color as a hex string in the format `'#rrggbb'`.\n   * - `myPicker.color()` returns the current color as a <a href=\"#/p5.Color\">p5.Color</a> object.\n   *\n   * @method createColorPicker\n   * @param {String|p5.Color} [value] default color as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\" target=\"_blank\">CSS color string</a>.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A pink square with a color picker beneath it. The square changes color when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.color();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A number with the format \"#rrggbb\" is displayed on a pink canvas. The background color and number change when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.value();\n   *   background(c);\n   *\n   *   // Display the current color as a hex string.\n   *   text(c, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createColorPicker = function (value) {\n    // p5._validateParameters('createColorPicker', arguments);\n    // TODO: This implementation needs to be rechecked or reimplemented\n    // The way it worked with color is a bit too complex\n    const elt = document.createElement('input');\n    let self;\n    elt.type = 'color';\n    if (value) {\n      if (value instanceof p5.Color) {\n        elt.value = value.toString('#rrggbb');\n      } else {\n        this.push();\n        this.colorMode('rgb');\n        elt.value = this.color(value).toString('#rrggbb');\n        this.pop();\n      }\n    } else {\n      elt.value = '#000000';\n    }\n    self = addElement(elt, this);\n    // Method to return a p5.Color object for the given color.\n    const inst = this;\n    self.color = function () {\n      inst.push();\n      if (value) {\n        if (value.mode) {\n          inst.colorMode(value.mode, ...(value?.maxes ? value.maxes[value.mode] || [] : []));\n        }\n      }\n      const c = inst.color(this.elt.value);\n      inst.pop();\n      return c;\n    };\n    return self;\n  };\n\n  /**\n   * Creates a text `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Call `myInput.size()` to set the length of the text box.\n   *\n   * The first parameter, `value`, is optional. It's a string that sets the\n   * input's default value. The input is blank by default.\n   *\n   * The second parameter, `type`, is also optional. It's a string that\n   * specifies the type of text being input. See MDN for a full\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\" target=\"_blank\">list of options</a>.\n   * The default is `'text'`.\n   *\n   * @method createInput\n   * @param {String} [value] default value of the input box. Defaults to an empty string `''`.\n   * @param {String} [type] type of input. Defaults to `'text'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas.\n   *   myInput = createInput();\n   *   myInput.position(0, 100);\n   *\n   *   describe('A gray square with a text box beneath it. The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas. Set its default\n   *   // text to \"hello!\".\n   *   myInput = createInput('hello!');\n   *   myInput.position(0, 100);\n   *\n   *   describe('The text \"hello!\" written at the center of a gray square. A text box beneath the square also says \"hello!\". The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createInput\n   * @param {String} [value]\n   * @return {p5.Element}\n   */\n  fn.createInput = function (value = '', type = 'text') {\n    // p5._validateParameters('createInput', arguments);\n    let elt = document.createElement('input');\n    elt.setAttribute('value', value);\n    elt.setAttribute('type', type);\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;input&gt;&lt;/input&gt;` element of type `'file'`.\n   *\n   * `createFileInput()` allows users to select local files for use in a sketch.\n   * It returns a <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The first parameter, `callback`, is a function that's called when the file\n   * loads. The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The second parameter, `multiple`, is optional. It's a boolean value that\n   * allows loading multiple files if set to `true`. If `true`, `callback`\n   * will be called once per file.\n   *\n   * @method createFileInput\n   * @param  {Function} callback function to call once the file loads.\n   * @param  {Boolean} [multiple] allow multiple files to be selected.\n   * @return {p5.File} new <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let input;\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(200, 200);\n   *\n   *   // Create a file input and place it beneath\n   *   // the canvas.\n   *   input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if loaded.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Create an image if the file is an image.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     img = createImg(file.data, '');\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select multiple images\n   * // to load and display.\n   * let input;\n   * let images = [];\n   *\n   * function setup() {\n   *   // Create a file input and place it beneath\n   *   // the canvas. Allow it to load multiple files.\n   *   input = createFileInput(handleImage, true);\n   *   input.position(0, 100);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the images if loaded. Each image\n   *   // is drawn 20 pixels lower than the\n   *   // previous image.\n   *   for (let i = 0; i < images.length; i += 1) {\n   *     // Calculate the y-coordinate.\n   *     let y = i * 20;\n   *\n   *     // Draw the image.\n   *     image(img, 0, y, 100, 100);\n   *   }\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects multiple image files to load, they are displayed on the square.');\n   * }\n   *\n   * // Create an image if the file is an image,\n   * // then add it to the images array.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     let img = createImg(file.data, '');\n   *     img.hide();\n   *     images.push(img);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createFileInput = function (callback, multiple = false) {\n    // p5._validateParameters('createFileInput', arguments);\n\n    const handleFileSelect = function (event) {\n      for (const file of event.target.files) {\n        File._load(file, callback);\n      }\n    };\n\n    // If File API's are not supported, throw Error\n    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n      console.log(\n        'The File APIs are not fully supported in this browser. Cannot create element.'\n      );\n      return;\n    }\n\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    if (multiple) fileInput.setAttribute('multiple', true);\n    fileInput.addEventListener('change', handleFileSelect, false);\n    return addElement(fileInput, this);\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  dom(p5, p5.prototype);\n}\n\nexport { dom as default };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,IAAI,QAAQ,cAAc;AACnC,OAAO,iCAAiC;AACxC,OAAO,eAAe;AACtB,OAAO,8BAA8B;AACrC,OAAO,0BAA0B;AACjC,OAAO,iBAAiB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,GAAGA,CAACC,EAAE,EAAEC,EAAE,EAAC;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,EAAE,CAACC,MAAM,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC1B;IACA,MAAMC,SAAS,GAAG,IAAI,CAACC,aAAa,CAACF,CAAC,CAAC;IACvC,MAAMG,GAAG,GAAGF,SAAS,CAACG,aAAa,CAACL,CAAC,CAAC;IACtC,IAAII,GAAG,EAAE;MACP,OAAO,IAAI,CAACE,YAAY,CAACF,GAAG,CAAC;IAC/B,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACiC,aAAa,GAAG,UAAUC,GAAG,EAAEC,OAAO,EAAE;IACzC;IACA,MAAMlB,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAACC,GAAG,CAAC;IACvC,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;MAClClB,GAAG,CAACmB,SAAS,GAAGD,OAAO;IACzB;IACA,OAAOE,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACsC,cAAc,GAAG,UAAUpC,CAAC,EAAE;IAC/B;IACA;IACA,MAAMqC,kBAAkB,GAAGC,EAAE,IAAI,EAAEA,EAAE,CAACvB,GAAG,YAAYwB,iBAAiB,CAAC;IACvE,MAAMC,kBAAkB,GAAG,IAAI,CAACC,SAAS,CAACC,MAAM,CAACL,kBAAkB,CAAC;IACpEG,kBAAkB,CAACG,GAAG,CAACL,EAAE,IAAIA,EAAE,CAACM,MAAM,CAAC,CAAC,CAAC;EAC3C,CAAC;;EAED;AACF;AACA;EACE,SAAST,UAAUA,CAACpB,GAAG,EAAE8B,KAAK,EAAEC,KAAK,EAAE;IACrC,MAAMC,IAAI,GAAGF,KAAK,CAACG,SAAS,GAAGH,KAAK,CAACG,SAAS,GAAGlC,QAAQ,CAACmC,IAAI;IAC9DF,IAAI,CAACG,WAAW,CAACnC,GAAG,CAAC;IACrB,MAAMc,CAAC,GAAGiB,KAAK,GACX,IAAIpD,YAAY,CAACqB,GAAG,EAAE8B,KAAK,CAAC,GAC5B,IAAIpD,OAAO,CAACsB,GAAG,EAAE8B,KAAK,CAAC;IAC3BA,KAAK,CAACJ,SAAS,CAAC5B,IAAI,CAACgB,CAAC,CAAC;IACvB,OAAOA,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE/B,EAAE,CAACqD,SAAS,GAAG,UAAUC,IAAI,GAAG,EAAE,EAAE;IAClC,IAAIrC,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,KAAK,CAAC;IACvChB,GAAG,CAACmB,SAAS,GAAGkB,IAAI;IACpB,OAAOjB,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACuD,OAAO,GAAG,UAAUD,IAAI,GAAG,EAAE,EAAE;IAChC,IAAIrC,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,GAAG,CAAC;IACrChB,GAAG,CAACmB,SAAS,GAAGkB,IAAI;IACpB,OAAOjB,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACwD,UAAU,GAAG,UAAUF,IAAI,GAAG,EAAE,EAAE;IACnC,IAAIrC,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,MAAM,CAAC;IACxChB,GAAG,CAACmB,SAAS,GAAGkB,IAAI;IACpB,OAAOjB,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACyD,SAAS,GAAG,YAAY;IACzB;IACA,MAAMxC,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,KAAK,CAAC;IACzC,MAAML,IAAI,GAAG8B,SAAS;IACtB,IAAIC,IAAI;IACR,IAAI/B,IAAI,CAACf,MAAM,GAAG,CAAC,IAAI,OAAOe,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAClDX,GAAG,CAAC2C,GAAG,GAAGhC,IAAI,CAAC,CAAC,CAAC;IACnB;IACA,IAAIA,IAAI,CAACf,MAAM,GAAG,CAAC,IAAI,OAAOe,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAClDX,GAAG,CAAC4C,WAAW,GAAGjC,IAAI,CAAC,CAAC,CAAC;IAC3B;IACAX,GAAG,CAAC6C,GAAG,GAAGlC,IAAI,CAAC,CAAC,CAAC;IACjB+B,IAAI,GAAGtB,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;IAC5BA,GAAG,CAAC8C,gBAAgB,CAAC,MAAM,EAAE,YAAY;MACvCJ,IAAI,CAACK,KAAK,GAAG/C,GAAG,CAACgD,WAAW,IAAIhD,GAAG,CAAC+C,KAAK;MACzCL,IAAI,CAACO,MAAM,GAAGjD,GAAG,CAACkD,YAAY,IAAIlD,GAAG,CAACiD,MAAM;MAC5C,MAAME,IAAI,GAAGxC,IAAI,CAACA,IAAI,CAACf,MAAM,GAAG,CAAC,CAAC;MAClC,IAAI,OAAOuD,IAAI,KAAK,UAAU,EAAEA,IAAI,CAACT,IAAI,CAAC;IAC5C,CAAC,CAAC;IACF,OAAOA,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE3D,EAAE,CAACqE,OAAO,GAAG,UAAUC,IAAI,EAAEhB,IAAI,EAAEiB,MAAM,EAAE;IACzC;IACA,MAAMtD,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,GAAG,CAAC;IACvChB,GAAG,CAACqD,IAAI,GAAGA,IAAI;IACfrD,GAAG,CAACmB,SAAS,GAAGkB,IAAI;IACpB,IAAIiB,MAAM,EAAEtD,GAAG,CAACsD,MAAM,GAAGA,MAAM;IAC/B,OAAOlC,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACwE,YAAY,GAAG,UAAUC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAE;IACjD;IACA,MAAM3D,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,OAAO,CAAC;IAC3ChB,GAAG,CAACQ,IAAI,GAAG,OAAO;IAClBR,GAAG,CAACwD,GAAG,GAAGA,GAAG;IACbxD,GAAG,CAACyD,GAAG,GAAGA,GAAG;IACb,IAAIE,IAAI,KAAK,CAAC,EAAE;MACd3D,GAAG,CAAC2D,IAAI,GAAG,oBAAoB,CAAC,CAAC;IACnC,CAAC,MAAM,IAAIA,IAAI,EAAE;MACf3D,GAAG,CAAC2D,IAAI,GAAGA,IAAI;IACjB;IACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE1D,GAAG,CAAC0D,KAAK,GAAGA,KAAK;IAChD,OAAOtC,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAAC6E,YAAY,GAAG,UAAUC,KAAK,EAAEH,KAAK,EAAE;IACxC;IACA,MAAM1D,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,QAAQ,CAAC;IAC5ChB,GAAG,CAACmB,SAAS,GAAG0C,KAAK;IACrB,IAAIH,KAAK,EAAE1D,GAAG,CAAC0D,KAAK,GAAGA,KAAK;IAC5B,OAAOtC,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAAC+E,cAAc,GAAG,UAAU,GAAGnD,IAAI,EAAE;IACrC;;IAEA;IACA,MAAMX,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,KAAK,CAAC;;IAEzC;IACA,MAAM+C,QAAQ,GAAGhE,QAAQ,CAACiB,aAAa,CAAC,OAAO,CAAC;IAChD+C,QAAQ,CAACvD,IAAI,GAAG,UAAU;;IAE1B;IACA,MAAMqD,KAAK,GAAG9D,QAAQ,CAACiB,aAAa,CAAC,OAAO,CAAC;IAC7C6C,KAAK,CAAC1B,WAAW,CAAC4B,QAAQ,CAAC;;IAE3B;IACA/D,GAAG,CAACmC,WAAW,CAAC0B,KAAK,CAAC;;IAEtB;IACA,MAAMnB,IAAI,GAAGtB,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;IAElC0C,IAAI,CAAChC,OAAO,GAAG,UAAU,GAAGC,IAAI,EAAE;MAChC,MAAMqD,EAAE,GAAGtB,IAAI,CAAC1C,GAAG,CAACiE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CD,GAAG,CAAC,CAAC;MACV,OAAOvG,CAAC;IACV,CAAC;IACD,OAAO4B,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACE3D,EAAE,CAAC0I,WAAW,GAAG,UAAU/D,KAAK,GAAG,EAAE,EAAElD,IAAI,GAAG,MAAM,EAAE;IACpD;IACA,IAAIR,GAAG,GAAGD,QAAQ,CAACiB,aAAa,CAAC,OAAO,CAAC;IACzChB,GAAG,CAACuE,YAAY,CAAC,OAAO,EAAEb,KAAK,CAAC;IAChC1D,GAAG,CAACuE,YAAY,CAAC,MAAM,EAAE/D,IAAI,CAAC;IAC9B,OAAOY,UAAU,CAACpB,GAAG,EAAE,IAAI,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAAC2I,eAAe,GAAG,UAAUC,QAAQ,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACzD;;IAEA,MAAMC,gBAAgB,GAAG,SAAAA,CAAUC,KAAK,EAAE;MACxC,KAAK,MAAMC,IAAI,IAAID,KAAK,CAACxE,MAAM,CAAC0E,KAAK,EAAE;QACrCpJ,IAAI,CAACqJ,KAAK,CAACF,IAAI,EAAEJ,QAAQ,CAAC;MAC5B;IACF,CAAC;;IAED;IACA,IAAI,EAAEO,MAAM,CAACtJ,IAAI,IAAIsJ,MAAM,CAACC,UAAU,IAAID,MAAM,CAACE,QAAQ,IAAIF,MAAM,CAACG,IAAI,CAAC,EAAE;MACzEC,OAAO,CAACC,GAAG,CACT,+EACF,CAAC;MACD;IACF;IAEA,MAAMC,SAAS,GAAGzI,QAAQ,CAACiB,aAAa,CAAC,OAAO,CAAC;IACjDwH,SAAS,CAACjE,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IACtC,IAAIqD,QAAQ,EAAEY,SAAS,CAACjE,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;IACtDiE,SAAS,CAAC1F,gBAAgB,CAAC,QAAQ,EAAE+E,gBAAgB,EAAE,KAAK,CAAC;IAC7D,OAAOzG,UAAU,CAACoH,SAAS,EAAE,IAAI,CAAC;EACpC,CAAC;AACH;AAEA,IAAG,OAAO1J,EAAE,KAAK,WAAW,EAAC;EAC3BD,GAAG,CAACC,EAAE,EAAEA,EAAE,CAACsB,SAAS,CAAC;AACvB;AAEA,SAASvB,GAAG,IAAI4J,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}