{"ast":null,"code":"import { inflate } from 'pako';\n\n// Mocking the pako module to just have inflate for a smaller package size\nconst pako = {\n  inflate\n};\nvar Typr = {};\nTypr[\"parse\"] = function (buff) {\n  var bin = Typr[\"B\"];\n  var readFont = function (data, idx, offset, tmap) {\n    var T = Typr[\"T\"];\n    var prsr = {\n      \"cmap\": T.cmap,\n      \"head\": T.head,\n      \"hhea\": T.hhea,\n      \"maxp\": T.maxp,\n      \"hmtx\": T.hmtx,\n      \"name\": T.name,\n      \"OS/2\": T.OS2,\n      \"post\": T.post,\n      \"loca\": T.loca,\n      \"kern\": T.kern,\n      \"glyf\": T.glyf,\n      \"CFF \": T.CFF,\n      /*\n      \"GPOS\",\n      \"GSUB\",\n      \"GDEF\",*/\n      \"GSUB\": T.GSUB,\n      \"CBLC\": T.CBLC,\n      \"CBDT\": T.CBDT,\n      \"SVG \": T.SVG,\n      \"COLR\": T.colr,\n      \"CPAL\": T.cpal,\n      \"sbix\": T.sbix,\n      \"fvar\": T.fvar,\n      \"gvar\": T.gvar,\n      \"avar\": T.avar,\n      \"HVAR\": T.HVAR\n      //\"VORG\",\n    };\n    var obj = {\n      \"_data\": data,\n      \"_index\": idx,\n      \"_offset\": offset\n    };\n    for (var t in prsr) {\n      var tab = Typr[\"findTable\"](data, t, offset);\n      if (tab) {\n        var off = tab[0],\n          tobj = tmap[off];\n        if (tobj == null) tobj = prsr[t].parseTab(data, off, tab[1], obj);\n        obj[t] = tmap[off] = tobj;\n      }\n    }\n    return obj;\n  };\n  function woffToOtf(data) {\n    var numTables = bin.readUshort(data, 12);\n    var totalSize = bin.readUint(data, 16);\n    var otf = new Uint8Array(totalSize),\n      toff = 12 + numTables * 16;\n    bin.writeASCII(otf, 0, \"OTTO\");\n    bin.writeUshort(otf, 4, numTables);\n    var off = 44;\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, off, 4);\n      var tof = bin.readUint(data, off + 4);\n      var cLe = bin.readUint(data, off + 8);\n      var oLe = bin.readUint(data, off + 12);\n      off += 20;\n      //console.log(i, \":::\", tag,tof,oLe);\n\n      var tab = data.slice(tof, tof + cLe);\n      if (cLe != oLe) tab = pako[\"inflate\"](tab);\n      var to = 12 + i * 16;\n      bin.writeASCII(otf, to, tag);\n      bin.writeUint(otf, to + 8, toff);\n      bin.writeUint(otf, to + 12, oLe);\n      otf.set(tab, toff);\n      toff += oLe;\n    }\n    //console.log(otf);\n    return otf;\n  }\n  var data = new Uint8Array(buff);\n  // PATCHED: keep around the compressed data if we inflate it\n  let compressedData;\n  if (data[0] == 0x77) {\n    compressedData = data;\n    data = woffToOtf(data);\n  }\n  var tmap = {};\n  var tag = bin.readASCII(data, 0, 4);\n  if (tag == \"ttcf\") {\n    var offset = 4;\n    bin.readUshort(data, offset);\n    offset += 2;\n    bin.readUshort(data, offset);\n    offset += 2;\n    var numF = bin.readUint(data, offset);\n    offset += 4;\n    var fnts = [];\n    for (var i = 0; i < numF; i++) {\n      var foff = bin.readUint(data, offset);\n      offset += 4;\n      fnts.push(readFont(data, i, foff, tmap));\n    }\n    return fnts;\n  }\n  var fnt = readFont(data, 0, 0, tmap); //console.log(fnt);  throw \"e\";\n  fnt._compressedData = compressedData; // PATCH: make compressed data accessible\n  var fvar = fnt[\"fvar\"];\n  if (fvar) {\n    var out = [fnt];\n    for (var i = 0; i < fvar[1].length; i++) {\n      var fv = fvar[1][i];\n      var obj = {};\n      out.push(obj);\n      for (var p in fnt) obj[p] = fnt[p];\n      obj[\"_index\"] = i;\n      var name = obj[\"name\"] = JSON.parse(JSON.stringify(obj[\"name\"]));\n      name[\"fontSubfamily\"] = fv[0];\n      if (fv[3] == null) fv[3] = (name[\"fontFamily\"] + \"-\" + name[\"fontSubfamily\"])[\"replaceAll\"](\" \", \"\");\n      name[\"postScriptName\"] = fv[3];\n    }\n    return out;\n  }\n  return [fnt];\n};\nTypr[\"findTable\"] = function (data, tab, foff) {\n  var bin = Typr[\"B\"];\n  var numTables = bin.readUshort(data, foff + 4);\n  var offset = foff + 12;\n  for (var i = 0; i < numTables; i++) {\n    var tag = bin.readASCII(data, offset, 4); //console.log(tag);\n    bin.readUint(data, offset + 4);\n    var toffset = bin.readUint(data, offset + 8);\n    var length = bin.readUint(data, offset + 12);\n    if (tag == tab) return [toffset, length];\n    offset += 16;\n  }\n  return null;\n};\n/*\nTypr[\"splitBy\"] = function(data,tag) {\n  data = new Uint8Array(data);  console.log(data.slice(0,64));\n  var bin = Typr[\"B\"];\n  var ttcf = bin.readASCII(data, 0, 4);  if(ttcf!=\"ttcf\") return {};\n\n  var offset = 8;\n  var numF = bin.readUint  (data, offset);  offset+=4;\n  var colls = [], used={};\n  for(var i=0; i<numF; i++) {\n    var foff = bin.readUint  (data, offset);  offset+=4;\n    var toff = Typr[\"findTable\"](data,tag,foff)[0];\n    if(used[toff]==null) used[toff] = [];\n    used[toff].push([foff,bin.readUshort(data,foff+4)]);  // font offset, numTables\n  }\n  for(var toff in used) {\n    var offs = used[toff];\n    var hlen = 12+4*offs.length;\n    var out = new Uint8Array(hlen);\n    for(var i=0; i<8; i++) out[i]=data[i];\n    bin.writeUint(out,8,offs.length);\n\n    for(var i=0; i<offs.length; i++) hlen += 12+offs[i][1]*16;\n\n    var hdrs = [out], tabs = [], hoff=out.length, toff=hlen, noffs={};\n    for(var i=0; i<offs.length; i++) {\n      bin.writeUint(out, 12+i*4, hoff);  hoff+=12+offs[i][1]*16;\n      toff = Typr[\"_cutFont\"](data, offs[i][0], hdrs, tabs, toff, noffs);\n    }\n    colls.push(Typr[\"_joinArrs\"](hdrs.concat(tabs)));\n  }\n  return colls;\n}\n\nTypr[\"splitFonts\"] = function(data) {\n  data = new Uint8Array(data);\n  var bin = Typr[\"B\"];\n  var ttcf = bin.readASCII(data, 0, 4);  if(ttcf!=\"ttcf\") return {};\n\n  var offset = 8;\n  var numF = bin.readUint  (data, offset);  offset+=4;\n  var fnts = [];\n  for(var i=0; i<numF; i++) {\n    var foff = bin.readUint  (data, offset);  offset+=4;\n    fnts.push(Typr._cutFont(data, foff));\n    break;\n  }\n  return fnts;\n}\n\nTypr[\"_cutFont\"] = function(data,foff,hdrs,tabs,toff, noffs) {\n  var bin = Typr[\"B\"];\n  var numTables = bin.readUshort(data, foff+4);\n\n  var out = new Uint8Array(12+numTables*16);  hdrs.push(out);\n  for(var i=0; i<12; i++) out[i]=data[foff+i];  //console.log(out);\n\n  var off = 12;\n  for(var i=0; i<numTables; i++)\n  {\n    var tag      = bin.readASCII(data, foff+off, 4);\n    var checkSum = bin.readUint (data, foff+off+ 4);\n    var toffset  = bin.readUint (data, foff+off+ 8);\n    var length   = bin.readUint (data, foff+off+12);\n\n    while((length&3)!=0) length++;\n\n    for(var j=0; j<16; j++) out[off+j]=data[foff+off+j];\n\n    if(noffs[toffset]!=null) bin.writeUint(out,off+8,noffs[toffset]);\n    else {\n      noffs[toffset] = toff;\n      bin.writeUint(out, off+8, toff);\n      tabs.push(new Uint8Array(data.buffer, toffset, length));  toff+=length;\n    }\n    off+=16;\n  }\n  return toff;\n}\nTypr[\"_joinArrs\"] = function(tabs) {\n  var len = 0;\n  for(var i=0; i<tabs.length; i++) len+=tabs[i].length;\n  var out = new Uint8Array(len), ooff=0;\n  for(var i=0; i<tabs.length; i++) {\n    var tab = tabs[i];\n    for(var j=0; j<tab.length; j++) out[ooff+j]=tab[j];\n    ooff+=tab.length;\n  }\n  return out;\n}\n*/\n\nTypr[\"T\"] = {};\nTypr[\"B\"] = {\n  readFixed: function (data, o) {\n    return (data[o] << 8 | data[o + 1]) + (data[o + 2] << 8 | data[o + 3]) / (256 * 256 + 4);\n  },\n  readF2dot14: function (data, o) {\n    var num = Typr[\"B\"].readShort(data, o);\n    return num / 16384;\n  },\n  readInt: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p];\n    return Typr[\"B\"].t.int32[0];\n  },\n  readInt8: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[0] = buff[p];\n    return Typr[\"B\"].t.int8[0];\n  },\n  readShort: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint16;\n    a[0] = buff[p] << 8 | buff[p + 1];\n    return Typr[\"B\"].t.int16[0];\n  },\n  readUshort: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    return buff[p] << 8 | buff[p + 1];\n  },\n  writeUshort: function (buff, p, n) {\n    buff[p] = n >> 8 & 255;\n    buff[p + 1] = n & 255;\n  },\n  readUshorts: function (buff, p, len) {\n    var arr = [];\n    for (var i = 0; i < len; i++) {\n      var v = Typr[\"B\"].readUshort(buff, p + i * 2); //if(v==932) console.log(p+i*2);\n      arr.push(v);\n    }\n    return arr;\n  },\n  readUint: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[3] = buff[p];\n    a[2] = buff[p + 1];\n    a[1] = buff[p + 2];\n    a[0] = buff[p + 3];\n    return Typr[\"B\"].t.uint32[0];\n  },\n  writeUint: function (buff, p, n) {\n    buff[p] = n >> 24 & 255;\n    buff[p + 1] = n >> 16 & 255;\n    buff[p + 2] = n >> 8 & 255;\n    buff[p + 3] = n >> 0 & 255;\n  },\n  readUint64: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    return Typr[\"B\"].readUint(buff, p) * (0xffffffff + 1) + Typr[\"B\"].readUint(buff, p + 4);\n  },\n  readASCII: function (buff, p, l)\n  // l : length in Characters (not Bytes)\n  {\n    //if(p>=buff.length) throw \"error\";\n    var s = \"\";\n    for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n    return s;\n  },\n  writeASCII: function (buff, p, s)\n  // l : length in Characters (not Bytes)\n  {\n    for (var i = 0; i < s.length; i++) buff[p + i] = s.charCodeAt(i);\n  },\n  readUnicode: function (buff, p, l) {\n    //if(p>=buff.length) throw \"error\";\n    var s = \"\";\n    for (var i = 0; i < l; i++) {\n      var c = buff[p++] << 8 | buff[p++];\n      s += String.fromCharCode(c);\n    }\n    return s;\n  },\n  _tdec: window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\n  readUTF8: function (buff, p, l) {\n    var tdec = Typr[\"B\"]._tdec;\n    if (tdec && p == 0 && l == buff.length) return tdec[\"decode\"](buff);\n    return Typr[\"B\"].readASCII(buff, p, l);\n  },\n  readBytes: function (buff, p, l) {\n    //if(p>=buff.length) throw \"error\";\n    var arr = [];\n    for (var i = 0; i < l; i++) arr.push(buff[p + i]);\n    return arr;\n  },\n  readASCIIArray: function (buff, p, l)\n  // l : length in Characters (not Bytes)\n  {\n    //if(p>=buff.length) throw \"error\";\n    var s = [];\n    for (var i = 0; i < l; i++) s.push(String.fromCharCode(buff[p + i]));\n    return s;\n  },\n  t: function () {\n    var ab = new ArrayBuffer(8);\n    return {\n      buff: ab,\n      int8: new Int8Array(ab),\n      uint8: new Uint8Array(ab),\n      int16: new Int16Array(ab),\n      uint16: new Uint16Array(ab),\n      int32: new Int32Array(ab),\n      uint32: new Uint32Array(ab)\n    };\n  }()\n};\nTypr[\"T\"].CFF = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var CFF = Typr[\"T\"].CFF;\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n\n    // Header\n    data[offset];\n    offset++;\n    data[offset];\n    offset++;\n    data[offset];\n    offset++;\n    data[offset];\n    offset++;\n    //console.log(major, minor, hdrSize, offsize);\n\n    // Name INDEX\n    var ninds = [];\n    offset = CFF.readIndex(data, offset, ninds);\n    var names = [];\n    for (var i = 0; i < ninds.length - 1; i++) names.push(bin.readASCII(data, offset + ninds[i], ninds[i + 1] - ninds[i]));\n    offset += ninds[ninds.length - 1];\n\n    // Top DICT INDEX\n    var tdinds = [];\n    offset = CFF.readIndex(data, offset, tdinds); //console.log(tdinds);\n    // Top DICT Data\n    var topDicts = [];\n    for (var i = 0; i < tdinds.length - 1; i++) topDicts.push(CFF.readDict(data, offset + tdinds[i], offset + tdinds[i + 1]));\n    offset += tdinds[tdinds.length - 1];\n    var topdict = topDicts[0];\n    //console.log(topdict);\n\n    // String INDEX\n    var sinds = [];\n    offset = CFF.readIndex(data, offset, sinds);\n    // String Data\n    var strings = [];\n    for (var i = 0; i < sinds.length - 1; i++) strings.push(bin.readASCII(data, offset + sinds[i], sinds[i + 1] - sinds[i]));\n    offset += sinds[sinds.length - 1];\n\n    // Global Subr INDEX  (subroutines)\n    CFF.readSubrs(data, offset, topdict);\n\n    // charstrings\n\n    if (topdict[\"CharStrings\"]) topdict[\"CharStrings\"] = CFF.readBytes(data, topdict[\"CharStrings\"]);\n\n    // CID font\n    if (topdict[\"ROS\"]) {\n      offset = topdict[\"FDArray\"];\n      var fdind = [];\n      offset = CFF.readIndex(data, offset, fdind);\n      topdict[\"FDArray\"] = [];\n      for (var i = 0; i < fdind.length - 1; i++) {\n        var dict = CFF.readDict(data, offset + fdind[i], offset + fdind[i + 1]);\n        CFF._readFDict(data, dict, strings);\n        topdict[\"FDArray\"].push(dict);\n      }\n      offset += fdind[fdind.length - 1];\n      offset = topdict[\"FDSelect\"];\n      topdict[\"FDSelect\"] = [];\n      var fmt = data[offset];\n      offset++;\n      if (fmt == 3) {\n        var rns = bin.readUshort(data, offset);\n        offset += 2;\n        for (var i = 0; i < rns + 1; i++) {\n          topdict[\"FDSelect\"].push(bin.readUshort(data, offset), data[offset + 2]);\n          offset += 3;\n        }\n      } else throw fmt;\n    }\n\n    // Encoding\n    //if(topdict[\"Encoding\"]) topdict[\"Encoding\"] = CFF.readEncoding(data, topdict[\"Encoding\"], topdict[\"CharStrings\"].length);\n\n    // charset\n    if (topdict[\"charset\"]) topdict[\"charset\"] = CFF.readCharset(data, topdict[\"charset\"], topdict[\"CharStrings\"].length);\n    CFF._readFDict(data, topdict, strings);\n    return topdict;\n  },\n  _readFDict: function (data, dict, ss) {\n    var CFF = Typr[\"T\"].CFF;\n    var offset;\n    if (dict[\"Private\"]) {\n      offset = dict[\"Private\"][1];\n      dict[\"Private\"] = CFF.readDict(data, offset, offset + dict[\"Private\"][0]);\n      if (dict[\"Private\"][\"Subrs\"]) CFF.readSubrs(data, offset + dict[\"Private\"][\"Subrs\"], dict[\"Private\"]);\n    }\n    for (var p in dict) if ([\"FamilyName\", \"FontName\", \"FullName\", \"Notice\", \"version\", \"Copyright\"].indexOf(p) != -1) dict[p] = ss[dict[p] - 426 + 35];\n  },\n  readSubrs: function (data, offset, obj) {\n    obj[\"Subrs\"] = Typr[\"T\"].CFF.readBytes(data, offset);\n    var bias,\n      nSubrs = obj[\"Subrs\"].length + 1;\n    if (nSubrs < 1240) bias = 107;else if (nSubrs < 33900) bias = 1131;else bias = 32768;\n    obj[\"Bias\"] = bias;\n  },\n  readBytes: function (data, offset) {\n    Typr[\"B\"];\n    var arr = [];\n    offset = Typr[\"T\"].CFF.readIndex(data, offset, arr);\n    var subrs = [],\n      arl = arr.length - 1,\n      no = data.byteOffset + offset;\n    for (var i = 0; i < arl; i++) {\n      var ari = arr[i];\n      subrs.push(new Uint8Array(data.buffer, no + ari, arr[i + 1] - ari));\n    }\n    return subrs;\n  },\n  tableSE: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0],\n  glyphByUnicode: function (cff, code) {\n    for (var i = 0; i < cff[\"charset\"].length; i++) if (cff[\"charset\"][i] == code) return i;\n    return -1;\n  },\n  glyphBySE: function (cff, charcode)\n  // glyph by standard encoding\n  {\n    if (charcode < 0 || charcode > 255) return -1;\n    return Typr[\"T\"].CFF.glyphByUnicode(cff, Typr[\"T\"].CFF.tableSE[charcode]);\n  },\n  /*readEncoding : function(data, offset, num)\n  {\n    var bin = Typr[\"B\"];\n     var array = ['.notdef'];\n    var format = data[offset];  offset++;\n    //console.log(\"Encoding\");\n    //console.log(format);\n     if(format==0)\n    {\n      var nCodes = data[offset];  offset++;\n      for(var i=0; i<nCodes; i++)  array.push(data[offset+i]);\n    }\n    /*\n    else if(format==1 || format==2)\n    {\n      while(charset.length<num)\n      {\n        var first = bin.readUshort(data, offset);  offset+=2;\n        var nLeft=0;\n        if(format==1) {  nLeft = data[offset];  offset++;  }\n        else          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n        for(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n      }\n    }\n     else throw \"error: unknown encoding format: \" + format;\n     return array;\n  },*/\n\n  readCharset: function (data, offset, num) {\n    var bin = Typr[\"B\"];\n    var charset = ['.notdef'];\n    var format = data[offset];\n    offset++;\n    if (format == 0) {\n      for (var i = 0; i < num; i++) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        charset.push(first);\n      }\n    } else if (format == 1 || format == 2) {\n      while (charset.length < num) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        var nLeft = 0;\n        if (format == 1) {\n          nLeft = data[offset];\n          offset++;\n        } else {\n          nLeft = bin.readUshort(data, offset);\n          offset += 2;\n        }\n        for (var i = 0; i <= nLeft; i++) {\n          charset.push(first);\n          first++;\n        }\n      }\n    } else throw \"error: format: \" + format;\n    return charset;\n  },\n  readIndex: function (data, offset, inds) {\n    var bin = Typr[\"B\"];\n    var count = bin.readUshort(data, offset) + 1;\n    offset += 2;\n    var offsize = data[offset];\n    offset++;\n    if (offsize == 1) for (var i = 0; i < count; i++) inds.push(data[offset + i]);else if (offsize == 2) for (var i = 0; i < count; i++) inds.push(bin.readUshort(data, offset + i * 2));else if (offsize == 3) for (var i = 0; i < count; i++) inds.push(bin.readUint(data, offset + i * 3 - 1) & 0x00ffffff);else if (offsize == 4) for (var i = 0; i < count; i++) inds.push(bin.readUint(data, offset + i * 4));else if (count != 1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\n    offset += count * offsize;\n    return offset - 1;\n  },\n  getCharString: function (data, offset, o) {\n    var bin = Typr[\"B\"];\n    var b0 = data[offset],\n      b1 = data[offset + 1];\n    data[offset + 2];\n    data[offset + 3];\n    data[offset + 4];\n    var vs = 1;\n    var op = null,\n      val = null;\n    // operand\n    if (b0 <= 20) {\n      op = b0;\n      vs = 1;\n    }\n    if (b0 == 12) {\n      op = b0 * 100 + b1;\n      vs = 2;\n    }\n    //if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n    if (21 <= b0 && b0 <= 27) {\n      op = b0;\n      vs = 1;\n    }\n    if (b0 == 28) {\n      val = bin.readShort(data, offset + 1);\n      vs = 3;\n    }\n    if (29 <= b0 && b0 <= 31) {\n      op = b0;\n      vs = 1;\n    }\n    if (32 <= b0 && b0 <= 246) {\n      val = b0 - 139;\n      vs = 1;\n    }\n    if (247 <= b0 && b0 <= 250) {\n      val = (b0 - 247) * 256 + b1 + 108;\n      vs = 2;\n    }\n    if (251 <= b0 && b0 <= 254) {\n      val = -(b0 - 251) * 256 - b1 - 108;\n      vs = 2;\n    }\n    if (b0 == 255) {\n      val = bin.readInt(data, offset + 1) / 0xffff;\n      vs = 5;\n    }\n    o.val = val != null ? val : \"o\" + op;\n    o.size = vs;\n  },\n  readCharString: function (data, offset, length) {\n    var end = offset + length;\n    var bin = Typr[\"B\"];\n    var arr = [];\n    while (offset < end) {\n      var b0 = data[offset],\n        b1 = data[offset + 1];\n      data[offset + 2];\n      data[offset + 3];\n      data[offset + 4];\n      var vs = 1;\n      var op = null,\n        val = null;\n      // operand\n      if (b0 <= 20) {\n        op = b0;\n        vs = 1;\n      }\n      if (b0 == 12) {\n        op = b0 * 100 + b1;\n        vs = 2;\n      }\n      if (b0 == 19 || b0 == 20) {\n        op = b0 /*+\" \"+b1*/;\n        vs = 2;\n      }\n      if (21 <= b0 && b0 <= 27) {\n        op = b0;\n        vs = 1;\n      }\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n      if (29 <= b0 && b0 <= 31) {\n        op = b0;\n        vs = 1;\n      }\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n      }\n      arr.push(val != null ? val : \"o\" + op);\n      offset += vs;\n\n      //var cv = arr[arr.length-1];\n      //if(cv==undefined) throw \"error\";\n      //console.log()\n    }\n    return arr;\n  },\n  readDict: function (data, offset, end) {\n    var bin = Typr[\"B\"];\n    //var dict = [];\n    var dict = {};\n    var carr = [];\n    while (offset < end) {\n      var b0 = data[offset],\n        b1 = data[offset + 1];\n      data[offset + 2];\n      data[offset + 3];\n      data[offset + 4];\n      var vs = 1;\n      var key = null,\n        val = null;\n      // operand\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n      if (b0 == 29) {\n        val = bin.readInt(data, offset + 1);\n        vs = 5;\n      }\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n        throw \"unknown number\";\n      }\n      if (b0 == 30) {\n        var nibs = [];\n        vs = 1;\n        while (true) {\n          var b = data[offset + vs];\n          vs++;\n          var nib0 = b >> 4,\n            nib1 = b & 0xf;\n          if (nib0 != 0xf) nibs.push(nib0);\n          if (nib1 != 0xf) nibs.push(nib1);\n          if (nib1 == 0xf) break;\n        }\n        var s = \"\";\n        var chars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\", \"e\", \"e-\", \"reserved\", \"-\", \"endOfNumber\"];\n        for (var i = 0; i < nibs.length; i++) s += chars[nibs[i]];\n        //console.log(nibs);\n        val = parseFloat(s);\n      }\n      if (b0 <= 21)\n        // operator\n        {\n          var keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\", \"defaultWidthX\", \"nominalWidthX\"];\n          key = keys[b0];\n          vs = 1;\n          if (b0 == 12) {\n            var keys = [\"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\", \"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", \"\", \"\", \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\", \"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", \"\", \"\", \"\", \"\", \"\", \"\", \"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\n            key = keys[b1];\n            vs = 2;\n          }\n        }\n      if (key != null) {\n        dict[key] = carr.length == 1 ? carr[0] : carr;\n        carr = [];\n      } else carr.push(val);\n      offset += vs;\n    }\n    return dict;\n  }\n};\nTypr[\"T\"].cmap = {\n  parseTab: function (data, offset, length) {\n    var obj = {\n      tables: [],\n      ids: {},\n      off: offset\n    };\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n    var bin = Typr[\"B\"],\n      rU = bin.readUshort,\n      cmap = Typr[\"T\"].cmap;\n    rU(data, offset);\n    offset += 2;\n    var numTables = rU(data, offset);\n    offset += 2;\n\n    //console.log(version, numTables);\n\n    var offs = [];\n    for (var i = 0; i < numTables; i++) {\n      var platformID = rU(data, offset);\n      offset += 2;\n      var encodingID = rU(data, offset);\n      offset += 2;\n      var noffset = bin.readUint(data, offset);\n      offset += 4;\n      var id = \"p\" + platformID + \"e\" + encodingID;\n\n      //console.log(\"cmap subtable\", platformID, encodingID, noffset);\n\n      var tind = offs.indexOf(noffset);\n      if (tind == -1) {\n        tind = obj.tables.length;\n        var subt = {};\n        offs.push(noffset);\n        //var time = Date.now();\n        var format = subt.format = rU(data, noffset);\n        if (format == 0) subt = cmap.parse0(data, noffset, subt);\n        //else if(format== 2) subt.off = noffset;\n        else if (format == 4) subt = cmap.parse4(data, noffset, subt);else if (format == 6) subt = cmap.parse6(data, noffset, subt);else if (format == 12) subt = cmap.parse12(data, noffset, subt);\n        //console.log(format, Date.now()-time);\n        //else console.log(\"unknown format: \"+format, platformID, encodingID, noffset);\n        obj.tables.push(subt);\n      }\n      if (obj.ids[id] != null) console.log(\"multiple tables for one platform+encoding: \" + id);\n      obj.ids[id] = tind;\n    }\n    return obj;\n  },\n  parse0: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset += 2;\n    var len = bin.readUshort(data, offset);\n    offset += 2;\n    bin.readUshort(data, offset);\n    offset += 2;\n    obj.map = [];\n    for (var i = 0; i < len - 6; i++) obj.map.push(data[offset + i]);\n    return obj;\n  },\n  parse4: function (data, offset, obj) {\n    var bin = Typr[\"B\"],\n      rU = bin.readUshort,\n      rUs = bin.readUshorts;\n    var offset0 = offset;\n    offset += 2;\n    var length = rU(data, offset);\n    offset += 2;\n    rU(data, offset);\n    offset += 2;\n    var segCountX2 = rU(data, offset);\n    offset += 2;\n    var segCount = segCountX2 >>> 1;\n    obj.searchRange = rU(data, offset);\n    offset += 2;\n    obj.entrySelector = rU(data, offset);\n    offset += 2;\n    obj.rangeShift = rU(data, offset);\n    offset += 2;\n    obj.endCount = rUs(data, offset, segCount);\n    offset += segCount * 2;\n    offset += 2;\n    obj.startCount = rUs(data, offset, segCount);\n    offset += segCount * 2;\n    obj.idDelta = [];\n    for (var i = 0; i < segCount; i++) {\n      obj.idDelta.push(bin.readShort(data, offset));\n      offset += 2;\n    }\n    obj.idRangeOffset = rUs(data, offset, segCount);\n    offset += segCount * 2;\n    obj.glyphIdArray = rUs(data, offset, offset0 + length - offset >> 1); //offset += segCount*2;\n    return obj;\n  },\n  parse6: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset += 2;\n    bin.readUshort(data, offset);\n    offset += 2;\n    bin.readUshort(data, offset);\n    offset += 2;\n    obj.firstCode = bin.readUshort(data, offset);\n    offset += 2;\n    var entryCount = bin.readUshort(data, offset);\n    offset += 2;\n    obj.glyphIdArray = [];\n    for (var i = 0; i < entryCount; i++) {\n      obj.glyphIdArray.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n    return obj;\n  },\n  parse12: function (data, offset, obj) {\n    var bin = Typr[\"B\"],\n      rU = bin.readUint;\n    offset += 4;\n    rU(data, offset);\n    offset += 4;\n    rU(data, offset);\n    offset += 4;\n    var nGroups = rU(data, offset) * 3;\n    offset += 4;\n    var gps = obj.groups = new Uint32Array(nGroups); //new Uint32Array(data.slice(offset, offset+nGroups*12).buffer);\n\n    for (var i = 0; i < nGroups; i += 3) {\n      gps[i] = rU(data, offset + (i << 2));\n      gps[i + 1] = rU(data, offset + (i << 2) + 4);\n      gps[i + 2] = rU(data, offset + (i << 2) + 8);\n    }\n    return obj;\n  }\n};\nTypr[\"T\"].CBLC = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"],\n      ooff = offset;\n    bin.readUshort(data, offset);\n    offset += 2;\n    bin.readUshort(data, offset);\n    offset += 2;\n    var numSizes = bin.readUint(data, offset);\n    offset += 4;\n    var out = [];\n    for (var i = 0; i < numSizes; i++) {\n      var off = bin.readUint(data, offset);\n      offset += 4; // indexSubTableArrayOffset\n      bin.readUint(data, offset);\n      offset += 4; // indexTablesSize\n      bin.readUint(data, offset);\n      offset += 4; // numberOfIndexSubTables\n      offset += 4;\n      offset += 2 * 12;\n      bin.readUshort(data, offset);\n      offset += 2;\n      bin.readUshort(data, offset);\n      offset += 2;\n\n      //console.log(off,siz,num, sGlyph, eGlyph);\n\n      offset += 4;\n      var coff = ooff + off;\n      for (var j = 0; j < 3; j++) {\n        var fgI = bin.readUshort(data, coff);\n        coff += 2;\n        var lgI = bin.readUshort(data, coff);\n        coff += 2;\n        var nxt = bin.readUint(data, coff);\n        coff += 4;\n        var gcnt = lgI - fgI + 1;\n        //console.log(fgI, lgI, nxt);   //if(nxt==0) break;\n\n        var ioff = ooff + off + nxt;\n        var inF = bin.readUshort(data, ioff);\n        ioff += 2;\n        if (inF != 1) throw inF;\n        var imF = bin.readUshort(data, ioff);\n        ioff += 2;\n        var imgo = bin.readUint(data, ioff);\n        ioff += 4;\n        var oarr = [];\n        for (var gi = 0; gi < gcnt; gi++) {\n          var sbitO = bin.readUint(data, ioff + gi * 4);\n          oarr.push(imgo + sbitO);\n          //console.log(\"--\",sbitO);\n        }\n        out.push([fgI, lgI, imF, oarr]);\n      }\n    }\n    return out;\n  }\n};\nTypr[\"T\"].CBDT = {\n  parseTab: function (data, offset, length) {\n    Typr[\"B\"];\n\n    //var maj = bin.readUshort(data,offset);  offset+=2;\n    //var min = bin.readUshort(data,offset);  offset+=2;\n\n    return new Uint8Array(data.buffer, data.byteOffset + offset, length);\n  }\n};\nTypr[\"T\"].glyf = {\n  parseTab: function (data, offset, length, font) {\n    var obj = [],\n      ng = font[\"maxp\"][\"numGlyphs\"];\n    for (var g = 0; g < ng; g++) obj.push(null);\n    return obj;\n  },\n  _parseGlyf: function (font, g) {\n    var bin = Typr[\"B\"];\n    var data = font[\"_data\"],\n      loca = font[\"loca\"];\n    if (loca[g] == loca[g + 1]) return null;\n    var offset = Typr[\"findTable\"](data, \"glyf\", font[\"_offset\"])[0] + loca[g];\n    var gl = {};\n    gl.noc = bin.readShort(data, offset);\n    offset += 2; // number of contours\n    gl.xMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.xMax = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMax = bin.readShort(data, offset);\n    offset += 2;\n    if (gl.xMin >= gl.xMax || gl.yMin >= gl.yMax) return null;\n    if (gl.noc > 0) {\n      gl.endPts = [];\n      for (var i = 0; i < gl.noc; i++) {\n        gl.endPts.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n      var instructionLength = bin.readUshort(data, offset);\n      offset += 2;\n      if (data.length - offset < instructionLength) return null;\n      gl.instructions = bin.readBytes(data, offset, instructionLength);\n      offset += instructionLength;\n      var crdnum = gl.endPts[gl.noc - 1] + 1;\n      gl.flags = [];\n      for (var i = 0; i < crdnum; i++) {\n        var flag = data[offset];\n        offset++;\n        gl.flags.push(flag);\n        if ((flag & 8) != 0) {\n          var rep = data[offset];\n          offset++;\n          for (var j = 0; j < rep; j++) {\n            gl.flags.push(flag);\n            i++;\n          }\n        }\n      }\n      gl.xs = [];\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 2) != 0,\n          same = (gl.flags[i] & 16) != 0;\n        if (i8) {\n          gl.xs.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.xs.push(0);else {\n            gl.xs.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n      gl.ys = [];\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 4) != 0,\n          same = (gl.flags[i] & 32) != 0;\n        if (i8) {\n          gl.ys.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.ys.push(0);else {\n            gl.ys.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n      var x = 0,\n        y = 0;\n      for (var i = 0; i < crdnum; i++) {\n        x += gl.xs[i];\n        y += gl.ys[i];\n        gl.xs[i] = x;\n        gl.ys[i] = y;\n      }\n      //console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n    } else {\n      var ARG_1_AND_2_ARE_WORDS = 1 << 0;\n      var ARGS_ARE_XY_VALUES = 1 << 1;\n      var WE_HAVE_A_SCALE = 1 << 3;\n      var MORE_COMPONENTS = 1 << 5;\n      var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\n      var WE_HAVE_A_TWO_BY_TWO = 1 << 7;\n      var WE_HAVE_INSTRUCTIONS = 1 << 8;\n      gl.parts = [];\n      var flags;\n      do {\n        flags = bin.readUshort(data, offset);\n        offset += 2;\n        var part = {\n          m: {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            tx: 0,\n            ty: 0\n          },\n          p1: -1,\n          p2: -1\n        };\n        gl.parts.push(part);\n        part.glyphIndex = bin.readUshort(data, offset);\n        offset += 2;\n        if (flags & ARG_1_AND_2_ARE_WORDS) {\n          var arg1 = bin.readShort(data, offset);\n          offset += 2;\n          var arg2 = bin.readShort(data, offset);\n          offset += 2;\n        } else {\n          var arg1 = bin.readInt8(data, offset);\n          offset++;\n          var arg2 = bin.readInt8(data, offset);\n          offset++;\n        }\n        if (flags & ARGS_ARE_XY_VALUES) {\n          part.m.tx = arg1;\n          part.m.ty = arg2;\n        } else {\n          part.p1 = arg1;\n          part.p2 = arg2;\n        }\n        //part.m.tx = arg1;  part.m.ty = arg2;\n        //else { throw \"params are not XY values\"; }\n\n        if (flags & WE_HAVE_A_SCALE) {\n          part.m.a = part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.b = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.c = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        }\n      } while (flags & MORE_COMPONENTS);\n      if (flags & WE_HAVE_INSTRUCTIONS) {\n        var numInstr = bin.readUshort(data, offset);\n        offset += 2;\n        gl.instr = [];\n        for (var i = 0; i < numInstr; i++) {\n          gl.instr.push(data[offset]);\n          offset++;\n        }\n      }\n    }\n    return gl;\n  }\n};\nTypr[\"T\"].head = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readFixed(data, offset);\n    offset += 4;\n    obj[\"fontRevision\"] = bin.readFixed(data, offset);\n    offset += 4;\n    bin.readUint(data, offset);\n    offset += 4;\n    bin.readUint(data, offset);\n    offset += 4;\n    obj[\"flags\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"unitsPerEm\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"created\"] = bin.readUint64(data, offset);\n    offset += 8;\n    obj[\"modified\"] = bin.readUint64(data, offset);\n    offset += 8;\n    obj[\"xMin\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"yMin\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"xMax\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"yMax\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"macStyle\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"lowestRecPPEM\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"fontDirectionHint\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"indexToLocFormat\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"glyphDataFormat\"] = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  }\n};\nTypr[\"T\"].hhea = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readFixed(data, offset);\n    offset += 4;\n    var keys = [\"ascender\", \"descender\", \"lineGap\", \"advanceWidthMax\", \"minLeftSideBearing\", \"minRightSideBearing\", \"xMaxExtent\", \"caretSlopeRise\", \"caretSlopeRun\", \"caretOffset\", \"res0\", \"res1\", \"res2\", \"res3\", \"metricDataFormat\", \"numberOfHMetrics\"];\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var func = key == \"advanceWidthMax\" || key == \"numberOfHMetrics\" ? bin.readUshort : bin.readShort;\n      obj[key] = func(data, offset + i * 2);\n    }\n    return obj;\n  }\n};\nTypr[\"T\"].hmtx = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"];\n    var aWidth = [];\n    var lsBearing = [];\n    var nG = font[\"maxp\"][\"numGlyphs\"],\n      nH = font[\"hhea\"][\"numberOfHMetrics\"];\n    var aw = 0,\n      lsb = 0,\n      i = 0;\n    while (i < nH) {\n      aw = bin.readUshort(data, offset + (i << 2));\n      lsb = bin.readShort(data, offset + (i << 2) + 2);\n      aWidth.push(aw);\n      lsBearing.push(lsb);\n      i++;\n    }\n    while (i < nG) {\n      aWidth.push(aw);\n      lsBearing.push(lsb);\n      i++;\n    }\n    return {\n      aWidth: aWidth,\n      lsBearing: lsBearing\n    };\n  }\n};\nTypr[\"T\"].kern = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"],\n      kern = Typr[\"T\"].kern;\n    var version = bin.readUshort(data, offset);\n    if (version == 1) return kern.parseV1(data, offset, length, font);\n    var nTables = bin.readUshort(data, offset + 2);\n    offset += 4;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n    for (var i = 0; i < nTables; i++) {\n      offset += 2; // skip version\n      var length = bin.readUshort(data, offset);\n      offset += 2;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage >>> 8;\n      /* I have seen format 128 once, that's why I do */\n      format &= 0xf;\n      if (format == 0) offset = kern.readFormat0(data, offset, map);\n      //else throw \"unknown kern table format: \"+format;\n    }\n    return map;\n  },\n  parseV1: function (data, offset, length, font) {\n    var bin = Typr[\"B\"],\n      kern = Typr[\"T\"].kern;\n    bin.readFixed(data, offset); // 0x00010000\n    var nTables = bin.readUint(data, offset + 4);\n    offset += 8;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n    for (var i = 0; i < nTables; i++) {\n      bin.readUint(data, offset);\n      offset += 4;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage & 0xff;\n      if (format == 0) offset = kern.readFormat0(data, offset, map);\n      //else throw \"unknown kern table format: \"+format;\n    }\n    return map;\n  },\n  readFormat0: function (data, offset, map) {\n    var bin = Typr[\"B\"],\n      rUs = bin.readUshort;\n    var pleft = -1;\n    var nPairs = rUs(data, offset);\n    rUs(data, offset + 2);\n    rUs(data, offset + 4);\n    rUs(data, offset + 6);\n    offset += 8;\n    for (var j = 0; j < nPairs; j++) {\n      var left = rUs(data, offset);\n      offset += 2;\n      var right = rUs(data, offset);\n      offset += 2;\n      var value = bin.readShort(data, offset);\n      offset += 2;\n      if (left != pleft) {\n        map.glyph1.push(left);\n        map.rval.push({\n          glyph2: [],\n          vals: []\n        });\n      }\n      var rval = map.rval[map.rval.length - 1];\n      rval.glyph2.push(right);\n      rval.vals.push(value);\n      pleft = left;\n    }\n    return offset;\n  }\n};\nTypr[\"T\"].loca = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"];\n    var obj = [];\n    var ver = font[\"head\"][\"indexToLocFormat\"];\n    var len = font[\"maxp\"][\"numGlyphs\"] + 1;\n    if (ver == 0) for (var i = 0; i < len; i++) obj.push(bin.readUshort(data, offset + (i << 1)) << 1);\n    if (ver == 1) for (var i = 0; i < len; i++) obj.push(bin.readUint(data, offset + (i << 2)));\n    return obj;\n  }\n};\nTypr[\"T\"].maxp = {\n  parseTab: function (data, offset, length) {\n    //console.log(data.length, offset, length);\n\n    var bin = Typr[\"B\"],\n      rU = bin.readUshort;\n    var obj = {};\n\n    // both versions 0.5 and 1.0\n    bin.readUint(data, offset);\n    offset += 4;\n    obj[\"numGlyphs\"] = rU(data, offset);\n    offset += 2;\n\n    // only 1.0\n    /*\n    if(ver == 0x00010000) {\n      obj.maxPoints             = rU(data, offset);  offset += 2;\n      obj.maxContours           = rU(data, offset);  offset += 2;\n      obj.maxCompositePoints    = rU(data, offset);  offset += 2;\n      obj.maxCompositeContours  = rU(data, offset);  offset += 2;\n      obj.maxZones              = rU(data, offset);  offset += 2;\n      obj.maxTwilightPoints     = rU(data, offset);  offset += 2;\n      obj.maxStorage            = rU(data, offset);  offset += 2;\n      obj.maxFunctionDefs       = rU(data, offset);  offset += 2;\n      obj.maxInstructionDefs    = rU(data, offset);  offset += 2;\n      obj.maxStackElements      = rU(data, offset);  offset += 2;\n      obj.maxSizeOfInstructions = rU(data, offset);  offset += 2;\n      obj.maxComponentElements  = rU(data, offset);  offset += 2;\n      obj.maxComponentDepth     = rU(data, offset);  offset += 2;\n    }\n    */\n\n    return obj;\n  }\n};\nTypr[\"T\"].name = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readUshort(data, offset);\n    offset += 2;\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n    var stringOffset = bin.readUshort(data, offset);\n    offset += 2;\n    var ooo = offset - 6 + stringOffset;\n    //console.log(format,count);\n\n    var names = [\"copyright\", \"fontFamily\", \"fontSubfamily\", \"ID\", \"fullName\", \"version\", \"postScriptName\", \"trademark\", \"manufacturer\", \"designer\", \"description\", \"urlVendor\", \"urlDesigner\", \"licence\", \"licenceURL\", \"---\", \"typoFamilyName\", \"typoSubfamilyName\", \"compatibleFull\", \"sampleText\", \"postScriptCID\", \"wwsFamilyName\", \"wwsSubfamilyName\", \"lightPalette\", \"darkPalette\"];\n    var rU = bin.readUshort;\n    for (var i = 0; i < count; i++) {\n      var platformID = rU(data, offset);\n      offset += 2;\n      var encodingID = rU(data, offset);\n      offset += 2;\n      var languageID = rU(data, offset);\n      offset += 2;\n      var nameID = rU(data, offset);\n      offset += 2;\n      var slen = rU(data, offset);\n      offset += 2;\n      var noffset = rU(data, offset);\n      offset += 2;\n      //console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n\n      var soff = ooo + noffset;\n      var str;\n      if (platformID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 1 && encodingID == 25) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 0) str = bin.readASCII(data, soff, slen);else if (encodingID == 1) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 3) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 4) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 5) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 10) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 1) {\n        str = bin.readASCII(data, soff, slen);\n        console.log(\"reading unknown MAC encoding \" + encodingID + \" as ASCII\");\n      } else {\n        console.log(\"unknown encoding \" + encodingID + \", platformID: \" + platformID);\n        str = bin.readASCII(data, soff, slen);\n      }\n      var tid = \"p\" + platformID + \",\" + languageID.toString(16); //Typr._platforms[platformID];\n      if (obj[tid] == null) obj[tid] = {};\n      var name = names[nameID];\n      if (name == null) name = \"_\" + nameID;\n      obj[tid][name] = str;\n      obj[tid][\"_lang\"] = languageID;\n      //console.log(tid, obj[tid]);\n    }\n    /*\n    if(format == 1)\n    {\n      var langTagCount = bin.readUshort(data, offset);  offset += 2;\n      for(var i=0; i<langTagCount; i++)\n      {\n        var length  = bin.readUshort(data, offset);  offset += 2;\n        var noffset = bin.readUshort(data, offset);  offset += 2;\n      }\n    }\n    */\n    var out = Typr[\"T\"].name.selectOne(obj),\n      ff = \"fontFamily\";\n    if (out[ff] == null) for (var p in obj) if (obj[p][ff] != null) out[ff] = obj[p][ff];\n    return out;\n  },\n  selectOne: function (obj) {\n    //console.log(obj);\n    var psn = \"postScriptName\";\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0409) return obj[p]; // United States\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0000) return obj[p]; // Universal\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0c0c) return obj[p]; // Canada\n    for (var p in obj) if (obj[p][psn] != null) return obj[p];\n    var out;\n    for (var p in obj) {\n      out = obj[p];\n      break;\n    }\n    console.log(\"returning name table with languageID \" + out._lang);\n    if (out[psn] == null && out[\"ID\"] != null) out[psn] = out[\"ID\"];\n    return out;\n  }\n};\nTypr[\"T\"].OS2 = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ver = bin.readUshort(data, offset);\n    offset += 2;\n    var OS2 = Typr[\"T\"].OS2;\n    var obj = {};\n    if (ver == 0) OS2.version0(data, offset, obj);else if (ver == 1) OS2.version1(data, offset, obj);else if (ver == 2 || ver == 3 || ver == 4) OS2.version2(data, offset, obj);else if (ver == 5) OS2.version5(data, offset, obj);else throw \"unknown OS/2 table version: \" + ver;\n    return obj;\n  },\n  version0: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    obj[\"xAvgCharWidth\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"usWeightClass\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"usWidthClass\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"fsType\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"ySubscriptXSize\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySubscriptYSize\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySubscriptXOffset\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySubscriptYOffset\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySuperscriptXSize\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySuperscriptYSize\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySuperscriptXOffset\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"ySuperscriptYOffset\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"yStrikeoutSize\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"yStrikeoutPosition\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"sFamilyClass\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"panose\"] = bin.readBytes(data, offset, 10);\n    offset += 10;\n    obj[\"ulUnicodeRange1\"] = bin.readUint(data, offset);\n    offset += 4;\n    obj[\"ulUnicodeRange2\"] = bin.readUint(data, offset);\n    offset += 4;\n    obj[\"ulUnicodeRange3\"] = bin.readUint(data, offset);\n    offset += 4;\n    obj[\"ulUnicodeRange4\"] = bin.readUint(data, offset);\n    offset += 4;\n    obj[\"achVendID\"] = bin.readASCII(data, offset, 4);\n    offset += 4;\n    obj[\"fsSelection\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"usFirstCharIndex\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"usLastCharIndex\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"sTypoAscender\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"sTypoDescender\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"sTypoLineGap\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"usWinAscent\"] = bin.readUshort(data, offset);\n    offset += 2;\n    obj[\"usWinDescent\"] = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  },\n  version1: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset = Typr[\"T\"].OS2.version0(data, offset, obj);\n    obj[\"ulCodePageRange1\"] = bin.readUint(data, offset);\n    offset += 4;\n    obj[\"ulCodePageRange2\"] = bin.readUint(data, offset);\n    offset += 4;\n    return offset;\n  },\n  version2: function (data, offset, obj) {\n    var bin = Typr[\"B\"],\n      rU = bin.readUshort;\n    offset = Typr[\"T\"].OS2.version1(data, offset, obj);\n    obj[\"sxHeight\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"sCapHeight\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"usDefault\"] = rU(data, offset);\n    offset += 2;\n    obj[\"usBreak\"] = rU(data, offset);\n    offset += 2;\n    obj[\"usMaxContext\"] = rU(data, offset);\n    offset += 2;\n    return offset;\n  },\n  version5: function (data, offset, obj) {\n    var rU = Typr[\"B\"].readUshort;\n    offset = Typr[\"T\"].OS2.version2(data, offset, obj);\n    obj[\"usLowerOpticalPointSize\"] = rU(data, offset);\n    offset += 2;\n    obj[\"usUpperOpticalPointSize\"] = rU(data, offset);\n    offset += 2;\n    return offset;\n  }\n};\nTypr[\"T\"].post = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    obj[\"version\"] = bin.readFixed(data, offset);\n    offset += 4;\n    obj[\"italicAngle\"] = bin.readFixed(data, offset);\n    offset += 4;\n    obj[\"underlinePosition\"] = bin.readShort(data, offset);\n    offset += 2;\n    obj[\"underlineThickness\"] = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  }\n};\nTypr[\"T\"].SVG = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {\n      entries: [],\n      svgs: []\n    };\n    var offset0 = offset;\n    bin.readUshort(data, offset);\n    offset += 2;\n    var svgDocIndexOffset = bin.readUint(data, offset);\n    offset += 4;\n    bin.readUint(data, offset);\n    offset += 4;\n    offset = svgDocIndexOffset + offset0;\n    var numEntries = bin.readUshort(data, offset);\n    offset += 2;\n    for (var i = 0; i < numEntries; i++) {\n      var startGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var endGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var svgDocOffset = bin.readUint(data, offset);\n      offset += 4;\n      var svgDocLength = bin.readUint(data, offset);\n      offset += 4;\n      var sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n      if (sbuf[0] == 0x1f && sbuf[1] == 0x8b && sbuf[2] == 0x08) sbuf = pako[\"inflate\"](sbuf);\n      var svg = bin.readUTF8(sbuf, 0, sbuf.length);\n      for (var f = startGlyphID; f <= endGlyphID; f++) {\n        obj.entries[f] = obj.svgs.length;\n      }\n      obj.svgs.push(svg);\n    }\n    return obj;\n  }\n};\nTypr[\"T\"].sbix = {\n  parseTab: function (data, offset, length, obj) {\n    var numGlyphs = obj[\"maxp\"][\"numGlyphs\"];\n    var ooff = offset;\n    var bin = Typr[\"B\"];\n\n    //var ver = bin.readUshort(data,offset);  offset+=2;\n    //var flg = bin.readUshort(data,offset);  offset+=2;\n\n    var numStrikes = bin.readUint(data, offset + 4);\n    var out = [];\n    for (var si = numStrikes - 1; si < numStrikes; si++) {\n      var off = ooff + bin.readUint(data, offset + 8 + si * 4);\n\n      //var ppem = bin.readUshort(data,off);  off+=2;\n      //var ppi  = bin.readUshort(data,off);  off+=2;\n\n      for (var gi = 0; gi < numGlyphs; gi++) {\n        var aoff = bin.readUint(data, off + 4 + gi * 4);\n        var noff = bin.readUint(data, off + 4 + gi * 4 + 4);\n        if (aoff == noff) {\n          out[gi] = null;\n          continue;\n        }\n        var go = off + aoff;\n        //var ooX = bin.readUshort(data,go);\n        //var ooY = bin.readUshort(data,go+2);\n        var tag = bin.readASCII(data, go + 4, 4);\n        if (tag != \"png \") throw tag;\n        out[gi] = new Uint8Array(data.buffer, data.byteOffset + go + 8, noff - aoff - 8);\n      }\n    }\n    return out;\n  }\n};\nTypr[\"T\"].colr = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ooff = offset;\n    offset += 2;\n    var num = bin.readUshort(data, offset);\n    offset += 2;\n    var boff = bin.readUint(data, offset);\n    offset += 4;\n    var loff = bin.readUint(data, offset);\n    offset += 4;\n    var lnum = bin.readUshort(data, offset);\n    offset += 2;\n    //console.log(num,boff,loff,lnum);\n\n    var base = {};\n    var coff = ooff + boff;\n    for (var i = 0; i < num; i++) {\n      base[\"g\" + bin.readUshort(data, coff)] = [bin.readUshort(data, coff + 2), bin.readUshort(data, coff + 4)];\n      coff += 6;\n    }\n    var lays = [];\n    coff = ooff + loff;\n    for (var i = 0; i < lnum; i++) {\n      lays.push(bin.readUshort(data, coff), bin.readUshort(data, coff + 2));\n      coff += 4;\n    }\n    return [base, lays];\n  }\n};\nTypr[\"T\"].cpal = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ooff = offset;\n    var vsn = bin.readUshort(data, offset);\n    offset += 2;\n    if (vsn == 0) {\n      bin.readUshort(data, offset);\n      offset += 2;\n      bin.readUshort(data, offset);\n      offset += 2;\n      var tot = bin.readUshort(data, offset);\n      offset += 2;\n      var fst = bin.readUint(data, offset);\n      offset += 4;\n      return new Uint8Array(data.buffer, ooff + fst, tot * 4);\n      /*\n      var coff=ooff+fst;\n       for(var i=0; i<tot; i++) {\n        console.log(data[coff],data[coff+1],data[coff+2],data[coff+3]);\n        coff+=4;\n      }\n       console.log(ets,pts,tot); */\n    } else throw vsn; //console.log(\"unknown color palette\",vsn);\n  }\n};\nTypr[\"T\"].GSUB = {\n  parseTab: function (data, offset, length, obj) {\n    //console.log(obj.name.ID);\n\n    var bin = Typr[\"B\"],\n      rU = bin.readUshort;\n    bin.readUint;\n    var off = offset;\n    rU(data, off);\n    off += 2;\n    rU(data, off);\n    off += 2;\n    rU(data, off);\n    off += 2;\n    var flO = rU(data, off);\n    off += 2;\n    rU(data, off);\n    off += 2;\n\n    //console.log(maj,min,slO,flO,llO);\n\n    off = offset + flO;\n    var fmap = {};\n    var cnt = rU(data, off);\n    off += 2;\n    for (var i = 0; i < cnt; i++) {\n      var tag = bin.readASCII(data, off, 4);\n      off += 4;\n      rU(data, off);\n      off += 2;\n      fmap[tag] = true;\n    }\n    //console.log(fmap);\n    return fmap;\n  }\n};\nTypr[\"T\"].fvar = {\n  parseTab: function (data, offset, length, obj) {\n    var name = obj[\"name\"];\n    var off = offset;\n    var bin = Typr[\"B\"];\n    var axes = [],\n      inst = [];\n    off += 8;\n    var acnt = bin.readUshort(data, off);\n    off += 2;\n    off += 2;\n    var icnt = bin.readUshort(data, off);\n    off += 2;\n    var isiz = bin.readUshort(data, off);\n    off += 2;\n    for (var i = 0; i < acnt; i++) {\n      var tag = bin.readASCII(data, off, 4);\n      var min = bin.readFixed(data, off + 4);\n      var def = bin.readFixed(data, off + 8);\n      var max = bin.readFixed(data, off + 12);\n      var flg = bin.readUshort(data, off + 16);\n      var nid = bin.readUshort(data, off + 18);\n      axes.push([tag, min, def, max, flg, name[\"_\" + nid]]);\n      //console.log(tag,min,def,max,flg,nid);\n      off += 20;\n    }\n    for (var i = 0; i < icnt; i++) {\n      var snid = bin.readUshort(data, off),\n        pnid = null;\n      var flg = bin.readUshort(data, off + 2);\n      var crd = [];\n      for (var j = 0; j < acnt; j++) crd.push(bin.readFixed(data, off + 4 + j * 4));\n      off += 4 + acnt * 4;\n      if ((isiz & 3) == 2) {\n        pnid = bin.readUshort(data, off);\n        off += 2;\n      }\n      inst.push([name[\"_\" + snid], flg, crd, pnid]);\n      //console.log(snid,flg, crd);\n    }\n    return [axes, inst];\n  }\n};\nTypr[\"T\"].gvar = function () {\n  var EMBEDDED_PEAK_TUPLE = 0x8000;\n  var INTERMEDIATE_REGION = 0x4000;\n  var PRIVATE_POINT_NUMBERS = 0x2000;\n  var DELTAS_ARE_ZERO = 0x80;\n  var DELTAS_ARE_WORDS = 0x40;\n  var POINTS_ARE_WORDS = 0x80;\n  var SHARED_POINT_NUMBERS = 0x8000;\n  var bin = Typr[\"B\"];\n  function readTuple(data, o, acnt) {\n    var tup = [];\n    for (var j = 0; j < acnt; j++) tup.push(bin.readF2dot14(data, o + j * 2));\n    return tup;\n  }\n  function readTupleVarHeader(data, off, vcnt, acnt, eoff) {\n    var out = [];\n    for (var j = 0; j < vcnt; j++) {\n      var dsiz = bin.readUshort(data, off);\n      off += 2;\n      var tind = bin.readUshort(data, off),\n        flag = tind & 0xf000;\n      tind = tind & 0xfff;\n      off += 2;\n      //console.log(j, dsiz,tind, flag.toString(16));\n\n      var peak = null,\n        start = null,\n        end = null;\n      if (flag & EMBEDDED_PEAK_TUPLE) {\n        peak = readTuple(data, off, acnt);\n        off += acnt * 2;\n      }\n      if (flag & INTERMEDIATE_REGION) {\n        start = readTuple(data, off, acnt);\n        off += acnt * 2;\n      }\n      if (flag & INTERMEDIATE_REGION) {\n        end = readTuple(data, off, acnt);\n        off += acnt * 2;\n      }\n      out.push([dsiz, tind, flag, start, peak, end]);\n    }\n    return out;\n  }\n\n  // Packed \"point\" numbers\n  function readPointNumbers(data, off, gid) {\n    var cnt = data[off];\n    off++;\n    if (cnt == 0) return [[], off];\n    if (127 < cnt) {\n      cnt = (cnt & 127) << 8 | data[off++];\n    }\n\n    //if(gid==116) console.log(\"---\",cnt);\n    var pts = [],\n      last = 0; // point number data runs\n    while (pts.length < cnt) {\n      var v = data[off];\n      off++;\n      var wds = (v & POINTS_ARE_WORDS) != 0;\n      v = (v & 127) + 1;\n      //if(gid==116) console.log(\"-\",v);\n      for (var i = 0; i < v; i++) {\n        var dif = 0;\n        if (wds) {\n          dif = bin.readUshort(data, off);\n          off += 2;\n        } else {\n          dif = data[off];\n          off++;\n        }\n        //if(gid==116) console.log(dif);\n        last += dif;\n        pts.push(last);\n      }\n    }\n    //console.log(pts);\n    return [pts, off];\n\n    //throw \"e\";\n  }\n  function parseTab(data, offset, length, obj) {\n    var off = offset + 4;\n    var acnt = bin.readUshort(data, off);\n    off += 2;\n    var tcnt = bin.readUshort(data, off);\n    off += 2;\n    var toff = bin.readUint(data, off);\n    off += 4;\n    var gcnt = bin.readUshort(data, off);\n    off += 2;\n    bin.readUshort(data, off);\n    off += 2;\n    var goff = bin.readUint(data, off);\n    off += 4;\n\n    // glyphVariationDataOffsets\n    var offs = [];\n    for (var i = 0; i < gcnt + 1; i++) offs.push(bin.readUint(data, off + i * 4));\n\n    // sharedTuples\n    var tups = [],\n      mins = [],\n      maxs = [];\n    off = offset + toff;\n    for (var i = 0; i < tcnt; i++) {\n      var peak = readTuple(data, off + i * acnt * 2, acnt),\n        imin = [],\n        imax = [];\n      tups.push(peak);\n      mins.push(imin);\n      maxs.push(imax);\n      for (var k = 0; k < acnt; k++) {\n        imin[k] = Math.min(peak[k], 0);\n        imax[k] = Math.max(peak[k], 0);\n      }\n    }\n    //console.log(tups);\n\n    //console.log(acnt,stcnt,stoff,gcnt,flgs,goff);\n\n    var i8 = new Int8Array(data.buffer);\n\n    // GlyphVariationData table array\n    var tabs = [];\n    for (var i = 0; i < gcnt; i++) {\n      //console.log(\"-------\",i);\n      off = offset + goff + offs[i];\n      // tupleVariationCount\n      var vcnt = bin.readUshort(data, off);\n      off += 2; //if((vcnt>>>12)!=0) throw \"e\";\n\n      var snum = vcnt & SHARED_POINT_NUMBERS;\n      vcnt &= 0xfff;\n      //  offset to the serialized data\n      var soff = bin.readUshort(data, off);\n      off += 2;\n      var hdr = readTupleVarHeader(data, off, vcnt, acnt);\n      var tab = [];\n      tabs.push(tab);\n      // Serialized Data\n      off = offset + goff + offs[i] + soff;\n      var sind = null;\n      if (snum) {\n        var oo = readPointNumbers(data, off);\n        sind = oo[0];\n        off = oo[1];\n      }\n      for (var j = 0; j < vcnt; j++) {\n        var vr = hdr[j],\n          end = off + vr[0]; //console.log(vr);  console.log(data.slice(off,off+vr[0]));\n\n        var ind = sind;\n        if (vr[2] & PRIVATE_POINT_NUMBERS) {\n          var oo = readPointNumbers(data, off);\n          ind = oo[0];\n          off = oo[1];\n        }\n        // read packed deltas (delta runs)\n        var ds = [];\n        while (off < end) {\n          var cb = data[off++]; // control byte;\n          var cnt = (cb & 0x3f) + 1;\n          if (cb & DELTAS_ARE_ZERO) {\n            for (var k = 0; k < cnt; k++) ds.push(0);\n          } else if (cb & DELTAS_ARE_WORDS) {\n            for (var k = 0; k < cnt; k++) ds.push(bin.readShort(data, off + k * 2));\n            off += cnt * 2;\n          } else {\n            for (var k = 0; k < cnt; k++) ds.push(i8[off + k]);\n            off += cnt;\n          }\n        }\n        //if(ind) console.log(ind, ds);\n        var ti = vr[1];\n        tab.push([[vr[3] ? vr[3] : mins[ti], vr[4] ? vr[4] : tups[ti], vr[5] ? vr[5] : maxs[ti]], ds, ind.length == 0 ? null : ind]);\n        if (ind.length != 0 && ind.length * 2 != ds.length) throw \"e\";\n        //if(i==116) console.log(ind, ds);\n      }\n    }\n    return tabs;\n  }\n  return {\n    parseTab: parseTab\n  };\n}();\nTypr[\"T\"].avar = {\n  parseTab: function (data, offset, length, obj) {\n    var off = offset;\n    var bin = Typr[\"B\"],\n      out = [];\n    off += 6;\n    var acnt = bin.readUshort(data, off);\n    off += 2;\n    for (var ai = 0; ai < acnt; ai++) {\n      var cnt = bin.readUshort(data, off);\n      off += 2;\n      var poly = [];\n      out.push(poly);\n      for (var i = 0; i < cnt; i++) {\n        var x = bin.readF2dot14(data, off);\n        var y = bin.readF2dot14(data, off + 2);\n        off += 4;\n        poly.push(x, y);\n      }\n    }\n    return out;\n  }\n};\nTypr[\"T\"].HVAR = {\n  parseTab: function (data, offset, length, obj) {\n    var off = offset,\n      oo = offset;\n    var bin = Typr[\"B\"];\n\n    //console.log(data.slice(off));\n    off += 4;\n    var varO = bin.readUint(data, off);\n    off += 4;\n    var advO = bin.readUint(data, off);\n    off += 4;\n    var lsbO = bin.readUint(data, off);\n    off += 4;\n    var rsbO = bin.readUint(data, off);\n    off += 4;\n    if (lsbO != 0 || rsbO != 0) throw lsbO;\n\n    //console.log(varO,advO,lsbO,rsbO);\n\n    off = oo + varO; // item variation store\n\n    // ItemVariationStore\n    var ioff = off;\n    var fmt = bin.readUshort(data, off);\n    off += 2;\n    if (fmt != 1) throw \"e\";\n    var vregO = bin.readUint(data, off);\n    off += 4;\n    // itemVariationDataCount\n    var vcnt = bin.readUshort(data, off);\n    off += 2;\n    var offs = [];\n    for (var i = 0; i < vcnt; i++) offs.push(bin.readUint(data, off + i * 4));\n    off += vcnt * 4; //if(offs.length!=1) throw \"e\";\n    //console.log(vregO,vcnt,offs);\n\n    off = ioff + vregO;\n    var acnt = bin.readUshort(data, off);\n    off += 2;\n    var rcnt = bin.readUshort(data, off);\n    off += 2;\n    var regs = [];\n    for (var i = 0; i < rcnt; i++) {\n      var crd = [[], [], []];\n      regs.push(crd);\n      for (var j = 0; j < acnt; j++) {\n        crd[0].push(bin.readF2dot14(data, off + 0));\n        crd[1].push(bin.readF2dot14(data, off + 2));\n        crd[2].push(bin.readF2dot14(data, off + 4));\n        off += 6;\n      }\n    }\n    //console.log(acnt, rcnt, regs);\n\n    var i8 = new Int8Array(data.buffer);\n    var varStore = [];\n    for (var i = 0; i < offs.length; i++) {\n      // ItemVariationData\n      off = oo + varO + offs[i];\n      var vdata = [];\n      varStore.push(vdata);\n      var icnt = bin.readUshort(data, off);\n      off += 2; // itemCount\n      var dcnt = bin.readUshort(data, off);\n      off += 2;\n      if (dcnt & 0x8000) throw \"e\";\n      var rcnt = bin.readUshort(data, off);\n      off += 2;\n      var ixs = [];\n      for (var j = 0; j < rcnt; j++) ixs.push(bin.readUshort(data, off + j * 2));\n      off += rcnt * 2;\n      //console.log(icnt,dcnt,rcnt,ixs);\n      //console.log(data.slice(off));\n\n      for (var k = 0; k < icnt; k++) {\n        // deltaSets\n        var deltaData = []; //vdata.push(deltaData);\n        for (var ri = 0; ri < rcnt; ri++) {\n          deltaData.push(ri < dcnt ? bin.readShort(data, off) : i8[off]);\n          off += ri < dcnt ? 2 : 1;\n        }\n        var dd = new Array(regs.length);\n        dd.fill(0);\n        vdata.push(dd);\n        for (var j = 0; j < ixs.length; j++) dd[ixs[j]] = deltaData[j];\n      }\n    }\n\n    //console.log(varStore);\n\n    // VariationRegionList\n\n    off = oo + advO; // advance widths\n\n    // DeltaSetIndexMap\n\n    var fmt = data[off++];\n    if (fmt != 0) throw \"e\";\n    var entryFormat = data[off++];\n    var mapCount = bin.readUshort(data, off);\n    off += 2;\n    var INNER_INDEX_BIT_COUNT_MASK = 0x0f;\n    var MAP_ENTRY_SIZE_MASK = 0x30;\n    var entrySize = ((entryFormat & MAP_ENTRY_SIZE_MASK) >> 4) + 1; //if(entrySize!=1) throw entrySize;\n\n    //console.log(fmt, entryFormat, mapCount, entrySize);\n\n    var dfs = [];\n    for (var i = 0; i < mapCount; i++) {\n      var entry = 0;\n      if (entrySize == 1) entry = data[off++];else {\n        entry = bin.readUshort(data, off);\n        off += 2;\n      }\n      var outerIndex = entry >> (entryFormat & INNER_INDEX_BIT_COUNT_MASK) + 1;\n      var innerIndex = entry & (1 << (entryFormat & INNER_INDEX_BIT_COUNT_MASK) + 1) - 1;\n      //map.push(outerIndex,innerIndex);\n      dfs.push(varStore[outerIndex][innerIndex]);\n      //console.log(outerIndex,innerIndex);\n      //console.log(i,varStore[outerIndex][innerIndex]);\n    }\n    return [regs, dfs];\n  }\n};\nTypr[\"U\"] = function () {\n  var P = {\n    MoveTo: function (p, x, y) {\n      p.cmds.push(\"M\");\n      p.crds.push(x, y);\n    },\n    LineTo: function (p, x, y) {\n      p.cmds.push(\"L\");\n      p.crds.push(x, y);\n    },\n    CurveTo: function (p, a, b, c, d, e, f) {\n      p.cmds.push(\"C\");\n      p.crds.push(a, b, c, d, e, f);\n    },\n    qCurveTo: function (p, a, b, c, d) {\n      p.cmds.push(\"Q\");\n      p.crds.push(a, b, c, d);\n    },\n    ClosePath: function (p) {\n      p.cmds.push(\"Z\");\n    }\n  };\n  function getGlyphPosition(font, gls, i1, ltr) {\n    var g1 = gls[i1],\n      g2 = gls[i1 + 1],\n      kern = font[\"kern\"];\n    if (kern) {\n      var ind1 = kern.glyph1.indexOf(g1);\n      if (ind1 != -1) {\n        var ind2 = kern.rval[ind1].glyph2.indexOf(g2);\n        if (ind2 != -1) return [0, 0, kern.rval[ind1].vals[ind2], 0];\n      }\n    }\n    //console.log(\"no kern\");\n    return [0, 0, 0, 0];\n  }\n  function shape(font, str, prm) {\n    if (prm == null) prm = {};\n    prm[\"ltr\"];\n    prm[\"fts\"];\n    var axs = prm[\"axs\"];\n    if (font[\"fvar\"] && axs == null) axs = font[\"fvar\"][1][font[\"_index\"]][2];\n    var HVAR = font[\"HVAR\"]; //console.log(HVAR);\n    if (axs && HVAR) {\n      axs = _normalizeAxis(font, axs);\n    } //console.log(S,axs);\n    var gls = [];\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i);\n      if (cc > 0xffff) i++;\n      gls.push(codeToGlyph(font, cc));\n    }\n    var shape = [];\n    for (var i = 0; i < gls.length; i++) {\n      var padj = getGlyphPosition(font, gls, i);\n      var gid = gls[i]; //console.log(gid);\n      var ax = font[\"hmtx\"].aWidth[gid] + padj[2];\n      if (HVAR && HVAR[1][gid]) {\n        //ax+=S*HVAR[1][gid][0];\n        var difs = HVAR[1][gid]; //console.log(difs);\n        for (var j = 0; j < HVAR[0].length; j++) {\n          ax += _interpolate(HVAR[0][j], axs) * difs[j];\n        }\n      }\n      shape.push({\n        \"g\": gid,\n        \"cl\": i,\n        \"dx\": 0,\n        \"dy\": 0,\n        \"ax\": ax,\n        \"ay\": 0\n      });\n    }\n    return shape;\n  }\n  function shapeToPath(font, shape, prm) {\n    var tpath = {\n      cmds: [],\n      crds: []\n    };\n    var x = 0,\n      y = 0,\n      clr,\n      axs;\n    if (prm) {\n      clr = prm[\"clr\"];\n      axs = prm[\"axs\"];\n    }\n    for (var i = 0; i < shape.length; i++) {\n      var it = shape[i];\n      var path = glyphToPath(font, it[\"g\"], false, axs),\n        crds = path[\"crds\"];\n      for (var j = 0; j < crds.length; j += 2) {\n        tpath.crds.push(crds[j] + x + it[\"dx\"]);\n        tpath.crds.push(crds[j + 1] + y + it[\"dy\"]);\n      }\n      if (clr) tpath.cmds.push(clr);\n      for (var j = 0; j < path[\"cmds\"].length; j++) tpath.cmds.push(path[\"cmds\"][j]);\n      var clen = tpath.cmds.length;\n      if (clr) if (clen != 0 && tpath.cmds[clen - 1] != \"X\") tpath.cmds.push(\"X\"); // SVG fonts might contain \"X\". Then, nothing would stroke non-SVG glyphs.\n\n      x += it[\"ax\"];\n      y += it[\"ay\"];\n    }\n    return {\n      \"cmds\": tpath.cmds,\n      \"crds\": tpath.crds\n    };\n  }\n\n  // find the greatest index with a value <=v\n  function arrSearch(arr, k, v) {\n    var l = 0,\n      r = ~~(arr.length / k);\n    while (l + 1 != r) {\n      var mid = l + (r - l >>> 1);\n      if (arr[mid * k] <= v) l = mid;else r = mid;\n    }\n\n    //var mi = 0;  for(var i=0; i<arr.length; i+=k) if(arr[i]<=v) mi=i;  if(mi!=l*k) throw \"e\";\n\n    return l * k;\n  }\n  var wha = [0x9, 0xa, 0xb, 0xc, 0xd, 0x20, 0x85, 0xa0, 0x1680, 0x180e, 0x2028, 0x2029, 0x202f, 0x2060, 0x3000, 0xfeff],\n    whm = {};\n  for (var i = 0; i < wha.length; i++) whm[wha[i]] = 1;\n  for (var i = 0x2000; i <= 0x200d; i++) whm[i] = 1;\n  function codeToGlyph(font, code) {\n    //console.log(cmap);\n    // \"p3e10\" for NotoEmoji-Regular.ttf\n    //console.log(cmap);\n\n    if (font[\"_ctab\"] == null) {\n      var cmap = font[\"cmap\"];\n      var tind = -1,\n        pps = [\"p3e10\", \"p0e4\", \"p3e1\", \"p1e0\", \"p0e3\", \"p0e1\" /*,\"p3e3\"*/, \"p3e0\" /*Hebrew*/, \"p3e5\" /*Korean*/];\n      for (var i = 0; i < pps.length; i++) if (cmap.ids[pps[i]] != null) {\n        tind = cmap.ids[pps[i]];\n        break;\n      }\n      if (tind == -1) throw \"no familiar platform and encoding!\";\n      font[\"_ctab\"] = cmap.tables[tind];\n    }\n    var tab = font[\"_ctab\"],\n      fmt = tab.format,\n      gid = -1; //console.log(fmt); throw \"e\";\n\n    if (fmt == 0) {\n      if (code >= tab.map.length) gid = 0;else gid = tab.map[code];\n    }\n    /*else if(fmt==2) {\n      var data=font[\"_data\"], off = cmap.off+tab.off+6, bin=Typr[\"B\"];\n      var shKey = bin.readUshort(data,off + 2*(code>>>8));\n      var shInd = off + 256*2 + shKey*8;\n       var firstCode = bin.readUshort(data,shInd);\n      var entryCount= bin.readUshort(data,shInd+2);\n      var idDelta   = bin.readShort (data,shInd+4);\n      var idRangeOffset = bin.readUshort(data,shInd+6);\n       if(firstCode<=code && code<=firstCode+entryCount) {\n        // not completely correct\n        gid = bin.readUshort(data, shInd+6+idRangeOffset + (code&255)*2);\n      }\n      else gid=0;\n      //if(code>256) console.log(code,(code>>>8),shKey,firstCode,entryCount,idDelta,idRangeOffset);\n       //throw \"e\";\n      //console.log(tab,  bin.readUshort(data,off));\n      //throw \"e\";\n    }*/else if (fmt == 4) {\n      var ec = tab.endCount;\n      gid = 0;\n      if (code <= ec[ec.length - 1]) {\n        // smallest index with code <= value\n        var sind = arrSearch(ec, 1, code);\n        if (ec[sind] < code) sind++;\n        if (code >= tab.startCount[sind]) {\n          var gli = 0;\n          if (tab.idRangeOffset[sind] != 0) gli = tab.glyphIdArray[code - tab.startCount[sind] + (tab.idRangeOffset[sind] >> 1) - (tab.idRangeOffset.length - sind)];else gli = code + tab.idDelta[sind];\n          gid = gli & 0xFFFF;\n        }\n      }\n    } else if (fmt == 6) {\n      var off = code - tab.firstCode,\n        arr = tab.glyphIdArray;\n      if (off < 0 || off >= arr.length) gid = 0;else gid = arr[off];\n    } else if (fmt == 12) {\n      var grp = tab.groups;\n      gid = 0; //console.log(grp);  throw \"e\";\n\n      if (code <= grp[grp.length - 2]) {\n        var i = arrSearch(grp, 3, code);\n        if (grp[i] <= code && code <= grp[i + 1]) {\n          gid = grp[i + 2] + (code - grp[i]);\n        }\n      }\n    } else throw \"unknown cmap table format \" + tab.format;\n\n    //*\n    var SVG = font[\"SVG \"],\n      loca = font[\"loca\"];\n    // if the font claims to have a Glyph for a character, but the glyph is empty, and the character is not \"white\", it is a lie!\n    if (gid != 0 && font[\"CFF \"] == null && (SVG == null || SVG.entries[gid] == null) && loca && loca[gid] == loca[gid + 1] // loca not present in CFF or SVG fonts\n    && whm[code] == null) gid = 0;\n    //*/\n\n    return gid;\n  }\n  function glyphToPath(font, gid, noColor, axs) {\n    var path = {\n      cmds: [],\n      crds: []\n    };\n    if (font[\"fvar\"]) {\n      if (axs == null) axs = font[\"fvar\"][1][font[\"_index\"]][2];\n      axs = _normalizeAxis(font, axs);\n    }\n    var SVG = font[\"SVG \"],\n      CFF = font[\"CFF \"],\n      COLR = font[\"COLR\"],\n      CBLC = font[\"CBLC\"],\n      CBDT = font[\"CBDT\"],\n      sbix = font[\"sbix\"],\n      upng = window[\"UPNG\"];\n    var strike = null;\n    if (CBLC && upng) for (var i = 0; i < CBLC.length; i++) if (CBLC[i][0] <= gid && gid <= CBLC[i][1]) strike = CBLC[i];\n    if (strike || sbix && sbix[gid]) {\n      if (strike && strike[2] != 17) throw \"not a PNG\";\n      if (font[\"__tmp\"] == null) font[\"__tmp\"] = {};\n      var cmd = font[\"__tmp\"][\"g\" + gid];\n      if (cmd == null) {\n        var bmp, len;\n        if (sbix) {\n          bmp = sbix[gid];\n          len = bmp.length;\n        } else {\n          var boff = strike[3][gid - strike[0]] + 5; // smallGlyphMetrics\n          len = CBDT[boff + 1] << 16 | CBDT[boff + 2] << 8 | CBDT[boff + 3];\n          boff += 4;\n          bmp = new Uint8Array(CBDT.buffer, CBDT.byteOffset + boff, len);\n        }\n        var str = \"\";\n        for (var i = 0; i < len; i++) str += String.fromCharCode(bmp[i]);\n        cmd = font[\"__tmp\"][\"g\" + gid] = \"data:image/png;base64,\" + btoa(str);\n      }\n      path.cmds.push(cmd);\n      var upe = font[\"head\"][\"unitsPerEm\"] * 1.15;\n      var gw = Math.round(upe),\n        gh = Math.round(upe),\n        dy = Math.round(-gh * 0.15);\n      path.crds.push(0, gh + dy, gw, gh + dy, gw, dy, 0, dy); //*/\n    } else if (SVG && SVG.entries[gid]) {\n      var p = SVG.entries[gid];\n      if (p != null) {\n        if (typeof p == \"number\") {\n          var svg = SVG.svgs[p];\n          if (typeof svg == \"string\") {\n            var prsr = new DOMParser();\n            var doc = prsr[\"parseFromString\"](svg, \"image/svg+xml\");\n            svg = SVG.svgs[p] = doc.getElementsByTagName(\"svg\")[0];\n          }\n          p = Typr[\"U\"][\"SVG\"].toPath(svg, gid);\n          SVG.entries[gid] = p;\n        }\n        path = p;\n      }\n    } else if (noColor != true && COLR && COLR[0][\"g\" + gid] && COLR[0][\"g\" + gid][1] > 1) {\n      function toHex(n) {\n        var o = n.toString(16);\n        return (o.length == 1 ? \"0\" : \"\") + o;\n      }\n      var CPAL = font[\"CPAL\"],\n        gl = COLR[0][\"g\" + gid];\n      for (var i = 0; i < gl[1]; i++) {\n        var lid = gl[0] + i;\n        var cgl = COLR[1][2 * lid],\n          pid = COLR[1][2 * lid + 1] * 4;\n        var pth = glyphToPath(font, cgl, cgl == gid);\n        var col = \"#\" + toHex(CPAL[pid + 2]) + toHex(CPAL[pid + 1]) + toHex(CPAL[pid + 0]);\n        path.cmds.push(col);\n        path.cmds = path.cmds.concat(pth[\"cmds\"]);\n        path.crds = path.crds.concat(pth[\"crds\"]);\n        //console.log(gid, cgl,pid,col);\n\n        path.cmds.push(\"X\");\n      }\n    } else if (CFF) {\n      var pdct = CFF[\"Private\"];\n      var state = {\n        x: 0,\n        y: 0,\n        stack: [],\n        nStems: 0,\n        haveWidth: false,\n        width: pdct ? pdct[\"defaultWidthX\"] : 0,\n        open: false\n      };\n      if (CFF[\"ROS\"]) {\n        var gi = 0;\n        while (CFF[\"FDSelect\"][gi + 2] <= gid) gi += 2;\n        pdct = CFF[\"FDArray\"][CFF[\"FDSelect\"][gi + 1]][\"Private\"];\n      }\n      _drawCFF(CFF[\"CharStrings\"][gid], state, CFF, pdct, path);\n    } else if (font[\"glyf\"]) {\n      _drawGlyf(gid, font, path, axs);\n    }\n    return {\n      \"cmds\": path.cmds,\n      \"crds\": path.crds\n    };\n  }\n  function _drawGlyf(gid, font, path, axs) {\n    var gl = font[\"glyf\"][gid];\n    if (gl == null) gl = font[\"glyf\"][gid] = Typr[\"T\"].glyf._parseGlyf(font, gid);\n    if (gl != null) {\n      if (gl.noc > -1) _simpleGlyph(gl, font, gid, path, axs);else _compoGlyph(gl, font, gid, path, axs);\n    }\n  }\n  function _interpolate(axs, v) {\n    v.length;\n    var S = 1;\n    var s = axs[0]; // start\n    var p = axs[1]; // peak\n    var e = axs[2]; // end\n\n    for (var i = 0; i < v.length; i++) {\n      var AS = 1;\n      if (s[i] > p[i] || p[i] > e[i]) AS = 1;else if (s[i] < 0 && e[i] > 0 && p[i] != 0) AS = 1;else if (p[i] == 0) AS = 1;else if (v[i] < s[i] || v[i] > e[i]) AS = 0;else {\n        if (v[i] == p[i]) AS = 1;else if (v[i] < p[i]) AS = (v[i] - s[i]) / (p[i] - s[i]);else AS = (e[i] - v[i]) / (e[i] - p[i]);\n      }\n      S = S * AS;\n    }\n    return S;\n  }\n  function _normalizeAxis(font, vv) {\n    var fvar = font[\"fvar\"],\n      avar = font[\"avar\"];\n    var fv = fvar ? fvar[0] : null;\n    var nv = [];\n    for (var i = 0; i < fv.length; i++) {\n      var min = fv[i][1],\n        def = fv[i][2],\n        max = fv[i][3],\n        v = Math.max(min, Math.min(max, vv[i]));\n      if (v < def) nv[i] = (def - v) / (min - def);else if (v > def) nv[i] = (v - def) / (max - def);else nv[i] = 0;\n      if (avar && nv[i] != -1) {\n        var av = avar[i],\n          j = 0;\n        for (; j < av.length; j += 2) if (av[j] >= nv[i]) break;\n        var f = (nv[i] - av[j - 2]) / (av[j] - av[j - 2]);\n        nv[i] = f * av[j + 1] + (1 - f) * av[j - 1];\n      }\n    }\n    return nv;\n  }\n  function interpolateDeltas(dfs, ind, xs, ys, endPts) {\n    var N = xs.length,\n      ndfs = new Array(N * 2 + 8);\n    ndfs.fill(0);\n    for (var i = 0; i < N; i++) {\n      var dx = 0,\n        dy = 0,\n        ii = ind.indexOf(i);\n      if (ii != -1) {\n        dx = dfs[ii];\n        dy = dfs[ind.length + ii];\n      } else {\n        var cmp = 0;\n        while (endPts[cmp] < i) cmp++;\n        var cmp0 = cmp == 0 ? 0 : endPts[cmp - 1] + 1;\n        var cmp1 = endPts[cmp];\n        var i0 = -1,\n          i1 = -1;\n        for (var j = 0; j < ind.length; j++) {\n          var v = ind[j];\n          if (v < cmp0 || v > cmp1 || v >= N) continue;\n          i0 = j;\n          if (i1 == -1) i1 = j;\n        }\n        for (var j = 0; j < ind.length; j++) {\n          var v = ind[j];\n          if (v < cmp0 || v > cmp1 || v >= N) continue;\n          if (v < i) i0 = j;\n          if (i < v) {\n            i1 = j;\n            break;\n          }\n        }\n\n        //var i0 = ind.length-1, i1=0;  if(ind[i0]>=N) i0--;\n        //for(var j=0; j<ind.length; j++) {  var v=ind[j];  if(v<N) { if(v<i) i0=j;  if(i<v) {  i1=j;  break;  }  }  }\n        for (var ax = 0; ax < 2; ax++) {\n          var crd = ax == 0 ? xs : ys,\n            ofs = ax * ind.length,\n            dlt = 0;\n          var c0 = crd[ind[i0]],\n            c1 = crd[ind[i1]],\n            cC = crd[i];\n          var d0 = dfs[ofs + i0],\n            d1 = dfs[ofs + i1];\n          if (c0 == c1) {\n            if (d0 == d1) dlt = d0;else dlt = 0;\n          } else {\n            if (cC <= Math.min(c0, c1)) {\n              if (c0 < c1) dlt = d0;else dlt = d1;\n            } else if (Math.max(c0, c1) <= cC) {\n              if (c0 < c1) dlt = d1;else dlt = d0;\n            } else {\n              var prop = (cC - c0) / (c1 - c0); //if(prop<0) throw \"e\";\n              dlt = prop * d1 + (1 - prop) * d0;\n            }\n          }\n          if (ax == 0) dx = dlt;else dy = dlt;\n        }\n      }\n      ndfs[i] = dx;\n      ndfs[N + 4 + i] = dy;\n    }\n    return ndfs;\n  }\n  function _simpleGlyph(gl, font, gid, p, axs) {\n    var xs = gl.xs,\n      ys = gl.ys;\n    //*\n    if (font[\"fvar\"] && axs) {\n      xs = xs.slice(0);\n      ys = ys.slice(0);\n      var gvar = font[\"gvar\"];\n      var gv = gvar ? gvar[gid] : null;\n      for (var vi = 0; vi < gv.length; vi++) {\n        var axv = gv[vi][0]; //console.log(axs);\n        var S = _interpolate(axv, axs);\n        if (S < 1e-9) continue;\n        var dfs = gv[vi][1],\n          ind = gv[vi][2]; //if(dfs.length!=2*xs.length+8) throw \"e\";\n        //console.log(vi,S,axv,ind,dfs);\n        if (ind) {\n          dfs = gv[vi][1] = interpolateDeltas(dfs, ind, xs, ys, gl.endPts);\n          gv[vi][2] = null;\n        }\n        //if(ind==null)\n        if (dfs.length == xs.length * 2 + 8) for (var i = 0; i < xs.length; i++) {\n          xs[i] += S * dfs[i];\n          ys[i] += S * dfs[i + xs.length + 4];\n        }\n      }\n    } //*/\n\n    for (var c = 0; c < gl.noc; c++) {\n      var i0 = c == 0 ? 0 : gl.endPts[c - 1] + 1;\n      var il = gl.endPts[c];\n      for (var i = i0; i <= il; i++) {\n        var pr = i == i0 ? il : i - 1;\n        var nx = i == il ? i0 : i + 1;\n        var onCurve = gl.flags[i] & 1;\n        var prOnCurve = gl.flags[pr] & 1;\n        var nxOnCurve = gl.flags[nx] & 1;\n        var x = xs[i],\n          y = ys[i];\n        if (i == i0) {\n          if (onCurve) {\n            if (prOnCurve) P.MoveTo(p, xs[pr], ys[pr]);else {\n              P.MoveTo(p, x, y);\n              continue; /*  will do CurveTo at il  */\n            }\n          } else {\n            if (prOnCurve) P.MoveTo(p, xs[pr], ys[pr]);else P.MoveTo(p, Math.floor((xs[pr] + x) * 0.5), Math.floor((ys[pr] + y) * 0.5));\n          }\n        }\n        if (onCurve) {\n          if (prOnCurve) P.LineTo(p, x, y);\n        } else {\n          if (nxOnCurve) P.qCurveTo(p, x, y, xs[nx], ys[nx]);else P.qCurveTo(p, x, y, Math.floor((x + xs[nx]) * 0.5), Math.floor((y + ys[nx]) * 0.5));\n        }\n      }\n      P.ClosePath(p);\n    }\n  }\n  function _compoGlyph(gl, font, gid, p, axs) {\n    var dx = [0, 0, 0, 0, 0, 0],\n      dy = [0, 0, 0, 0, 0, 0],\n      ccnt = gl.parts.length;\n    if (font[\"fvar\"] && axs) {\n      var gvar = font[\"gvar\"];\n      var gv = gvar ? gvar[gid] : null;\n      for (var vi = 0; vi < gv.length; vi++) {\n        var axv = gv[vi][0]; //console.log(axs);\n        var S = _interpolate(axv, axs);\n        if (S < 1e-6) continue;\n        var dfs = gv[vi][1],\n          ind = gv[vi][2]; //if(dfs.length!=2*ccnt+8) throw \"e\";\n        if (ind == null) for (var i = 0; i < ccnt; i++) {\n          dx[i] += S * dfs[i];\n          dy[i] += S * dfs[i + ccnt + 4];\n        } else for (var j = 0; j < ind.length; j++) {\n          var i = ind[j];\n          dx[i] += S * dfs[0];\n          dy[i] += S * dfs[0 + ccnt];\n        }\n      }\n    }\n    for (var j = 0; j < ccnt; j++) {\n      var path = {\n        cmds: [],\n        crds: []\n      };\n      var prt = gl.parts[j];\n      _drawGlyf(prt.glyphIndex, font, path, axs);\n      var m = prt.m,\n        tx = m.tx + dx[j],\n        ty = m.ty + dy[j];\n      for (var i = 0; i < path.crds.length; i += 2) {\n        var x = path.crds[i],\n          y = path.crds[i + 1];\n        p.crds.push(x * m.a + y * m.c + tx); // not sure, probably right\n        p.crds.push(x * m.b + y * m.d + ty);\n      }\n      for (var i = 0; i < path.cmds.length; i++) p.cmds.push(path.cmds[i]);\n    }\n  }\n  function pathToSVG(path, prec) {\n    var cmds = path[\"cmds\"],\n      crds = path[\"crds\"];\n    if (prec == null) prec = 5;\n    function num(v) {\n      return parseFloat(v.toFixed(prec));\n    }\n    function merge(o) {\n      var no = [],\n        lstF = false,\n        lstC = \"\";\n      for (var i = 0; i < o.length; i++) {\n        var it = o[i],\n          isF = typeof it == \"number\";\n        if (!isF) {\n          if (it == lstC && it.length == 1 && it != \"m\") continue;\n          lstC = it;\n        } // move should not be merged (it actually means lineTo)\n        if (lstF && isF && it >= 0) no.push(\" \");\n        no.push(it);\n        lstF = isF;\n      }\n      return no.join(\"\");\n    }\n    var out = [],\n      co = 0,\n      lmap = {\n        \"M\": 2,\n        \"L\": 2,\n        \"Q\": 4,\n        \"C\": 6\n      };\n    var x = 0,\n      y = 0,\n      // perfect coords\n      //dx=0, dy=0, // relative perfect coords\n      //rx=0, ry=0, // relative rounded coords\n      ex = 0,\n      ey = 0,\n      // error between perfect and output coords\n      mx = 0,\n      my = 0; // perfect coords of the last \"Move\"\n\n    for (var i = 0; i < cmds.length; i++) {\n      var cmd = cmds[i],\n        cc = lmap[cmd] ? lmap[cmd] : 0;\n      var o0 = [],\n        dx,\n        dy,\n        rx,\n        ry; // o1=[], cx, cy, ax,ay;\n      if (cmd == \"L\") {\n        dx = crds[co] - x;\n        dy = crds[co + 1] - y;\n        rx = num(dx + ex);\n        ry = num(dy + ey);\n        // if this \"lineTo\" leads to the starting point, and \"Z\" follows, do not output anything.\n        if (cmds[i + 1] == \"Z\" && crds[co] == mx && crds[co + 1] == my) {\n          rx = dx;\n          ry = dy;\n        } else if (rx == 0 && ry == 0) ;else if (rx == 0) o0.push(\"v\", ry);else if (ry == 0) o0.push(\"h\", rx);else {\n          o0.push(\"l\", rx, ry);\n        }\n      } else {\n        o0.push(cmd.toLowerCase());\n        for (var j = 0; j < cc; j += 2) {\n          dx = crds[co + j] - x;\n          dy = crds[co + j + 1] - y;\n          rx = num(dx + ex);\n          ry = num(dy + ey);\n          o0.push(rx, ry);\n        }\n      }\n      if (cc != 0) {\n        ex += dx - rx;\n        ey += dy - ry;\n      }\n      var ou = o0;\n      for (var j = 0; j < ou.length; j++) out.push(ou[j]);\n      if (cc != 0) {\n        co += cc;\n        x = crds[co - 2];\n        y = crds[co - 1];\n      }\n      if (cmd == \"M\") {\n        mx = x;\n        my = y;\n      }\n      if (cmd == \"Z\") {\n        x = mx;\n        y = my;\n      }\n    }\n    return merge(out);\n  }\n  function SVGToPath(d) {\n    var pth = {\n      cmds: [],\n      crds: []\n    };\n    Typr[\"U\"][\"SVG\"].svgToPath(d, pth);\n    return {\n      \"cmds\": pth.cmds,\n      \"crds\": pth.crds\n    };\n  }\n  function mipmapB(buff, w, h, hlp) {\n    var nw = w >> 1,\n      nh = h >> 1;\n    var nbuf = new Uint8Array(nw * nh * 4);\n    var sb32 = new Uint32Array(buff.buffer),\n      nb32 = new Uint32Array(nbuf.buffer);\n    for (var y = 0; y < nh; y++) for (var x = 0; x < nw; x++) {\n      var ti = y * nw + x,\n        si = (y << 1) * w + (x << 1);\n      //nbuf[ti  ] = buff[si  ];  nbuf[ti+1] = buff[si+1];  nbuf[ti+2] = buff[si+2];  nbuf[ti+3] = buff[si+3];\n      //*\n      var c0 = sb32[si],\n        c1 = sb32[si + 1],\n        c2 = sb32[si + w],\n        c3 = sb32[si + w + 1];\n      var a0 = c0 >>> 24,\n        a1 = c1 >>> 24,\n        a2 = c2 >>> 24,\n        a3 = c3 >>> 24,\n        a = a0 + a1 + a2 + a3;\n      if (a == 1020) {\n        var r = (c0 >>> 0 & 255) + (c1 >>> 0 & 255) + (c2 >>> 0 & 255) + (c3 >>> 0 & 255) + 2 >>> 2;\n        var g = (c0 >>> 8 & 255) + (c1 >>> 8 & 255) + (c2 >>> 8 & 255) + (c3 >>> 8 & 255) + 2 >>> 2;\n        var b = (c0 >>> 16 & 255) + (c1 >>> 16 & 255) + (c2 >>> 16 & 255) + (c3 >>> 16 & 255) + 2 >>> 2;\n        nb32[ti] = 255 << 24 | b << 16 | g << 8 | r;\n      } else if (a == 0) nb32[ti] = 0;else {\n        var r = (c0 >>> 0 & 255) * a0 + (c1 >>> 0 & 255) * a1 + (c2 >>> 0 & 255) * a2 + (c3 >>> 0 & 255) * a3;\n        var g = (c0 >>> 8 & 255) * a0 + (c1 >>> 8 & 255) * a1 + (c2 >>> 8 & 255) * a2 + (c3 >>> 8 & 255) * a3;\n        var b = (c0 >>> 16 & 255) * a0 + (c1 >>> 16 & 255) * a1 + (c2 >>> 16 & 255) * a2 + (c3 >>> 16 & 255) * a3;\n        var ia = 1 / a;\n        r = ~~(r * ia + 0.5);\n        g = ~~(g * ia + 0.5);\n        b = ~~(b * ia + 0.5);\n        nb32[ti] = a + 2 >>> 2 << 24 | b << 16 | g << 8 | r;\n      }\n    }\n    return {\n      buff: nbuf,\n      w: nw,\n      h: nh\n    };\n  }\n  var __cnv, __ct;\n  function pathToContext(path, ctx) {\n    var c = 0,\n      cmds = path[\"cmds\"],\n      crds = path[\"crds\"];\n\n    //ctx.translate(3500,500);  ctx.rotate(0.25);  ctx.scale(1,-1);\n\n    for (var j = 0; j < cmds.length; j++) {\n      var cmd = cmds[j];\n      if (cmd == \"M\") {\n        ctx.moveTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"L\") {\n        ctx.lineTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"C\") {\n        ctx.bezierCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3], crds[c + 4], crds[c + 5]);\n        c += 6;\n      } else if (cmd == \"Q\") {\n        ctx.quadraticCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3]);\n        c += 4;\n      } else if (cmd[0] == \"d\") {\n        var upng = window[\"UPNG\"];\n        var x0 = crds[c],\n          y0 = crds[c + 1],\n          x1 = crds[c + 2],\n          y1 = crds[c + 3],\n          x2 = crds[c + 4],\n          y2 = crds[c + 5],\n          x3 = crds[c + 6],\n          y3 = crds[c + 7];\n        c += 8;\n        //y0+=400;  y1+=400;  y1+=600;\n        if (upng == null) {\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.lineTo(x3, y3);\n          ctx.closePath();\n          continue;\n        }\n        var dx0 = x1 - x0,\n          dy0 = y1 - y0,\n          dx1 = x3 - x0,\n          dy1 = y3 - y0;\n        var sbmp = atob(cmd.slice(22));\n        var bmp = new Uint8Array(sbmp.length);\n        for (var i = 0; i < sbmp.length; i++) bmp[i] = sbmp.charCodeAt(i);\n        var img = upng[\"decode\"](bmp.buffer),\n          w = img[\"width\"],\n          h = img[\"height\"]; //console.log(img);\n\n        var nbmp = new Uint8Array(upng[\"toRGBA8\"](img)[0]);\n        var tr = ctx[\"getTransform\"]();\n        var scl = Math.sqrt(Math.abs(tr[\"a\"] * tr[\"d\"] - tr[\"b\"] * tr[\"c\"])) * Math.sqrt(dx1 * dx1 + dy1 * dy1) / h;\n        while (scl < 0.5) {\n          var nd = mipmapB(nbmp, w, h);\n          nbmp = nd.buff;\n          w = nd.w;\n          h = nd.h;\n          scl *= 2;\n        }\n        if (__cnv == null) {\n          __cnv = document.createElement(\"canvas\");\n          __ct = __cnv.getContext(\"2d\");\n        }\n        if (__cnv.width != w || __cnv.height != h) {\n          __cnv.width = w;\n          __cnv.height = h;\n        }\n        __ct.putImageData(new ImageData(new Uint8ClampedArray(nbmp.buffer), w, h), 0, 0);\n        ctx.save();\n        ctx.transform(dx0, dy0, dx1, dy1, x0, y0);\n        ctx.scale(1 / w, 1 / h);\n        ctx.drawImage(__cnv, 0, 0); //*/\n        ctx.restore();\n      } else if (cmd.charAt(0) == \"#\" || cmd.charAt(0) == \"r\") {\n        ctx.beginPath();\n        ctx.fillStyle = cmd;\n      } else if (cmd.charAt(0) == \"O\" && cmd != \"OX\") {\n        ctx.beginPath();\n        var pts = cmd.split(\"-\");\n        ctx.lineWidth = parseFloat(pts[2]);\n        ctx.lineCap = [\"butt\", \"round\", \"square\"][parseFloat(pts[3])];\n        ctx.lineJoin = [\"miter\", \"round\", \"bevel\"][parseFloat(pts[4])];\n        ctx.miterLimit = parseFloat(pts[5]);\n        ctx.lineDashOffset = parseFloat(pts[6]);\n        ctx.setLineDash(pts[7].split(\",\").map(parseFloat));\n        ctx.strokeStyle = pts[1];\n      } else if (cmd == \"Z\") {\n        ctx.closePath();\n      } else if (cmd == \"X\") {\n        ctx.fill();\n      } else if (cmd == \"OX\") {\n        ctx.stroke();\n      }\n    }\n  }\n  function _drawCFF(cmds, state, font, pdct, p) {\n    var stack = state.stack;\n    var nStems = state.nStems,\n      haveWidth = state.haveWidth,\n      width = state.width,\n      open = state.open;\n    var i = 0;\n    var x = state.x,\n      y = state.y,\n      c1x = 0,\n      c1y = 0,\n      c2x = 0,\n      c2y = 0,\n      c3x = 0,\n      c3y = 0,\n      c4x = 0,\n      c4y = 0,\n      jpx = 0,\n      jpy = 0;\n    var CFF = Typr[\"T\"].CFF;\n    var nominalWidthX = pdct[\"nominalWidthX\"];\n    var o = {\n      val: 0,\n      size: 0\n    };\n    //console.log(cmds);\n    while (i < cmds.length) {\n      CFF.getCharString(cmds, i, o);\n      var v = o.val;\n      i += o.size;\n      if (v == \"o1\" || v == \"o18\")\n        //  hstem || hstemhm\n        {\n          var hasWidthArg;\n\n          // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n          hasWidthArg = stack.length % 2 !== 0;\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n          }\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o3\" || v == \"o23\")\n        // vstem || vstemhm\n        {\n          var hasWidthArg;\n\n          // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n          hasWidthArg = stack.length % 2 !== 0;\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n          }\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o4\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n        if (open) P.ClosePath(p);\n        y += stack.pop();\n        P.MoveTo(p, x, y);\n        open = true;\n      } else if (v == \"o5\") {\n        while (stack.length > 0) {\n          x += stack.shift();\n          y += stack.shift();\n          P.LineTo(p, x, y);\n        }\n      } else if (v == \"o6\" || v == \"o7\")\n        // hlineto || vlineto\n        {\n          var count = stack.length;\n          var isX = v == \"o6\";\n          for (var j = 0; j < count; j++) {\n            var sval = stack.shift();\n            if (isX) x += sval;else y += sval;\n            isX = !isX;\n            P.LineTo(p, x, y);\n          }\n        } else if (v == \"o8\" || v == \"o24\")\n        // rrcurveto || rcurveline\n        {\n          var count = stack.length;\n          var index = 0;\n          while (index + 6 <= count) {\n            c1x = x + stack.shift();\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + stack.shift();\n            P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 6;\n          }\n          if (v == \"o24\") {\n            x += stack.shift();\n            y += stack.shift();\n            P.LineTo(p, x, y);\n          }\n        } else if (v == \"o11\") break;else if (v == \"o1234\" || v == \"o1235\" || v == \"o1236\" || v == \"o1237\")\n        //if((v+\"\").slice(0,3)==\"o12\")\n        {\n          if (v == \"o1234\") {\n            c1x = x + stack.shift(); // dx1\n            c1y = y; // dy1\n            c2x = c1x + stack.shift(); // dx2\n            c2y = c1y + stack.shift(); // dy2\n            jpx = c2x + stack.shift(); // dx3\n            jpy = c2y; // dy3\n            c3x = jpx + stack.shift(); // dx4\n            c3y = c2y; // dy4\n            c4x = c3x + stack.shift(); // dx5\n            c4y = y; // dy5\n            x = c4x + stack.shift(); // dx6\n            P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n          if (v == \"o1235\") {\n            c1x = x + stack.shift(); // dx1\n            c1y = y + stack.shift(); // dy1\n            c2x = c1x + stack.shift(); // dx2\n            c2y = c1y + stack.shift(); // dy2\n            jpx = c2x + stack.shift(); // dx3\n            jpy = c2y + stack.shift(); // dy3\n            c3x = jpx + stack.shift(); // dx4\n            c3y = jpy + stack.shift(); // dy4\n            c4x = c3x + stack.shift(); // dx5\n            c4y = c3y + stack.shift(); // dy5\n            x = c4x + stack.shift(); // dx6\n            y = c4y + stack.shift(); // dy6\n            stack.shift(); // flex depth\n            P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n          if (v == \"o1236\") {\n            c1x = x + stack.shift(); // dx1\n            c1y = y + stack.shift(); // dy1\n            c2x = c1x + stack.shift(); // dx2\n            c2y = c1y + stack.shift(); // dy2\n            jpx = c2x + stack.shift(); // dx3\n            jpy = c2y; // dy3\n            c3x = jpx + stack.shift(); // dx4\n            c3y = c2y; // dy4\n            c4x = c3x + stack.shift(); // dx5\n            c4y = c3y + stack.shift(); // dy5\n            x = c4x + stack.shift(); // dx6\n            P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n          if (v == \"o1237\") {\n            c1x = x + stack.shift(); // dx1\n            c1y = y + stack.shift(); // dy1\n            c2x = c1x + stack.shift(); // dx2\n            c2y = c1y + stack.shift(); // dy2\n            jpx = c2x + stack.shift(); // dx3\n            jpy = c2y + stack.shift(); // dy3\n            c3x = jpx + stack.shift(); // dx4\n            c3y = jpy + stack.shift(); // dy4\n            c4x = c3x + stack.shift(); // dx5\n            c4y = c3y + stack.shift(); // dy5\n            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n              x = c4x + stack.shift();\n            } else {\n              y = c4y + stack.shift();\n            }\n            P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n        } else if (v == \"o14\") {\n        if (stack.length > 0 && stack.length != 4 && !haveWidth) {\n          width = stack.shift() + font[\"nominalWidthX\"];\n          haveWidth = true;\n        }\n        if (stack.length == 4)\n          // seac = standard encoding accented character\n          {\n            var adx = stack.shift();\n            var ady = stack.shift();\n            var bchar = stack.shift();\n            var achar = stack.shift();\n            var bind = CFF.glyphBySE(font, bchar);\n            var aind = CFF.glyphBySE(font, achar);\n\n            //console.log(bchar, bind);\n            //console.log(achar, aind);\n            //state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\n            _drawCFF(font[\"CharStrings\"][bind], state, font, pdct, p);\n            state.x = adx;\n            state.y = ady;\n            _drawCFF(font[\"CharStrings\"][aind], state, font, pdct, p);\n\n            //x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n          }\n        if (open) {\n          P.ClosePath(p);\n          open = false;\n        }\n      } else if (v == \"o19\" || v == \"o20\") {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n        }\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n        i += nStems + 7 >> 3;\n      } else if (v == \"o21\") {\n        if (stack.length > 2 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n        y += stack.pop();\n        x += stack.pop();\n        if (open) P.ClosePath(p);\n        P.MoveTo(p, x, y);\n        open = true;\n      } else if (v == \"o22\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n        x += stack.pop();\n        if (open) P.ClosePath(p);\n        P.MoveTo(p, x, y);\n        open = true;\n      } else if (v == \"o25\") {\n        while (stack.length > 6) {\n          x += stack.shift();\n          y += stack.shift();\n          P.LineTo(p, x, y);\n        }\n        c1x = x + stack.shift();\n        c1y = y + stack.shift();\n        c2x = c1x + stack.shift();\n        c2y = c1y + stack.shift();\n        x = c2x + stack.shift();\n        y = c2y + stack.shift();\n        P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n      } else if (v == \"o26\") {\n        if (stack.length % 2) {\n          x += stack.shift();\n        }\n        while (stack.length > 0) {\n          c1x = x;\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x;\n          y = c2y + stack.shift();\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o27\") {\n        if (stack.length % 2) {\n          y += stack.shift();\n        }\n        while (stack.length > 0) {\n          c1x = x + stack.shift();\n          c1y = y;\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y;\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o10\" || v == \"o29\")\n        // callsubr || callgsubr\n        {\n          var obj = v == \"o10\" ? pdct : font;\n          if (stack.length == 0) {\n            console.log(\"error: empty stack\");\n          } else {\n            var ind = stack.pop();\n            var subr = obj[\"Subrs\"][ind + obj[\"Bias\"]];\n            state.x = x;\n            state.y = y;\n            state.nStems = nStems;\n            state.haveWidth = haveWidth;\n            state.width = width;\n            state.open = open;\n            _drawCFF(subr, state, font, pdct, p);\n            x = state.x;\n            y = state.y;\n            nStems = state.nStems;\n            haveWidth = state.haveWidth;\n            width = state.width;\n            open = state.open;\n          }\n        } else if (v == \"o30\" || v == \"o31\")\n        // vhcurveto || hvcurveto\n        {\n          var count,\n            count1 = stack.length;\n          var index = 0;\n          var alternate = v == \"o31\";\n          count = count1 & -3;\n          index += count1 - count;\n          while (index < count) {\n            if (alternate) {\n              c1x = x + stack.shift();\n              c1y = y;\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              y = c2y + stack.shift();\n              if (count - index == 5) {\n                x = c2x + stack.shift();\n                index++;\n              } else x = c2x;\n              alternate = false;\n            } else {\n              c1x = x;\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              if (count - index == 5) {\n                y = c2y + stack.shift();\n                index++;\n              } else y = c2y;\n              alternate = true;\n            }\n            P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 4;\n          }\n        } else if ((v + \"\").charAt(0) == \"o\") {\n        console.log(\"Unknown operation: \" + v, cmds);\n        throw v;\n      } else stack.push(v);\n    }\n    //console.log(cmds);\n    state.x = x;\n    state.y = y;\n    state.nStems = nStems;\n    state.haveWidth = haveWidth;\n    state.width = width;\n    state.open = open;\n  }\n  function initHB(hurl, resp) {\n    var codeLength = function (code) {\n      var len = 0;\n      if ((code & 0xffffffff - (1 << 7) + 1) == 0) {\n        len = 1;\n      } else if ((code & 0xffffffff - (1 << 11) + 1) == 0) {\n        len = 2;\n      } else if ((code & 0xffffffff - (1 << 16) + 1) == 0) {\n        len = 3;\n      } else if ((code & 0xffffffff - (1 << 21) + 1) == 0) {\n        len = 4;\n      }\n      return len;\n    };\n    fetch(hurl).then(function (x) {\n      return x[\"arrayBuffer\"]();\n    }).then(function (ab) {\n      return WebAssembly[\"instantiate\"](ab);\n    }).then(function (res) {\n      console.log(\"HB ready\");\n      var exp = res[\"instance\"][\"exports\"],\n        mem = exp[\"memory\"];\n      //mem[\"grow\"](30); // each page is 64kb in size\n      var heapu8, u32, i32, f32;\n      var __lastFnt, blob, blobPtr, face, font;\n      Typr[\"U\"][\"shapeHB\"] = function () {\n        var toJson = function (ptr) {\n          var length = exp[\"hb_buffer_get_length\"](ptr);\n          var result = [];\n          var iPtr32 = exp[\"hb_buffer_get_glyph_infos\"](ptr, 0) >>> 2;\n          var pPtr32 = exp[\"hb_buffer_get_glyph_positions\"](ptr, 0) >>> 2;\n          for (var i = 0; i < length; ++i) {\n            var a = iPtr32 + i * 5,\n              b = pPtr32 + i * 5;\n            result.push({\n              \"g\": u32[a + 0],\n              \"cl\": u32[a + 2],\n              \"ax\": i32[b + 0],\n              \"ay\": i32[b + 1],\n              \"dx\": i32[b + 2],\n              \"dy\": i32[b + 3]\n            });\n          }\n          //console.log(result);\n          return result;\n        };\n        var te;\n        return function (fnt, str, prm) {\n          var fdata = fnt[\"_data\"],\n            fn = fnt[\"name\"][\"postScriptName\"];\n          var ltr = prm[\"ltr\"],\n            fts = prm[\"fts\"],\n            axs = prm[\"axs\"];\n          if (fnt[\"fvar\"] && axs == null) axs = fnt[\"fvar\"][1][fnt[\"_index\"]][2];\n\n          //var olen = mem.buffer.byteLength, nlen = 2*fdata.length+str.length*16 + 4e6;\n          //if(olen<nlen) mem[\"grow\"](((nlen-olen)>>>16)+4);  //console.log(\"growing\",nlen);\n\n          heapu8 = new Uint8Array(mem.buffer);\n          u32 = new Uint32Array(mem.buffer);\n          i32 = new Int32Array(mem.buffer);\n          f32 = new Float32Array(mem.buffer);\n          if (__lastFnt != fn) {\n            if (blob != null) {\n              exp[\"hb_blob_destroy\"](blob);\n              exp[\"free\"](blobPtr);\n              exp[\"hb_face_destroy\"](face);\n              exp[\"hb_font_destroy\"](font);\n            }\n            blobPtr = exp[\"malloc\"](fdata.byteLength);\n            heapu8.set(fdata, blobPtr);\n            blob = exp[\"hb_blob_create\"](blobPtr, fdata.byteLength, 2, 0, 0);\n            face = exp[\"hb_face_create\"](blob, fnt[\"_index\"]);\n            font = exp[\"hb_font_create\"](face);\n            __lastFnt = fn;\n          }\n          if (window[\"TextEncoder\"] == null) {\n            alert(\"Your browser is too old. Please, update it.\");\n            return;\n          }\n          if (te == null) te = new window[\"TextEncoder\"](\"utf8\");\n          var buffer = exp[\"hb_buffer_create\"]();\n          var bytes = te[\"encode\"](str);\n          var len = bytes.length,\n            strp = exp[\"malloc\"](len);\n          heapu8.set(bytes, strp);\n          exp[\"hb_buffer_add_utf8\"](buffer, strp, len, 0, len);\n          exp[\"free\"](strp);\n          var bin = Typr[\"B\"];\n          var feat = 0;\n          if (fts) {\n            feat = exp[\"malloc\"](16 * fts.length);\n            for (var i = 0; i < fts.length; i++) {\n              var fe = fts[i];\n              var off = feat + i * 16,\n                qo = off >>> 2;\n              bin.writeASCII(heapu8, off, fe[0].split(\"\").reverse().join(\"\"));\n              u32[qo + 1] = fe[1];\n              u32[qo + 2] = fe[2];\n              u32[qo + 3] = fe[3];\n            }\n            //console.log(fts);\n          }\n          var vdat = 0;\n          if (axs && fnt[\"fvar\"]) {\n            var axes = fnt[\"fvar\"][0]; //console.log(axes, axs);\n            vdat = exp[\"malloc\"](8 * axs.length);\n            for (var i = 0; i < axs.length; i++) {\n              var off = vdat + i * 8,\n                qo = off >>> 2;\n              bin.writeASCII(heapu8, off, axes[i][0].split(\"\").reverse().join(\"\"));\n              f32[qo + 1] = axs[i];\n            }\n          }\n          //*/\n\n          if (axs) exp[\"hb_font_set_variations\"](font, vdat, axs.length);\n          exp[\"hb_buffer_set_direction\"](buffer, ltr ? 4 : 5);\n          exp[\"hb_buffer_guess_segment_properties\"](buffer);\n          exp[\"hb_shape\"](font, buffer, feat, fts ? fts.length : 0);\n          var json = toJson(buffer); //buffer[\"json\"]();\n          exp[\"hb_buffer_destroy\"](buffer);\n          if (fts) exp[\"free\"](feat);\n          if (axs) exp[\"free\"](vdat);\n          var arr = json.slice(0);\n          if (!ltr) arr.reverse();\n          var ci = 0,\n            bi = 0; // character index, binary index\n          for (var i = 1; i < arr.length; i++) {\n            var gl = arr[i],\n              cl = gl[\"cl\"];\n            while (true) {\n              var cpt = str.codePointAt(ci),\n                cln = codeLength(cpt);\n              if (bi + cln <= cl) {\n                bi += cln;\n                ci += cpt <= 0xffff ? 1 : 2;\n              } else break;\n            }\n            //while(bi+codeLength(str.charCodeAt(ci)) <=cl) {  bi+=codeLength(str.charCodeAt(ci));  ci++;  }\n            gl[\"cl\"] = ci;\n          }\n          return json;\n        };\n      }();\n      resp();\n    });\n  }\n  return {\n    \"shape\": shape,\n    \"shapeToPath\": shapeToPath,\n    \"codeToGlyph\": codeToGlyph,\n    \"glyphToPath\": glyphToPath,\n    \"pathToSVG\": pathToSVG,\n    \"SVGToPath\": SVGToPath,\n    \"pathToContext\": pathToContext,\n    \"initHB\": initHB\n  };\n}();\nexport { Typr as default };","map":{"version":3,"names":["inflate","pako","Typr","buff","bin","readFont","data","idx","offset","tmap","T","prsr","cmap","head","hhea","maxp","hmtx","name","OS2","post","loca","kern","glyf","CFF","GSUB","CBLC","CBDT","SVG","colr","cpal","sbix","fvar","gvar","avar","HVAR","obj","t","tab","off","tobj","parseTab","woffToOtf","numTables","readUshort","totalSize","readUint","otf","Uint8Array","toff","writeASCII","writeUshort","i","tag","readASCII","tof","cLe","oLe","slice","to","writeUint","set","compressedData","numF","fnts","foff","push","fnt","_compressedData","out","length","fv","p","JSON","parse","stringify","toffset","readFixed","o","readF2dot14","num","readShort","readInt","a","uint8","int32","readInt8","int8","uint16","int16","n","readUshorts","len","arr","v","uint32","readUint64","l","s","String","fromCharCode","charCodeAt","readUnicode","c","_tdec","window","readUTF8","tdec","readBytes","readASCIIArray","ab","ArrayBuffer","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","buffer","ninds","readIndex","names","tdinds","topDicts","readDict","topdict","sinds","strings","readSubrs","fdind","dict","_readFDict","fmt","rns","readCharset","ss","indexOf","bias","nSubrs","subrs","arl","no","byteOffset","ari","tableSE","glyphByUnicode","cff","code","glyphBySE","charcode","charset","format","first","nLeft","inds","count","offsize","getCharString","b0","b1","vs","op","val","size","readCharString","end","carr","key","nibs","b","nib0","nib1","chars","parseFloat","keys","tables","ids","rU","offs","platformID","encodingID","noffset","id","tind","subt","parse0","parse4","parse6","parse12","console","log","map","rUs","offset0","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCount","startCount","idDelta","idRangeOffset","glyphIdArray","firstCode","entryCount","nGroups","gps","groups","ooff","numSizes","coff","j","fgI","lgI","nxt","gcnt","ioff","inF","imF","imgo","oarr","gi","sbitO","font","ng","g","_parseGlyf","gl","noc","xMin","yMin","xMax","yMax","endPts","instructionLength","instructions","crdnum","flags","flag","rep","xs","i8","same","ys","x","y","ARG_1_AND_2_ARE_WORDS","ARGS_ARE_XY_VALUES","WE_HAVE_A_SCALE","MORE_COMPONENTS","WE_HAVE_AN_X_AND_Y_SCALE","WE_HAVE_A_TWO_BY_TWO","WE_HAVE_INSTRUCTIONS","parts","part","m","d","tx","ty","p1","p2","glyphIndex","arg1","arg2","numInstr","instr","func","aWidth","lsBearing","nG","nH","aw","lsb","version","parseV1","nTables","glyph1","rval","coverage","readFormat0","pleft","nPairs","left","right","value","glyph2","vals","ver","stringOffset","ooo","languageID","nameID","slen","soff","str","tid","toString","selectOne","ff","psn","_lang","version0","version1","version2","version5","entries","svgs","svgDocIndexOffset","numEntries","startGlyphID","endGlyphID","svgDocOffset","svgDocLength","sbuf","svg","f","numGlyphs","numStrikes","si","aoff","noff","go","boff","loff","lnum","base","lays","vsn","tot","fst","flO","fmap","cnt","axes","inst","acnt","icnt","isiz","min","def","max","flg","nid","snid","pnid","crd","EMBEDDED_PEAK_TUPLE","INTERMEDIATE_REGION","PRIVATE_POINT_NUMBERS","DELTAS_ARE_ZERO","DELTAS_ARE_WORDS","POINTS_ARE_WORDS","SHARED_POINT_NUMBERS","readTuple","tup","readTupleVarHeader","vcnt","eoff","dsiz","peak","start","readPointNumbers","gid","pts","last","wds","dif","tcnt","goff","tups","mins","maxs","imin","imax","k","Math","tabs","snum","hdr","sind","oo","vr","ind","ds","cb","ti","ai","poly","varO","advO","lsbO","rsbO","vregO","rcnt","regs","varStore","vdata","dcnt","ixs","deltaData","ri","dd","Array","fill","entryFormat","mapCount","INNER_INDEX_BIT_COUNT_MASK","MAP_ENTRY_SIZE_MASK","entrySize","dfs","entry","outerIndex","innerIndex","P","MoveTo","cmds","crds","LineTo","CurveTo","e","qCurveTo","ClosePath","getGlyphPosition","gls","i1","ltr","g1","g2","ind1","ind2","shape","prm","axs","_normalizeAxis","cc","codePointAt","codeToGlyph","padj","ax","difs","_interpolate","shapeToPath","tpath","clr","it","path","glyphToPath","clen","arrSearch","r","mid","wha","whm","pps","ec","gli","grp","noColor","COLR","upng","strike","cmd","bmp","btoa","upe","gw","round","gh","dy","DOMParser","doc","getElementsByTagName","toPath","toHex","CPAL","lid","cgl","pid","pth","col","concat","pdct","state","stack","nStems","haveWidth","width","open","_drawCFF","_drawGlyf","_simpleGlyph","_compoGlyph","S","AS","vv","nv","av","interpolateDeltas","N","ndfs","dx","ii","cmp","cmp0","cmp1","i0","ofs","dlt","c0","c1","cC","d0","d1","prop","gv","vi","axv","il","pr","nx","onCurve","prOnCurve","nxOnCurve","floor","ccnt","prt","pathToSVG","prec","toFixed","merge","lstF","lstC","isF","join","co","lmap","ex","ey","mx","my","o0","rx","ry","toLowerCase","ou","SVGToPath","svgToPath","mipmapB","w","h","hlp","nw","nh","nbuf","sb32","nb32","c2","c3","a0","a1","a2","a3","ia","__cnv","__ct","pathToContext","ctx","moveTo","lineTo","bezierCurveTo","quadraticCurveTo","x0","y0","x1","y1","x2","y2","x3","y3","closePath","dx0","dy0","dx1","dy1","sbmp","atob","img","nbmp","tr","scl","sqrt","abs","nd","document","createElement","getContext","height","putImageData","ImageData","Uint8ClampedArray","save","transform","scale","drawImage","restore","charAt","beginPath","fillStyle","split","lineWidth","lineCap","lineJoin","miterLimit","lineDashOffset","setLineDash","strokeStyle","stroke","c1x","c1y","c2x","c2y","c3x","c3y","c4x","c4y","jpx","jpy","nominalWidthX","hasWidthArg","shift","pop","isX","sval","index","adx","ady","bchar","achar","bind","aind","subr","count1","alternate","initHB","hurl","resp","codeLength","fetch","then","WebAssembly","res","exp","mem","heapu8","u32","i32","f32","__lastFnt","blob","blobPtr","face","toJson","ptr","result","iPtr32","pPtr32","te","fdata","fn","fts","Float32Array","byteLength","alert","bytes","strp","feat","fe","qo","reverse","vdat","json","ci","bi","cl","cpt","cln","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/type/lib/Typr.js"],"sourcesContent":["import { inflate } from 'pako';\n\n// Mocking the pako module to just have inflate for a smaller package size\nconst pako = { inflate };\n\nvar Typr = {};\n\nTypr[\"parse\"] = function (buff) {\n  var bin = Typr[\"B\"];\n\n  var readFont = function (data, idx, offset, tmap) {\n    var T = Typr[\"T\"];\n    var prsr = {\n      \"cmap\": T.cmap,\n      \"head\": T.head,\n      \"hhea\": T.hhea,\n      \"maxp\": T.maxp,\n      \"hmtx\": T.hmtx,\n      \"name\": T.name,\n      \"OS/2\": T.OS2,\n      \"post\": T.post,\n\n      \"loca\": T.loca,\n      \"kern\": T.kern,\n      \"glyf\": T.glyf,\n\n      \"CFF \": T.CFF,\n      /*\n      \"GPOS\",\n      \"GSUB\",\n      \"GDEF\",*/\n      \"GSUB\": T.GSUB,\n      \"CBLC\": T.CBLC,\n      \"CBDT\": T.CBDT,\n\n      \"SVG \": T.SVG,\n      \"COLR\": T.colr,\n      \"CPAL\": T.cpal,\n      \"sbix\": T.sbix,\n\n      \"fvar\": T.fvar,\n      \"gvar\": T.gvar,\n      \"avar\": T.avar,\n      \"HVAR\": T.HVAR\n      //\"VORG\",\n    };\n    var obj = { \"_data\": data, \"_index\": idx, \"_offset\": offset };\n\n    for (var t in prsr) {\n      var tab = Typr[\"findTable\"](data, t, offset);\n      if (tab) {\n        var off = tab[0], tobj = tmap[off];\n        if (tobj == null) tobj = prsr[t].parseTab(data, off, tab[1], obj);\n        obj[t] = tmap[off] = tobj;\n      }\n    }\n    return obj;\n  };\n\n  function woffToOtf(data) {\n    var numTables = bin.readUshort(data, 12);\n    var totalSize = bin.readUint(data, 16);\n\n    var otf = new Uint8Array(totalSize), toff = 12 + numTables * 16;\n\n    bin.writeASCII(otf, 0, \"OTTO\");\n    bin.writeUshort(otf, 4, numTables);\n\n    var off = 44;\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, off, 4);\n      var tof = bin.readUint(data, off + 4);\n      var cLe = bin.readUint(data, off + 8);\n      var oLe = bin.readUint(data, off + 12);\n      off += 20;\n      //console.log(i, \":::\", tag,tof,oLe);\n\n      var tab = data.slice(tof, tof + cLe);\n      if (cLe != oLe) tab = pako[\"inflate\"](tab);\n\n      var to = 12 + i * 16;\n      bin.writeASCII(otf, to, tag);\n      bin.writeUint(otf, to + 8, toff);\n      bin.writeUint(otf, to + 12, oLe);\n\n      otf.set(tab, toff); toff += oLe;\n    }\n    //console.log(otf);\n    return otf;\n  }\n\n\n  var data = new Uint8Array(buff);\n  // PATCHED: keep around the compressed data if we inflate it\n  let compressedData;\n  if (data[0] == 0x77) {\n    compressedData = data;\n    data = woffToOtf(data);\n  }\n\n  var tmap = {};\n  var tag = bin.readASCII(data, 0, 4);\n  if (tag == \"ttcf\") {\n    var offset = 4;\n    bin.readUshort(data, offset); offset += 2;\n    bin.readUshort(data, offset); offset += 2;\n    var numF = bin.readUint(data, offset); offset += 4;\n    var fnts = [];\n    for (var i = 0; i < numF; i++) {\n      var foff = bin.readUint(data, offset); offset += 4;\n      fnts.push(readFont(data, i, foff, tmap));\n    }\n    return fnts;\n  }\n  var fnt = readFont(data, 0, 0, tmap);  //console.log(fnt);  throw \"e\";\n  fnt._compressedData = compressedData; // PATCH: make compressed data accessible\n  var fvar = fnt[\"fvar\"];\n  if (fvar) {\n    var out = [fnt];\n    for (var i = 0; i < fvar[1].length; i++) {\n      var fv = fvar[1][i];\n      var obj = {}; out.push(obj); for (var p in fnt) obj[p] = fnt[p];\n      obj[\"_index\"] = i;\n      var name = obj[\"name\"] = JSON.parse(JSON.stringify(obj[\"name\"]));\n      name[\"fontSubfamily\"] = fv[0];\n      if (fv[3] == null) fv[3] = (name[\"fontFamily\"] + \"-\" + name[\"fontSubfamily\"])[\"replaceAll\"](\" \", \"\");\n      name[\"postScriptName\"] = fv[3];\n    }\n    return out;\n  }\n\n  return [fnt];\n};\n\n\nTypr[\"findTable\"] = function (data, tab, foff) {\n  var bin = Typr[\"B\"];\n  var numTables = bin.readUshort(data, foff + 4);\n  var offset = foff + 12;\n  for (var i = 0; i < numTables; i++) {\n    var tag = bin.readASCII(data, offset, 4);   //console.log(tag);\n    bin.readUint(data, offset + 4);\n    var toffset = bin.readUint(data, offset + 8);\n    var length = bin.readUint(data, offset + 12);\n    if (tag == tab) return [toffset, length];\n    offset += 16;\n  }\n  return null;\n};\n/*\nTypr[\"splitBy\"] = function(data,tag) {\n  data = new Uint8Array(data);  console.log(data.slice(0,64));\n  var bin = Typr[\"B\"];\n  var ttcf = bin.readASCII(data, 0, 4);  if(ttcf!=\"ttcf\") return {};\n\n  var offset = 8;\n  var numF = bin.readUint  (data, offset);  offset+=4;\n  var colls = [], used={};\n  for(var i=0; i<numF; i++) {\n    var foff = bin.readUint  (data, offset);  offset+=4;\n    var toff = Typr[\"findTable\"](data,tag,foff)[0];\n    if(used[toff]==null) used[toff] = [];\n    used[toff].push([foff,bin.readUshort(data,foff+4)]);  // font offset, numTables\n  }\n  for(var toff in used) {\n    var offs = used[toff];\n    var hlen = 12+4*offs.length;\n    var out = new Uint8Array(hlen);\n    for(var i=0; i<8; i++) out[i]=data[i];\n    bin.writeUint(out,8,offs.length);\n\n    for(var i=0; i<offs.length; i++) hlen += 12+offs[i][1]*16;\n\n    var hdrs = [out], tabs = [], hoff=out.length, toff=hlen, noffs={};\n    for(var i=0; i<offs.length; i++) {\n      bin.writeUint(out, 12+i*4, hoff);  hoff+=12+offs[i][1]*16;\n      toff = Typr[\"_cutFont\"](data, offs[i][0], hdrs, tabs, toff, noffs);\n    }\n    colls.push(Typr[\"_joinArrs\"](hdrs.concat(tabs)));\n  }\n  return colls;\n}\n\nTypr[\"splitFonts\"] = function(data) {\n  data = new Uint8Array(data);\n  var bin = Typr[\"B\"];\n  var ttcf = bin.readASCII(data, 0, 4);  if(ttcf!=\"ttcf\") return {};\n\n  var offset = 8;\n  var numF = bin.readUint  (data, offset);  offset+=4;\n  var fnts = [];\n  for(var i=0; i<numF; i++) {\n    var foff = bin.readUint  (data, offset);  offset+=4;\n    fnts.push(Typr._cutFont(data, foff));\n    break;\n  }\n  return fnts;\n}\n\nTypr[\"_cutFont\"] = function(data,foff,hdrs,tabs,toff, noffs) {\n  var bin = Typr[\"B\"];\n  var numTables = bin.readUshort(data, foff+4);\n\n  var out = new Uint8Array(12+numTables*16);  hdrs.push(out);\n  for(var i=0; i<12; i++) out[i]=data[foff+i];  //console.log(out);\n\n  var off = 12;\n  for(var i=0; i<numTables; i++)\n  {\n    var tag      = bin.readASCII(data, foff+off, 4);\n    var checkSum = bin.readUint (data, foff+off+ 4);\n    var toffset  = bin.readUint (data, foff+off+ 8);\n    var length   = bin.readUint (data, foff+off+12);\n\n    while((length&3)!=0) length++;\n\n    for(var j=0; j<16; j++) out[off+j]=data[foff+off+j];\n\n    if(noffs[toffset]!=null) bin.writeUint(out,off+8,noffs[toffset]);\n    else {\n      noffs[toffset] = toff;\n      bin.writeUint(out, off+8, toff);\n      tabs.push(new Uint8Array(data.buffer, toffset, length));  toff+=length;\n    }\n    off+=16;\n  }\n  return toff;\n}\nTypr[\"_joinArrs\"] = function(tabs) {\n  var len = 0;\n  for(var i=0; i<tabs.length; i++) len+=tabs[i].length;\n  var out = new Uint8Array(len), ooff=0;\n  for(var i=0; i<tabs.length; i++) {\n    var tab = tabs[i];\n    for(var j=0; j<tab.length; j++) out[ooff+j]=tab[j];\n    ooff+=tab.length;\n  }\n  return out;\n}\n*/\n\nTypr[\"T\"] = {};\n\n\n\n\n\nTypr[\"B\"] = {\n  readFixed: function (data, o) {\n    return ((data[o] << 8) | data[o + 1]) + (((data[o + 2] << 8) | data[o + 3]) / (256 * 256 + 4));\n  },\n  readF2dot14: function (data, o) {\n    var num = Typr[\"B\"].readShort(data, o);\n    return num / 16384;\n  },\n  readInt: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p];\n    return Typr[\"B\"].t.int32[0];\n  },\n\n  readInt8: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[0] = buff[p];\n    return Typr[\"B\"].t.int8[0];\n  },\n  readShort: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint16;\n    a[0] = (buff[p] << 8) | buff[p + 1];\n    return Typr[\"B\"].t.int16[0];\n  },\n  readUshort: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    return (buff[p] << 8) | buff[p + 1];\n  },\n  writeUshort: function (buff, p, n) {\n    buff[p] = (n >> 8) & 255; buff[p + 1] = n & 255;\n  },\n  readUshorts: function (buff, p, len) {\n    var arr = [];\n    for (var i = 0; i < len; i++) {\n      var v = Typr[\"B\"].readUshort(buff, p + i * 2);  //if(v==932) console.log(p+i*2);\n      arr.push(v);\n    }\n    return arr;\n  },\n  readUint: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    var a = Typr[\"B\"].t.uint8;\n    a[3] = buff[p]; a[2] = buff[p + 1]; a[1] = buff[p + 2]; a[0] = buff[p + 3];\n    return Typr[\"B\"].t.uint32[0];\n  },\n  writeUint: function (buff, p, n) {\n    buff[p] = (n >> 24) & 255; buff[p + 1] = (n >> 16) & 255; buff[p + 2] = (n >> 8) & 255; buff[p + 3] = (n >> 0) & 255;\n  },\n  readUint64: function (buff, p) {\n    //if(p>=buff.length) throw \"error\";\n    return (Typr[\"B\"].readUint(buff, p) * (0xffffffff + 1)) + Typr[\"B\"].readUint(buff, p + 4);\n  },\n  readASCII: function (buff, p, l)\t// l : length in Characters (not Bytes)\n  {\n    //if(p>=buff.length) throw \"error\";\n    var s = \"\";\n    for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n    return s;\n  },\n  writeASCII: function (buff, p, s)\t// l : length in Characters (not Bytes)\n  {\n    for (var i = 0; i < s.length; i++)\n      buff[p + i] = s.charCodeAt(i);\n  },\n  readUnicode: function (buff, p, l) {\n    //if(p>=buff.length) throw \"error\";\n    var s = \"\";\n    for (var i = 0; i < l; i++) {\n      var c = (buff[p++] << 8) | buff[p++];\n      s += String.fromCharCode(c);\n    }\n    return s;\n  },\n  _tdec: window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\n  readUTF8: function (buff, p, l) {\n    var tdec = Typr[\"B\"]._tdec;\n    if (tdec && p == 0 && l == buff.length) return tdec[\"decode\"](buff);\n    return Typr[\"B\"].readASCII(buff, p, l);\n  },\n  readBytes: function (buff, p, l) {\n    //if(p>=buff.length) throw \"error\";\n    var arr = [];\n    for (var i = 0; i < l; i++) arr.push(buff[p + i]);\n    return arr;\n  },\n  readASCIIArray: function (buff, p, l)\t// l : length in Characters (not Bytes)\n  {\n    //if(p>=buff.length) throw \"error\";\n    var s = [];\n    for (var i = 0; i < l; i++)\n      s.push(String.fromCharCode(buff[p + i]));\n    return s;\n  },\n  t: function () {\n    var ab = new ArrayBuffer(8);\n    return {\n      buff: ab,\n      int8: new Int8Array(ab),\n      uint8: new Uint8Array(ab),\n      int16: new Int16Array(ab),\n      uint16: new Uint16Array(ab),\n      int32: new Int32Array(ab),\n      uint32: new Uint32Array(ab)\n    }\n  }()\n};\n\n\n\n\n\n\nTypr[\"T\"].CFF = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var CFF = Typr[\"T\"].CFF;\n\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n\n    // Header\n    data[offset]; offset++;\n    data[offset]; offset++;\n    data[offset]; offset++;\n    data[offset]; offset++;\n    //console.log(major, minor, hdrSize, offsize);\n\n    // Name INDEX\n    var ninds = [];\n    offset = CFF.readIndex(data, offset, ninds);\n    var names = [];\n\n    for (var i = 0; i < ninds.length - 1; i++) names.push(bin.readASCII(data, offset + ninds[i], ninds[i + 1] - ninds[i]));\n    offset += ninds[ninds.length - 1];\n\n\n    // Top DICT INDEX\n    var tdinds = [];\n    offset = CFF.readIndex(data, offset, tdinds);  //console.log(tdinds);\n    // Top DICT Data\n    var topDicts = [];\n    for (var i = 0; i < tdinds.length - 1; i++) topDicts.push(CFF.readDict(data, offset + tdinds[i], offset + tdinds[i + 1]));\n    offset += tdinds[tdinds.length - 1];\n    var topdict = topDicts[0];\n    //console.log(topdict);\n\n    // String INDEX\n    var sinds = [];\n    offset = CFF.readIndex(data, offset, sinds);\n    // String Data\n    var strings = [];\n    for (var i = 0; i < sinds.length - 1; i++) strings.push(bin.readASCII(data, offset + sinds[i], sinds[i + 1] - sinds[i]));\n    offset += sinds[sinds.length - 1];\n\n    // Global Subr INDEX  (subroutines)\n    CFF.readSubrs(data, offset, topdict);\n\n    // charstrings\n\n    if (topdict[\"CharStrings\"]) topdict[\"CharStrings\"] = CFF.readBytes(data, topdict[\"CharStrings\"]);\n\n    // CID font\n    if (topdict[\"ROS\"]) {\n      offset = topdict[\"FDArray\"];\n      var fdind = [];\n      offset = CFF.readIndex(data, offset, fdind);\n\n      topdict[\"FDArray\"] = [];\n      for (var i = 0; i < fdind.length - 1; i++) {\n        var dict = CFF.readDict(data, offset + fdind[i], offset + fdind[i + 1]);\n        CFF._readFDict(data, dict, strings);\n        topdict[\"FDArray\"].push(dict);\n      }\n      offset += fdind[fdind.length - 1];\n\n      offset = topdict[\"FDSelect\"];\n      topdict[\"FDSelect\"] = [];\n      var fmt = data[offset]; offset++;\n      if (fmt == 3) {\n        var rns = bin.readUshort(data, offset); offset += 2;\n        for (var i = 0; i < rns + 1; i++) {\n          topdict[\"FDSelect\"].push(bin.readUshort(data, offset), data[offset + 2]); offset += 3;\n        }\n      }\n      else throw fmt;\n    }\n\n    // Encoding\n    //if(topdict[\"Encoding\"]) topdict[\"Encoding\"] = CFF.readEncoding(data, topdict[\"Encoding\"], topdict[\"CharStrings\"].length);\n\n    // charset\n    if (topdict[\"charset\"]) topdict[\"charset\"] = CFF.readCharset(data, topdict[\"charset\"], topdict[\"CharStrings\"].length);\n\n    CFF._readFDict(data, topdict, strings);\n    return topdict;\n  },\n\n  _readFDict: function (data, dict, ss) {\n    var CFF = Typr[\"T\"].CFF;\n    var offset;\n    if (dict[\"Private\"]) {\n      offset = dict[\"Private\"][1];\n      dict[\"Private\"] = CFF.readDict(data, offset, offset + dict[\"Private\"][0]);\n      if (dict[\"Private\"][\"Subrs\"]) CFF.readSubrs(data, offset + dict[\"Private\"][\"Subrs\"], dict[\"Private\"]);\n    }\n    for (var p in dict) if ([\"FamilyName\", \"FontName\", \"FullName\", \"Notice\", \"version\", \"Copyright\"].indexOf(p) != -1) dict[p] = ss[dict[p] - 426 + 35];\n  },\n\n  readSubrs: function (data, offset, obj) {\n    obj[\"Subrs\"] = Typr[\"T\"].CFF.readBytes(data, offset);\n\n    var bias, nSubrs = obj[\"Subrs\"].length + 1;\n    if (nSubrs < 1240) bias = 107;\n    else if (nSubrs < 33900) bias = 1131;\n    else bias = 32768;\n    obj[\"Bias\"] = bias;\n  },\n  readBytes: function (data, offset) {\n    Typr[\"B\"];\n    var arr = [];\n    offset = Typr[\"T\"].CFF.readIndex(data, offset, arr);\n\n    var subrs = [], arl = arr.length - 1, no = data.byteOffset + offset;\n    for (var i = 0; i < arl; i++) {\n      var ari = arr[i];\n      subrs.push(new Uint8Array(data.buffer, no + ari, arr[i + 1] - ari));\n    }\n    return subrs;\n  },\n\n  tableSE: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    1, 2, 3, 4, 5, 6, 7, 8,\n    9, 10, 11, 12, 13, 14, 15, 16,\n    17, 18, 19, 20, 21, 22, 23, 24,\n    25, 26, 27, 28, 29, 30, 31, 32,\n    33, 34, 35, 36, 37, 38, 39, 40,\n    41, 42, 43, 44, 45, 46, 47, 48,\n    49, 50, 51, 52, 53, 54, 55, 56,\n    57, 58, 59, 60, 61, 62, 63, 64,\n    65, 66, 67, 68, 69, 70, 71, 72,\n    73, 74, 75, 76, 77, 78, 79, 80,\n    81, 82, 83, 84, 85, 86, 87, 88,\n    89, 90, 91, 92, 93, 94, 95, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 96, 97, 98, 99, 100, 101, 102,\n    103, 104, 105, 106, 107, 108, 109, 110,\n    0, 111, 112, 113, 114, 0, 115, 116,\n    117, 118, 119, 120, 121, 122, 0, 123,\n    0, 124, 125, 126, 127, 128, 129, 130,\n    131, 0, 132, 133, 0, 134, 135, 136,\n    137, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 138, 0, 139, 0, 0, 0, 0,\n    140, 141, 142, 143, 0, 0, 0, 0,\n    0, 144, 0, 0, 0, 145, 0, 0,\n    146, 147, 148, 149, 0, 0, 0, 0\n  ],\n\n  glyphByUnicode: function (cff, code) {\n    for (var i = 0; i < cff[\"charset\"].length; i++) if (cff[\"charset\"][i] == code) return i;\n    return -1;\n  },\n\n  glyphBySE: function (cff, charcode)\t// glyph by standard encoding\n  {\n    if (charcode < 0 || charcode > 255) return -1;\n    return Typr[\"T\"].CFF.glyphByUnicode(cff, Typr[\"T\"].CFF.tableSE[charcode]);\n  },\n\n  /*readEncoding : function(data, offset, num)\n  {\n    var bin = Typr[\"B\"];\n\n    var array = ['.notdef'];\n    var format = data[offset];  offset++;\n    //console.log(\"Encoding\");\n    //console.log(format);\n\n    if(format==0)\n    {\n      var nCodes = data[offset];  offset++;\n      for(var i=0; i<nCodes; i++)  array.push(data[offset+i]);\n    }\n    /*\n    else if(format==1 || format==2)\n    {\n      while(charset.length<num)\n      {\n        var first = bin.readUshort(data, offset);  offset+=2;\n        var nLeft=0;\n        if(format==1) {  nLeft = data[offset];  offset++;  }\n        else          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n        for(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n      }\n    }\n\n    else throw \"error: unknown encoding format: \" + format;\n\n    return array;\n  },*/\n\n  readCharset: function (data, offset, num) {\n    var bin = Typr[\"B\"];\n\n    var charset = ['.notdef'];\n    var format = data[offset]; offset++;\n\n    if (format == 0) {\n      for (var i = 0; i < num; i++) {\n        var first = bin.readUshort(data, offset); offset += 2;\n        charset.push(first);\n      }\n    }\n    else if (format == 1 || format == 2) {\n      while (charset.length < num) {\n        var first = bin.readUshort(data, offset); offset += 2;\n        var nLeft = 0;\n        if (format == 1) { nLeft = data[offset]; offset++; }\n        else { nLeft = bin.readUshort(data, offset); offset += 2; }\n        for (var i = 0; i <= nLeft; i++) { charset.push(first); first++; }\n      }\n    }\n    else throw \"error: format: \" + format;\n\n    return charset;\n  },\n\n  readIndex: function (data, offset, inds) {\n    var bin = Typr[\"B\"];\n\n    var count = bin.readUshort(data, offset) + 1; offset += 2;\n    var offsize = data[offset]; offset++;\n\n    if (offsize == 1) for (var i = 0; i < count; i++) inds.push(data[offset + i]);\n    else if (offsize == 2) for (var i = 0; i < count; i++) inds.push(bin.readUshort(data, offset + i * 2));\n    else if (offsize == 3) for (var i = 0; i < count; i++) inds.push(bin.readUint(data, offset + i * 3 - 1) & 0x00ffffff);\n    else if (offsize == 4) for (var i = 0; i < count; i++) inds.push(bin.readUint(data, offset + i * 4));\n    else if (count != 1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\n\n    offset += count * offsize;\n    return offset - 1;\n  },\n\n  getCharString: function (data, offset, o) {\n    var bin = Typr[\"B\"];\n\n    var b0 = data[offset], b1 = data[offset + 1]; data[offset + 2]; data[offset + 3]; data[offset + 4];\n    var vs = 1;\n    var op = null, val = null;\n    // operand\n    if (b0 <= 20) { op = b0; vs = 1; }\n    if (b0 == 12) { op = b0 * 100 + b1; vs = 2; }\n    //if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n    if (21 <= b0 && b0 <= 27) { op = b0; vs = 1; }\n    if (b0 == 28) { val = bin.readShort(data, offset + 1); vs = 3; }\n    if (29 <= b0 && b0 <= 31) { op = b0; vs = 1; }\n    if (32 <= b0 && b0 <= 246) { val = b0 - 139; vs = 1; }\n    if (247 <= b0 && b0 <= 250) { val = (b0 - 247) * 256 + b1 + 108; vs = 2; }\n    if (251 <= b0 && b0 <= 254) { val = -(b0 - 251) * 256 - b1 - 108; vs = 2; }\n    if (b0 == 255) { val = bin.readInt(data, offset + 1) / 0xffff; vs = 5; }\n\n    o.val = val != null ? val : \"o\" + op;\n    o.size = vs;\n  },\n\n  readCharString: function (data, offset, length) {\n    var end = offset + length;\n    var bin = Typr[\"B\"];\n    var arr = [];\n\n    while (offset < end) {\n      var b0 = data[offset], b1 = data[offset + 1]; data[offset + 2]; data[offset + 3]; data[offset + 4];\n      var vs = 1;\n      var op = null, val = null;\n      // operand\n      if (b0 <= 20) { op = b0; vs = 1; }\n      if (b0 == 12) { op = b0 * 100 + b1; vs = 2; }\n      if (b0 == 19 || b0 == 20) { op = b0/*+\" \"+b1*/; vs = 2; }\n      if (21 <= b0 && b0 <= 27) { op = b0; vs = 1; }\n      if (b0 == 28) { val = bin.readShort(data, offset + 1); vs = 3; }\n      if (29 <= b0 && b0 <= 31) { op = b0; vs = 1; }\n      if (32 <= b0 && b0 <= 246) { val = b0 - 139; vs = 1; }\n      if (247 <= b0 && b0 <= 250) { val = (b0 - 247) * 256 + b1 + 108; vs = 2; }\n      if (251 <= b0 && b0 <= 254) { val = -(b0 - 251) * 256 - b1 - 108; vs = 2; }\n      if (b0 == 255) { val = bin.readInt(data, offset + 1) / 0xffff; vs = 5; }\n\n      arr.push(val != null ? val : \"o\" + op);\n      offset += vs;\n\n      //var cv = arr[arr.length-1];\n      //if(cv==undefined) throw \"error\";\n      //console.log()\n    }\n    return arr;\n  },\n\n  readDict: function (data, offset, end) {\n    var bin = Typr[\"B\"];\n    //var dict = [];\n    var dict = {};\n    var carr = [];\n\n    while (offset < end) {\n      var b0 = data[offset], b1 = data[offset + 1]; data[offset + 2]; data[offset + 3]; data[offset + 4];\n      var vs = 1;\n      var key = null, val = null;\n      // operand\n      if (b0 == 28) { val = bin.readShort(data, offset + 1); vs = 3; }\n      if (b0 == 29) { val = bin.readInt(data, offset + 1); vs = 5; }\n      if (32 <= b0 && b0 <= 246) { val = b0 - 139; vs = 1; }\n      if (247 <= b0 && b0 <= 250) { val = (b0 - 247) * 256 + b1 + 108; vs = 2; }\n      if (251 <= b0 && b0 <= 254) { val = -(b0 - 251) * 256 - b1 - 108; vs = 2; }\n      if (b0 == 255) { val = bin.readInt(data, offset + 1) / 0xffff; vs = 5; throw \"unknown number\"; }\n\n      if (b0 == 30) {\n        var nibs = [];\n        vs = 1;\n        while (true) {\n          var b = data[offset + vs]; vs++;\n          var nib0 = b >> 4, nib1 = b & 0xf;\n          if (nib0 != 0xf) nibs.push(nib0); if (nib1 != 0xf) nibs.push(nib1);\n          if (nib1 == 0xf) break;\n        }\n        var s = \"\";\n        var chars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\", \"e\", \"e-\", \"reserved\", \"-\", \"endOfNumber\"];\n        for (var i = 0; i < nibs.length; i++) s += chars[nibs[i]];\n        //console.log(nibs);\n        val = parseFloat(s);\n      }\n\n      if (b0 <= 21)\t// operator\n      {\n        var keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\",\n          \"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\",\n          \"defaultWidthX\", \"nominalWidthX\"];\n\n        key = keys[b0]; vs = 1;\n        if (b0 == 12) {\n          var keys = [\"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\",\n            \"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", \"\", \"\", \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\",\n            \"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", \"\", \"\", \"\", \"\", \"\", \"\",\n            \"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\n          key = keys[b1]; vs = 2;\n        }\n      }\n\n      if (key != null) { dict[key] = carr.length == 1 ? carr[0] : carr; carr = []; }\n      else carr.push(val);\n\n      offset += vs;\n    }\n    return dict;\n  }\n};\n\n\nTypr[\"T\"].cmap = {\n  parseTab: function (data, offset, length) {\n    var obj = { tables: [], ids: {}, off: offset };\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n    var bin = Typr[\"B\"], rU = bin.readUshort, cmap = Typr[\"T\"].cmap;\n    rU(data, offset); offset += 2;\n    var numTables = rU(data, offset); offset += 2;\n\n    //console.log(version, numTables);\n\n    var offs = [];\n\n\n    for (var i = 0; i < numTables; i++) {\n      var platformID = rU(data, offset); offset += 2;\n      var encodingID = rU(data, offset); offset += 2;\n      var noffset = bin.readUint(data, offset); offset += 4;\n\n      var id = \"p\" + platformID + \"e\" + encodingID;\n\n      //console.log(\"cmap subtable\", platformID, encodingID, noffset);\n\n\n      var tind = offs.indexOf(noffset);\n\n      if (tind == -1) {\n        tind = obj.tables.length;\n        var subt = {};\n        offs.push(noffset);\n        //var time = Date.now();\n        var format = subt.format = rU(data, noffset);\n        if (format == 0) subt = cmap.parse0(data, noffset, subt);\n        //else if(format== 2) subt.off = noffset;\n        else if (format == 4) subt = cmap.parse4(data, noffset, subt);\n        else if (format == 6) subt = cmap.parse6(data, noffset, subt);\n        else if (format == 12) subt = cmap.parse12(data, noffset, subt);\n        //console.log(format, Date.now()-time);\n        //else console.log(\"unknown format: \"+format, platformID, encodingID, noffset);\n        obj.tables.push(subt);\n      }\n\n      if (obj.ids[id] != null) console.log(\"multiple tables for one platform+encoding: \" + id);\n      obj.ids[id] = tind;\n    }\n    return obj;\n  },\n\n  parse0: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset += 2;\n    var len = bin.readUshort(data, offset); offset += 2;\n    bin.readUshort(data, offset); offset += 2;\n    obj.map = [];\n    for (var i = 0; i < len - 6; i++) obj.map.push(data[offset + i]);\n    return obj;\n  },\n\n  parse4: function (data, offset, obj) {\n    var bin = Typr[\"B\"], rU = bin.readUshort, rUs = bin.readUshorts;\n    var offset0 = offset;\n    offset += 2;\n    var length = rU(data, offset); offset += 2;\n    rU(data, offset); offset += 2;\n    var segCountX2 = rU(data, offset); offset += 2;\n    var segCount = segCountX2 >>> 1;\n    obj.searchRange = rU(data, offset); offset += 2;\n    obj.entrySelector = rU(data, offset); offset += 2;\n    obj.rangeShift = rU(data, offset); offset += 2;\n    obj.endCount = rUs(data, offset, segCount); offset += segCount * 2;\n    offset += 2;\n    obj.startCount = rUs(data, offset, segCount); offset += segCount * 2;\n    obj.idDelta = [];\n    for (var i = 0; i < segCount; i++) { obj.idDelta.push(bin.readShort(data, offset)); offset += 2; }\n    obj.idRangeOffset = rUs(data, offset, segCount); offset += segCount * 2;\n    obj.glyphIdArray = rUs(data, offset, ((offset0 + length) - offset) >> 1);  //offset += segCount*2;\n    return obj;\n  },\n\n  parse6: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset += 2;\n    bin.readUshort(data, offset); offset += 2;\n    bin.readUshort(data, offset); offset += 2;\n    obj.firstCode = bin.readUshort(data, offset); offset += 2;\n    var entryCount = bin.readUshort(data, offset); offset += 2;\n    obj.glyphIdArray = [];\n    for (var i = 0; i < entryCount; i++) { obj.glyphIdArray.push(bin.readUshort(data, offset)); offset += 2; }\n\n    return obj;\n  },\n\n  parse12: function (data, offset, obj) {\n    var bin = Typr[\"B\"], rU = bin.readUint;\n    offset += 4;\n    rU(data, offset); offset += 4;\n    rU(data, offset); offset += 4;\n    var nGroups = rU(data, offset) * 3; offset += 4;\n\n    var gps = obj.groups = new Uint32Array(nGroups);//new Uint32Array(data.slice(offset, offset+nGroups*12).buffer);\n\n    for (var i = 0; i < nGroups; i += 3) {\n      gps[i] = rU(data, offset + (i << 2));\n      gps[i + 1] = rU(data, offset + (i << 2) + 4);\n      gps[i + 2] = rU(data, offset + (i << 2) + 8);\n    }\n    return obj;\n  }\n};\n\nTypr[\"T\"].CBLC = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"], ooff = offset;\n\n    bin.readUshort(data, offset); offset += 2;\n    bin.readUshort(data, offset); offset += 2;\n\n    var numSizes = bin.readUint(data, offset); offset += 4;\n\n    var out = [];\n    for (var i = 0; i < numSizes; i++) {\n      var off = bin.readUint(data, offset); offset += 4;  // indexSubTableArrayOffset\n      bin.readUint(data, offset); offset += 4;  // indexTablesSize\n      bin.readUint(data, offset); offset += 4;  // numberOfIndexSubTables\n      offset += 4;\n\n      offset += 2 * 12;\n\n      bin.readUshort(data, offset); offset += 2;\n      bin.readUshort(data, offset); offset += 2;\n\n      //console.log(off,siz,num, sGlyph, eGlyph);\n\n      offset += 4;\n\n      var coff = ooff + off;\n      for (var j = 0; j < 3; j++) {\n        var fgI = bin.readUshort(data, coff); coff += 2;\n        var lgI = bin.readUshort(data, coff); coff += 2;\n        var nxt = bin.readUint(data, coff); coff += 4;\n        var gcnt = lgI - fgI + 1;\n        //console.log(fgI, lgI, nxt);   //if(nxt==0) break;\n\n        var ioff = ooff + off + nxt;\n\n        var inF = bin.readUshort(data, ioff); ioff += 2; if (inF != 1) throw inF;\n        var imF = bin.readUshort(data, ioff); ioff += 2;\n        var imgo = bin.readUint(data, ioff); ioff += 4;\n\n        var oarr = [];\n        for (var gi = 0; gi < gcnt; gi++) {\n          var sbitO = bin.readUint(data, ioff + gi * 4); oarr.push(imgo + sbitO);\n          //console.log(\"--\",sbitO);\n        }\n        out.push([fgI, lgI, imF, oarr]);\n      }\n    }\n    return out;\n  }\n};\n\nTypr[\"T\"].CBDT = {\n  parseTab: function (data, offset, length) {\n    Typr[\"B\"];\n\n    //var maj = bin.readUshort(data,offset);  offset+=2;\n    //var min = bin.readUshort(data,offset);  offset+=2;\n\n    return new Uint8Array(data.buffer, data.byteOffset + offset, length);\n  }\n};\n\nTypr[\"T\"].glyf = {\n  parseTab: function (data, offset, length, font) {\n    var obj = [], ng = font[\"maxp\"][\"numGlyphs\"];\n    for (var g = 0; g < ng; g++) obj.push(null);\n    return obj;\n  },\n\n  _parseGlyf: function (font, g) {\n    var bin = Typr[\"B\"];\n    var data = font[\"_data\"], loca = font[\"loca\"];\n\n    if (loca[g] == loca[g + 1]) return null;\n\n    var offset = Typr[\"findTable\"](data, \"glyf\", font[\"_offset\"])[0] + loca[g];\n\n    var gl = {};\n\n    gl.noc = bin.readShort(data, offset); offset += 2;\t\t// number of contours\n    gl.xMin = bin.readShort(data, offset); offset += 2;\n    gl.yMin = bin.readShort(data, offset); offset += 2;\n    gl.xMax = bin.readShort(data, offset); offset += 2;\n    gl.yMax = bin.readShort(data, offset); offset += 2;\n\n    if (gl.xMin >= gl.xMax || gl.yMin >= gl.yMax) return null;\n\n    if (gl.noc > 0) {\n      gl.endPts = [];\n      for (var i = 0; i < gl.noc; i++) { gl.endPts.push(bin.readUshort(data, offset)); offset += 2; }\n\n      var instructionLength = bin.readUshort(data, offset); offset += 2;\n      if ((data.length - offset) < instructionLength) return null;\n      gl.instructions = bin.readBytes(data, offset, instructionLength); offset += instructionLength;\n\n      var crdnum = gl.endPts[gl.noc - 1] + 1;\n      gl.flags = [];\n      for (var i = 0; i < crdnum; i++) {\n        var flag = data[offset]; offset++;\n        gl.flags.push(flag);\n        if ((flag & 8) != 0) {\n          var rep = data[offset]; offset++;\n          for (var j = 0; j < rep; j++) { gl.flags.push(flag); i++; }\n        }\n      }\n      gl.xs = [];\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = ((gl.flags[i] & 2) != 0), same = ((gl.flags[i] & 16) != 0);\n        if (i8) { gl.xs.push(same ? data[offset] : -data[offset]); offset++; }\n        else {\n          if (same) gl.xs.push(0);\n          else { gl.xs.push(bin.readShort(data, offset)); offset += 2; }\n        }\n      }\n      gl.ys = [];\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = ((gl.flags[i] & 4) != 0), same = ((gl.flags[i] & 32) != 0);\n        if (i8) { gl.ys.push(same ? data[offset] : -data[offset]); offset++; }\n        else {\n          if (same) gl.ys.push(0);\n          else { gl.ys.push(bin.readShort(data, offset)); offset += 2; }\n        }\n      }\n      var x = 0, y = 0;\n      for (var i = 0; i < crdnum; i++) { x += gl.xs[i]; y += gl.ys[i]; gl.xs[i] = x; gl.ys[i] = y; }\n      //console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n    }\n    else {\n      var ARG_1_AND_2_ARE_WORDS = 1 << 0;\n      var ARGS_ARE_XY_VALUES = 1 << 1;\n      var WE_HAVE_A_SCALE = 1 << 3;\n      var MORE_COMPONENTS = 1 << 5;\n      var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\n      var WE_HAVE_A_TWO_BY_TWO = 1 << 7;\n      var WE_HAVE_INSTRUCTIONS = 1 << 8;\n\n      gl.parts = [];\n      var flags;\n      do {\n        flags = bin.readUshort(data, offset); offset += 2;\n        var part = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 }; gl.parts.push(part);\n        part.glyphIndex = bin.readUshort(data, offset); offset += 2;\n        if (flags & ARG_1_AND_2_ARE_WORDS) {\n          var arg1 = bin.readShort(data, offset); offset += 2;\n          var arg2 = bin.readShort(data, offset); offset += 2;\n        } else {\n          var arg1 = bin.readInt8(data, offset); offset++;\n          var arg2 = bin.readInt8(data, offset); offset++;\n        }\n\n        if (flags & ARGS_ARE_XY_VALUES) { part.m.tx = arg1; part.m.ty = arg2; }\n        else { part.p1 = arg1; part.p2 = arg2; }\n        //part.m.tx = arg1;  part.m.ty = arg2;\n        //else { throw \"params are not XY values\"; }\n\n        if (flags & WE_HAVE_A_SCALE) {\n          part.m.a = part.m.d = bin.readF2dot14(data, offset); offset += 2;\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          part.m.a = bin.readF2dot14(data, offset); offset += 2;\n          part.m.d = bin.readF2dot14(data, offset); offset += 2;\n        } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          part.m.a = bin.readF2dot14(data, offset); offset += 2;\n          part.m.b = bin.readF2dot14(data, offset); offset += 2;\n          part.m.c = bin.readF2dot14(data, offset); offset += 2;\n          part.m.d = bin.readF2dot14(data, offset); offset += 2;\n        }\n      } while (flags & MORE_COMPONENTS)\n      if (flags & WE_HAVE_INSTRUCTIONS) {\n        var numInstr = bin.readUshort(data, offset); offset += 2;\n        gl.instr = [];\n        for (var i = 0; i < numInstr; i++) { gl.instr.push(data[offset]); offset++; }\n      }\n    }\n    return gl;\n  }\n};\n\nTypr[\"T\"].head = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readFixed(data, offset); offset += 4;\n\n    obj[\"fontRevision\"] = bin.readFixed(data, offset); offset += 4;\n    bin.readUint(data, offset); offset += 4;\n    bin.readUint(data, offset); offset += 4;\n    obj[\"flags\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"unitsPerEm\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"created\"] = bin.readUint64(data, offset); offset += 8;\n    obj[\"modified\"] = bin.readUint64(data, offset); offset += 8;\n    obj[\"xMin\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"yMin\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"xMax\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"yMax\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"macStyle\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"lowestRecPPEM\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"fontDirectionHint\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"indexToLocFormat\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"glyphDataFormat\"] = bin.readShort(data, offset); offset += 2;\n    return obj;\n  }\n};\n\nTypr[\"T\"].hhea = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readFixed(data, offset); offset += 4;\n\n    var keys = [\"ascender\", \"descender\", \"lineGap\",\n      \"advanceWidthMax\", \"minLeftSideBearing\", \"minRightSideBearing\", \"xMaxExtent\",\n      \"caretSlopeRise\", \"caretSlopeRun\", \"caretOffset\",\n      \"res0\", \"res1\", \"res2\", \"res3\",\n      \"metricDataFormat\", \"numberOfHMetrics\"];\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var func = (key == \"advanceWidthMax\" || key == \"numberOfHMetrics\") ? bin.readUshort : bin.readShort;\n      obj[key] = func(data, offset + i * 2);\n    }\n    return obj;\n  }\n};\n\n\nTypr[\"T\"].hmtx = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"];\n    var aWidth = [];\n    var lsBearing = [];\n\n    var nG = font[\"maxp\"][\"numGlyphs\"], nH = font[\"hhea\"][\"numberOfHMetrics\"];\n    var aw = 0, lsb = 0, i = 0;\n    while (i < nH) { aw = bin.readUshort(data, offset + (i << 2)); lsb = bin.readShort(data, offset + (i << 2) + 2); aWidth.push(aw); lsBearing.push(lsb); i++; }\n    while (i < nG) { aWidth.push(aw); lsBearing.push(lsb); i++; }\n\n    return { aWidth: aWidth, lsBearing: lsBearing };\n  }\n};\n\n\nTypr[\"T\"].kern = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"], kern = Typr[\"T\"].kern;\n\n    var version = bin.readUshort(data, offset);\n    if (version == 1) return kern.parseV1(data, offset, length, font);\n    var nTables = bin.readUshort(data, offset + 2); offset += 4;\n\n    var map = { glyph1: [], rval: [] };\n    for (var i = 0; i < nTables; i++) {\n      offset += 2;\t// skip version\n      var length = bin.readUshort(data, offset); offset += 2;\n      var coverage = bin.readUshort(data, offset); offset += 2;\n      var format = coverage >>> 8;\n\t\t\t/* I have seen format 128 once, that's why I do */ format &= 0xf;\n      if (format == 0) offset = kern.readFormat0(data, offset, map);\n      //else throw \"unknown kern table format: \"+format;\n    }\n    return map;\n  },\n\n  parseV1: function (data, offset, length, font) {\n    var bin = Typr[\"B\"], kern = Typr[\"T\"].kern;\n\n    bin.readFixed(data, offset);   // 0x00010000\n    var nTables = bin.readUint(data, offset + 4); offset += 8;\n\n    var map = { glyph1: [], rval: [] };\n    for (var i = 0; i < nTables; i++) {\n      bin.readUint(data, offset); offset += 4;\n      var coverage = bin.readUshort(data, offset); offset += 2;\n      bin.readUshort(data, offset); offset += 2;\n      var format = coverage & 0xff;\n      if (format == 0) offset = kern.readFormat0(data, offset, map);\n      //else throw \"unknown kern table format: \"+format;\n    }\n    return map;\n  },\n\n  readFormat0: function (data, offset, map) {\n    var bin = Typr[\"B\"], rUs = bin.readUshort;\n    var pleft = -1;\n    var nPairs = rUs(data, offset);\n    rUs(data, offset + 2);\n    rUs(data, offset + 4);\n    rUs(data, offset + 6); offset += 8;\n    for (var j = 0; j < nPairs; j++) {\n      var left = rUs(data, offset); offset += 2;\n      var right = rUs(data, offset); offset += 2;\n      var value = bin.readShort(data, offset); offset += 2;\n      if (left != pleft) { map.glyph1.push(left); map.rval.push({ glyph2: [], vals: [] }); }\n      var rval = map.rval[map.rval.length - 1];\n      rval.glyph2.push(right); rval.vals.push(value);\n      pleft = left;\n    }\n    return offset;\n  }\n};\n\n\nTypr[\"T\"].loca = {\n  parseTab: function (data, offset, length, font) {\n    var bin = Typr[\"B\"];\n    var obj = [];\n\n    var ver = font[\"head\"][\"indexToLocFormat\"];\n    var len = font[\"maxp\"][\"numGlyphs\"] + 1;\n\n    if (ver == 0) for (var i = 0; i < len; i++) obj.push(bin.readUshort(data, offset + (i << 1)) << 1);\n    if (ver == 1) for (var i = 0; i < len; i++) obj.push(bin.readUint(data, offset + (i << 2)));\n\n    return obj;\n  }\n};\n\n\nTypr[\"T\"].maxp = {\n  parseTab: function (data, offset, length) {\n    //console.log(data.length, offset, length);\n\n    var bin = Typr[\"B\"], rU = bin.readUshort;\n    var obj = {};\n\n    // both versions 0.5 and 1.0\n    bin.readUint(data, offset); offset += 4;\n\n    obj[\"numGlyphs\"] = rU(data, offset); offset += 2;\n\n    // only 1.0\n    /*\n    if(ver == 0x00010000) {\n      obj.maxPoints             = rU(data, offset);  offset += 2;\n      obj.maxContours           = rU(data, offset);  offset += 2;\n      obj.maxCompositePoints    = rU(data, offset);  offset += 2;\n      obj.maxCompositeContours  = rU(data, offset);  offset += 2;\n      obj.maxZones              = rU(data, offset);  offset += 2;\n      obj.maxTwilightPoints     = rU(data, offset);  offset += 2;\n      obj.maxStorage            = rU(data, offset);  offset += 2;\n      obj.maxFunctionDefs       = rU(data, offset);  offset += 2;\n      obj.maxInstructionDefs    = rU(data, offset);  offset += 2;\n      obj.maxStackElements      = rU(data, offset);  offset += 2;\n      obj.maxSizeOfInstructions = rU(data, offset);  offset += 2;\n      obj.maxComponentElements  = rU(data, offset);  offset += 2;\n      obj.maxComponentDepth     = rU(data, offset);  offset += 2;\n    }\n    */\n\n    return obj;\n  }\n};\nTypr[\"T\"].name = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n    bin.readUshort(data, offset); offset += 2;\n    var count = bin.readUshort(data, offset); offset += 2;\n    var stringOffset = bin.readUshort(data, offset); offset += 2;\n\n    var ooo = offset - 6 + stringOffset;\n    //console.log(format,count);\n\n    var names = [\n      \"copyright\",\n      \"fontFamily\",\n      \"fontSubfamily\",\n      \"ID\",\n      \"fullName\",\n      \"version\",\n      \"postScriptName\",\n      \"trademark\",\n      \"manufacturer\",\n      \"designer\",\n      \"description\",\n      \"urlVendor\",\n      \"urlDesigner\",\n      \"licence\",\n      \"licenceURL\",\n      \"---\",\n      \"typoFamilyName\",\n      \"typoSubfamilyName\",\n      \"compatibleFull\",\n      \"sampleText\",\n      \"postScriptCID\",\n      \"wwsFamilyName\",\n      \"wwsSubfamilyName\",\n      \"lightPalette\",\n      \"darkPalette\"\n    ];\n\n    var rU = bin.readUshort;\n\n    for (var i = 0; i < count; i++) {\n      var platformID = rU(data, offset); offset += 2;\n      var encodingID = rU(data, offset); offset += 2;\n      var languageID = rU(data, offset); offset += 2;\n      var nameID = rU(data, offset); offset += 2;\n      var slen = rU(data, offset); offset += 2;\n      var noffset = rU(data, offset); offset += 2;\n      //console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n\n\n      var soff = ooo + noffset;\n      var str;\n      if (platformID == 0) str = bin.readUnicode(data, soff, slen / 2);\n      else if (platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen / 2);\n      else if (platformID == 1 && encodingID == 25) str = bin.readUnicode(data, soff, slen / 2);\n      else if (encodingID == 0) str = bin.readASCII(data, soff, slen);\n      else if (encodingID == 1) str = bin.readUnicode(data, soff, slen / 2);\n      else if (encodingID == 3) str = bin.readUnicode(data, soff, slen / 2);\n      else if (encodingID == 4) str = bin.readUnicode(data, soff, slen / 2);\n      else if (encodingID == 5) str = bin.readUnicode(data, soff, slen / 2);\n      else if (encodingID == 10) str = bin.readUnicode(data, soff, slen / 2);\n\n      else if (platformID == 1) { str = bin.readASCII(data, soff, slen); console.log(\"reading unknown MAC encoding \" + encodingID + \" as ASCII\"); }\n      else {\n        console.log(\"unknown encoding \" + encodingID + \", platformID: \" + platformID);\n        str = bin.readASCII(data, soff, slen);\n      }\n\n      var tid = \"p\" + platformID + \",\" + (languageID).toString(16);//Typr._platforms[platformID];\n      if (obj[tid] == null) obj[tid] = {};\n      var name = names[nameID]; if (name == null) name = \"_\" + nameID;\n      obj[tid][name] = str;\n      obj[tid][\"_lang\"] = languageID;\n      //console.log(tid, obj[tid]);\n    }\n    /*\n    if(format == 1)\n    {\n      var langTagCount = bin.readUshort(data, offset);  offset += 2;\n      for(var i=0; i<langTagCount; i++)\n      {\n        var length  = bin.readUshort(data, offset);  offset += 2;\n        var noffset = bin.readUshort(data, offset);  offset += 2;\n      }\n    }\n    */\n    var out = Typr[\"T\"].name.selectOne(obj), ff = \"fontFamily\";\n    if (out[ff] == null) for (var p in obj) if (obj[p][ff] != null) out[ff] = obj[p][ff];\n    return out;\n  },\n  selectOne: function (obj) {\n    //console.log(obj);\n    var psn = \"postScriptName\";\n\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0409) return obj[p];\t\t// United States\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0000) return obj[p];\t\t// Universal\n    for (var p in obj) if (obj[p][psn] != null && obj[p][\"_lang\"] == 0x0c0c) return obj[p];\t\t// Canada\n    for (var p in obj) if (obj[p][psn] != null) return obj[p];\n\n    var out;\n    for (var p in obj) { out = obj[p]; break; }\n    console.log(\"returning name table with languageID \" + out._lang);\n    if (out[psn] == null && out[\"ID\"] != null) out[psn] = out[\"ID\"];\n    return out;\n  }\n};\n\nTypr[\"T\"].OS2 = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ver = bin.readUshort(data, offset); offset += 2;\n\n    var OS2 = Typr[\"T\"].OS2;\n\n    var obj = {};\n    if (ver == 0) OS2.version0(data, offset, obj);\n    else if (ver == 1) OS2.version1(data, offset, obj);\n    else if (ver == 2 || ver == 3 || ver == 4) OS2.version2(data, offset, obj);\n    else if (ver == 5) OS2.version5(data, offset, obj);\n    else throw \"unknown OS/2 table version: \" + ver;\n\n    return obj;\n  },\n\n  version0: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    obj[\"xAvgCharWidth\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"usWeightClass\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"usWidthClass\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"fsType\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"ySubscriptXSize\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySubscriptYSize\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySubscriptXOffset\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySubscriptYOffset\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySuperscriptXSize\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySuperscriptYSize\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySuperscriptXOffset\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"ySuperscriptYOffset\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"yStrikeoutSize\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"yStrikeoutPosition\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"sFamilyClass\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"panose\"] = bin.readBytes(data, offset, 10); offset += 10;\n    obj[\"ulUnicodeRange1\"] = bin.readUint(data, offset); offset += 4;\n    obj[\"ulUnicodeRange2\"] = bin.readUint(data, offset); offset += 4;\n    obj[\"ulUnicodeRange3\"] = bin.readUint(data, offset); offset += 4;\n    obj[\"ulUnicodeRange4\"] = bin.readUint(data, offset); offset += 4;\n    obj[\"achVendID\"] = bin.readASCII(data, offset, 4); offset += 4;\n    obj[\"fsSelection\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"usFirstCharIndex\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"usLastCharIndex\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"sTypoAscender\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"sTypoDescender\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"sTypoLineGap\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"usWinAscent\"] = bin.readUshort(data, offset); offset += 2;\n    obj[\"usWinDescent\"] = bin.readUshort(data, offset); offset += 2;\n    return offset;\n  },\n\n  version1: function (data, offset, obj) {\n    var bin = Typr[\"B\"];\n    offset = Typr[\"T\"].OS2.version0(data, offset, obj);\n\n    obj[\"ulCodePageRange1\"] = bin.readUint(data, offset); offset += 4;\n    obj[\"ulCodePageRange2\"] = bin.readUint(data, offset); offset += 4;\n    return offset;\n  },\n\n  version2: function (data, offset, obj) {\n    var bin = Typr[\"B\"], rU = bin.readUshort;\n    offset = Typr[\"T\"].OS2.version1(data, offset, obj);\n\n    obj[\"sxHeight\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"sCapHeight\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"usDefault\"] = rU(data, offset); offset += 2;\n    obj[\"usBreak\"] = rU(data, offset); offset += 2;\n    obj[\"usMaxContext\"] = rU(data, offset); offset += 2;\n    return offset;\n  },\n\n  version5: function (data, offset, obj) {\n    var rU = Typr[\"B\"].readUshort;\n    offset = Typr[\"T\"].OS2.version2(data, offset, obj);\n\n    obj[\"usLowerOpticalPointSize\"] = rU(data, offset); offset += 2;\n    obj[\"usUpperOpticalPointSize\"] = rU(data, offset); offset += 2;\n    return offset;\n  }\n};\n\nTypr[\"T\"].post = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = {};\n\n    obj[\"version\"] = bin.readFixed(data, offset); offset += 4;\n    obj[\"italicAngle\"] = bin.readFixed(data, offset); offset += 4;\n    obj[\"underlinePosition\"] = bin.readShort(data, offset); offset += 2;\n    obj[\"underlineThickness\"] = bin.readShort(data, offset); offset += 2;\n\n    return obj;\n  }\n};\nTypr[\"T\"].SVG = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var obj = { entries: [], svgs: [] };\n\n    var offset0 = offset;\n\n    bin.readUshort(data, offset); offset += 2;\n    var svgDocIndexOffset = bin.readUint(data, offset); offset += 4;\n    bin.readUint(data, offset); offset += 4;\n\n    offset = svgDocIndexOffset + offset0;\n\n    var numEntries = bin.readUshort(data, offset); offset += 2;\n\n    for (var i = 0; i < numEntries; i++) {\n      var startGlyphID = bin.readUshort(data, offset); offset += 2;\n      var endGlyphID = bin.readUshort(data, offset); offset += 2;\n      var svgDocOffset = bin.readUint(data, offset); offset += 4;\n      var svgDocLength = bin.readUint(data, offset); offset += 4;\n\n      var sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n      if (sbuf[0] == 0x1f && sbuf[1] == 0x8b && sbuf[2] == 0x08) sbuf = pako[\"inflate\"](sbuf);\n      var svg = bin.readUTF8(sbuf, 0, sbuf.length);\n\n      for (var f = startGlyphID; f <= endGlyphID; f++) {\n        obj.entries[f] = obj.svgs.length;\n      }\n      obj.svgs.push(svg);\n    }\n    return obj;\n  }\n};\n\n\nTypr[\"T\"].sbix = {\n  parseTab: function (data, offset, length, obj) {\n    var numGlyphs = obj[\"maxp\"][\"numGlyphs\"];\n    var ooff = offset;\n    var bin = Typr[\"B\"];\n\n    //var ver = bin.readUshort(data,offset);  offset+=2;\n    //var flg = bin.readUshort(data,offset);  offset+=2;\n\n    var numStrikes = bin.readUint(data, offset + 4);\n\n    var out = [];\n    for (var si = numStrikes - 1; si < numStrikes; si++) {\n      var off = ooff + bin.readUint(data, offset + 8 + si * 4);\n\n      //var ppem = bin.readUshort(data,off);  off+=2;\n      //var ppi  = bin.readUshort(data,off);  off+=2;\n\n      for (var gi = 0; gi < numGlyphs; gi++) {\n        var aoff = bin.readUint(data, off + 4 + gi * 4);\n        var noff = bin.readUint(data, off + 4 + gi * 4 + 4); if (aoff == noff) { out[gi] = null; continue; }\n        var go = off + aoff;\n        //var ooX = bin.readUshort(data,go);\n        //var ooY = bin.readUshort(data,go+2);\n        var tag = bin.readASCII(data, go + 4, 4); if (tag != \"png \") throw tag;\n\n        out[gi] = new Uint8Array(data.buffer, data.byteOffset + go + 8, noff - aoff - 8);\n      }\n    }\n    return out;\n  }\n};\n\nTypr[\"T\"].colr = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ooff = offset;\n    offset += 2;\n    var num = bin.readUshort(data, offset); offset += 2;\n\n    var boff = bin.readUint(data, offset); offset += 4;\n    var loff = bin.readUint(data, offset); offset += 4;\n\n    var lnum = bin.readUshort(data, offset); offset += 2;\n    //console.log(num,boff,loff,lnum);\n\n    var base = {};\n    var coff = ooff + boff;\n    for (var i = 0; i < num; i++) {\n      base[\"g\" + bin.readUshort(data, coff)] = [bin.readUshort(data, coff + 2), bin.readUshort(data, coff + 4)];\n      coff += 6;\n    }\n\n    var lays = [];\n    coff = ooff + loff;\n    for (var i = 0; i < lnum; i++) {\n      lays.push(bin.readUshort(data, coff), bin.readUshort(data, coff + 2)); coff += 4;\n    }\n    return [base, lays];\n  }\n};\n\nTypr[\"T\"].cpal = {\n  parseTab: function (data, offset, length) {\n    var bin = Typr[\"B\"];\n    var ooff = offset;\n    var vsn = bin.readUshort(data, offset); offset += 2;\n\n    if (vsn == 0) {\n      bin.readUshort(data, offset); offset += 2;\n      bin.readUshort(data, offset); offset += 2;\n      var tot = bin.readUshort(data, offset); offset += 2;\n\n      var fst = bin.readUint(data, offset); offset += 4;\n\n      return new Uint8Array(data.buffer, ooff + fst, tot * 4);\n      /*\n      var coff=ooff+fst;\n\n      for(var i=0; i<tot; i++) {\n        console.log(data[coff],data[coff+1],data[coff+2],data[coff+3]);\n        coff+=4;\n      }\n\n      console.log(ets,pts,tot); */\n    }\n    else throw vsn;//console.log(\"unknown color palette\",vsn);\n  }\n};\n\nTypr[\"T\"].GSUB = {\n  parseTab: function (data, offset, length, obj) {\n    //console.log(obj.name.ID);\n\n    var bin = Typr[\"B\"], rU = bin.readUshort; bin.readUint;\n\n\n    var off = offset;\n    rU(data, off); off += 2;\n    rU(data, off); off += 2;\n    rU(data, off); off += 2;\n    var flO = rU(data, off); off += 2;\n    rU(data, off); off += 2;\n\n    //console.log(maj,min,slO,flO,llO);\n\n    off = offset + flO;\n\n    var fmap = {};\n    var cnt = rU(data, off); off += 2;\n    for (var i = 0; i < cnt; i++) {\n      var tag = bin.readASCII(data, off, 4); off += 4;\n      rU(data, off); off += 2;\n      fmap[tag] = true;\n    }\n    //console.log(fmap);\n    return fmap;\n  }\n};\n\nTypr[\"T\"].fvar = {\n  parseTab: function (data, offset, length, obj) {\n    var name = obj[\"name\"];\n    var off = offset;\n    var bin = Typr[\"B\"];\n    var axes = [], inst = [];\n\n    off += 8;\n    var acnt = bin.readUshort(data, off); off += 2;\n    off += 2;\n    var icnt = bin.readUshort(data, off); off += 2;\n    var isiz = bin.readUshort(data, off); off += 2;\n\n    for (var i = 0; i < acnt; i++) {\n      var tag = bin.readASCII(data, off, 4);\n      var min = bin.readFixed(data, off + 4);\n      var def = bin.readFixed(data, off + 8);\n      var max = bin.readFixed(data, off + 12);\n      var flg = bin.readUshort(data, off + 16);\n      var nid = bin.readUshort(data, off + 18);\n      axes.push([tag, min, def, max, flg, name[\"_\" + nid]]);\n      //console.log(tag,min,def,max,flg,nid);\n      off += 20;\n    }\n    for (var i = 0; i < icnt; i++) {\n      var snid = bin.readUshort(data, off), pnid = null;\n      var flg = bin.readUshort(data, off + 2);\n      var crd = []; for (var j = 0; j < acnt; j++) crd.push(bin.readFixed(data, off + 4 + j * 4));\n      off += 4 + acnt * 4;\n      if ((isiz & 3) == 2) { pnid = bin.readUshort(data, off); off += 2; }\n      inst.push([name[\"_\" + snid], flg, crd, pnid]);\n      //console.log(snid,flg, crd);\n    }\n\n    return [axes, inst];\n  }\n};\n\nTypr[\"T\"].gvar = (function () {\n\n  var EMBEDDED_PEAK_TUPLE = 0x8000;\n  var INTERMEDIATE_REGION = 0x4000;\n  var PRIVATE_POINT_NUMBERS = 0x2000;\n\n  var DELTAS_ARE_ZERO = 0x80;\n  var DELTAS_ARE_WORDS = 0x40;\n\n  var POINTS_ARE_WORDS = 0x80;\n\n  var SHARED_POINT_NUMBERS = 0x8000;\n\n  var bin = Typr[\"B\"];\n\n  function readTuple(data, o, acnt) {\n    var tup = []; for (var j = 0; j < acnt; j++) tup.push(bin.readF2dot14(data, o + j * 2));\n    return tup;\n  }\n\n  function readTupleVarHeader(data, off, vcnt, acnt, eoff) {\n    var out = [];\n    for (var j = 0; j < vcnt; j++) {\n      var dsiz = bin.readUshort(data, off); off += 2;\n      var tind = bin.readUshort(data, off), flag = tind & 0xf000; tind = tind & 0xfff; off += 2;\n      //console.log(j, dsiz,tind, flag.toString(16));\n\n      var peak = null, start = null, end = null;\n      if (flag & EMBEDDED_PEAK_TUPLE) { peak = readTuple(data, off, acnt); off += acnt * 2; }\n      if (flag & INTERMEDIATE_REGION) { start = readTuple(data, off, acnt); off += acnt * 2; }\n      if (flag & INTERMEDIATE_REGION) { end = readTuple(data, off, acnt); off += acnt * 2; }\n      out.push([dsiz, tind, flag, start, peak, end]);\n    }\n    return out;\n  }\n\n  // Packed \"point\" numbers\n  function readPointNumbers(data, off, gid) {\n    var cnt = data[off]; off++; if (cnt == 0) return [[], off];\n    if (127 < cnt) { cnt = ((cnt & 127) << 8) | data[off++]; }\n\n    //if(gid==116) console.log(\"---\",cnt);\n    var pts = [], last = 0;  // point number data runs\n    while (pts.length < cnt) {\n      var v = data[off]; off++;\n      var wds = (v & POINTS_ARE_WORDS) != 0; v = (v & 127) + 1;\n      //if(gid==116) console.log(\"-\",v);\n      for (var i = 0; i < v; i++) {\n        var dif = 0;\n        if (wds) { dif = bin.readUshort(data, off); off += 2; }\n        else { dif = data[off]; off++; }\n        //if(gid==116) console.log(dif);\n        last += dif;\n        pts.push(last);\n      }\n    }\n    //console.log(pts);\n    return [pts, off];\n\n\n    //throw \"e\";\n  }\n\n\n  function parseTab(data, offset, length, obj) {\n    var off = offset + 4;\n    var acnt = bin.readUshort(data, off); off += 2;\n    var tcnt = bin.readUshort(data, off); off += 2;\n    var toff = bin.readUint(data, off); off += 4;\n    var gcnt = bin.readUshort(data, off); off += 2;\n    bin.readUshort(data, off); off += 2;\n\n    var goff = bin.readUint(data, off); off += 4;\n\n    // glyphVariationDataOffsets\n    var offs = []; for (var i = 0; i < gcnt + 1; i++) offs.push(bin.readUint(data, off + i * 4));\n\n\n    // sharedTuples\n    var tups = [], mins = [], maxs = []; off = offset + toff;\n    for (var i = 0; i < tcnt; i++) {\n      var peak = readTuple(data, off + i * acnt * 2, acnt), imin = [], imax = []; tups.push(peak); mins.push(imin); maxs.push(imax);\n      for (var k = 0; k < acnt; k++) {\n        imin[k] = Math.min(peak[k], 0);\n        imax[k] = Math.max(peak[k], 0);\n      }\n    }\n    //console.log(tups);\n\n    //console.log(acnt,stcnt,stoff,gcnt,flgs,goff);\n\n    var i8 = new Int8Array(data.buffer);\n\n    // GlyphVariationData table array\n    var tabs = [];\n    for (var i = 0; i < gcnt; i++) {\n      //console.log(\"-------\",i);\n      off = offset + goff + offs[i];\n      // tupleVariationCount\n      var vcnt = bin.readUshort(data, off); off += 2;  //if((vcnt>>>12)!=0) throw \"e\";\n\n      var snum = vcnt & SHARED_POINT_NUMBERS; vcnt &= 0xfff;\n      //  offset to the serialized data\n      var soff = bin.readUshort(data, off); off += 2;\n\n      var hdr = readTupleVarHeader(data, off, vcnt, acnt);\n\n      var tab = []; tabs.push(tab);\n      // Serialized Data\n      off = offset + goff + offs[i] + soff;\n\n      var sind = null;\n      if (snum) {\n        var oo = readPointNumbers(data, off);\n        sind = oo[0]; off = oo[1];\n      }\n\n      for (var j = 0; j < vcnt; j++) {\n        var vr = hdr[j], end = off + vr[0];  //console.log(vr);  console.log(data.slice(off,off+vr[0]));\n\n        var ind = sind;\n        if (vr[2] & PRIVATE_POINT_NUMBERS) {\n          var oo = readPointNumbers(data, off);\n          ind = oo[0]; off = oo[1];\n        }\n        // read packed deltas (delta runs)\n        var ds = [];\n        while (off < end) {\n          var cb = data[off++];  // control byte;\n          var cnt = (cb & 0x3f) + 1;\n          if (cb & DELTAS_ARE_ZERO) { for (var k = 0; k < cnt; k++) ds.push(0); }\n          else if (cb & DELTAS_ARE_WORDS) { for (var k = 0; k < cnt; k++) ds.push(bin.readShort(data, off + k * 2)); off += cnt * 2; }\n          else { for (var k = 0; k < cnt; k++) ds.push(i8[off + k]); off += cnt; }\n        }\n        //if(ind) console.log(ind, ds);\n        var ti = vr[1];\n\n        tab.push([[\n          vr[3] ? vr[3] : mins[ti],\n          vr[4] ? vr[4] : tups[ti],\n          vr[5] ? vr[5] : maxs[ti]\n        ], ds, ind.length == 0 ? null : ind]);\n\n        if (ind.length != 0 && ind.length * 2 != ds.length) throw \"e\";\n        //if(i==116) console.log(ind, ds);\n      }\n    }\n    return tabs;\n  }\n\n  return { parseTab: parseTab };\n})();\n\nTypr[\"T\"].avar = {\n  parseTab: function (data, offset, length, obj) {\n    var off = offset;\n    var bin = Typr[\"B\"], out = [];\n\n    off += 6;\n    var acnt = bin.readUshort(data, off); off += 2;\n\n    for (var ai = 0; ai < acnt; ai++) {\n      var cnt = bin.readUshort(data, off); off += 2;\n      var poly = []; out.push(poly);\n      for (var i = 0; i < cnt; i++) {\n        var x = bin.readF2dot14(data, off);\n        var y = bin.readF2dot14(data, off + 2); off += 4;\n        poly.push(x, y);\n      }\n    }\n\n    return out;\n  }\n};\n\nTypr[\"T\"].HVAR = {\n  parseTab: function (data, offset, length, obj) {\n    var off = offset, oo = offset;\n    var bin = Typr[\"B\"];\n\n    //console.log(data.slice(off));\n    off += 4;\n\n    var varO = bin.readUint(data, off); off += 4;\n    var advO = bin.readUint(data, off); off += 4;\n    var lsbO = bin.readUint(data, off); off += 4;\n    var rsbO = bin.readUint(data, off); off += 4;\n    if (lsbO != 0 || rsbO != 0) throw lsbO;\n\n    //console.log(varO,advO,lsbO,rsbO);\n\n    off = oo + varO;  // item variation store\n\n    // ItemVariationStore\n    var ioff = off;\n\n    var fmt = bin.readUshort(data, off); off += 2; if (fmt != 1) throw \"e\";\n    var vregO = bin.readUint(data, off); off += 4;\n    // itemVariationDataCount\n    var vcnt = bin.readUshort(data, off); off += 2;\n\n    var offs = []; for (var i = 0; i < vcnt; i++) offs.push(bin.readUint(data, off + i * 4)); off += vcnt * 4;  //if(offs.length!=1) throw \"e\";\n    //console.log(vregO,vcnt,offs);\n\n    off = ioff + vregO;\n    var acnt = bin.readUshort(data, off); off += 2;\n    var rcnt = bin.readUshort(data, off); off += 2;\n\n    var regs = [];\n    for (var i = 0; i < rcnt; i++) {\n      var crd = [[], [], []]; regs.push(crd);\n      for (var j = 0; j < acnt; j++) {\n        crd[0].push(bin.readF2dot14(data, off + 0));\n        crd[1].push(bin.readF2dot14(data, off + 2));\n        crd[2].push(bin.readF2dot14(data, off + 4));\n        off += 6;\n      }\n    }\n    //console.log(acnt, rcnt, regs);\n\n\n    var i8 = new Int8Array(data.buffer);\n    var varStore = [];\n    for (var i = 0; i < offs.length; i++) {\n      // ItemVariationData\n      off = oo + varO + offs[i]; var vdata = []; varStore.push(vdata);\n      var icnt = bin.readUshort(data, off); off += 2;  // itemCount\n      var dcnt = bin.readUshort(data, off); off += 2; if (dcnt & 0x8000) throw \"e\";\n      var rcnt = bin.readUshort(data, off); off += 2;\n      var ixs = []; for (var j = 0; j < rcnt; j++) ixs.push(bin.readUshort(data, off + j * 2)); off += rcnt * 2;\n      //console.log(icnt,dcnt,rcnt,ixs);\n      //console.log(data.slice(off));\n\n      for (var k = 0; k < icnt; k++) {  // deltaSets\n        var deltaData = [];  //vdata.push(deltaData);\n        for (var ri = 0; ri < rcnt; ri++) {\n          deltaData.push(ri < dcnt ? bin.readShort(data, off) : i8[off]);\n          off += ri < dcnt ? 2 : 1;\n\n        }\n        var dd = new Array(regs.length); dd.fill(0); vdata.push(dd);\n        for (var j = 0; j < ixs.length; j++) dd[ixs[j]] = deltaData[j];\n      }\n    }\n\n    //console.log(varStore);\n\n    // VariationRegionList\n\n\n\n    off = oo + advO;  // advance widths\n\n    // DeltaSetIndexMap\n\n    var fmt = data[off++]; if (fmt != 0) throw \"e\";\n    var entryFormat = data[off++];\n\n    var mapCount = bin.readUshort(data, off); off += 2;\n\n    var INNER_INDEX_BIT_COUNT_MASK = 0x0f;\n    var MAP_ENTRY_SIZE_MASK = 0x30;\n    var entrySize = ((entryFormat & MAP_ENTRY_SIZE_MASK) >> 4) + 1;  //if(entrySize!=1) throw entrySize;\n\n    //console.log(fmt, entryFormat, mapCount, entrySize);\n\n    var dfs = [];\n    for (var i = 0; i < mapCount; i++) {\n      var entry = 0;\n      if (entrySize == 1) entry = data[off++];\n      else { entry = bin.readUshort(data, off); off += 2; }\n      var outerIndex = entry >> ((entryFormat & INNER_INDEX_BIT_COUNT_MASK) + 1);\n      var innerIndex = entry & ((1 << ((entryFormat & INNER_INDEX_BIT_COUNT_MASK) + 1)) - 1);\n      //map.push(outerIndex,innerIndex);\n      dfs.push(varStore[outerIndex][innerIndex]);\n      //console.log(outerIndex,innerIndex);\n      //console.log(i,varStore[outerIndex][innerIndex]);\n    }\n\n    return [regs, dfs];\n  }\n};\n\nTypr[\"U\"] = function () {\n  var P = {\n    MoveTo: function (p, x, y) { p.cmds.push(\"M\"); p.crds.push(x, y); },\n    LineTo: function (p, x, y) { p.cmds.push(\"L\"); p.crds.push(x, y); },\n    CurveTo: function (p, a, b, c, d, e, f) { p.cmds.push(\"C\"); p.crds.push(a, b, c, d, e, f); },\n    qCurveTo: function (p, a, b, c, d) { p.cmds.push(\"Q\"); p.crds.push(a, b, c, d); },\n    ClosePath: function (p) { p.cmds.push(\"Z\"); }\n  };\n\n  function getGlyphPosition(font, gls, i1, ltr) {\n    var g1 = gls[i1], g2 = gls[i1 + 1], kern = font[\"kern\"];\n    if (kern) {\n      var ind1 = kern.glyph1.indexOf(g1);\n      if (ind1 != -1) {\n        var ind2 = kern.rval[ind1].glyph2.indexOf(g2);\n        if (ind2 != -1) return [0, 0, kern.rval[ind1].vals[ind2], 0];\n      }\n    }\n    //console.log(\"no kern\");\n    return [0, 0, 0, 0];\n  }\n  function shape(font, str, prm) {\n    if (prm == null) prm = {};\n    prm[\"ltr\"]; prm[\"fts\"]; var axs = prm[\"axs\"];\n    if (font[\"fvar\"] && axs == null) axs = font[\"fvar\"][1][font[\"_index\"]][2];\n\n    var HVAR = font[\"HVAR\"];  //console.log(HVAR);\n    if (axs && HVAR) { axs = _normalizeAxis(font, axs); }  //console.log(S,axs);\n    var gls = [];\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i); if (cc > 0xffff) i++;\n      gls.push(codeToGlyph(font, cc));\n    }\n    var shape = [];\n\n    for (var i = 0; i < gls.length; i++) {\n      var padj = getGlyphPosition(font, gls, i);\n      var gid = gls[i];  //console.log(gid);\n      var ax = font[\"hmtx\"].aWidth[gid] + padj[2];\n      if (HVAR && HVAR[1][gid]) { //ax+=S*HVAR[1][gid][0];\n        var difs = HVAR[1][gid];  //console.log(difs);\n        for (var j = 0; j < HVAR[0].length; j++) {\n          ax += _interpolate(HVAR[0][j], axs) * difs[j];\n        }\n      }\n      shape.push({ \"g\": gid, \"cl\": i, \"dx\": 0, \"dy\": 0, \"ax\": ax, \"ay\": 0 });\n    }\n    return shape;\n  }\n\n  function shapeToPath(font, shape, prm) {\n    var tpath = { cmds: [], crds: [] };\n    var x = 0, y = 0, clr, axs;\n    if (prm) { clr = prm[\"clr\"]; axs = prm[\"axs\"]; }\n\n    for (var i = 0; i < shape.length; i++) {\n      var it = shape[i];\n      var path = glyphToPath(font, it[\"g\"], false, axs), crds = path[\"crds\"];\n      for (var j = 0; j < crds.length; j += 2) {\n        tpath.crds.push(crds[j] + x + it[\"dx\"]);\n        tpath.crds.push(crds[j + 1] + y + it[\"dy\"]);\n      }\n      if (clr) tpath.cmds.push(clr);\n      for (var j = 0; j < path[\"cmds\"].length; j++) tpath.cmds.push(path[\"cmds\"][j]);\n      var clen = tpath.cmds.length;\n      if (clr) if (clen != 0 && tpath.cmds[clen - 1] != \"X\") tpath.cmds.push(\"X\");  // SVG fonts might contain \"X\". Then, nothing would stroke non-SVG glyphs.\n\n      x += it[\"ax\"]; y += it[\"ay\"];\n    }\n    return { \"cmds\": tpath.cmds, \"crds\": tpath.crds };\n  }\n\n\n  // find the greatest index with a value <=v\n  function arrSearch(arr, k, v) {\n    var l = 0, r = ~~(arr.length / k);\n    while (l + 1 != r) { var mid = l + ((r - l) >>> 1); if (arr[mid * k] <= v) l = mid; else r = mid; }\n\n    //var mi = 0;  for(var i=0; i<arr.length; i+=k) if(arr[i]<=v) mi=i;  if(mi!=l*k) throw \"e\";\n\n    return l * k;\n  }\n\n  var wha = [0x9, 0xa, 0xb, 0xc, 0xd, 0x20, 0x85, 0xa0, 0x1680, 0x180e, 0x2028, 0x2029, 0x202f, 0x2060, 0x3000, 0xfeff], whm = {};\n  for (var i = 0; i < wha.length; i++) whm[wha[i]] = 1;\n  for (var i = 0x2000; i <= 0x200d; i++) whm[i] = 1;\n\n  function codeToGlyph(font, code) {\n    //console.log(cmap);\n    // \"p3e10\" for NotoEmoji-Regular.ttf\n    //console.log(cmap);\n\n    if (font[\"_ctab\"] == null) {\n      var cmap = font[\"cmap\"];\n      var tind = -1, pps = [\"p3e10\", \"p0e4\", \"p3e1\", \"p1e0\", \"p0e3\", \"p0e1\"/*,\"p3e3\"*/, \"p3e0\" /*Hebrew*/, \"p3e5\" /*Korean*/];\n      for (var i = 0; i < pps.length; i++) if (cmap.ids[pps[i]] != null) { tind = cmap.ids[pps[i]]; break; }\n      if (tind == -1) throw \"no familiar platform and encoding!\";\n      font[\"_ctab\"] = cmap.tables[tind];\n    }\n\n    var tab = font[\"_ctab\"], fmt = tab.format, gid = -1;  //console.log(fmt); throw \"e\";\n\n    if (fmt == 0) {\n      if (code >= tab.map.length) gid = 0;\n      else gid = tab.map[code];\n    }\n    /*else if(fmt==2) {\n      var data=font[\"_data\"], off = cmap.off+tab.off+6, bin=Typr[\"B\"];\n      var shKey = bin.readUshort(data,off + 2*(code>>>8));\n      var shInd = off + 256*2 + shKey*8;\n\n      var firstCode = bin.readUshort(data,shInd);\n      var entryCount= bin.readUshort(data,shInd+2);\n      var idDelta   = bin.readShort (data,shInd+4);\n      var idRangeOffset = bin.readUshort(data,shInd+6);\n\n      if(firstCode<=code && code<=firstCode+entryCount) {\n        // not completely correct\n        gid = bin.readUshort(data, shInd+6+idRangeOffset + (code&255)*2);\n      }\n      else gid=0;\n      //if(code>256) console.log(code,(code>>>8),shKey,firstCode,entryCount,idDelta,idRangeOffset);\n\n      //throw \"e\";\n      //console.log(tab,  bin.readUshort(data,off));\n      //throw \"e\";\n    }*/\n    else if (fmt == 4) {\n      var ec = tab.endCount; gid = 0;\n      if (code <= ec[ec.length - 1]) {\n        // smallest index with code <= value\n        var sind = arrSearch(ec, 1, code);\n        if (ec[sind] < code) sind++;\n\n        if (code >= tab.startCount[sind]) {\n          var gli = 0;\n          if (tab.idRangeOffset[sind] != 0) gli = tab.glyphIdArray[(code - tab.startCount[sind]) + (tab.idRangeOffset[sind] >> 1) - (tab.idRangeOffset.length - sind)];\n          else gli = code + tab.idDelta[sind];\n          gid = (gli & 0xFFFF);\n        }\n      }\n    }\n    else if (fmt == 6) {\n      var off = code - tab.firstCode, arr = tab.glyphIdArray;\n      if (off < 0 || off >= arr.length) gid = 0;\n      else gid = arr[off];\n    }\n    else if (fmt == 12) {\n      var grp = tab.groups; gid = 0;  //console.log(grp);  throw \"e\";\n\n      if (code <= grp[grp.length - 2]) {\n        var i = arrSearch(grp, 3, code);\n        if (grp[i] <= code && code <= grp[i + 1]) { gid = grp[i + 2] + (code - grp[i]); }\n      }\n    }\n    else throw \"unknown cmap table format \" + tab.format;\n\n    //*\n    var SVG = font[\"SVG \"], loca = font[\"loca\"];\n    // if the font claims to have a Glyph for a character, but the glyph is empty, and the character is not \"white\", it is a lie!\n    if (gid != 0 && font[\"CFF \"] == null && (SVG == null || SVG.entries[gid] == null) && loca && loca[gid] == loca[gid + 1]  // loca not present in CFF or SVG fonts\n      && whm[code] == null) gid = 0;\n    //*/\n\n    return gid;\n  }\n  function glyphToPath(font, gid, noColor, axs) {\n    var path = { cmds: [], crds: [] };\n\n    if (font[\"fvar\"]) {\n      if (axs == null) axs = font[\"fvar\"][1][font[\"_index\"]][2];\n      axs = _normalizeAxis(font, axs);\n    }\n\n    var SVG = font[\"SVG \"], CFF = font[\"CFF \"], COLR = font[\"COLR\"], CBLC = font[\"CBLC\"], CBDT = font[\"CBDT\"], sbix = font[\"sbix\"], upng = window[\"UPNG\"];\n\n    var strike = null;\n    if (CBLC && upng) for (var i = 0; i < CBLC.length; i++) if (CBLC[i][0] <= gid && gid <= CBLC[i][1]) strike = CBLC[i];\n\n    if (strike || (sbix && sbix[gid])) {\n      if (strike && strike[2] != 17) throw \"not a PNG\";\n\n      if (font[\"__tmp\"] == null) font[\"__tmp\"] = {};\n      var cmd = font[\"__tmp\"][\"g\" + gid];\n      if (cmd == null) {\n        var bmp, len;\n        if (sbix) { bmp = sbix[gid]; len = bmp.length; }\n        else {\n          var boff = strike[3][gid - strike[0]] + 5;  // smallGlyphMetrics\n          len = (CBDT[boff + 1] << 16) | (CBDT[boff + 2] << 8) | CBDT[boff + 3]; boff += 4;\n          bmp = new Uint8Array(CBDT.buffer, CBDT.byteOffset + boff, len);\n        }\n        var str = \"\"; for (var i = 0; i < len; i++) str += String.fromCharCode(bmp[i]);\n        cmd = font[\"__tmp\"][\"g\" + gid] = \"data:image/png;base64,\" + btoa(str);\n      }\n\n      path.cmds.push(cmd);\n      var upe = font[\"head\"][\"unitsPerEm\"] * 1.15;\n      var gw = Math.round(upe), gh = Math.round(upe), dy = Math.round(-gh * 0.15);\n      path.crds.push(0, gh + dy, gw, gh + dy, gw, dy, 0, dy); //*/\n    }\n    else if (SVG && SVG.entries[gid]) {\n      var p = SVG.entries[gid];\n      if (p != null) {\n        if (typeof p == \"number\") {\n          var svg = SVG.svgs[p];\n          if (typeof svg == \"string\") {\n            var prsr = new DOMParser();\n            var doc = prsr[\"parseFromString\"](svg, \"image/svg+xml\");\n            svg = SVG.svgs[p] = doc.getElementsByTagName(\"svg\")[0];\n          }\n          p = Typr[\"U\"][\"SVG\"].toPath(svg, gid); SVG.entries[gid] = p;\n        }\n        path = p;\n      }\n    }\n    else if (noColor != true && COLR && COLR[0][\"g\" + gid] && COLR[0][\"g\" + gid][1] > 1) {\n\n      function toHex(n) { var o = n.toString(16); return (o.length == 1 ? \"0\" : \"\") + o; }\n\n      var CPAL = font[\"CPAL\"], gl = COLR[0][\"g\" + gid];\n      for (var i = 0; i < gl[1]; i++) {\n        var lid = gl[0] + i;\n        var cgl = COLR[1][2 * lid], pid = COLR[1][2 * lid + 1] * 4;\n        var pth = glyphToPath(font, cgl, cgl == gid);\n\n        var col = \"#\" + toHex(CPAL[pid + 2]) + toHex(CPAL[pid + 1]) + toHex(CPAL[pid + 0]);\n        path.cmds.push(col);\n\n        path.cmds = path.cmds.concat(pth[\"cmds\"]);\n        path.crds = path.crds.concat(pth[\"crds\"]);\n        //console.log(gid, cgl,pid,col);\n\n        path.cmds.push(\"X\");\n      }\n    }\n    else if (CFF) {\n      var pdct = CFF[\"Private\"];\n      var state = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: false, width: pdct ? pdct[\"defaultWidthX\"] : 0, open: false };\n      if (CFF[\"ROS\"]) {\n        var gi = 0;\n        while (CFF[\"FDSelect\"][gi + 2] <= gid) gi += 2;\n        pdct = CFF[\"FDArray\"][CFF[\"FDSelect\"][gi + 1]][\"Private\"];\n      }\n      _drawCFF(CFF[\"CharStrings\"][gid], state, CFF, pdct, path);\n    }\n    else if (font[\"glyf\"]) { _drawGlyf(gid, font, path, axs); }\n    return { \"cmds\": path.cmds, \"crds\": path.crds };\n  }\n\n  function _drawGlyf(gid, font, path, axs) {\n    var gl = font[\"glyf\"][gid];\n\n    if (gl == null) gl = font[\"glyf\"][gid] = Typr[\"T\"].glyf._parseGlyf(font, gid);\n    if (gl != null) {\n      if (gl.noc > -1) _simpleGlyph(gl, font, gid, path, axs);\n      else _compoGlyph(gl, font, gid, path, axs);\n    }\n  }\n  function _interpolate(axs, v) {\n    v.length; var S = 1;\n    var s = axs[0];  // start\n    var p = axs[1];  // peak\n    var e = axs[2];  // end\n\n    for (var i = 0; i < v.length; i++) {\n      var AS = 1;\n      if (s[i] > p[i] || p[i] > e[i]) AS = 1;\n      else if (s[i] < 0 && e[i] > 0 && p[i] != 0) AS = 1;\n      else if (p[i] == 0) AS = 1;\n      else if (v[i] < s[i] || v[i] > e[i]) AS = 0;\n      else {\n        if (v[i] == p[i]) AS = 1;\n        else if (v[i] < p[i]) AS = (v[i] - s[i]) / (p[i] - s[i]);\n        else AS = (e[i] - v[i]) / (e[i] - p[i]);\n      }\n      S = S * AS;\n    }\n    return S;\n  }\n  function _normalizeAxis(font, vv) {\n    var fvar = font[\"fvar\"], avar = font[\"avar\"];\n    var fv = fvar ? fvar[0] : null;\n\n    var nv = [];\n    for (var i = 0; i < fv.length; i++) {\n      var min = fv[i][1], def = fv[i][2], max = fv[i][3], v = Math.max(min, Math.min(max, vv[i]));\n      if (v < def) nv[i] = (def - v) / (min - def);\n      else if (v > def) nv[i] = (v - def) / (max - def);\n      else nv[i] = 0;\n\n      if (avar && nv[i] != -1) {\n        var av = avar[i], j = 0;\n        for (; j < av.length; j += 2) if (av[j] >= nv[i]) break;\n        var f = (nv[i] - av[j - 2]) / (av[j] - av[j - 2]);\n        nv[i] = f * av[j + 1] + (1 - f) * av[j - 1];\n      }\n\n    }\n    return nv;\n  }\n  function interpolateDeltas(dfs, ind, xs, ys, endPts) {\n    var N = xs.length, ndfs = new Array(N * 2 + 8); ndfs.fill(0);\n    for (var i = 0; i < N; i++) {\n      var dx = 0, dy = 0, ii = ind.indexOf(i);\n      if (ii != -1) { dx = dfs[ii]; dy = dfs[ind.length + ii]; }\n      else {\n        var cmp = 0; while (endPts[cmp] < i) cmp++;\n        var cmp0 = cmp == 0 ? 0 : endPts[cmp - 1] + 1;\n        var cmp1 = endPts[cmp];\n\n        var i0 = -1, i1 = -1;\n\n        for (var j = 0; j < ind.length; j++) { var v = ind[j]; if (v < cmp0 || v > cmp1 || v >= N) continue; i0 = j; if (i1 == -1) i1 = j; }\n        for (var j = 0; j < ind.length; j++) { var v = ind[j]; if (v < cmp0 || v > cmp1 || v >= N) continue; if (v < i) i0 = j; if (i < v) { i1 = j; break; } }\n\n        //var i0 = ind.length-1, i1=0;  if(ind[i0]>=N) i0--;\n        //for(var j=0; j<ind.length; j++) {  var v=ind[j];  if(v<N) { if(v<i) i0=j;  if(i<v) {  i1=j;  break;  }  }  }\n        for (var ax = 0; ax < 2; ax++) {\n          var crd = ax == 0 ? xs : ys, ofs = ax * ind.length, dlt = 0;\n          var c0 = crd[ind[i0]], c1 = crd[ind[i1]], cC = crd[i];\n          var d0 = dfs[ofs + i0], d1 = dfs[ofs + i1];\n\n          if (c0 == c1) {\n            if (d0 == d1) dlt = d0;\n            else dlt = 0;\n          }\n          else {\n            if (cC <= Math.min(c0, c1)) {\n              if (c0 < c1) dlt = d0;\n              else dlt = d1;\n            }\n            else if (Math.max(c0, c1) <= cC) {\n              if (c0 < c1) dlt = d1;\n              else dlt = d0;\n            }\n            else {\n              var prop = (cC - c0) / (c1 - c0);  //if(prop<0) throw \"e\";\n              dlt = prop * d1 + (1 - prop) * d0;\n            }\n          }\n          if (ax == 0) dx = dlt; else dy = dlt;\n        }\n      }\n      ndfs[i] = dx; ndfs[N + 4 + i] = dy;\n    }\n    return ndfs;\n  }\n  function _simpleGlyph(gl, font, gid, p, axs) {\n    var xs = gl.xs, ys = gl.ys;\n    //*\n    if (font[\"fvar\"] && axs) {\n      xs = xs.slice(0); ys = ys.slice(0);\n      var gvar = font[\"gvar\"];\n      var gv = gvar ? gvar[gid] : null;\n\n      for (var vi = 0; vi < gv.length; vi++) {\n        var axv = gv[vi][0];  //console.log(axs);\n        var S = _interpolate(axv, axs); if (S < 1e-9) continue;\n        var dfs = gv[vi][1], ind = gv[vi][2];  //if(dfs.length!=2*xs.length+8) throw \"e\";\n        //console.log(vi,S,axv,ind,dfs);\n        if (ind) { dfs = gv[vi][1] = interpolateDeltas(dfs, ind, xs, ys, gl.endPts); gv[vi][2] = null; }\n        //if(ind==null)\n        if (dfs.length == xs.length * 2 + 8)\n          for (var i = 0; i < xs.length; i++) {\n            xs[i] += S * dfs[i];\n            ys[i] += S * dfs[i + xs.length + 4];\n          }\n      }\n    } //*/\n\n    for (var c = 0; c < gl.noc; c++) {\n      var i0 = (c == 0) ? 0 : (gl.endPts[c - 1] + 1);\n      var il = gl.endPts[c];\n\n      for (var i = i0; i <= il; i++) {\n        var pr = (i == i0) ? il : (i - 1);\n        var nx = (i == il) ? i0 : (i + 1);\n        var onCurve = gl.flags[i] & 1;\n        var prOnCurve = gl.flags[pr] & 1;\n        var nxOnCurve = gl.flags[nx] & 1;\n\n        var x = xs[i], y = ys[i];\n\n        if (i == i0) {\n          if (onCurve) {\n            if (prOnCurve) P.MoveTo(p, xs[pr], ys[pr]);\n            else { P.MoveTo(p, x, y); continue;  /*  will do CurveTo at il  */ }\n          }\n          else {\n            if (prOnCurve) P.MoveTo(p, xs[pr], ys[pr]);\n            else P.MoveTo(p, Math.floor((xs[pr] + x) * 0.5), Math.floor((ys[pr] + y) * 0.5));\n          }\n        }\n        if (onCurve) {\n          if (prOnCurve) P.LineTo(p, x, y);\n        }\n        else {\n          if (nxOnCurve) P.qCurveTo(p, x, y, xs[nx], ys[nx]);\n          else P.qCurveTo(p, x, y, Math.floor((x + xs[nx]) * 0.5), Math.floor((y + ys[nx]) * 0.5));\n        }\n      }\n      P.ClosePath(p);\n    }\n  }\n  function _compoGlyph(gl, font, gid, p, axs) {\n\n    var dx = [0, 0, 0, 0, 0, 0], dy = [0, 0, 0, 0, 0, 0], ccnt = gl.parts.length;\n\n    if (font[\"fvar\"] && axs) {\n      var gvar = font[\"gvar\"];\n      var gv = gvar ? gvar[gid] : null;\n      for (var vi = 0; vi < gv.length; vi++) {\n        var axv = gv[vi][0];  //console.log(axs);\n        var S = _interpolate(axv, axs); if (S < 1e-6) continue;\n        var dfs = gv[vi][1], ind = gv[vi][2];  //if(dfs.length!=2*ccnt+8) throw \"e\";\n        if (ind == null)\n          for (var i = 0; i < ccnt; i++) {\n            dx[i] += S * dfs[i];\n            dy[i] += S * dfs[i + ccnt + 4];\n          }\n        else\n          for (var j = 0; j < ind.length; j++) {\n            var i = ind[j];\n            dx[i] += S * dfs[0];\n            dy[i] += S * dfs[0 + ccnt];\n          }\n      }\n    }\n\n    for (var j = 0; j < ccnt; j++) {\n      var path = { cmds: [], crds: [] };\n      var prt = gl.parts[j];\n      _drawGlyf(prt.glyphIndex, font, path, axs);\n\n      var m = prt.m, tx = m.tx + dx[j], ty = m.ty + dy[j];\n      for (var i = 0; i < path.crds.length; i += 2) {\n        var x = path.crds[i], y = path.crds[i + 1];\n        p.crds.push(x * m.a + y * m.c + tx);   // not sure, probably right\n        p.crds.push(x * m.b + y * m.d + ty);\n      }\n      for (var i = 0; i < path.cmds.length; i++) p.cmds.push(path.cmds[i]);\n    }\n  }\n\n  function pathToSVG(path, prec) {\n    var cmds = path[\"cmds\"], crds = path[\"crds\"];\n    if (prec == null) prec = 5;\n    function num(v) { return parseFloat(v.toFixed(prec)); }\n    function merge(o) {\n      var no = [], lstF = false, lstC = \"\";\n      for (var i = 0; i < o.length; i++) {\n        var it = o[i], isF = (typeof it) == \"number\";\n        if (!isF) { if (it == lstC && it.length == 1 && it != \"m\") continue; lstC = it; }  // move should not be merged (it actually means lineTo)\n        if (lstF && isF && it >= 0) no.push(\" \");\n        no.push(it); lstF = isF;\n      }\n      return no.join(\"\");\n    }\n\n\n    var out = [], co = 0, lmap = { \"M\": 2, \"L\": 2, \"Q\": 4, \"C\": 6 };\n    var x = 0, y = 0, // perfect coords\n      //dx=0, dy=0, // relative perfect coords\n      //rx=0, ry=0, // relative rounded coords\n      ex = 0, ey = 0, // error between perfect and output coords\n      mx = 0, my = 0; // perfect coords of the last \"Move\"\n\n    for (var i = 0; i < cmds.length; i++) {\n      var cmd = cmds[i], cc = (lmap[cmd] ? lmap[cmd] : 0);\n\n      var o0 = [], dx, dy, rx, ry;  // o1=[], cx, cy, ax,ay;\n      if (cmd == \"L\") {\n        dx = crds[co] - x; dy = crds[co + 1] - y;\n        rx = num(dx + ex); ry = num(dy + ey);\n        // if this \"lineTo\" leads to the starting point, and \"Z\" follows, do not output anything.\n        if (cmds[i + 1] == \"Z\" && crds[co] == mx && crds[co + 1] == my) { rx = dx; ry = dy; }\n        else if (rx == 0 && ry == 0) ;\n        else if (rx == 0) o0.push(\"v\", ry);\n        else if (ry == 0) o0.push(\"h\", rx);\n        else { o0.push(\"l\", rx, ry); }\n      }\n      else {\n        o0.push(cmd.toLowerCase());\n        for (var j = 0; j < cc; j += 2) {\n          dx = crds[co + j] - x; dy = crds[co + j + 1] - y;\n          rx = num(dx + ex); ry = num(dy + ey);\n          o0.push(rx, ry);\n        }\n      }\n      if (cc != 0) { ex += dx - rx; ey += dy - ry; }\n\n      var ou = o0;\n      for (var j = 0; j < ou.length; j++) out.push(ou[j]);\n\n      if (cc != 0) { co += cc; x = crds[co - 2]; y = crds[co - 1]; }\n      if (cmd == \"M\") { mx = x; my = y; }\n      if (cmd == \"Z\") { x = mx; y = my; }\n    }\n\n    return merge(out);\n  }\n  function SVGToPath(d) {\n    var pth = { cmds: [], crds: [] };\n    Typr[\"U\"][\"SVG\"].svgToPath(d, pth);\n    return { \"cmds\": pth.cmds, \"crds\": pth.crds };\n  }\n\n  function mipmapB(buff, w, h, hlp) {\n    var nw = w >> 1, nh = h >> 1;\n    var nbuf = new Uint8Array(nw * nh * 4);\n    var sb32 = new Uint32Array(buff.buffer), nb32 = new Uint32Array(nbuf.buffer);\n    for (var y = 0; y < nh; y++)\n      for (var x = 0; x < nw; x++) {\n        var ti = (y * nw + x), si = ((y << 1) * w + (x << 1));\n        //nbuf[ti  ] = buff[si  ];  nbuf[ti+1] = buff[si+1];  nbuf[ti+2] = buff[si+2];  nbuf[ti+3] = buff[si+3];\n        //*\n        var c0 = sb32[si], c1 = sb32[si + 1], c2 = sb32[si + w], c3 = sb32[si + w + 1];\n\n        var a0 = (c0 >>> 24), a1 = (c1 >>> 24), a2 = (c2 >>> 24), a3 = (c3 >>> 24), a = (a0 + a1 + a2 + a3);\n\n        if (a == 1020) {\n          var r = (((c0 >>> 0) & 255) + ((c1 >>> 0) & 255) + ((c2 >>> 0) & 255) + ((c3 >>> 0) & 255) + 2) >>> 2;\n          var g = (((c0 >>> 8) & 255) + ((c1 >>> 8) & 255) + ((c2 >>> 8) & 255) + ((c3 >>> 8) & 255) + 2) >>> 2;\n          var b = (((c0 >>> 16) & 255) + ((c1 >>> 16) & 255) + ((c2 >>> 16) & 255) + ((c3 >>> 16) & 255) + 2) >>> 2;\n          nb32[ti] = (255 << 24) | (b << 16) | (g << 8) | r;\n        }\n        else if (a == 0) nb32[ti] = 0;\n        else {\n          var r = ((c0 >>> 0) & 255) * a0 + ((c1 >>> 0) & 255) * a1 + ((c2 >>> 0) & 255) * a2 + ((c3 >>> 0) & 255) * a3;\n          var g = ((c0 >>> 8) & 255) * a0 + ((c1 >>> 8) & 255) * a1 + ((c2 >>> 8) & 255) * a2 + ((c3 >>> 8) & 255) * a3;\n          var b = ((c0 >>> 16) & 255) * a0 + ((c1 >>> 16) & 255) * a1 + ((c2 >>> 16) & 255) * a2 + ((c3 >>> 16) & 255) * a3;\n\n          var ia = 1 / a; r = ~~(r * ia + 0.5); g = ~~(g * ia + 0.5); b = ~~(b * ia + 0.5);\n          nb32[ti] = (((a + 2) >>> 2) << 24) | (b << 16) | (g << 8) | r;\n        }\n      }\n    return { buff: nbuf, w: nw, h: nh };\n  }\n\n  var __cnv, __ct;\n  function pathToContext(path, ctx) {\n    var c = 0, cmds = path[\"cmds\"], crds = path[\"crds\"];\n\n    //ctx.translate(3500,500);  ctx.rotate(0.25);  ctx.scale(1,-1);\n\n    for (var j = 0; j < cmds.length; j++) {\n      var cmd = cmds[j];\n      if (cmd == \"M\") {\n        ctx.moveTo(crds[c], crds[c + 1]);\n        c += 2;\n      }\n      else if (cmd == \"L\") {\n        ctx.lineTo(crds[c], crds[c + 1]);\n        c += 2;\n      }\n      else if (cmd == \"C\") {\n        ctx.bezierCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3], crds[c + 4], crds[c + 5]);\n        c += 6;\n      }\n      else if (cmd == \"Q\") {\n        ctx.quadraticCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3]);\n        c += 4;\n      }\n      else if (cmd[0] == \"d\") {\n        var upng = window[\"UPNG\"];\n        var x0 = crds[c], y0 = crds[c + 1], x1 = crds[c + 2], y1 = crds[c + 3], x2 = crds[c + 4], y2 = crds[c + 5], x3 = crds[c + 6], y3 = crds[c + 7]; c += 8;\n        //y0+=400;  y1+=400;  y1+=600;\n        if (upng == null) {\n          ctx.moveTo(x0, y0); ctx.lineTo(x1, y1); ctx.lineTo(x2, y2); ctx.lineTo(x3, y3); ctx.closePath();\n          continue;\n        }\n        var dx0 = (x1 - x0), dy0 = (y1 - y0), dx1 = (x3 - x0), dy1 = (y3 - y0);\n        var sbmp = atob(cmd.slice(22));\n        var bmp = new Uint8Array(sbmp.length);\n        for (var i = 0; i < sbmp.length; i++) bmp[i] = sbmp.charCodeAt(i);\n\n        var img = upng[\"decode\"](bmp.buffer), w = img[\"width\"], h = img[\"height\"];  //console.log(img);\n\n        var nbmp = new Uint8Array(upng[\"toRGBA8\"](img)[0]);\n        var tr = ctx[\"getTransform\"]();\n        var scl = Math.sqrt(Math.abs(tr[\"a\"] * tr[\"d\"] - tr[\"b\"] * tr[\"c\"])) * Math.sqrt(dx1 * dx1 + dy1 * dy1) / h;\n        while (scl < 0.5) {\n          var nd = mipmapB(nbmp, w, h);\n          nbmp = nd.buff; w = nd.w; h = nd.h; scl *= 2;\n        }\n\n        if (__cnv == null) { __cnv = document.createElement(\"canvas\"); __ct = __cnv.getContext(\"2d\"); }\n        if (__cnv.width != w || __cnv.height != h) { __cnv.width = w; __cnv.height = h; }\n\n        __ct.putImageData(new ImageData(new Uint8ClampedArray(nbmp.buffer), w, h), 0, 0);\n        ctx.save();\n        ctx.transform(dx0, dy0, dx1, dy1, x0, y0);\n        ctx.scale(1 / w, 1 / h);\n        ctx.drawImage(__cnv, 0, 0); //*/\n        ctx.restore();\n      }\n      else if (cmd.charAt(0) == \"#\" || cmd.charAt(0) == \"r\") {\n        ctx.beginPath();\n        ctx.fillStyle = cmd;\n      }\n      else if (cmd.charAt(0) == \"O\" && cmd != \"OX\") {\n        ctx.beginPath();\n        var pts = cmd.split(\"-\");\n        ctx.lineWidth = parseFloat(pts[2]);\n        ctx.lineCap = [\"butt\", \"round\", \"square\"][parseFloat(pts[3])];\n        ctx.lineJoin = [\"miter\", \"round\", \"bevel\"][parseFloat(pts[4])];\n        ctx.miterLimit = parseFloat(pts[5]);\n        ctx.lineDashOffset = parseFloat(pts[6]);\n        ctx.setLineDash(pts[7].split(\",\").map(parseFloat));\n        ctx.strokeStyle = pts[1];\n      }\n      else if (cmd == \"Z\") {\n        ctx.closePath();\n      }\n      else if (cmd == \"X\") {\n        ctx.fill();\n      }\n      else if (cmd == \"OX\") {\n        ctx.stroke();\n      }\n    }\n  }\n\n\n  function _drawCFF(cmds, state, font, pdct, p) {\n    var stack = state.stack;\n    var nStems = state.nStems, haveWidth = state.haveWidth, width = state.width, open = state.open;\n    var i = 0;\n    var x = state.x, y = state.y, c1x = 0, c1y = 0, c2x = 0, c2y = 0, c3x = 0, c3y = 0, c4x = 0, c4y = 0, jpx = 0, jpy = 0;\n    var CFF = Typr[\"T\"].CFF;\n\n    var nominalWidthX = pdct[\"nominalWidthX\"];\n    var o = { val: 0, size: 0 };\n    //console.log(cmds);\n    while (i < cmds.length) {\n      CFF.getCharString(cmds, i, o);\n      var v = o.val;\n      i += o.size;\n\n      if (v == \"o1\" || v == \"o18\")  //  hstem || hstemhm\n      {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n      }\n      else if (v == \"o3\" || v == \"o23\")  // vstem || vstemhm\n      {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n      }\n      else if (v == \"o4\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n        if (open) P.ClosePath(p);\n\n        y += stack.pop();\n        P.MoveTo(p, x, y); open = true;\n      }\n      else if (v == \"o5\") {\n        while (stack.length > 0) {\n          x += stack.shift();\n          y += stack.shift();\n          P.LineTo(p, x, y);\n        }\n      }\n      else if (v == \"o6\" || v == \"o7\")  // hlineto || vlineto\n      {\n        var count = stack.length;\n        var isX = (v == \"o6\");\n\n        for (var j = 0; j < count; j++) {\n          var sval = stack.shift();\n\n          if (isX) x += sval; else y += sval;\n          isX = !isX;\n          P.LineTo(p, x, y);\n        }\n      }\n      else if (v == \"o8\" || v == \"o24\")\t// rrcurveto || rcurveline\n      {\n        var count = stack.length;\n        var index = 0;\n        while (index + 6 <= count) {\n          c1x = x + stack.shift();\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y + stack.shift();\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n          index += 6;\n        }\n        if (v == \"o24\") {\n          x += stack.shift();\n          y += stack.shift();\n          P.LineTo(p, x, y);\n        }\n      }\n      else if (v == \"o11\") break;\n      else if (v == \"o1234\" || v == \"o1235\" || v == \"o1236\" || v == \"o1237\")//if((v+\"\").slice(0,3)==\"o12\")\n      {\n        if (v == \"o1234\") {\n          c1x = x + stack.shift();    // dx1\n          c1y = y;                      // dy1\n          c2x = c1x + stack.shift();    // dx2\n          c2y = c1y + stack.shift();    // dy2\n          jpx = c2x + stack.shift();    // dx3\n          jpy = c2y;                    // dy3\n          c3x = jpx + stack.shift();    // dx4\n          c3y = c2y;                    // dy4\n          c4x = c3x + stack.shift();    // dx5\n          c4y = y;                      // dy5\n          x = c4x + stack.shift();      // dx6\n          P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n          P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n\n        }\n        if (v == \"o1235\") {\n          c1x = x + stack.shift();    // dx1\n          c1y = y + stack.shift();    // dy1\n          c2x = c1x + stack.shift();    // dx2\n          c2y = c1y + stack.shift();    // dy2\n          jpx = c2x + stack.shift();    // dx3\n          jpy = c2y + stack.shift();    // dy3\n          c3x = jpx + stack.shift();    // dx4\n          c3y = jpy + stack.shift();    // dy4\n          c4x = c3x + stack.shift();    // dx5\n          c4y = c3y + stack.shift();    // dy5\n          x = c4x + stack.shift();      // dx6\n          y = c4y + stack.shift();      // dy6\n          stack.shift();                // flex depth\n          P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n          P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n        }\n        if (v == \"o1236\") {\n          c1x = x + stack.shift();    // dx1\n          c1y = y + stack.shift();    // dy1\n          c2x = c1x + stack.shift();    // dx2\n          c2y = c1y + stack.shift();    // dy2\n          jpx = c2x + stack.shift();    // dx3\n          jpy = c2y;                    // dy3\n          c3x = jpx + stack.shift();    // dx4\n          c3y = c2y;                    // dy4\n          c4x = c3x + stack.shift();    // dx5\n          c4y = c3y + stack.shift();    // dy5\n          x = c4x + stack.shift();      // dx6\n          P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n          P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n        }\n        if (v == \"o1237\") {\n          c1x = x + stack.shift();    // dx1\n          c1y = y + stack.shift();    // dy1\n          c2x = c1x + stack.shift();    // dx2\n          c2y = c1y + stack.shift();    // dy2\n          jpx = c2x + stack.shift();    // dx3\n          jpy = c2y + stack.shift();    // dy3\n          c3x = jpx + stack.shift();    // dx4\n          c3y = jpy + stack.shift();    // dy4\n          c4x = c3x + stack.shift();    // dx5\n          c4y = c3y + stack.shift();    // dy5\n          if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n            x = c4x + stack.shift();\n          } else {\n            y = c4y + stack.shift();\n          }\n          P.CurveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n          P.CurveTo(p, c3x, c3y, c4x, c4y, x, y);\n        }\n      }\n      else if (v == \"o14\") {\n        if (stack.length > 0 && stack.length != 4 && !haveWidth) {\n          width = stack.shift() + font[\"nominalWidthX\"];\n          haveWidth = true;\n        }\n        if (stack.length == 4) // seac = standard encoding accented character\n        {\n          var adx = stack.shift();\n          var ady = stack.shift();\n          var bchar = stack.shift();\n          var achar = stack.shift();\n\n\n          var bind = CFF.glyphBySE(font, bchar);\n          var aind = CFF.glyphBySE(font, achar);\n\n          //console.log(bchar, bind);\n          //console.log(achar, aind);\n          //state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\n          _drawCFF(font[\"CharStrings\"][bind], state, font, pdct, p);\n          state.x = adx; state.y = ady;\n          _drawCFF(font[\"CharStrings\"][aind], state, font, pdct, p);\n\n          //x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n        }\n        if (open) { P.ClosePath(p); open = false; }\n      }\n      else if (v == \"o19\" || v == \"o20\") {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n\n        i += (nStems + 7) >> 3;\n      }\n\n      else if (v == \"o21\") {\n        if (stack.length > 2 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n\n        y += stack.pop();\n        x += stack.pop();\n\n        if (open) P.ClosePath(p);\n        P.MoveTo(p, x, y); open = true;\n      }\n      else if (v == \"o22\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + nominalWidthX;\n          haveWidth = true;\n        }\n\n        x += stack.pop();\n\n        if (open) P.ClosePath(p);\n        P.MoveTo(p, x, y); open = true;\n      }\n      else if (v == \"o25\") {\n        while (stack.length > 6) {\n          x += stack.shift();\n          y += stack.shift();\n          P.LineTo(p, x, y);\n        }\n\n        c1x = x + stack.shift();\n        c1y = y + stack.shift();\n        c2x = c1x + stack.shift();\n        c2y = c1y + stack.shift();\n        x = c2x + stack.shift();\n        y = c2y + stack.shift();\n        P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n      }\n      else if (v == \"o26\") {\n        if (stack.length % 2) {\n          x += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x;\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x;\n          y = c2y + stack.shift();\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n\n      }\n      else if (v == \"o27\") {\n        if (stack.length % 2) {\n          y += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x + stack.shift();\n          c1y = y;\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y;\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      }\n      else if (v == \"o10\" || v == \"o29\")\t// callsubr || callgsubr\n      {\n        var obj = (v == \"o10\" ? pdct : font);\n        if (stack.length == 0) { console.log(\"error: empty stack\"); }\n        else {\n          var ind = stack.pop();\n          var subr = obj[\"Subrs\"][ind + obj[\"Bias\"]];\n          state.x = x; state.y = y; state.nStems = nStems; state.haveWidth = haveWidth; state.width = width; state.open = open;\n          _drawCFF(subr, state, font, pdct, p);\n          x = state.x; y = state.y; nStems = state.nStems; haveWidth = state.haveWidth; width = state.width; open = state.open;\n        }\n      }\n      else if (v == \"o30\" || v == \"o31\")   // vhcurveto || hvcurveto\n      {\n        var count, count1 = stack.length;\n        var index = 0;\n        var alternate = v == \"o31\";\n\n        count = count1 & -3;\n        index += count1 - count;\n\n        while (index < count) {\n          if (alternate) {\n            c1x = x + stack.shift();\n            c1y = y;\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            y = c2y + stack.shift();\n            if (count - index == 5) { x = c2x + stack.shift(); index++; }\n            else x = c2x;\n            alternate = false;\n          }\n          else {\n            c1x = x;\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            if (count - index == 5) { y = c2y + stack.shift(); index++; }\n            else y = c2y;\n            alternate = true;\n          }\n          P.CurveTo(p, c1x, c1y, c2x, c2y, x, y);\n          index += 4;\n        }\n      }\n\n      else if ((v + \"\").charAt(0) == \"o\") { console.log(\"Unknown operation: \" + v, cmds); throw v; }\n      else stack.push(v);\n    }\n    //console.log(cmds);\n    state.x = x; state.y = y; state.nStems = nStems; state.haveWidth = haveWidth; state.width = width; state.open = open;\n  }\n\n  function initHB(hurl, resp) {\n    var codeLength = function (code) {\n      var len = 0;\n      if ((code & (0xffffffff - (1 << 7) + 1)) == 0) { len = 1; }\n      else if ((code & (0xffffffff - (1 << 11) + 1)) == 0) { len = 2; }\n      else if ((code & (0xffffffff - (1 << 16) + 1)) == 0) { len = 3; }\n      else if ((code & (0xffffffff - (1 << 21) + 1)) == 0) { len = 4; }\n      return len;\n    };\n\n    fetch(hurl)\n      .then(function (x) { return x[\"arrayBuffer\"](); })\n      .then(function (ab) { return WebAssembly[\"instantiate\"](ab); })\n      .then(function (res) {\n        console.log(\"HB ready\");\n        var exp = res[\"instance\"][\"exports\"], mem = exp[\"memory\"];\n        //mem[\"grow\"](30); // each page is 64kb in size\n        var heapu8, u32, i32, f32;\n        var __lastFnt, blob, blobPtr, face, font;\n\n        Typr[\"U\"][\"shapeHB\"] = (function () {\n\n          var toJson = function (ptr) {\n            var length = exp[\"hb_buffer_get_length\"](ptr);\n            var result = [];\n            var iPtr32 = exp[\"hb_buffer_get_glyph_infos\"](ptr, 0) >>> 2;\n            var pPtr32 = exp[\"hb_buffer_get_glyph_positions\"](ptr, 0) >>> 2;\n            for (var i = 0; i < length; ++i) {\n              var a = iPtr32 + i * 5, b = pPtr32 + i * 5;\n              result.push({\n                \"g\": u32[a + 0],\n                \"cl\": u32[a + 2],\n                \"ax\": i32[b + 0],\n                \"ay\": i32[b + 1],\n                \"dx\": i32[b + 2],\n                \"dy\": i32[b + 3]\n              });\n            }\n            //console.log(result);\n            return result;\n          };\n          var te;\n\n          return function (fnt, str, prm) {\n            var fdata = fnt[\"_data\"], fn = fnt[\"name\"][\"postScriptName\"];\n            var ltr = prm[\"ltr\"], fts = prm[\"fts\"], axs = prm[\"axs\"];\n            if (fnt[\"fvar\"] && axs == null) axs = fnt[\"fvar\"][1][fnt[\"_index\"]][2];\n\n            //var olen = mem.buffer.byteLength, nlen = 2*fdata.length+str.length*16 + 4e6;\n            //if(olen<nlen) mem[\"grow\"](((nlen-olen)>>>16)+4);  //console.log(\"growing\",nlen);\n\n            heapu8 = new Uint8Array(mem.buffer);\n            u32 = new Uint32Array(mem.buffer);\n            i32 = new Int32Array(mem.buffer);\n            f32 = new Float32Array(mem.buffer);\n\n            if (__lastFnt != fn) {\n              if (blob != null) {\n                exp[\"hb_blob_destroy\"](blob);\n                exp[\"free\"](blobPtr);\n                exp[\"hb_face_destroy\"](face);\n                exp[\"hb_font_destroy\"](font);\n              }\n              blobPtr = exp[\"malloc\"](fdata.byteLength); heapu8.set(fdata, blobPtr);\n              blob = exp[\"hb_blob_create\"](blobPtr, fdata.byteLength, 2, 0, 0);\n              face = exp[\"hb_face_create\"](blob, fnt[\"_index\"]);\n              font = exp[\"hb_font_create\"](face);\n              __lastFnt = fn;\n            }\n            if (window[\"TextEncoder\"] == null) { alert(\"Your browser is too old. Please, update it.\"); return; }\n            if (te == null) te = new window[\"TextEncoder\"](\"utf8\");\n\n            var buffer = exp[\"hb_buffer_create\"]();\n            var bytes = te[\"encode\"](str);\n            var len = bytes.length, strp = exp[\"malloc\"](len); heapu8.set(bytes, strp);\n            exp[\"hb_buffer_add_utf8\"](buffer, strp, len, 0, len);\n            exp[\"free\"](strp);\n\n            var bin = Typr[\"B\"];\n\n            var feat = 0;\n            if (fts) {\n              feat = exp[\"malloc\"](16 * fts.length);\n              for (var i = 0; i < fts.length; i++) {\n                var fe = fts[i];\n                var off = feat + i * 16, qo = off >>> 2;\n                bin.writeASCII(heapu8, off, fe[0].split(\"\").reverse().join(\"\"));\n                u32[qo + 1] = fe[1];\n                u32[qo + 2] = fe[2];\n                u32[qo + 3] = fe[3];\n              }\n              //console.log(fts);\n            }\n            var vdat = 0;\n            if (axs && fnt[\"fvar\"]) {\n              var axes = fnt[\"fvar\"][0];  //console.log(axes, axs);\n              vdat = exp[\"malloc\"](8 * axs.length);\n              for (var i = 0; i < axs.length; i++) {\n                var off = vdat + i * 8, qo = off >>> 2;\n                bin.writeASCII(heapu8, off, axes[i][0].split(\"\").reverse().join(\"\"));\n                f32[qo + 1] = axs[i];\n              }\n            }\n            //*/\n\n            if (axs) exp[\"hb_font_set_variations\"](font, vdat, axs.length);\n            exp[\"hb_buffer_set_direction\"](buffer, ltr ? 4 : 5);\n            exp[\"hb_buffer_guess_segment_properties\"](buffer);\n            exp[\"hb_shape\"](font, buffer, feat, fts ? fts.length : 0);\n            var json = toJson(buffer);//buffer[\"json\"]();\n            exp[\"hb_buffer_destroy\"](buffer);\n            if (fts) exp[\"free\"](feat);\n            if (axs) exp[\"free\"](vdat);\n\n            var arr = json.slice(0); if (!ltr) arr.reverse();\n            var ci = 0, bi = 0;  // character index, binary index\n            for (var i = 1; i < arr.length; i++) {\n              var gl = arr[i], cl = gl[\"cl\"];\n              while (true) {\n                var cpt = str.codePointAt(ci), cln = codeLength(cpt);\n                if (bi + cln <= cl) { bi += cln; ci += cpt <= 0xffff ? 1 : 2; }\n                else break;\n              }\n              //while(bi+codeLength(str.charCodeAt(ci)) <=cl) {  bi+=codeLength(str.charCodeAt(ci));  ci++;  }\n              gl[\"cl\"] = ci;\n            }\n            return json;\n          }\n        }());\n        resp();\n      });\n  }\n\n  return { \"shape\": shape, \"shapeToPath\": shapeToPath, \"codeToGlyph\": codeToGlyph, \"glyphToPath\": glyphToPath, \"pathToSVG\": pathToSVG, \"SVGToPath\": SVGToPath, \"pathToContext\": pathToContext, \"initHB\": initHB };\n}();\n\nexport { Typr as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}