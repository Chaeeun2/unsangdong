{"ast":null,"code":"/**\n * @module Data\n * @submodule LocalStorage\n * @requires core\n *\n * This module defines the p5 methods for working with local storage\n */\n\nfunction storage(p5, fn) {\n  /**\n   * Stores a value in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * `storeItem()` makes it easy to store values in `localStorage` and\n   * <a href=\"#/p5/getItem\">getItem()</a> makes it easy to retrieve them.\n   *\n   * The first parameter, `key`, is the name of the value to be stored as a\n   * string.\n   *\n   * The second parameter, `value`, is the value to be stored. Values can have\n   * any type.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method storeItem\n   * @for p5\n   * @param {String} key name of the value.\n   * @param {String|Number|Boolean|Object|Array} value value to be stored.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe('The text \"Feist: 1234\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an object.\n   *   let p = { x: 50, y: 50 };\n   *\n   *   // Store the object.\n   *   storeItem('position', p);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let p = getItem('position');\n   *\n   *   // Draw the circle.\n   *   circle(p.x, p.y, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Store the object.\n   *   storeItem('color', c);\n   *\n   *   describe('A pink circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let c = getItem('color');\n   *\n   *   // Style the circle.\n   *   fill(c);\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 30);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.storeItem = function (key, value) {\n    if (typeof key !== 'string') {\n      console.log(`The argument that you passed to storeItem() - ${key} is not a string.`);\n    }\n    if (key.endsWith('p5TypeID')) {\n      console.log(`The argument that you passed to storeItem() - ${key} must not end with 'p5TypeID'.`);\n    }\n    if (typeof value === 'undefined') {\n      console.log('You cannot store undefined variables using storeItem().');\n    }\n    let type = typeof value;\n    switch (type) {\n      case 'number':\n      case 'boolean':\n        value = value.toString();\n        break;\n      case 'object':\n        if (value instanceof p5.Color) {\n          type = 'p5.Color';\n          value = value.toString();\n        } else if (value instanceof p5.Vector) {\n          type = 'p5.Vector';\n          const coord = [value.x, value.y, value.z];\n          value = coord;\n        }\n        value = JSON.stringify(value);\n        break;\n    }\n    localStorage.setItem(key, value);\n    const typeKey = `${key}p5TypeID`;\n    localStorage.setItem(typeKey, type);\n  };\n\n  /**\n   * Returns a value in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * <a href=\"#/p5/storeItem\">storeItem()</a> makes it easy to store values in\n   * `localStorage` and `getItem()` makes it easy to retrieve them.\n   *\n   * The first parameter, `key`, is the name of the value to be stored as a\n   * string.\n   *\n   * The second parameter, `value`, is the value to be retrieved a string. For\n   * example, calling `getItem('size')` retrieves the value with the key `size`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method getItem\n   * @for p5\n   * @param {String} key name of the value.\n   * @return {String|Number|Boolean|Object|Array} stored item.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe('The text \"Feist: 1234\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an object.\n   *   let p = { x: 50, y: 50 };\n   *\n   *   // Store the object.\n   *   storeItem('position', p);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let p = getItem('position');\n   *\n   *   // Draw the circle.\n   *   circle(p.x, p.y, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Store the object.\n   *   storeItem('color', c);\n   *\n   *   describe('A pink circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let c = getItem('color');\n   *\n   *   // Style the circle.\n   *   fill(c);\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 30);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getItem = function (key) {\n    let value = localStorage.getItem(key);\n    const type = localStorage.getItem(`${key}p5TypeID`);\n    if (typeof type === 'undefined') {\n      console.log(`Unable to determine type of item stored under ${key}in local storage. Did you save the item with something other than setItem()?`);\n    } else if (value !== null) {\n      switch (type) {\n        case 'number':\n          value = parseFloat(value);\n          break;\n        case 'boolean':\n          value = value === 'true';\n          break;\n        case 'object':\n          value = JSON.parse(value);\n          break;\n        case 'p5.Color':\n          value = this.color(JSON.parse(value));\n          break;\n        case 'p5.Vector':\n          value = JSON.parse(value);\n          value = this.createVector(...value);\n          break;\n      }\n    }\n    return value;\n  };\n\n  /**\n   * Removes all items in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs. Calling `clearStorage()` removes all data from `localStorage`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method clearStorage\n   * @for p5\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click to clear localStorage.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe(\n   *     'The text \"Feist: 1234\" written in black on a gray background. The text \"null: null\" appears when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   *\n   * // Clear localStorage when the user double-clicks.\n   * function doubleClicked() {\n   *   clearStorage();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.clearStorage = function () {\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.endsWith('p5TypeID')) {\n        this.removeItem(key.replace('p5TypeID', ''));\n      }\n    });\n  };\n\n  /**\n   * Removes an item from the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * <a href=\"#/p5/storeItem\">storeItem()</a> makes it easy to store values in\n   * `localStorage` and `removeItem()` makes it easy to delete them.\n   *\n   * The parameter, `key`, is the name of the value to remove as a string. For\n   * example, calling `removeItem('size')` removes the item with the key `size`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method removeItem\n   * @param {String} key name of the value to remove.\n   * @for p5\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click to remove an item from localStorage.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe(\n   *     'The text \"Feist: 1234\" written in black on a gray background. The text \"Feist: null\" appears when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   *\n   * // Remove the word from localStorage when the user double-clicks.\n   * function doubleClicked() {\n   *   removeItem('score');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.removeItem = function (key) {\n    if (typeof key !== 'string') {\n      console.log(`The argument that you passed to removeItem() - ${key} is not a string.`);\n    }\n    localStorage.removeItem(key);\n    localStorage.removeItem(`${key}p5TypeID`);\n  };\n}\nif (typeof p5 !== 'undefined') {\n  storage(p5, p5.prototype);\n}\nexport { storage as default };","map":{"version":3,"names":["storage","p5","fn","storeItem","key","value","console","log","endsWith","type","toString","Color","Vector","coord","x","y","z","JSON","stringify","localStorage","setItem","typeKey","getItem","parseFloat","parse","color","createVector","clearStorage","keys","Object","forEach","removeItem","replace","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/data/local_storage.js"],"sourcesContent":["/**\n * @module Data\n * @submodule LocalStorage\n * @requires core\n *\n * This module defines the p5 methods for working with local storage\n */\n\nfunction storage(p5, fn){\n  /**\n   * Stores a value in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * `storeItem()` makes it easy to store values in `localStorage` and\n   * <a href=\"#/p5/getItem\">getItem()</a> makes it easy to retrieve them.\n   *\n   * The first parameter, `key`, is the name of the value to be stored as a\n   * string.\n   *\n   * The second parameter, `value`, is the value to be stored. Values can have\n   * any type.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method storeItem\n   * @for p5\n   * @param {String} key name of the value.\n   * @param {String|Number|Boolean|Object|Array} value value to be stored.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe('The text \"Feist: 1234\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an object.\n   *   let p = { x: 50, y: 50 };\n   *\n   *   // Store the object.\n   *   storeItem('position', p);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let p = getItem('position');\n   *\n   *   // Draw the circle.\n   *   circle(p.x, p.y, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Store the object.\n   *   storeItem('color', c);\n   *\n   *   describe('A pink circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let c = getItem('color');\n   *\n   *   // Style the circle.\n   *   fill(c);\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 30);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.storeItem = function(key, value) {\n    if (typeof key !== 'string') {\n      console.log(\n        `The argument that you passed to storeItem() - ${key} is not a string.`\n      );\n    }\n    if (key.endsWith('p5TypeID')) {\n      console.log(\n        `The argument that you passed to storeItem() - ${key} must not end with 'p5TypeID'.`\n      );\n    }\n\n    if (typeof value === 'undefined') {\n      console.log('You cannot store undefined variables using storeItem().');\n    }\n    let type = typeof value;\n    switch (type) {\n      case 'number':\n      case 'boolean':\n        value = value.toString();\n        break;\n      case 'object':\n        if (value instanceof p5.Color) {\n          type = 'p5.Color';\n          value = value.toString();\n        } else if (value instanceof p5.Vector) {\n          type = 'p5.Vector';\n          const coord = [value.x, value.y, value.z];\n          value = coord;\n        }\n        value = JSON.stringify(value);\n        break;\n    }\n\n    localStorage.setItem(key, value);\n    const typeKey = `${key}p5TypeID`;\n    localStorage.setItem(typeKey, type);\n  };\n\n  /**\n   * Returns a value in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * <a href=\"#/p5/storeItem\">storeItem()</a> makes it easy to store values in\n   * `localStorage` and `getItem()` makes it easy to retrieve them.\n   *\n   * The first parameter, `key`, is the name of the value to be stored as a\n   * string.\n   *\n   * The second parameter, `value`, is the value to be retrieved a string. For\n   * example, calling `getItem('size')` retrieves the value with the key `size`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method getItem\n   * @for p5\n   * @param {String} key name of the value.\n   * @return {String|Number|Boolean|Object|Array} stored item.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe('The text \"Feist: 1234\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an object.\n   *   let p = { x: 50, y: 50 };\n   *\n   *   // Store the object.\n   *   storeItem('position', p);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let p = getItem('position');\n   *\n   *   // Draw the circle.\n   *   circle(p.x, p.y, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Store the object.\n   *   storeItem('color', c);\n   *\n   *   describe('A pink circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Retrieve the object.\n   *   let c = getItem('color');\n   *\n   *   // Style the circle.\n   *   fill(c);\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 30);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getItem = function(key) {\n    let value = localStorage.getItem(key);\n    const type = localStorage.getItem(`${key}p5TypeID`);\n    if (typeof type === 'undefined') {\n      console.log(\n        `Unable to determine type of item stored under ${key}in local storage. Did you save the item with something other than setItem()?`\n      );\n    } else if (value !== null) {\n      switch (type) {\n        case 'number':\n          value = parseFloat(value);\n          break;\n        case 'boolean':\n          value = value === 'true';\n          break;\n        case 'object':\n          value = JSON.parse(value);\n          break;\n        case 'p5.Color':\n          value = this.color(JSON.parse(value));\n          break;\n        case 'p5.Vector':\n          value = JSON.parse(value);\n          value = this.createVector(...value);\n          break;\n      }\n    }\n    return value;\n  };\n\n  /**\n   * Removes all items in the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs. Calling `clearStorage()` removes all data from `localStorage`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method clearStorage\n   * @for p5\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click to clear localStorage.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe(\n   *     'The text \"Feist: 1234\" written in black on a gray background. The text \"null: null\" appears when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   *\n   * // Clear localStorage when the user double-clicks.\n   * function doubleClicked() {\n   *   clearStorage();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.clearStorage = function () {\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.endsWith('p5TypeID')) {\n        this.removeItem(key.replace('p5TypeID', ''));\n      }\n    });\n  };\n\n  /**\n   * Removes an item from the web browser's local storage.\n   *\n   * Web browsers can save small amounts of data using the built-in\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">localStorage object</a>.\n   * Data stored in `localStorage` can be retrieved at any point, even after\n   * refreshing a page or restarting the browser. Data are stored as key-value\n   * pairs.\n   *\n   * <a href=\"#/p5/storeItem\">storeItem()</a> makes it easy to store values in\n   * `localStorage` and `removeItem()` makes it easy to delete them.\n   *\n   * The parameter, `key`, is the name of the value to remove as a string. For\n   * example, calling `removeItem('size')` removes the item with the key `size`.\n   *\n   * Note: Sensitive data such as passwords or personal information shouldn't be\n   * stored in `localStorage`.\n   *\n   * @method removeItem\n   * @param {String} key name of the value to remove.\n   * @for p5\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Double-click to remove an item from localStorage.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Store the player's name.\n   *   storeItem('name', 'Feist');\n   *\n   *   // Store the player's score.\n   *   storeItem('score', 1234);\n   *\n   *   describe(\n   *     'The text \"Feist: 1234\" written in black on a gray background. The text \"Feist: null\" appears when the user double-clicks.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Retrieve the name.\n   *   let name = getItem('name');\n   *\n   *   // Retrieve the score.\n   *   let score = getItem('score');\n   *\n   *   // Display the score.\n   *   text(`${name}: ${score}`, 50, 50);\n   * }\n   *\n   * // Remove the word from localStorage when the user double-clicks.\n   * function doubleClicked() {\n   *   removeItem('score');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.removeItem = function(key) {\n    if (typeof key !== 'string') {\n      console.log(\n        `The argument that you passed to removeItem() - ${key} is not a string.`\n      );\n    }\n    localStorage.removeItem(key);\n    localStorage.removeItem(`${key}p5TypeID`);\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  storage(p5, p5.prototype);\n}\n\nexport { storage as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAOA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACtlC,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;MAC3BE,OAAO,CAACC,GAAG,CACT,iDAAiDH,GAAG,mBACtD,CAAC;IACH;IACA,IAAIA,GAAG,CAACI,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC5BF,OAAO,CAACC,GAAG,CACT,iDAAiDH,GAAG,gCACtD,CAAC;IACH;IAEA,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;MAChCC,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;IACxE;IACA,IAAIE,IAAI,GAAG,OAAOJ,KAAK;IACvB,QAAQI,IAAI;MACV,KAAK,QAAQ;MACb,KAAK,SAAS;QACZJ,KAAK,GAAGA,KAAK,CAACK,QAAQ,CAAC,CAAC;QACxB;MACF,KAAK,QAAQ;QACX,IAAIL,KAAK,YAAYJ,EAAE,CAACU,KAAK,EAAE;UAC7BF,IAAI,GAAG,UAAU;UACjBJ,KAAK,GAAGA,KAAK,CAACK,QAAQ,CAAC,CAAC;QAC1B,CAAC,MAAM,IAAIL,KAAK,YAAYJ,EAAE,CAACW,MAAM,EAAE;UACrCH,IAAI,GAAG,WAAW;UAClB,MAAMI,KAAK,GAAG,CAACR,KAAK,CAACS,CAAC,EAAET,KAAK,CAACU,CAAC,EAAEV,KAAK,CAACW,CAAC,CAAC;UACzCX,KAAK,GAAGQ,KAAK;QACf;QACAR,KAAK,GAAGY,IAAI,CAACC,SAAS,CAACb,KAAK,CAAC;QAC7B;IACJ;IAEAc,YAAY,CAACC,OAAO,CAAChB,GAAG,EAAEC,KAAK,CAAC;IAChC,MAAMgB,OAAO,GAAG,GAAGjB,GAAG,UAAU;IAChCe,YAAY,CAACC,OAAO,CAACC,OAAO,EAAEZ,IAAI,CAAC;EACroB,OAAO,GAAG,UAASlB,GAAG,EAAE;IACzB,IAAIC,KAAK,GAAGc,YAAY,CAACG,OAAO,CAAClB,GAAG,CAAC;IACrC,MAAMK,IAAI,GAAGU,YAAY,CAACG,OAAO,CAAC,GAAGlB,GAAG,UAAU,CAAC;IACnD,IAAI,OAAOK,IAAI,KAAK,WAAW,EAAE;MAC/BH,OAAO,CAACC,GAAG,CACT,iDAAiDH,GAAG,8EACtD,CAAC;IACH,CAAC,MAAM,IAAIC,KAAK,KAAK,IAAI,EAAE;MACzB,QAAQI,IAAI;QACV,KAAK,QAAQ;UACXJ,KAAK,GAAGkB,UAAU,CAAClB,KAAK,CAAC;UACzB;QACF,KAAK,SAAS;UACZA,KAAK,GAAGA,KAAK,KAAK,MAAM;UACxB;QACF,KAAK,QAAQ;UACXA,KAAK,GAAGY,IAAI,CAACO,KAAK,CAACnB,KAAK,CAAC;UACzB;QACF,KAAK,UAAU;UACbA,KAAK,GAAG,IAAI,CAACoB,KAAK,CAACR,IAAI,CAACO,KAAK,CAACnB,KAAK,CAAC,CAAC;UACrC;QACF,KAAK,WAAW;UACdA,KAAK,GAAGY,IAAI,CAACO,KAAK,CAACnB,KAAK,CAAC;UACzBA,KAAK,GAAG,IAAI,CAACqB,YAAY,CAAC,GAAGrB,KAAK,CAAC;UACnC;MACJ;IACF;IACA,OAAOA,KAAK;EACd,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEH,EAAE,CAACyB,YAAY,GAAG,YAAY;IAC5B,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACT,YAAY,CAAC;IACtCS,IAAI,CAACE,OAAO,CAAC1B,GAAG,IAAI;MAClB,IAAIA,GAAG,CAACI,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC5B,IAAI,CAACuB,UAAU,CAAC3B,GAAG,CAAC4B,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE9B,EAAE,CAAC6B,UAAU,GAAG,UAAS3B,GAAG,EAAE;IAC5B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC3BE,OAAO,CAACC,GAAG,CACT,kDAAkDH,GAAG,mBACvD,CAAC;IACH;IACAe,YAAY,CAACY,UAAU,CAAC3B,GAAG,CAAC;IAC5Be,YAAY,CAACY,UAAU,CAAC,GAAG3B,GAAG,UAAU,CAAC;EAC3C,CAAC;AACH;AAEA,IAAG,OAAOH,EAAE,KAAK,WAAW,EAAC;EAC3BD,OAAO,CAACC,EAAE,EAAEA,EAAE,CAACgC,SAAS,CAAC;AAC3B;AAEA,SAASjC,OAAO,IAAIkC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}