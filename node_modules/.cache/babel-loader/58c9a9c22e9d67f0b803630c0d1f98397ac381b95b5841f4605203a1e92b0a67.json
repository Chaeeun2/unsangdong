{"ast":null,"code":"import ColorSpace from \"../space.js\";\nimport HSV from \"./hsv.js\";\n\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nexport default new ColorSpace({\n  id: \"hwb\",\n  name: \"HWB\",\n  coords: {\n    h: {\n      refRange: [0, 360],\n      type: \"angle\",\n      name: \"Hue\"\n    },\n    w: {\n      range: [0, 100],\n      name: \"Whiteness\"\n    },\n    b: {\n      range: [0, 100],\n      name: \"Blackness\"\n    }\n  },\n  base: HSV,\n  fromBase(hsv) {\n    let [h, s, v] = hsv;\n    return [h, v * (100 - s) / 100, 100 - v];\n  },\n  toBase(hwb) {\n    let [h, w, b] = hwb;\n\n    // Now convert percentages to [0..1]\n    w /= 100;\n    b /= 100;\n\n    // Achromatic check (white plus black >= 1)\n    let sum = w + b;\n    if (sum >= 1) {\n      let gray = w / sum;\n      return [h, 0, gray * 100];\n    }\n    let v = 1 - b;\n    let s = v === 0 ? 0 : 1 - w / v;\n    return [h, s * 100, v * 100];\n  },\n  formats: {\n    \"hwb\": {\n      coords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"]\n    }\n  }\n});","map":{"version":3,"names":["ColorSpace","HSV","id","name","coords","h","refRange","type","w","range","b","base","fromBase","hsv","s","v","toBase","hwb","sum","gray","formats"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/spaces/hwb.js"],"sourcesContent":["import ColorSpace from \"../space.js\";\nimport HSV from \"./hsv.js\";\n\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nexport default new ColorSpace({\n\tid: \"hwb\",\n\tname: \"HWB\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\tw: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Whiteness\",\n\t\t},\n\t\tb: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Blackness\",\n\t\t},\n\t},\n\n\tbase: HSV,\n\tfromBase (hsv) {\n\t\tlet [h, s, v] = hsv;\n\n\t\treturn [h, v * (100 - s) / 100, 100 - v];\n\t},\n\ttoBase (hwb) {\n\t\tlet [h, w, b] = hwb;\n\n\t\t// Now convert percentages to [0..1]\n\t\tw /= 100;\n\t\tb /= 100;\n\n\t\t// Achromatic check (white plus black >= 1)\n\t\tlet sum = w + b;\n\t\tif (sum >= 1) {\n\t\t\tlet gray = w / sum;\n\t\t\treturn [h, 0, gray * 100];\n\t\t}\n\n\t\tlet v = (1 - b);\n\t\tlet s = (v === 0) ? 0 : 1 - w / v;\n\t\treturn [h, s * 100, v * 100];\n\t},\n\n\tformats: {\n\t\t\"hwb\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AACpC,OAAOC,GAAG,MAAM,UAAU;;AAE1B;AACA;AACA;AACA;;AAEA,eAAe,IAAID,UAAU,CAAC;EAC7BE,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,KAAK;EACXC,MAAM,EAAE;IACPC,CAAC,EAAE;MACFC,QAAQ,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;MAClBC,IAAI,EAAE,OAAO;MACbJ,IAAI,EAAE;IACP,CAAC;IACDK,CAAC,EAAE;MACFC,KAAK,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;MACfN,IAAI,EAAE;IACP,CAAC;IACDO,CAAC,EAAE;MACFD,KAAK,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;MACfN,IAAI,EAAE;IACP;EACD,CAAC;EAEDQ,IAAI,EAAEV,GAAG;EACTW,QAAQA,CAAEC,GAAG,EAAE;IACd,IAAI,CAACR,CAAC,EAAES,CAAC,EAAEC,CAAC,CAAC,GAAGF,GAAG;IAEnB,OAAO,CAACR,CAAC,EAAEU,CAAC,IAAI,GAAG,GAAGD,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAGC,CAAC,CAAC;EACzC,CAAC;EACDC,MAAMA,CAAEC,GAAG,EAAE;IACZ,IAAI,CAACZ,CAAC,EAAEG,CAAC,EAAEE,CAAC,CAAC,GAAGO,GAAG;;IAEnB;IACAT,CAAC,IAAI,GAAG;IACRE,CAAC,IAAI,GAAG;;IAER;IACA,IAAIQ,GAAG,GAAGV,CAAC,GAAGE,CAAC;IACf,IAAIQ,GAAG,IAAI,CAAC,EAAE;MACb,IAAIC,IAAI,GAAGX,CAAC,GAAGU,GAAG;MAClB,OAAO,CAACb,CAAC,EAAE,CAAC,EAAEc,IAAI,GAAG,GAAG,CAAC;IAC1B;IAEA,IAAIJ,CAAC,GAAI,CAAC,GAAGL,CAAE;IACf,IAAII,CAAC,GAAIC,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC,GAAGP,CAAC,GAAGO,CAAC;IACjC,OAAO,CAACV,CAAC,EAAES,CAAC,GAAG,GAAG,EAAEC,CAAC,GAAG,GAAG,CAAC;EAC7B,CAAC;EAEDK,OAAO,EAAE;IACR,KAAK,EAAE;MACNhB,MAAM,EAAE,CAAC,oBAAoB,EAAE,yBAAyB,EAAE,yBAAyB;IACpF;EACD;AACD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}