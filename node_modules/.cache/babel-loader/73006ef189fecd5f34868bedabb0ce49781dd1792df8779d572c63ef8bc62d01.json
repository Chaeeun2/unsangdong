{"ast":null,"code":"import { ColorSpace, sRGB } from 'colorjs.io/fn';\nvar HSBSpace = new ColorSpace({\n  id: 'hsb',\n  name: 'HSB',\n  coords: {\n    h: {\n      refRange: [0, 360],\n      type: 'angle',\n      name: 'Hue'\n    },\n    s: {\n      range: [0, 100],\n      name: 'Saturation'\n    },\n    b: {\n      range: [0, 100],\n      name: 'Brightness'\n    }\n  },\n  base: sRGB,\n  fromBase: rgb => {\n    const val = Math.max(...rgb);\n    const chroma = val - Math.min(...rgb);\n    let [red, green, blue] = rgb;\n    let hue, sat;\n    if (chroma === 0) {\n      // Return early if grayscale.\n      hue = 0;\n      sat = 0;\n    } else {\n      sat = chroma / val;\n      if (red === val) {\n        // Magenta to yellow.\n        hue = (green - blue) / chroma;\n      } else if (green === val) {\n        // Yellow to cyan.\n        hue = 2 + (blue - red) / chroma;\n      } else if (blue === val) {\n        // Cyan to magenta.\n        hue = 4 + (red - green) / chroma;\n      }\n      if (hue < 0) {\n        // Confine hue to the interval [0, 1).\n        hue += 6;\n      } else if (hue >= 6) {\n        hue -= 6;\n      }\n    }\n    return [hue / 6 * 360, sat * 100, val * 100];\n  },\n  toBase,\n  formats: {\n    default: {\n      type: 'custom',\n      serialize: (coords, alpha) => {\n        const rgb = toBase(coords);\n        let ret = `rgb(${Math.round(rgb[0] * 100 * 100) / 100}% ${Math.round(rgb[1] * 100 * 100) / 100}% ${Math.round(rgb[2] * 100 * 100) / 100}%`;\n        if (alpha < 1) {\n          ret += ` / ${alpha}`;\n        }\n        ret += ')';\n        return ret;\n      }\n    },\n    'hsb': {\n      coords: ['<number> | <angle>', '<percentage>', '<percentage>']\n    },\n    'hsba': {\n      coords: ['<number> | <angle>', '<percentage>', '<percentage>'],\n      commans: true,\n      lastAlpha: true\n    }\n  }\n});\nfunction toBase(hsb) {\n  const hue = hsb[0] / 360 * 6; // We will split hue into 6 sectors.\n  const sat = hsb[1] / 100;\n  const val = hsb[2] / 100;\n  let RGB = [];\n  if (sat === 0) {\n    RGB = [val, val, val]; // Return early if grayscale.\n  } else {\n    const sector = Math.floor(hue);\n    const tint1 = val * (1 - sat);\n    const tint2 = val * (1 - sat * (hue - sector));\n    const tint3 = val * (1 - sat * (1 + sector - hue));\n    let red, green, blue;\n    if (sector === 1) {\n      // Yellow to green.\n      red = tint2;\n      green = val;\n      blue = tint1;\n    } else if (sector === 2) {\n      // Green to cyan.\n      red = tint1;\n      green = val;\n      blue = tint3;\n    } else if (sector === 3) {\n      // Cyan to blue.\n      red = tint1;\n      green = tint2;\n      blue = val;\n    } else if (sector === 4) {\n      // Blue to magenta.\n      red = tint3;\n      green = tint1;\n      blue = val;\n    } else if (sector === 5) {\n      // Magenta to red.\n      red = val;\n      green = tint1;\n      blue = tint2;\n    } else {\n      // Red to yellow (sector could be 0 or 6).\n      red = val;\n      green = tint3;\n      blue = tint1;\n    }\n    RGB = [red, green, blue];\n  }\n  return RGB;\n}\nexport { HSBSpace as default };","map":{"version":3,"names":["ColorSpace","sRGB","HSBSpace","id","name","coords","h","refRange","type","s","range","b","base","fromBase","rgb","val","Math","max","chroma","min","red","green","blue","hue","sat","toBase","formats","default","serialize","alpha","ret","round","commans","lastAlpha","hsb","RGB","sector","floor","tint1","tint2","tint3"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/color/color_spaces/hsb.js"],"sourcesContent":["import { ColorSpace, sRGB } from 'colorjs.io/fn';\n\nvar HSBSpace = new ColorSpace({\n  id: 'hsb',\n  name: 'HSB',\n  coords: {\n    h: {\n      refRange: [0, 360],\n      type: 'angle',\n      name: 'Hue'\n    },\n    s: {\n      range: [0, 100],\n      name: 'Saturation'\n    },\n    b: {\n      range: [0, 100],\n      name: 'Brightness'\n    }\n  },\n\n  base: sRGB,\n\n  fromBase: rgb => {\n    const val = Math.max(...rgb);\n    const chroma = val - Math.min(...rgb);\n\n    let [red, green, blue] = rgb;\n\n    let hue, sat;\n    if (chroma === 0) {\n      // Return early if grayscale.\n      hue = 0;\n      sat = 0;\n    } else {\n      sat = chroma / val;\n      if (red === val) {\n        // Magenta to yellow.\n        hue = (green - blue) / chroma;\n      } else if (green === val) {\n        // Yellow to cyan.\n        hue = 2 + (blue - red) / chroma;\n      } else if (blue === val) {\n        // Cyan to magenta.\n        hue = 4 + (red - green) / chroma;\n      }\n      if (hue < 0) {\n        // Confine hue to the interval [0, 1).\n        hue += 6;\n      } else if (hue >= 6) {\n        hue -= 6;\n      }\n    }\n\n    return [hue / 6 * 360, sat * 100, val * 100];\n  },\n  toBase,\n\n  formats: {\n    default: {\n      type: 'custom',\n      serialize: (coords, alpha) => {\n        const rgb = toBase(coords);\n        let ret = `rgb(${\n          Math.round(rgb[0] * 100 * 100) / 100\n        }% ${\n          Math.round(rgb[1] * 100 * 100) / 100\n        }% ${\n          Math.round(rgb[2] * 100 * 100) / 100\n        }%`;\n\n        if (alpha < 1) {\n          ret += ` / ${alpha}`;\n        }\n\n        ret += ')';\n\n        return ret;\n      }\n    },\n    'hsb': {\n      coords: ['<number> | <angle>', '<percentage>', '<percentage>']\n    },\n    'hsba': {\n      coords: ['<number> | <angle>', '<percentage>', '<percentage>'],\n      commans: true,\n      lastAlpha: true\n    }\n  }\n});\n\nfunction toBase(hsb){\n  const hue = hsb[0] / 360 * 6; // We will split hue into 6 sectors.\n  const sat = hsb[1] / 100;\n  const val = hsb[2] / 100;\n\n  let RGB = [];\n\n  if (sat === 0) {\n    RGB = [val, val, val]; // Return early if grayscale.\n  } else {\n    const sector = Math.floor(hue);\n    const tint1 = val * (1 - sat);\n    const tint2 = val * (1 - sat * (hue - sector));\n    const tint3 = val * (1 - sat * (1 + sector - hue));\n    let red, green, blue;\n    if (sector === 1) {\n      // Yellow to green.\n      red = tint2;\n      green = val;\n      blue = tint1;\n    } else if (sector === 2) {\n      // Green to cyan.\n      red = tint1;\n      green = val;\n      blue = tint3;\n    } else if (sector === 3) {\n      // Cyan to blue.\n      red = tint1;\n      green = tint2;\n      blue = val;\n    } else if (sector === 4) {\n      // Blue to magenta.\n      red = tint3;\n      green = tint1;\n      blue = val;\n    } else if (sector === 5) {\n      // Magenta to red.\n      red = val;\n      green = tint1;\n      blue = tint2;\n    } else {\n      // Red to yellow (sector could be 0 or 6).\n      red = val;\n      green = tint3;\n      blue = tint1;\n    }\n    RGB = [red, green, blue];\n  }\n\n  return RGB;\n}\n\nexport { HSBSpace as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}