{"ast":null,"code":"import { r as TRIANGLE_STRIP, s as QUAD_STRIP, q as TRIANGLE_FAN } from '../constants-BRcElHU3.js';\nimport '../math/p5.Matrix.js';\nimport { Geometry } from './p5.Geometry.js';\nimport { Matrix } from '../math/Matrices/Matrix.js';\nimport '../math/p5.Vector.js';\nimport '../math/Matrices/MatrixInterface.js';\nimport './p5.DataArray.js';\n\n/**\n * @private\n * A class responsible for converting successive WebGL draw calls into a single\n * `p5.Geometry` that can be reused and drawn with `model()`.\n */\nclass GeometryBuilder {\n  constructor(renderer) {\n    this.renderer = renderer;\n    renderer._pInst.push();\n    this.identityMatrix = new Matrix(4);\n    renderer.states.setValue('uModelMatrix', new Matrix(4));\n    this.geometry = new Geometry(undefined, undefined, undefined, this.renderer);\n    this.geometry.gid = `_p5_GeometryBuilder_${GeometryBuilder.nextGeometryId}`;\n    GeometryBuilder.nextGeometryId++;\n    this.hasTransform = false;\n  }\n\n  /**\n   * @private\n   * Applies the current transformation matrix to each vertex.\n   */\n  transformVertices(vertices) {\n    if (!this.hasTransform) return vertices;\n    return vertices.map(v => this.renderer.states.uModelMatrix.multiplyPoint(v));\n  }\n\n  /**\n   * @private\n   * Applies the current normal matrix to each normal.\n   */\n  transformNormals(normals) {\n    if (!this.hasTransform) return normals;\n    return normals.map(v => this.renderer.scratchMat3.multiplyVec(v) // this is a vec3\n    );\n  }\n\n  /**\n   * @private\n   * Adds a p5.Geometry to the builder's combined geometry, flattening\n   * transformations.\n   */\n  addGeometry(input) {\n    this.hasTransform = !this.renderer.states.uModelMatrix.mat4.every((v, i) => v === this.identityMatrix.mat4[i]);\n    if (this.hasTransform) {\n      this.renderer.scratchMat3.inverseTranspose4x4(this.renderer.states.uModelMatrix);\n    }\n    let startIdx = this.geometry.vertices.length;\n    this.geometry.vertices.push(...this.transformVertices(input.vertices));\n    this.geometry.vertexNormals.push(...this.transformNormals(input.vertexNormals));\n    this.geometry.uvs.push(...input.uvs);\n    const inputUserVertexProps = input.userVertexProperties;\n    const builtUserVertexProps = this.geometry.userVertexProperties;\n    const numPreviousVertices = this.geometry.vertices.length - input.vertices.length;\n    for (const propName in builtUserVertexProps) {\n      if (propName in inputUserVertexProps) {\n        continue;\n      }\n      const prop = builtUserVertexProps[propName];\n      const size = prop.getDataSize();\n      const numMissingValues = size * input.vertices.length;\n      const missingValues = Array(numMissingValues).fill(0);\n      prop.pushDirect(missingValues);\n    }\n    for (const propName in inputUserVertexProps) {\n      const prop = inputUserVertexProps[propName];\n      const data = prop.getSrcArray();\n      const size = prop.getDataSize();\n      if (numPreviousVertices > 0 && !(propName in builtUserVertexProps)) {\n        const numMissingValues = size * numPreviousVertices;\n        const missingValues = Array(numMissingValues).fill(0);\n        this.geometry.vertexProperty(propName, missingValues, size);\n      }\n      this.geometry.vertexProperty(propName, data, size);\n    }\n    if (this.renderer.states.fillColor) {\n      this.geometry.faces.push(...input.faces.map(f => f.map(idx => idx + startIdx)));\n    }\n    if (this.renderer.states.strokeColor) {\n      this.geometry.edges.push(...input.edges.map(edge => edge.map(idx => idx + startIdx)));\n    }\n    const vertexColors = [...input.vertexColors];\n    while (vertexColors.length < input.vertices.length * 4) {\n      vertexColors.push(...this.renderer.states.curFillColor);\n    }\n    this.geometry.vertexColors.push(...vertexColors);\n  }\n\n  /**\n   * Adds geometry from the renderer's immediate mode into the builder's\n   * combined geometry.\n   */\n  addImmediate(geometry, shapeMode) {\n    const faces = [];\n    if (this.renderer.states.fillColor) {\n      if (shapeMode === TRIANGLE_STRIP || shapeMode === QUAD_STRIP) {\n        for (let i = 2; i < geometry.vertices.length; i++) {\n          if (i % 2 === 0) {\n            faces.push([i, i - 1, i - 2]);\n          } else {\n            faces.push([i, i - 2, i - 1]);\n          }\n        }\n      } else if (shapeMode === TRIANGLE_FAN) {\n        for (let i = 2; i < geometry.vertices.length; i++) {\n          faces.push([0, i - 1, i]);\n        }\n      } else {\n        for (let i = 0; i < geometry.vertices.length; i += 3) {\n          faces.push([i, i + 1, i + 2]);\n        }\n      }\n    }\n    this.addGeometry(Object.assign({}, geometry, {\n      faces\n    }));\n  }\n\n  /**\n   * Adds geometry from the renderer's retained mode into the builder's\n   * combined geometry.\n   */\n  addRetained(geometry) {\n    this.addGeometry(geometry);\n  }\n\n  /**\n   * Cleans up the state of the renderer and returns the combined geometry that\n   * was built.\n   * @returns p5.Geometry The flattened, combined geometry\n   */\n  finish() {\n    this.renderer._pInst.pop();\n    return this.geometry;\n  }\n}\n\n/**\n * Keeps track of how many custom geometry objects have been made so that each\n * can be assigned a unique ID.\n */\nGeometryBuilder.nextGeometryId = 0;\nexport { GeometryBuilder as default };","map":{"version":3,"names":["r","TRIANGLE_STRIP","s","QUAD_STRIP","q","TRIANGLE_FAN","Geometry","Matrix","GeometryBuilder","constructor","renderer","_pInst","push","identityMatrix","states","setValue","geometry","undefined","gid","nextGeometryId","hasTransform","transformVertices","vertices","map","v","uModelMatrix","multiplyPoint","transformNormals","normals","scratchMat3","multiplyVec","addGeometry","input","mat4","every","i","inverseTranspose4x4","startIdx","length","vertexNormals","uvs","inputUserVertexProps","userVertexProperties","builtUserVertexProps","numPreviousVertices","propName","prop","size","getDataSize","numMissingValues","missingValues","Array","fill","pushDirect","data","getSrcArray","vertexProperty","fillColor","faces","f","idx","strokeColor","edges","edge","vertexColors","curFillColor","addImmediate","shapeMode","Object","assign","addRetained","finish","pop","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/webgl/GeometryBuilder.js"],"sourcesContent":["import { r as TRIANGLE_STRIP, s as QUAD_STRIP, q as TRIANGLE_FAN } from '../constants-BRcElHU3.js';\nimport '../math/p5.Matrix.js';\nimport { Geometry } from './p5.Geometry.js';\nimport { Matrix } from '../math/Matrices/Matrix.js';\nimport '../math/p5.Vector.js';\nimport '../math/Matrices/MatrixInterface.js';\nimport './p5.DataArray.js';\n\n/**\n * @private\n * A class responsible for converting successive WebGL draw calls into a single\n * `p5.Geometry` that can be reused and drawn with `model()`.\n */\nclass GeometryBuilder {\n  constructor(renderer) {\n    this.renderer = renderer;\n    renderer._pInst.push();\n    this.identityMatrix = new Matrix(4);\n    renderer.states.setValue('uModelMatrix', new Matrix(4));\n    this.geometry = new Geometry(undefined, undefined, undefined, this.renderer);\n    this.geometry.gid = `_p5_GeometryBuilder_${GeometryBuilder.nextGeometryId}`;\n    GeometryBuilder.nextGeometryId++;\n    this.hasTransform = false;\n  }\n\n  /**\n   * @private\n   * Applies the current transformation matrix to each vertex.\n   */\n  transformVertices(vertices) {\n    if (!this.hasTransform) return vertices;\n\n    return vertices.map(v => this.renderer.states.uModelMatrix.multiplyPoint(v));\n  }\n\n  /**\n   * @private\n   * Applies the current normal matrix to each normal.\n   */\n  transformNormals(normals) {\n    if (!this.hasTransform) return normals;\n\n    return normals.map(\n      v => this.renderer.scratchMat3.multiplyVec(v) // this is a vec3\n    );\n  }\n\n  /**\n   * @private\n   * Adds a p5.Geometry to the builder's combined geometry, flattening\n   * transformations.\n   */\n  addGeometry(input) {\n    this.hasTransform = !this.renderer.states.uModelMatrix.mat4\n      .every((v, i) => v === this.identityMatrix.mat4[i]);\n\n    if (this.hasTransform) {\n      this.renderer.scratchMat3.inverseTranspose4x4(this.renderer.states.uModelMatrix);\n    }\n\n    let startIdx = this.geometry.vertices.length;\n    this.geometry.vertices.push(...this.transformVertices(input.vertices));\n    this.geometry.vertexNormals.push(\n      ...this.transformNormals(input.vertexNormals)\n    );\n    this.geometry.uvs.push(...input.uvs);\n\n    const inputUserVertexProps = input.userVertexProperties;\n    const builtUserVertexProps = this.geometry.userVertexProperties;\n    const numPreviousVertices = this.geometry.vertices.length - input.vertices.length;\n\n    for (const propName in builtUserVertexProps){\n      if (propName in inputUserVertexProps){\n        continue;\n      }\n      const prop = builtUserVertexProps[propName];\n      const size = prop.getDataSize();\n      const numMissingValues = size * input.vertices.length;\n      const missingValues = Array(numMissingValues).fill(0);\n      prop.pushDirect(missingValues);\n    }\n    for (const propName in inputUserVertexProps){\n      const prop = inputUserVertexProps[propName];\n      const data = prop.getSrcArray();\n      const size = prop.getDataSize();\n      if (numPreviousVertices > 0 && !(propName in builtUserVertexProps)){\n        const numMissingValues = size * numPreviousVertices;\n        const missingValues = Array(numMissingValues).fill(0);\n        this.geometry.vertexProperty(propName, missingValues, size);\n      }\n      this.geometry.vertexProperty(propName, data, size);\n    }\n\n    if (this.renderer.states.fillColor) {\n      this.geometry.faces.push(\n        ...input.faces.map(f => f.map(idx => idx + startIdx))\n      );\n    }\n    if (this.renderer.states.strokeColor) {\n      this.geometry.edges.push(\n        ...input.edges.map(edge => edge.map(idx => idx + startIdx))\n      );\n    }\n    const vertexColors = [...input.vertexColors];\n    while (vertexColors.length < input.vertices.length * 4) {\n      vertexColors.push(...this.renderer.states.curFillColor);\n    }\n    this.geometry.vertexColors.push(...vertexColors);\n  }\n\n  /**\n   * Adds geometry from the renderer's immediate mode into the builder's\n   * combined geometry.\n   */\n  addImmediate(geometry, shapeMode) {\n    const faces = [];\n\n    if (this.renderer.states.fillColor) {\n      if (\n        shapeMode === TRIANGLE_STRIP ||\n        shapeMode === QUAD_STRIP\n      ) {\n        for (let i = 2; i < geometry.vertices.length; i++) {\n          if (i % 2 === 0) {\n            faces.push([i, i - 1, i - 2]);\n          } else {\n            faces.push([i, i - 2, i - 1]);\n          }\n        }\n      } else if (shapeMode === TRIANGLE_FAN) {\n        for (let i = 2; i < geometry.vertices.length; i++) {\n          faces.push([0, i - 1, i]);\n        }\n      } else {\n        for (let i = 0; i < geometry.vertices.length; i += 3) {\n          faces.push([i, i + 1, i + 2]);\n        }\n      }\n    }\n    this.addGeometry(Object.assign({}, geometry, { faces }));\n  }\n\n  /**\n   * Adds geometry from the renderer's retained mode into the builder's\n   * combined geometry.\n   */\n  addRetained(geometry) {\n    this.addGeometry(geometry);\n  }\n\n  /**\n   * Cleans up the state of the renderer and returns the combined geometry that\n   * was built.\n   * @returns p5.Geometry The flattened, combined geometry\n   */\n  finish() {\n    this.renderer._pInst.pop();\n    return this.geometry;\n  }\n}\n\n/**\n * Keeps track of how many custom geometry objects have been made so that each\n * can be assigned a unique ID.\n */\nGeometryBuilder.nextGeometryId = 0;\n\nexport { GeometryBuilder as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}