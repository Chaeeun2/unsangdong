{"ast":null,"code":"import ColorSpace from \"./space.js\";\nimport { multiplyMatrices } from \"./util.js\";\nimport adapt from \"./adapt.js\";\nimport XYZ_D65 from \"./spaces/xyz-d65.js\";\n\n/**\n * Convenience class for RGB color spaces\n * @extends {ColorSpace}\n */\nexport default class RGBColorSpace extends ColorSpace {\n  /**\n   * Creates a new RGB ColorSpace.\n   * If coords are not specified, they will use the default RGB coords.\n   * Instead of `fromBase()` and `toBase()` functions,\n   * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.\n   * @param {*} options - Same options as {@link ColorSpace} plus:\n   * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ\n   * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ\n   */\n  constructor(options) {\n    if (!options.coords) {\n      options.coords = {\n        r: {\n          range: [0, 1],\n          name: \"Red\"\n        },\n        g: {\n          range: [0, 1],\n          name: \"Green\"\n        },\n        b: {\n          range: [0, 1],\n          name: \"Blue\"\n        }\n      };\n    }\n    if (!options.base) {\n      options.base = XYZ_D65;\n    }\n    if (options.toXYZ_M && options.fromXYZ_M) {\n      options.toBase ??= rgb => {\n        let xyz = multiplyMatrices(options.toXYZ_M, rgb);\n        if (this.white !== this.base.white) {\n          // Perform chromatic adaptation\n          xyz = adapt(this.white, this.base.white, xyz);\n        }\n        return xyz;\n      };\n      options.fromBase ??= xyz => {\n        xyz = adapt(this.base.white, this.white, xyz);\n        return multiplyMatrices(options.fromXYZ_M, xyz);\n      };\n    }\n    options.referred ??= \"display\";\n    super(options);\n  }\n}","map":{"version":3,"names":["ColorSpace","multiplyMatrices","adapt","XYZ_D65","RGBColorSpace","constructor","options","coords","r","range","name","g","b","base","toXYZ_M","fromXYZ_M","toBase","rgb","xyz","white","fromBase","referred"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/rgbspace.js"],"sourcesContent":["import ColorSpace from \"./space.js\";\nimport {multiplyMatrices} from \"./util.js\";\nimport adapt from \"./adapt.js\";\nimport XYZ_D65 from \"./spaces/xyz-d65.js\";\n\n/**\n * Convenience class for RGB color spaces\n * @extends {ColorSpace}\n */\nexport default class RGBColorSpace extends ColorSpace {\n\t/**\n\t * Creates a new RGB ColorSpace.\n\t * If coords are not specified, they will use the default RGB coords.\n\t * Instead of `fromBase()` and `toBase()` functions,\n\t * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.\n\t * @param {*} options - Same options as {@link ColorSpace} plus:\n\t * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ\n\t * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ\n\t */\n\tconstructor (options) {\n\t\tif (!options.coords) {\n\t\t\toptions.coords = {\n\t\t\t\tr: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Red\",\n\t\t\t\t},\n\t\t\t\tg: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Green\",\n\t\t\t\t},\n\t\t\t\tb: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Blue\",\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (!options.base) {\n\t\t\toptions.base = XYZ_D65;\n\t\t}\n\n\t\tif (options.toXYZ_M && options.fromXYZ_M) {\n\t\t\toptions.toBase ??= rgb => {\n\t\t\t\tlet xyz = multiplyMatrices(options.toXYZ_M, rgb);\n\n\t\t\t\tif (this.white !== this.base.white) {\n\t\t\t\t\t// Perform chromatic adaptation\n\t\t\t\t\txyz = adapt(this.white, this.base.white, xyz);\n\t\t\t\t}\n\n\t\t\t\treturn xyz;\n\t\t\t};\n\n\t\t\toptions.fromBase ??= xyz => {\n\t\t\t\txyz = adapt(this.base.white, this.white, xyz);\n\t\t\t\treturn multiplyMatrices(options.fromXYZ_M, xyz);\n\t\t\t};\n\t\t}\n\n\t\toptions.referred ??= \"display\";\n\n\t\tsuper(options);\n\t}\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAAQC,gBAAgB,QAAO,WAAW;AAC1C,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,OAAO,MAAM,qBAAqB;;AAEzC;AACA;AACA;AACA;AACA,eAAe,MAAMC,aAAa,SAASJ,UAAU,CAAC;EACrD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,WAAWA,CAAEC,OAAO,EAAE;IACrB,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;MACpBD,OAAO,CAACC,MAAM,GAAG;QAChBC,CAAC,EAAE;UACFC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;UACbC,IAAI,EAAE;QACP,CAAC;QACDC,CAAC,EAAE;UACFF,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;UACbC,IAAI,EAAE;QACP,CAAC;QACDE,CAAC,EAAE;UACFH,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;UACbC,IAAI,EAAE;QACP;MACD,CAAC;IACF;IAEA,IAAI,CAACJ,OAAO,CAACO,IAAI,EAAE;MAClBP,OAAO,CAACO,IAAI,GAAGV,OAAO;IACvB;IAEA,IAAIG,OAAO,CAACQ,OAAO,IAAIR,OAAO,CAACS,SAAS,EAAE;MACzCT,OAAO,CAACU,MAAM,KAAKC,GAAG,IAAI;QACzB,IAAIC,GAAG,GAAGjB,gBAAgB,CAACK,OAAO,CAACQ,OAAO,EAAEG,GAAG,CAAC;QAEhD,IAAI,IAAI,CAACE,KAAK,KAAK,IAAI,CAACN,IAAI,CAACM,KAAK,EAAE;UACnC;UACAD,GAAG,GAAGhB,KAAK,CAAC,IAAI,CAACiB,KAAK,EAAE,IAAI,CAACN,IAAI,CAACM,KAAK,EAAED,GAAG,CAAC;QAC9C;QAEA,OAAOA,GAAG;MACX,CAAC;MAEDZ,OAAO,CAACc,QAAQ,KAAKF,GAAG,IAAI;QAC3BA,GAAG,GAAGhB,KAAK,CAAC,IAAI,CAACW,IAAI,CAACM,KAAK,EAAE,IAAI,CAACA,KAAK,EAAED,GAAG,CAAC;QAC7C,OAAOjB,gBAAgB,CAACK,OAAO,CAACS,SAAS,EAAEG,GAAG,CAAC;MAChD,CAAC;IACF;IAEAZ,OAAO,CAACe,QAAQ,KAAK,SAAS;IAE9B,KAAK,CAACf,OAAO,CAAC;EACf;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}