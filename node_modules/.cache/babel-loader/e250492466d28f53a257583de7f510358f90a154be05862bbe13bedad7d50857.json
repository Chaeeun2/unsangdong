{"ast":null,"code":"/**\n * @module Data\n * @submodule Utility Functions\n * @for p5\n * @requires core\n */\n\nfunction utilityFunctions(p5, fn) {\n  /**\n   * Converts a `Number` into a `String` with a given number of digits.\n   *\n   * `nf()` converts numbers such as `123.45` into strings formatted with a set\n   * number of digits, as in `'123.4500'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nf(123.45)` returns the string `'123.45'`. If an array of\n   * numbers is passed, as in `nf([123.45, 67.89])`, an array of formatted\n   * strings will be returned.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nf(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nf(123.45, 4)` returns the string `'0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nf(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places. For example, calling `nf(123.45, 4, 1)` returns the string\n   * `'0123.5'`. If right is larger than the number of decimal places in `num`,\n   * then unused decimal places will be set to 0. For example, calling\n   * `nf(123.45, 4, 3)` returns the string `'0123.450'`.\n   *\n   * When the number is negative, for example, calling `nf(-123.45, 5, 2)`\n   * returns the string `'-00123.45'`.\n   *\n   * @method nf\n   * @param {Number|String} num number to format.\n   * @param {Integer|String} [left] number of digits to include to the left of\n   *                                the decimal point.\n   * @param {Integer|String} [right] number of digits to include to the right\n   *                                 of the decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(16);\n   *\n   *   // Create a number variable.\n   *   let number = 123.45;\n   *\n   *   // Display the number as a string.\n   *   let formatted = nf(number);\n   *   text(formatted, 20, 20);\n   *\n   *   let negative = nf(-number, 4, 2);\n   *   text(negative, 20, 40);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal.\n   *   let left = nf(number, 4);\n   *   text(left, 20, 60);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal and one\n   *   // to the right.\n   *   let right = nf(number, 4, 1);\n   *   text(right, 20, 80);\n   *\n   *   describe(\n   *     'The numbers \"123.45\", \"-0123.45\", \"0123.45\", and \"0123.5\" written on four separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nf\n   * @param {Number[]} nums numbers to format.\n   * @param {Integer|String} [left]\n   * @param {Integer|String} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nf = function (nums, left, right) {\n    // p5._validateParameters('nf', arguments);\n    if (nums instanceof Array) {\n      return nums.map(x => doNf(x, left, right));\n    } else {\n      const typeOfFirst = Object.prototype.toString.call(nums);\n      if (typeOfFirst === '[object Arguments]') {\n        if (nums.length === 3) {\n          return this.nf(nums[0], nums[1], nums[2]);\n        } else if (nums.length === 2) {\n          return this.nf(nums[0], nums[1]);\n        } else {\n          return this.nf(nums[0]);\n        }\n      } else {\n        return doNf(nums, left, right);\n      }\n    }\n  };\n  function doNf(num, left, right) {\n    let isNegative = num < 0;\n    num = Math.abs(num);\n    let [leftPart, rightPart] = num.toString().split('.');\n    if (typeof right === 'undefined') {\n      leftPart = leftPart.padStart(left, '0');\n      let result = rightPart ? leftPart + '.' + rightPart : leftPart;\n      return isNegative ? '-' + result : result;\n    } else {\n      let roundedOff = num.toFixed(right);\n      [leftPart, rightPart] = roundedOff.toString().split('.');\n      leftPart = leftPart.padStart(left, '0');\n      let result = typeof rightPart === 'undefined' ? leftPart : leftPart + '.' + rightPart;\n      return isNegative ? '-' + result : result;\n    }\n  }\n\n  /**\n   * Converts a `Number` into a `String` with commas to mark units of 1,000.\n   *\n   * `nfc()` converts numbers such as 12345 into strings formatted with commas\n   * to mark the thousands place, as in `'12,345'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfc(12345)` returns the string `'12,345'`.\n   *\n   * The second parameter, `right`, is optional. If a number is passed, as in\n   * `nfc(12345, 1)`, it sets the minimum number of digits to include to the\n   * right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places. For example, calling `nfc(12345.67, 1)` returns the string\n   * `'12,345.7'`. If `right` is larger than the number of decimal places in\n   * `num`, then unused decimal places will be set to 0. For example, calling\n   * `nfc(12345.67, 3)` returns the string `'12,345.670'`.\n   *\n   * @method nfc\n   * @param  {Number|String} num number to format.\n   * @param  {Integer|String} [right] number of digits to include to the right\n   *                                  of the decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(16);\n   *\n   *   // Create a number variable.\n   *   let number = 12345;\n   *\n   *   // Display the number as a string.\n   *   let commas = nfc(number);\n   *   text(commas, 15, 33);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal.\n   *   let decimals = nfc(number, 2);\n   *   text(decimals, 15, 67);\n   *\n   *   describe(\n   *     'The numbers \"12,345\" and \"12,345.00\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let numbers = [12345, 6789];\n   *\n   *   // Convert the numbers to formatted strings.\n   *   let formatted = nfc(numbers);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < formatted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 33;\n   *\n   *     // Display the original and formatted numbers.\n   *     text(`${numbers[i]} : ${formatted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"12345 : 12,345\" and \"6789 : 6,789\" written on two separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfc\n   * @param  {Number[]} nums numbers to format.\n   * @param  {Integer|String} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfc = function (num, right) {\n    // p5._validateParameters('nfc', arguments);\n    if (num instanceof Array) {\n      return num.map(x => doNfc(x, right));\n    } else {\n      return doNfc(num, right);\n    }\n  };\n  function doNfc(num, right) {\n    num = num.toString();\n    const dec = num.indexOf('.');\n    let rem = dec !== -1 ? num.substring(dec) : '';\n    let n = dec !== -1 ? num.substring(0, dec) : num;\n    n = n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    if (right === 0) {\n      rem = '';\n    } else if (typeof right !== 'undefined') {\n      if (right > rem.length) {\n        rem += dec === -1 ? '.' : '';\n        const len = right - rem.length + 1;\n        for (let i = 0; i < len; i++) {\n          rem += '0';\n        }\n      } else {\n        rem = rem.substring(0, right + 1);\n      }\n    }\n    return n + rem;\n  }\n\n  /**\n   * Converts a `Number` into a `String` with a plus or minus sign.\n   *\n   * `nfp()` converts numbers such as 123 into strings formatted with a `+` or\n   * `-` symbol to mark whether they're positive or negative, as in `'+123'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfp(123.45)` returns the string `'+123.45'`. If an array\n   * of numbers is passed, as in `nfp([123.45, -6.78])`, an array of formatted\n   * strings will be returned.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nfp(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nfp(123.45, 4)` returns the string `'+0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nfp(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places.  For example, calling `nfp(123.45, 4, 1)` returns the\n   * string `'+0123.5'`. If `right` is larger than the number of decimal places\n   * in `num`, then unused decimal places will be set to 0.  For example,\n   * calling `nfp(123.45, 4, 3)` returns the string `'+0123.450'`.\n   *\n   * @method nfp\n   * @param {Number} num number to format.\n   * @param {Integer} [left] number of digits to include to the left of the\n   *                         decimal point.\n   * @param {Integer} [right] number of digits to include to the right of the\n   *                          decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let positive = 123;\n   *   let negative = -123;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   let p = nfp(positive);\n   *\n   *   // Convert the negative number to a formatted string\n   *   // with four digits to the left of the decimal\n   *   // and two digits to the right of the decimal.\n   *   let n = nfp(negative, 4, 2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and formatted numbers.\n   *   text(`${positive} : ${p}`, 50, 33);\n   *   text(`${negative} : ${n}`, 50, 67);\n   *\n   *   describe(\n   *     'The text \"123 : +123\" and \"-123 : -123.00\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let numbers = [123, -4.56];\n   *\n   *   // Convert the numbers to formatted strings\n   *   // with four digits to the left of the decimal\n   *   // and one digit to the right of the decimal.\n   *   let formatted = nfp(numbers, 4, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < formatted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 33;\n   *\n   *     // Display the original and formatted numbers.\n   *     text(`${numbers[i]} : ${formatted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"123 : +0123.0\" and \"-4.56 : 00-4.6\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfp\n   * @param {Number[]} nums numbers to format.\n   * @param {Integer} [left]\n   * @param {Integer} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfp = function (...args) {\n    // p5._validateParameters('nfp', args);\n    const nfRes = fn.nf.apply(this, args);\n    if (nfRes instanceof Array) {\n      return nfRes.map(addNfp);\n    } else {\n      return addNfp(nfRes);\n    }\n  };\n  function addNfp(num) {\n    return parseFloat(num) > 0 ? `+${num.toString()}` : num.toString();\n  }\n\n  /**\n   * Converts a positive `Number` into a `String` with an extra space in front.\n   *\n   * `nfs()` converts positive numbers such as 123.45 into strings formatted\n   * with an extra space in front, as in ' 123.45'. Doing so can be helpful for\n   * aligning positive and negative numbers.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfs(123.45)` returns the string `' 123.45'`.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nfs(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nfs(123.45, 4)` returns the string `' 0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nfs(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places.  For example, calling `nfs(123.45, 4, 1)` returns the\n   * string `' 0123.5'`. If `right` is larger than the number of decimal places\n   * in `num`, then unused decimal places will be set to 0.  For example,\n   * calling `nfs(123.45, 4, 3)` returns the string `' 0123.450'`.\n   *\n   * @method nfs\n   * @param {Number} num number to format.\n   * @param {Integer} [left] number of digits to include to the left of the\n   *                         decimal point.\n   * @param {Integer} [right] number of digits to include to the right of the\n   *                          decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let positive = 123;\n   *   let negative = -123;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   let formatted = nfs(positive);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(16);\n   *\n   *   // Display the negative number and the formatted positive number.\n   *   text(negative, 50, 33);\n   *   text(formatted, 50, 67);\n   *\n   *   describe(\n   *     'The numbers -123 and 123 written on separate lines. The numbers align vertically. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let number = 123.45;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   // Use four digits to the left of the decimal and\n   *   // one digit to the right.\n   *   let formatted = nfs(number, 4, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(16);\n   *\n   *   // Display a negative version of the number and\n   *   // the formatted positive version.\n   *   text('-0123.5', 50, 33);\n   *   text(formatted, 50, 67);\n   *\n   *   describe(\n   *     'The numbers \"-0123.5\" and \"0123.5\" written on separate lines. The numbers align vertically. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfs\n   * @param {Array} nums numbers to format.\n   * @param {Integer} [left]\n   * @param {Integer} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfs = function (...args) {\n    // p5._validateParameters('nfs', args);\n    const nfRes = fn.nf.apply(this, args);\n    if (nfRes instanceof Array) {\n      return nfRes.map(addNfs);\n    } else {\n      return addNfs(nfRes);\n    }\n  };\n  function addNfs(num) {\n    return parseFloat(num) >= 0 ? ` ${num.toString()}` : num.toString();\n  }\n\n  /**\n   * Splits a `String` into pieces and returns an array containing the pieces.\n   *\n   * `splitTokens()` is an enhanced version of\n   * <a href=\"#/p5/split\">split()</a>. It can split a string when any characters\n   * from a list are detected.\n   *\n   * The first parameter, `value`, is the string to split.\n   *\n   * The second parameter, `delim`, is optional. It sets the character(s) that\n   * should be used to split the string. `delim` can be a single string, as in\n   * `splitTokens('rock...paper...scissors...shoot', '...')`, or an array of\n   * strings, as in\n   * `splitTokens('rock;paper,scissors...shoot, [';', ',', '...'])`. By default,\n   * if no `delim` characters are specified, then any whitespace character is\n   * used to split. Whitespace characters include tab (`\\t`), line feed (`\\n`),\n   * carriage return (`\\r`), form feed (`\\f`), and space.\n   *\n   * @method splitTokens\n   * @deprecated This will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String} value string to split.\n   * @param  {String} [delim] character(s) to use for splitting the string.\n   * @return {String[]} separated strings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock paper scissors shoot';\n   *\n   *   // Split the string at each space.\n   *   let words = splitTokens(string);\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock...paper...scissors...shoot';\n   *\n   *   // Split the string at each ...\n   *   let words = splitTokens(string, '...');\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock;paper,scissors...shoot';\n   *\n   *   // Split the string at each semicolon, comma, or ...\n   *   let words = splitTokens(string, [';', ',', '...']);\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splitTokens = function (value, delims) {\n    // p5._validateParameters('splitTokens', arguments);\n    let d;\n    if (typeof delims !== 'undefined') {\n      let str = delims;\n      const sqc = /\\]/g.exec(str);\n      let sqo = /\\[/g.exec(str);\n      if (sqo && sqc) {\n        str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n        sqo = /\\[/g.exec(str);\n        str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n        d = new RegExp(`[\\\\[${str}\\\\]]`, 'g');\n      } else if (sqc) {\n        str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n        d = new RegExp(`[${str}\\\\]]`, 'g');\n      } else if (sqo) {\n        str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n        d = new RegExp(`[${str}\\\\[]`, 'g');\n      } else {\n        d = new RegExp(`[${str}]`, 'g');\n      }\n    } else {\n      d = /\\s/g;\n    }\n    return value.split(d).filter(n => n);\n  };\n\n  /**\n   * Shuffles the elements of an array.\n   *\n   * The first parameter, `array`, is the array to be shuffled. For example,\n   * calling `shuffle(myArray)` will shuffle the elements of `myArray`. By\n   * default, the original array won’t be modified. Instead, a copy will be\n   * created, shuffled, and returned.\n   *\n   * The second parameter, `modify`, is optional. If `true` is passed, as in\n   * `shuffle(myArray, true)`, then the array will be shuffled in place without\n   * making a copy.\n   *\n   * @method shuffle\n   * @param  {Array} array array to shuffle.\n   * @param  {Boolean} [bool] if `true`, shuffle the original array in place. Defaults to `false`.\n   * @return {Array} shuffled array.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of colors.\n   *   let colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n   *\n   *   // Create a shuffled copy of the array.\n   *   let shuffledColors = shuffle(colors);\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = colors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 33, 10);\n   *   }\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < shuffledColors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = shuffledColors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 67, 10);\n   *   }\n   *\n   *   describe(\n   *     'Two rows of circles on a gray background. The top row follows the color sequence ROYGBIV. The bottom row has all the same colors but they are shuffled.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of colors.\n   *   let colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n   *\n   *   // Shuffle the array.\n   *   shuffle(colors, true);\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = colors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 10);\n   *   }\n   *\n   *   describe(\n   *     'A row of colorful circles on a gray background. Their sequence changes each time the sketch runs.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shuffle = function (arr, bool) {\n    const isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);\n    arr = bool || isView ? arr : arr.slice();\n    let rnd,\n      tmp,\n      idx = arr.length;\n    while (idx > 1) {\n      rnd = this.random(0, 1) * idx | 0;\n      tmp = arr[--idx];\n      arr[idx] = arr[rnd];\n      arr[rnd] = tmp;\n    }\n    return arr;\n  };\n}\nif (typeof p5 !== 'undefined') {\n  utilityFunctions(p5, p5.prototype);\n}\nexport { utilityFunctions as default };","map":{"version":3,"names":["utilityFunctions","p5","fn","nf","nums","left","right","Array","map","x","doNf","typeOfFirst","Object","prototype","toString","call","length","num","isNegative","Math","abs","leftPart","rightPart","split","padStart","result","roundedOff","toFixed","nfc","doNfc","dec","indexOf","rem","substring","n","replace","len","i","nfp","args","nfRes","apply","addNfp","parseFloat","nfs","addNfs","splitTokens","value","delims","d","str","sqc","exec","sqo","slice","index","RegExp","filter","shuffle","arr","bool","isView","ArrayBuffer","rnd","tmp","idx","random","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/utilities/utility_functions.js"],"sourcesContent":["/**\n * @module Data\n * @submodule Utility Functions\n * @for p5\n * @requires core\n */\n\nfunction utilityFunctions(p5, fn){\n  /**\n   * Converts a `Number` into a `String` with a given number of digits.\n   *\n   * `nf()` converts numbers such as `123.45` into strings formatted with a set\n   * number of digits, as in `'123.4500'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nf(123.45)` returns the string `'123.45'`. If an array of\n   * numbers is passed, as in `nf([123.45, 67.89])`, an array of formatted\n   * strings will be returned.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nf(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nf(123.45, 4)` returns the string `'0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nf(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places. For example, calling `nf(123.45, 4, 1)` returns the string\n   * `'0123.5'`. If right is larger than the number of decimal places in `num`,\n   * then unused decimal places will be set to 0. For example, calling\n   * `nf(123.45, 4, 3)` returns the string `'0123.450'`.\n   *\n   * When the number is negative, for example, calling `nf(-123.45, 5, 2)`\n   * returns the string `'-00123.45'`.\n   *\n   * @method nf\n   * @param {Number|String} num number to format.\n   * @param {Integer|String} [left] number of digits to include to the left of\n   *                                the decimal point.\n   * @param {Integer|String} [right] number of digits to include to the right\n   *                                 of the decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(16);\n   *\n   *   // Create a number variable.\n   *   let number = 123.45;\n   *\n   *   // Display the number as a string.\n   *   let formatted = nf(number);\n   *   text(formatted, 20, 20);\n   *\n   *   let negative = nf(-number, 4, 2);\n   *   text(negative, 20, 40);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal.\n   *   let left = nf(number, 4);\n   *   text(left, 20, 60);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal and one\n   *   // to the right.\n   *   let right = nf(number, 4, 1);\n   *   text(right, 20, 80);\n   *\n   *   describe(\n   *     'The numbers \"123.45\", \"-0123.45\", \"0123.45\", and \"0123.5\" written on four separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nf\n   * @param {Number[]} nums numbers to format.\n   * @param {Integer|String} [left]\n   * @param {Integer|String} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nf = function(nums, left, right) {\n    // p5._validateParameters('nf', arguments);\n    if (nums instanceof Array) {\n      return nums.map(x => doNf(x, left, right));\n    } else {\n      const typeOfFirst = Object.prototype.toString.call(nums);\n      if (typeOfFirst === '[object Arguments]') {\n        if (nums.length === 3) {\n          return this.nf(nums[0], nums[1], nums[2]);\n        } else if (nums.length === 2) {\n          return this.nf(nums[0], nums[1]);\n        } else {\n          return this.nf(nums[0]);\n        }\n      } else {\n        return doNf(nums, left, right);\n      }\n    }\n  };\n\n  function doNf(num, left, right) {\n    let isNegative = num < 0;\n    num = Math.abs(num);\n    let [leftPart, rightPart] = num.toString().split('.');\n\n    if (typeof right === 'undefined') {\n      leftPart = leftPart.padStart(left, '0');\n      let result = rightPart ? leftPart + '.' + rightPart : leftPart;\n      return isNegative ? '-' + result : result;\n    } else {\n      let roundedOff = num.toFixed(right);\n      [leftPart, rightPart] = roundedOff.toString().split('.');\n      leftPart = leftPart.padStart(left, '0');\n      let result = typeof rightPart === 'undefined' ? leftPart : leftPart + '.' + rightPart;\n      return isNegative ? '-' + result : result;\n    }\n  }\n\n  /**\n   * Converts a `Number` into a `String` with commas to mark units of 1,000.\n   *\n   * `nfc()` converts numbers such as 12345 into strings formatted with commas\n   * to mark the thousands place, as in `'12,345'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfc(12345)` returns the string `'12,345'`.\n   *\n   * The second parameter, `right`, is optional. If a number is passed, as in\n   * `nfc(12345, 1)`, it sets the minimum number of digits to include to the\n   * right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places. For example, calling `nfc(12345.67, 1)` returns the string\n   * `'12,345.7'`. If `right` is larger than the number of decimal places in\n   * `num`, then unused decimal places will be set to 0. For example, calling\n   * `nfc(12345.67, 3)` returns the string `'12,345.670'`.\n   *\n   * @method nfc\n   * @param  {Number|String} num number to format.\n   * @param  {Integer|String} [right] number of digits to include to the right\n   *                                  of the decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(16);\n   *\n   *   // Create a number variable.\n   *   let number = 12345;\n   *\n   *   // Display the number as a string.\n   *   let commas = nfc(number);\n   *   text(commas, 15, 33);\n   *\n   *   // Display the number with four digits\n   *   // to the left of the decimal.\n   *   let decimals = nfc(number, 2);\n   *   text(decimals, 15, 67);\n   *\n   *   describe(\n   *     'The numbers \"12,345\" and \"12,345.00\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let numbers = [12345, 6789];\n   *\n   *   // Convert the numbers to formatted strings.\n   *   let formatted = nfc(numbers);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < formatted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 33;\n   *\n   *     // Display the original and formatted numbers.\n   *     text(`${numbers[i]} : ${formatted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"12345 : 12,345\" and \"6789 : 6,789\" written on two separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfc\n   * @param  {Number[]} nums numbers to format.\n   * @param  {Integer|String} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfc = function(num, right) {\n    // p5._validateParameters('nfc', arguments);\n    if (num instanceof Array) {\n      return num.map(x => doNfc(x, right));\n    } else {\n      return doNfc(num, right);\n    }\n  };\n  function doNfc(num, right) {\n    num = num.toString();\n    const dec = num.indexOf('.');\n    let rem = dec !== -1 ? num.substring(dec) : '';\n    let n = dec !== -1 ? num.substring(0, dec) : num;\n    n = n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    if (right === 0) {\n      rem = '';\n    } else if (typeof right !== 'undefined') {\n      if (right > rem.length) {\n        rem += dec === -1 ? '.' : '';\n        const len = right - rem.length + 1;\n        for (let i = 0; i < len; i++) {\n          rem += '0';\n        }\n      } else {\n        rem = rem.substring(0, right + 1);\n      }\n    }\n    return n + rem;\n  }\n\n  /**\n   * Converts a `Number` into a `String` with a plus or minus sign.\n   *\n   * `nfp()` converts numbers such as 123 into strings formatted with a `+` or\n   * `-` symbol to mark whether they're positive or negative, as in `'+123'`.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfp(123.45)` returns the string `'+123.45'`. If an array\n   * of numbers is passed, as in `nfp([123.45, -6.78])`, an array of formatted\n   * strings will be returned.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nfp(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nfp(123.45, 4)` returns the string `'+0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nfp(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places.  For example, calling `nfp(123.45, 4, 1)` returns the\n   * string `'+0123.5'`. If `right` is larger than the number of decimal places\n   * in `num`, then unused decimal places will be set to 0.  For example,\n   * calling `nfp(123.45, 4, 3)` returns the string `'+0123.450'`.\n   *\n   * @method nfp\n   * @param {Number} num number to format.\n   * @param {Integer} [left] number of digits to include to the left of the\n   *                         decimal point.\n   * @param {Integer} [right] number of digits to include to the right of the\n   *                          decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let positive = 123;\n   *   let negative = -123;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   let p = nfp(positive);\n   *\n   *   // Convert the negative number to a formatted string\n   *   // with four digits to the left of the decimal\n   *   // and two digits to the right of the decimal.\n   *   let n = nfp(negative, 4, 2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and formatted numbers.\n   *   text(`${positive} : ${p}`, 50, 33);\n   *   text(`${negative} : ${n}`, 50, 67);\n   *\n   *   describe(\n   *     'The text \"123 : +123\" and \"-123 : -123.00\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let numbers = [123, -4.56];\n   *\n   *   // Convert the numbers to formatted strings\n   *   // with four digits to the left of the decimal\n   *   // and one digit to the right of the decimal.\n   *   let formatted = nfp(numbers, 4, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < formatted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 33;\n   *\n   *     // Display the original and formatted numbers.\n   *     text(`${numbers[i]} : ${formatted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"123 : +0123.0\" and \"-4.56 : 00-4.6\" written on separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfp\n   * @param {Number[]} nums numbers to format.\n   * @param {Integer} [left]\n   * @param {Integer} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfp = function(...args) {\n    // p5._validateParameters('nfp', args);\n    const nfRes = fn.nf.apply(this, args);\n    if (nfRes instanceof Array) {\n      return nfRes.map(addNfp);\n    } else {\n      return addNfp(nfRes);\n    }\n  };\n\n  function addNfp(num) {\n    return parseFloat(num) > 0 ? `+${num.toString()}` : num.toString();\n  }\n\n  /**\n   * Converts a positive `Number` into a `String` with an extra space in front.\n   *\n   * `nfs()` converts positive numbers such as 123.45 into strings formatted\n   * with an extra space in front, as in ' 123.45'. Doing so can be helpful for\n   * aligning positive and negative numbers.\n   *\n   * The first parameter, `num`, is the number to convert to a string. For\n   * example, calling `nfs(123.45)` returns the string `' 123.45'`.\n   *\n   * The second parameter, `left`, is optional. If a number is passed, as in\n   * `nfs(123.45, 4)`, it sets the minimum number of digits to include to the\n   * left of the decimal place. If `left` is larger than the number of digits in\n   * `num`, then unused digits will be set to 0. For example, calling\n   * `nfs(123.45, 4)` returns the string `' 0123.45'`.\n   *\n   * The third parameter, `right`, is also optional. If a number is passed, as\n   * in `nfs(123.45, 4, 1)`, it sets the minimum number of digits to include to\n   * the right of the decimal place. If `right` is smaller than the number of\n   * decimal places in `num`, then `num` will be rounded to the given number of\n   * decimal places.  For example, calling `nfs(123.45, 4, 1)` returns the\n   * string `' 0123.5'`. If `right` is larger than the number of decimal places\n   * in `num`, then unused decimal places will be set to 0.  For example,\n   * calling `nfs(123.45, 4, 3)` returns the string `' 0123.450'`.\n   *\n   * @method nfs\n   * @param {Number} num number to format.\n   * @param {Integer} [left] number of digits to include to the left of the\n   *                         decimal point.\n   * @param {Integer} [right] number of digits to include to the right of the\n   *                          decimal point.\n   * @return {String} formatted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create number variables.\n   *   let positive = 123;\n   *   let negative = -123;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   let formatted = nfs(positive);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(16);\n   *\n   *   // Display the negative number and the formatted positive number.\n   *   text(negative, 50, 33);\n   *   text(formatted, 50, 67);\n   *\n   *   describe(\n   *     'The numbers -123 and 123 written on separate lines. The numbers align vertically. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let number = 123.45;\n   *\n   *   // Convert the positive number to a formatted string.\n   *   // Use four digits to the left of the decimal and\n   *   // one digit to the right.\n   *   let formatted = nfs(number, 4, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(16);\n   *\n   *   // Display a negative version of the number and\n   *   // the formatted positive version.\n   *   text('-0123.5', 50, 33);\n   *   text(formatted, 50, 67);\n   *\n   *   describe(\n   *     'The numbers \"-0123.5\" and \"0123.5\" written on separate lines. The numbers align vertically. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method nfs\n   * @param {Array} nums numbers to format.\n   * @param {Integer} [left]\n   * @param {Integer} [right]\n   * @return {String[]} formatted strings.\n   */\n  fn.nfs = function(...args) {\n    // p5._validateParameters('nfs', args);\n    const nfRes = fn.nf.apply(this, args);\n    if (nfRes instanceof Array) {\n      return nfRes.map(addNfs);\n    } else {\n      return addNfs(nfRes);\n    }\n  };\n\n  function addNfs(num) {\n    return parseFloat(num) >= 0 ? ` ${num.toString()}` : num.toString();\n  }\n\n  /**\n   * Splits a `String` into pieces and returns an array containing the pieces.\n   *\n   * `splitTokens()` is an enhanced version of\n   * <a href=\"#/p5/split\">split()</a>. It can split a string when any characters\n   * from a list are detected.\n   *\n   * The first parameter, `value`, is the string to split.\n   *\n   * The second parameter, `delim`, is optional. It sets the character(s) that\n   * should be used to split the string. `delim` can be a single string, as in\n   * `splitTokens('rock...paper...scissors...shoot', '...')`, or an array of\n   * strings, as in\n   * `splitTokens('rock;paper,scissors...shoot, [';', ',', '...'])`. By default,\n   * if no `delim` characters are specified, then any whitespace character is\n   * used to split. Whitespace characters include tab (`\\t`), line feed (`\\n`),\n   * carriage return (`\\r`), form feed (`\\f`), and space.\n   *\n   * @method splitTokens\n   * @deprecated This will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String} value string to split.\n   * @param  {String} [delim] character(s) to use for splitting the string.\n   * @return {String[]} separated strings.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock paper scissors shoot';\n   *\n   *   // Split the string at each space.\n   *   let words = splitTokens(string);\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock...paper...scissors...shoot';\n   *\n   *   // Split the string at each ...\n   *   let words = splitTokens(string, '...');\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let string = 'rock;paper,scissors...shoot';\n   *\n   *   // Split the string at each semicolon, comma, or ...\n   *   let words = splitTokens(string, [';', ',', '...']);\n   *\n   *   // Print the array to the console.\n   *   print(words);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Iterate over the words array.\n   *   for (let i = 0; i < words.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Display the word.\n   *     text(words[i], 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"rock\", \"paper\", \"scissors\", and \"shoot\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.splitTokens = function(value, delims) {\n    // p5._validateParameters('splitTokens', arguments);\n    let d;\n    if (typeof delims !== 'undefined') {\n      let str = delims;\n      const sqc = /\\]/g.exec(str);\n      let sqo = /\\[/g.exec(str);\n      if (sqo && sqc) {\n        str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n        sqo = /\\[/g.exec(str);\n        str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n        d = new RegExp(`[\\\\[${str}\\\\]]`, 'g');\n      } else if (sqc) {\n        str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n        d = new RegExp(`[${str}\\\\]]`, 'g');\n      } else if (sqo) {\n        str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n        d = new RegExp(`[${str}\\\\[]`, 'g');\n      } else {\n        d = new RegExp(`[${str}]`, 'g');\n      }\n    } else {\n      d = /\\s/g;\n    }\n    return value.split(d).filter(n => n);\n  };\n\n  /**\n   * Shuffles the elements of an array.\n   *\n   * The first parameter, `array`, is the array to be shuffled. For example,\n   * calling `shuffle(myArray)` will shuffle the elements of `myArray`. By\n   * default, the original array won’t be modified. Instead, a copy will be\n   * created, shuffled, and returned.\n   *\n   * The second parameter, `modify`, is optional. If `true` is passed, as in\n   * `shuffle(myArray, true)`, then the array will be shuffled in place without\n   * making a copy.\n   *\n   * @method shuffle\n   * @param  {Array} array array to shuffle.\n   * @param  {Boolean} [bool] if `true`, shuffle the original array in place. Defaults to `false`.\n   * @return {Array} shuffled array.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of colors.\n   *   let colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n   *\n   *   // Create a shuffled copy of the array.\n   *   let shuffledColors = shuffle(colors);\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = colors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 33, 10);\n   *   }\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < shuffledColors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = shuffledColors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 67, 10);\n   *   }\n   *\n   *   describe(\n   *     'Two rows of circles on a gray background. The top row follows the color sequence ROYGBIV. The bottom row has all the same colors but they are shuffled.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of colors.\n   *   let colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n   *\n   *   // Shuffle the array.\n   *   shuffle(colors, true);\n   *\n   *   // Draw  a row of circles using the original array.\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 12.5;\n   *\n   *     // Style the circle.\n   *     let c = colors[i];\n   *     fill(c);\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 10);\n   *   }\n   *\n   *   describe(\n   *     'A row of colorful circles on a gray background. Their sequence changes each time the sketch runs.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shuffle = function (arr, bool) {\n    const isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);\n    arr = bool || isView ? arr : arr.slice();\n\n    let rnd,\n      tmp,\n      idx = arr.length;\n    while (idx > 1) {\n      rnd = (this.random(0, 1) * idx) | 0;\n\n      tmp = arr[--idx];\n      arr[idx] = arr[rnd];\n      arr[rnd] = tmp;\n    }\n\n    return arr;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  utilityFunctions(p5, p5.prototype);\n}\n\nexport { utilityFunctions as default };\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhC,EAAE,CAACwD,OAAO,GAAG,UAAUC,GAAG,EAAEC,IAAI,EAAE;IAChC,MAAMC,MAAM,GAAGC,WAAW,IAAIA,WAAW,CAACD,MAAM,IAAIC,WAAW,CAACD,MAAM,CAACF,GAAG,CAAC;IAC3EA,GAAG,GAAGC,IAAI,IAAIC,MAAM,GAAGF,GAAG,GAAGA,GAAG,CAACL,KAAK,CAAC,CAAC;IAExC,IAAIS,GAAG;MACLC,GAAG;MACHC,GAAG,GAAGN,GAAG,CAAC3C,MAAM;IAClB,OAAOiD,GAAG,GAAG,CAAC,EAAE;MACdF,GAAG,GAAI,IAAI,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGD,GAAG,GAAI,CAAC;MAEnCD,GAAG,GAAGL,GAAG,CAAC,EAAEM,GAAG,CAAC;MAChBN,GAAG,CAACM,GAAG,CAAC,GAAGN,GAAG,CAACI,GAAG,CAAC;MACnBJ,GAAG,CAACI,GAAG,CAAC,GAAGC,GAAG;IAChB;IAEA,OAAOL,GAAG;EACZ,CAAC;AACH;AAEA,IAAG,OAAO1D,EAAE,KAAK,WAAW,EAAC;EAC3BD,gBAAgB,CAACC,EAAE,EAAEA,EAAE,CAACY,SAAS,CAAC;AACpC;AAEA,SAASb,gBAAgB,IAAImE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}