{"ast":null,"code":"/**\n * @module Math\n * @for p5\n * @requires core\n */\n\nfunction math(p5, fn) {\n  /**\n   * Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction. This view is helpful for programming motion.\n   *\n   * A vector's components determine its magnitude and direction. For example,\n   * calling `createVector(3, 4)` creates a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object with an x-component of 3 and a\n   * y-component of 4. From the origin, this vector's tip is 3 units to the\n   * right and 4 units down.\n   *\n   * You can also pass N dimensions to the `createVector` function. For example,\n   * calling `createVector(1, 2, 3, 4)` creates a vector with four components.\n   * This allows for flexibility in representing vectors in higher-dimensional\n   * spaces.\n   *\n   * <a href=\"#/p5.Vector\">p5.Vector</a> objects are often used to program\n   * motion because they simplify the math. For example, a moving ball has a\n   * position and a velocity. Position describes where the ball is in space. The\n   * ball's position vector extends from the origin to the ball's center.\n   * Velocity describes the ball's speed and the direction it's moving. If the\n   * ball is moving straight up, its velocity vector points straight up. Adding\n   * the ball's velocity vector to its position vector moves it, as in\n   * `pos.add(vel)`. Vector math relies on methods inside the\n   * <a href=\"#/p5.Vector\">p5.Vector</a> class.\n   *\n   * @method createVector\n   * @param {...Number} x Zero or more numbers, representing each component of the vector.\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(50, 50);\n   *   let p3 = createVector(75, 75);\n   *\n   *   // Draw the dots.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots form a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVector = function (x, y, z) {\n    if (this instanceof p5) {\n      return new p5.Vector(this._fromRadians.bind(this), this._toRadians.bind(this), ...arguments);\n    } else {\n      return new p5.Vector(x, y, z);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * A matrix is a mathematical concept that is useful in many fields, including\n   * computer graphics. In p5.js, matrices are used to perform transformations\n   * on shapes and images. The `createMatrix` method can take a column-major\n   * array representation of a square matrix as an argument. In the current implementation we only use squared matrices.\n   *\n   * @private\n   * @method createMatrix\n   * @param {Array<Number>} components Column-major array representation of the square matrix.\n   *\n   * @return {p5.Matrix} new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   let matrix = createMatrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createMatrix = function (...args) {\n    return new p5.Matrix(...args);\n  };\n}\nif (typeof p5 !== \"undefined\") {\n  math(p5, p5.prototype);\n}\nexport { math as default };","map":{"version":3,"names":["math","p5","fn","createVector","x","y","z","Vector","_fromRadians","bind","_toRadians","arguments","createMatrix","args","Matrix","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/math.js"],"sourcesContent":["/**\n * @module Math\n * @for p5\n * @requires core\n */\n\nfunction math(p5, fn) {\n  /**\n   * Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction. This view is helpful for programming motion.\n   *\n   * A vector's components determine its magnitude and direction. For example,\n   * calling `createVector(3, 4)` creates a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object with an x-component of 3 and a\n   * y-component of 4. From the origin, this vector's tip is 3 units to the\n   * right and 4 units down.\n   *\n   * You can also pass N dimensions to the `createVector` function. For example,\n   * calling `createVector(1, 2, 3, 4)` creates a vector with four components.\n   * This allows for flexibility in representing vectors in higher-dimensional\n   * spaces.\n   *\n   * <a href=\"#/p5.Vector\">p5.Vector</a> objects are often used to program\n   * motion because they simplify the math. For example, a moving ball has a\n   * position and a velocity. Position describes where the ball is in space. The\n   * ball's position vector extends from the origin to the ball's center.\n   * Velocity describes the ball's speed and the direction it's moving. If the\n   * ball is moving straight up, its velocity vector points straight up. Adding\n   * the ball's velocity vector to its position vector moves it, as in\n   * `pos.add(vel)`. Vector math relies on methods inside the\n   * <a href=\"#/p5.Vector\">p5.Vector</a> class.\n   *\n   * @method createVector\n   * @param {...Number} x Zero or more numbers, representing each component of the vector.\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(50, 50);\n   *   let p3 = createVector(75, 75);\n   *\n   *   // Draw the dots.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots form a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVector = function (x, y, z) {\n    if (this instanceof p5) {\n      return new p5.Vector(\n        this._fromRadians.bind(this),\n        this._toRadians.bind(this),\n        ...arguments\n      );\n    } else {\n      return new p5.Vector(x, y, z);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * A matrix is a mathematical concept that is useful in many fields, including\n   * computer graphics. In p5.js, matrices are used to perform transformations\n   * on shapes and images. The `createMatrix` method can take a column-major\n   * array representation of a square matrix as an argument. In the current implementation we only use squared matrices.\n   *\n   * @private\n   * @method createMatrix\n   * @param {Array<Number>} components Column-major array representation of the square matrix.\n   *\n   * @return {p5.Matrix} new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   let matrix = createMatrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createMatrix = function (...args) {\n    return new p5.Matrix(...args);\n  };\n}\n\nif (typeof p5 !== \"undefined\") {\n  math(p5, p5.prototype);\n}\n\nexport { math as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAIA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACpnC,IAAI,IAAI,YAAYL,EAAE,EAAE;MACtB,OAAO,IAAIA,EAAE,CAACM,MAAM,CAClB,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,EAC5B,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,IAAI,CAAC,EAC1B,GAAGE,SACL,CAAC;IACH,CAAC,MAAM;MACL,OAAO,IAAIV,EAAE,CAACM,MAAM,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC/B;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,EAAE,CAACU,YAAY,GAAG,UAAU,GAAGC,IAAI,EAAE;IACnC,OAAO,IAAIZ,EAAE,CAACa,MAAM,CAAC,GAAGD,IAAI,CAAC;EAC/B,CAAC;AACH;AAEA,IAAI,OAAOZ,EAAE,KAAK,WAAW,EAAE;EAC7BD,IAAI,CAACC,EAAE,EAAEA,EAAE,CAACc,SAAS,CAAC;AACxB;AAEA,SAASf,IAAI,IAAIgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}