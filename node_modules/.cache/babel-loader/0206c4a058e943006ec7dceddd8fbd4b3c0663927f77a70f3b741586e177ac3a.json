{"ast":null,"code":"/**\n * @module IO\n * @submodule Input\n * @requires core\n */\n\nclass XML {\n  constructor(DOM) {\n    if (!DOM) {\n      const xmlDoc = document.implementation.createDocument(null, 'doc');\n      this.DOM = xmlDoc.createElement('root');\n    } else {\n      this.DOM = DOM;\n    }\n  }\n\n  /**\n   * Returns the element's parent element as a new <a href=\"#/p5.XML\">p5.XML</a>\n   * object.\n   *\n   * @return {p5.XML} parent element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal elements.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Get the first mammal element.\n   *   let firstMammal = mammals[0];\n   *\n   *   // Get the parent element.\n   *   let parent = firstMammal.getParent();\n   *\n   *   // Get the parent element's name.\n   *   let name = parent.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the parent element's name.\n   *   text(name, 50, 50);\n   *\n   *   describe('The word \"animals\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getParent() {\n    return new XML(this.DOM.parentElement);\n  }\n\n  /**\n   * Returns the element's name as a `String`.\n   *\n   * An XML element's name is given by its tag. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the name `language`.\n   *\n   * @return {String} name of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal elements.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Get the first mammal element.\n   *   let firstMammal = mammals[0];\n   *\n   *   // Get the mammal element's name.\n   *   let name = firstMammal.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's name.\n   *   text(name, 50, 50);\n   *\n   *   describe('The word \"mammal\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getName() {\n    return this.DOM.tagName;\n  }\n\n  /**\n   * Sets the element's tag name.\n   *\n   * An XML element's name is given by its tag. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the name `language`.\n   *\n   * The parameter, `name`, is the element's new name as a string. For example,\n   * calling `myXML.setName('planet')` will make the element's new tag name\n   * `&lt;planet&gt;&lt;/planet&gt;`.\n   *\n   * @param {String} name new tag name of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the element's original name.\n   *   let oldName = myXML.getName();\n   *\n   *   // Set the element's name.\n   *   myXML.setName('monsters');\n   *\n   *   // Get the element's new name.\n   *   let newName = myXML.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's names.\n   *   text(oldName, 50, 33);\n   *   text(newName, 50, 67);\n   *\n   *   describe(\n   *     'The words \"animals\" and \"monsters\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code></div>\n   */\n  setName(name) {\n    const content = this.DOM.innerHTML;\n    const attributes = this.DOM.attributes;\n    const xmlDoc = document.implementation.createDocument(null, 'default');\n    const newDOM = xmlDoc.createElement(name);\n    newDOM.innerHTML = content;\n    for (let i = 0; i < attributes.length; i++) {\n      newDOM.setAttribute(attributes[i].nodeName, attributes[i].nodeValue);\n    }\n    this.DOM = newDOM;\n  }\n\n  /**\n   * Returns `true` if the element has child elements and `false` if not.\n   *\n   * @return {boolean} whether the element has children.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Check whether the element has child elements.\n   *   let isParent = myXML.hasChildren();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Style the text.\n   *   if (isParent === true) {\n   *     text('Parent', 50, 50);\n   *   } else {\n   *     text('Not Parent', 50, 50);\n   *   }\n   *\n   *   describe('The word \"Parent\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  hasChildren() {\n    return this.DOM.children.length > 0;\n  }\n\n  /**\n   * Returns an array with the names of the element's child elements as\n   * `String`s.\n   *\n   * @return {String[]} names of the child elements.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the names of the element's children as an array.\n   *   let children = myXML.listChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the child element's name.\n   *     text(children[i], 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"mammal\", \"mammal\", \"mammal\", and \"reptile\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  listChildren() {\n    const arr = [];\n    for (let i = 0; i < this.DOM.childNodes.length; i++) {\n      arr.push(this.DOM.childNodes[i].nodeName);\n    }\n    return arr;\n  }\n\n  /**\n   * Returns an array with the element's child elements as new\n   * <a href=\"#/p5.XML\">p5.XML</a> objects.\n   *\n   * The parameter, `name`, is optional. If a string is passed, as in\n   * `myXML.getChildren('cat')`, then the method will only return child elements\n   * with the tag `&lt;cat&gt;`.\n   *\n   * @param {String} [name] name of the elements to return.\n   * @return {p5.XML[]} child elements.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array of the child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", \"Zebra\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array of the child elements\n   *   // that are mammals.\n   *   let children = myXML.getChildren('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Zebra\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  getChildren(param) {\n    if (param) {\n      return elementsToP5XML(this.DOM.getElementsByTagName(param));\n    } else {\n      return elementsToP5XML(this.DOM.children);\n    }\n  }\n\n  /**\n   * Returns the first matching child element as a new\n   * <a href=\"#/p5.XML\">p5.XML</a> object.\n   *\n   * The parameter, `name`, is optional. If a string is passed, as in\n   * `myXML.getChild('cat')`, then the first child element with the tag\n   * `&lt;cat&gt;` will be returned. If a number is passed, as in\n   * `myXML.getChild(1)`, then the child element at that index will be returned.\n   *\n   * @param {String|Integer} name element name or index.\n   * @return {p5.XML} child element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element that is a mammal.\n   *   let goat = myXML.getChild('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = goat.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Goat\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the child element at index 1.\n   *   let leopard = myXML.getChild(1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = leopard.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Leopard\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getChild(param) {\n    if (typeof param === 'string') {\n      for (const child of this.DOM.children) {\n        if (child.tagName === param) return new XML(child);\n      }\n    } else {\n      return new XML(this.DOM.children[param]);\n    }\n  }\n\n  /**\n   * Adds a new child element and returns a reference to it.\n   *\n   * The parameter, `child`, is the <a href=\"#/p5.XML\">p5.XML</a> object to add\n   * as a child element. For example, calling `myXML.addChild(otherXML)` inserts\n   * `otherXML` as a child element of `myXML`.\n   *\n   * @param {p5.XML} child child element to add.\n   * @return {p5.XML} added child element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a new p5.XML object.\n   *   let newAnimal = new p5.XML();\n   *\n   *   // Set its properties.\n   *   newAnimal.setName('hydrozoa');\n   *   newAnimal.setAttribute('id', 4);\n   *   newAnimal.setAttribute('species', 'Physalia physalis');\n   *   newAnimal.setContent('Bluebottle');\n   *\n   *   // Add the child element.\n   *   myXML.addChild(newAnimal);\n   *\n   *   // Get the first child element that is a hydrozoa.\n   *   let blueBottle = myXML.getChild('hydrozoa');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = blueBottle.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Bluebottle\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  addChild(node) {\n    if (node instanceof XML) {\n      this.DOM.appendChild(node.DOM);\n    }\n  }\n\n  /**\n   * Removes the first matching child element.\n   *\n   * The parameter, `name`, is the child element to remove. If a string is\n   * passed, as in `myXML.removeChild('cat')`, then the first child element\n   * with the tag `&lt;cat&gt;` will be removed. If a number is passed, as in\n   * `myXML.removeChild(1)`, then the child element at that index will be\n   * removed.\n   *\n   * @param {String|Integer} name name or index of the child element to remove.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Remove the first mammal element.\n   *   myXML.removeChild('mammal');\n   *\n   *   // Get an array of child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Leopard\", \"Zebra\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Remove the element at index 2.\n   *   myXML.removeChild(2);\n   *\n   *   // Get an array of child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  removeChild(param) {\n    let ind = -1;\n    if (typeof param === 'string') {\n      for (let i = 0; i < this.DOM.children.length; i++) {\n        if (this.DOM.children[i].tagName === param) {\n          ind = i;\n          break;\n        }\n      }\n    } else {\n      ind = param;\n    }\n    if (ind !== -1) {\n      this.DOM.removeChild(this.DOM.children[ind]);\n    }\n  }\n\n  /**\n   * Returns the number of attributes the element has.\n   *\n   * @return {Integer} number of attributes.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element.\n   *   let first = myXML.getChild(0);\n   *\n   *   // Get the number of attributes.\n   *   let numAttributes = first.getAttributeCount();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the number of attributes.\n   *   text(numAttributes, 50, 50);\n   *\n   *   describe('The number \"2\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getAttributeCount() {\n    return this.DOM.attributes.length;\n  }\n\n  /**\n   * Returns an `Array` with the names of the element's attributes.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @return {String[]} attribute names.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element.\n   *   let first = myXML.getChild(0);\n   *\n   *   // Get the number of attributes.\n   *   let attributes = first.listAttributes();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's attributes.\n   *   text(attributes, 50, 50);\n   *\n   *   describe('The text \"id,species\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  listAttributes() {\n    const arr = [];\n    for (const attribute of this.DOM.attributes) {\n      arr.push(attribute.nodeName);\n    }\n    return arr;\n  }\n\n  /**\n   * Returns `true` if the element has a given attribute and `false` if not.\n   *\n   * The parameter, `name`, is a string with the name of the attribute being\n   * checked.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @return {boolean} whether the element has the attribute.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first mammal child element.\n   *   let mammal = myXML.getChild('mammal');\n   *\n   *   // Check whether the element has an\n   *   // species attribute.\n   *   let hasSpecies = mammal.hasAttribute('species');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display whether the element has a species attribute.\n   *   if (hasSpecies === true) {\n   *     text('Species', 50, 50);\n   *   } else {\n   *     text('No species', 50, 50);\n   *   }\n   *\n   *   describe('The text \"Species\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  hasAttribute(name) {\n    const obj = {};\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n    return obj[name] ? true : false;\n  }\n\n  /**\n   * Return an attribute's value as a `Number`.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being checked. For example, calling `myXML.getNum('id')` returns the\n   * element's `id` attribute as a number.\n   *\n   * The second parameter, `defaultValue`, is optional. If a number is passed,\n   * as in `myXML.getNum('id', -1)`, it will be returned if the attribute\n   * doesn't exist or can't be converted to a number.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @param {Number} [defaultValue] value to return if the attribute doesn't exist.\n   * @return {Number} attribute value as a number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's ID.\n   *   let id = reptile.getNum('id');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the ID attribute.\n   *   text(`${content} is ${id + 1}th`, 5, 50, 90);\n   *\n   *   describe(`The text \"${content} is ${id + 1}th\" written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's size.\n   *   let weight = reptile.getNum('weight', 135);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the ID attribute.\n   *   text(`${content} is ${weight}kg`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${content} is ${weight}kg\" written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  getNum(name, defaultValue) {\n    const obj = {};\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n    return Number(obj[name]) || defaultValue || 0;\n  }\n\n  /**\n   * Return an attribute's value as a string.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being checked. For example, calling `myXML.getString('color')` returns the\n   * element's `id` attribute as a string.\n   *\n   * The second parameter, `defaultValue`, is optional. If a string is passed,\n   * as in `myXML.getString('color', 'deeppink')`, it will be returned if the\n   * attribute doesn't exist.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @param {Number} [defaultValue] value to return if the attribute doesn't exist.\n   * @return {String} attribute value as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's species.\n   *   let species = reptile.getString('species');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the species attribute.\n   *   text(`${content}: ${species}`, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}: ${species}\" written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's color.\n   *   let attribute = reptile.getString('color', 'green');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *   fill(attribute);\n   *\n   *   // Display the element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  getString(name, defaultValue) {\n    const obj = {};\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n    return obj[name] ? String(obj[name]) : defaultValue || null;\n  }\n\n  /**\n   * Sets an attribute to a given value.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being set.\n   *\n   * The second parameter, `value`, is the attribute's new value. For example,\n   * calling `myXML.setAttribute('id', 123)` sets the `id` attribute to the\n   * value 123.\n   *\n   * @param {String} name name of the attribute to be set.\n   * @param {Number|String|Boolean} value attribute's new value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Set the reptile's color.\n   *   reptile.setAttribute('color', 'green');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's color.\n   *   let attribute = reptile.getString('color');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(`${content} is ${attribute}`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${content} is ${attribute}\" written in green on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  setAttribute(name, value) {\n    this.DOM.setAttribute(name, value);\n  }\n\n  /**\n   * Returns the element's content as a `String`.\n   *\n   * The parameter, `defaultValue`, is optional. If a string is passed, as in\n   * `myXML.getContent('???')`, it will be returned if the element has no\n   * content.\n   *\n   * @param {String} [defaultValue] value to return if the element has no\n   *                                content.\n   * @return {String} element's content as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(content, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.XML object.\n   *   let blankSpace = new p5.XML();\n   *\n   *   // Get the element's content and use a default value.\n   *   let content = blankSpace.getContent('Your name');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(content, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  getContent(defaultValue) {\n    let str;\n    str = this.DOM.textContent;\n    str = str.replace(/\\s\\s+/g, ',');\n    return str || defaultValue || null;\n  }\n\n  /**\n   * Sets the element's content.\n   *\n   * An element's content is the text between its tags. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the content `JavaScript`.\n   *\n   * The parameter, `content`, is a string with the element's new content.\n   *\n   * @method setContent\n   * @param {String} content new content for the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's original content.\n   *   let oldContent = reptile.getContent();\n   *\n   *   // Set the reptile's content.\n   *   reptile.setContent('Loggerhead');\n   *\n   *   // Get the reptile's new content.\n   *   let newContent = reptile.getContent();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's old and new content.\n   *   text(`${oldContent}: ${newContent}`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${oldContent}: ${newContent}\" written in green on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  setContent(content) {\n    if (!this.DOM.children.length) {\n      this.DOM.textContent = content;\n    }\n  }\n\n  /**\n   * Returns the element as a `String`.\n   *\n   * `myXML.serialize()` is useful for sending the element over the network or\n   * saving it to a file.\n   *\n   * @return {String} element as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Display instructions.\n   *   text('Double-click to save', 5, 50, 90);\n   *\n   *   describe('The text \"Double-click to save\" written in black on a gray background.');\n   * }\n   *\n   * // Save the file when the user double-clicks.\n   * function doubleClicked() {\n   *   // Create a p5.PrintWriter object.\n   *   // Use the file format .xml.\n   *   let myWriter = createWriter('animals', 'xml');\n   *\n   *   // Serialize the XML data to a string.\n   *   let data = myXML.serialize();\n   *\n   *   // Write the data to the print stream.\n   *   myWriter.write(data);\n   *\n   *   // Save the file and close the print stream.\n   *   myWriter.close();\n   * }\n   * </code>\n   * </div>\n   */\n  serialize() {\n    const xmlSerializer = new XMLSerializer();\n    return xmlSerializer.serializeToString(this.DOM);\n  }\n}\nfunction elementsToP5XML(elements) {\n  const arr = [];\n  for (let i = 0; i < elements.length; i++) {\n    arr.push(new XML(elements[i]));\n  }\n  return arr;\n}\nfunction xml(p5, fn) {\n  /**\n   * A class to describe an XML object.\n   *\n   * Each `p5.XML` object provides an easy way to interact with XML data.\n   * Extensible Markup Language\n   * (<a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\" target=\"_blank\">XML</a>)\n   * is a standard format for sending data between applications. Like HTML, the\n   * XML format is based on tags and attributes, as in\n   * `&lt;time units=\"s\"&gt;1234&lt;/time&gt;`.\n   *\n   * Note: Use <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files.\n   *\n   * @class p5.XML\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal tags.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the mammals array.\n   *   for (let i = 0; i < mammals.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the mammal's common name.\n   *     let name = mammals[i].getContent();\n   *\n   *     // Display the mammal's name.\n   *     text(name, 20, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Zebra\" written on three separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  p5.XML = XML;\n}\nif (typeof p5 !== 'undefined') {\n  xml(p5, p5.prototype);\n}\nexport { XML, xml as default };","map":{"version":3,"names":["XML","constructor","DOM","xmlDoc","document","implementation","createDocument","createElement","getParent","parentElement","getName","tagName","setName","name","content","innerHTML","attributes","newDOM","i","length","setAttribute","nodeName","nodeValue","hasChildren","children","listChildren","arr","childNodes","push","getChildren","param","elementsToP5XML","getElementsByTagName","getChild","child","addChild","node","appendChild","removeChild","ind","getAttributeCount","listAttributes","attribute","hasAttribute","obj","getNum","defaultValue","Number","getString","String","value","getContent","str","textContent","replace","setContent","serialize","xmlSerializer","XMLSerializer","serializeToString","elements","xml","p5","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/io/p5.XML.js"],"sourcesContent":["/**\n * @module IO\n * @submodule Input\n * @requires core\n */\n\nclass XML {\n  constructor(DOM){\n    if (!DOM) {\n      const xmlDoc = document.implementation.createDocument(null, 'doc');\n      this.DOM = xmlDoc.createElement('root');\n    } else {\n      this.DOM = DOM;\n    }\n  }\n\n  /**\n   * Returns the element's parent element as a new <a href=\"#/p5.XML\">p5.XML</a>\n   * object.\n   *\n   * @return {p5.XML} parent element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal elements.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Get the first mammal element.\n   *   let firstMammal = mammals[0];\n   *\n   *   // Get the parent element.\n   *   let parent = firstMammal.getParent();\n   *\n   *   // Get the parent element's name.\n   *   let name = parent.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the parent element's name.\n   *   text(name, 50, 50);\n   *\n   *   describe('The word \"animals\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getParent() {\n    return new XML(this.DOM.parentElement);\n  }\n\n  /**\n   * Returns the element's name as a `String`.\n   *\n   * An XML element's name is given by its tag. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the name `language`.\n   *\n   * @return {String} name of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal elements.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Get the first mammal element.\n   *   let firstMammal = mammals[0];\n   *\n   *   // Get the mammal element's name.\n   *   let name = firstMammal.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's name.\n   *   text(name, 50, 50);\n   *\n   *   describe('The word \"mammal\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getName() {\n    return this.DOM.tagName;\n  }\n\n  /**\n   * Sets the element's tag name.\n   *\n   * An XML element's name is given by its tag. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the name `language`.\n   *\n   * The parameter, `name`, is the element's new name as a string. For example,\n   * calling `myXML.setName('planet')` will make the element's new tag name\n   * `&lt;planet&gt;&lt;/planet&gt;`.\n   *\n   * @param {String} name new tag name of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the element's original name.\n   *   let oldName = myXML.getName();\n   *\n   *   // Set the element's name.\n   *   myXML.setName('monsters');\n   *\n   *   // Get the element's new name.\n   *   let newName = myXML.getName();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's names.\n   *   text(oldName, 50, 33);\n   *   text(newName, 50, 67);\n   *\n   *   describe(\n   *     'The words \"animals\" and \"monsters\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code></div>\n   */\n  setName(name) {\n    const content = this.DOM.innerHTML;\n    const attributes = this.DOM.attributes;\n    const xmlDoc = document.implementation.createDocument(null, 'default');\n    const newDOM = xmlDoc.createElement(name);\n    newDOM.innerHTML = content;\n    for (let i = 0; i < attributes.length; i++) {\n      newDOM.setAttribute(attributes[i].nodeName, attributes[i].nodeValue);\n    }\n    this.DOM = newDOM;\n  }\n\n  /**\n   * Returns `true` if the element has child elements and `false` if not.\n   *\n   * @return {boolean} whether the element has children.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Check whether the element has child elements.\n   *   let isParent = myXML.hasChildren();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Style the text.\n   *   if (isParent === true) {\n   *     text('Parent', 50, 50);\n   *   } else {\n   *     text('Not Parent', 50, 50);\n   *   }\n   *\n   *   describe('The word \"Parent\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  hasChildren() {\n    return this.DOM.children.length > 0;\n  }\n\n  /**\n   * Returns an array with the names of the element's child elements as\n   * `String`s.\n   *\n   * @return {String[]} names of the child elements.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the names of the element's children as an array.\n   *   let children = myXML.listChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the child element's name.\n   *     text(children[i], 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"mammal\", \"mammal\", \"mammal\", and \"reptile\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  listChildren() {\n    const arr = [];\n    for (let i = 0; i < this.DOM.childNodes.length; i++) {\n      arr.push(this.DOM.childNodes[i].nodeName);\n    }\n    return arr;\n  }\n\n  /**\n   * Returns an array with the element's child elements as new\n   * <a href=\"#/p5.XML\">p5.XML</a> objects.\n   *\n   * The parameter, `name`, is optional. If a string is passed, as in\n   * `myXML.getChildren('cat')`, then the method will only return child elements\n   * with the tag `&lt;cat&gt;`.\n   *\n   * @param {String} [name] name of the elements to return.\n   * @return {p5.XML[]} child elements.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array of the child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", \"Zebra\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array of the child elements\n   *   // that are mammals.\n   *   let children = myXML.getChildren('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 20;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Zebra\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  getChildren(param) {\n    if (param) {\n      return elementsToP5XML(this.DOM.getElementsByTagName(param));\n    } else {\n      return elementsToP5XML(this.DOM.children);\n    }\n  }\n\n  /**\n   * Returns the first matching child element as a new\n   * <a href=\"#/p5.XML\">p5.XML</a> object.\n   *\n   * The parameter, `name`, is optional. If a string is passed, as in\n   * `myXML.getChild('cat')`, then the first child element with the tag\n   * `&lt;cat&gt;` will be returned. If a number is passed, as in\n   * `myXML.getChild(1)`, then the child element at that index will be returned.\n   *\n   * @param {String|Integer} name element name or index.\n   * @return {p5.XML} child element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element that is a mammal.\n   *   let goat = myXML.getChild('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = goat.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Goat\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the child element at index 1.\n   *   let leopard = myXML.getChild(1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = leopard.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Leopard\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getChild(param) {\n    if (typeof param === 'string') {\n      for (const child of this.DOM.children) {\n        if (child.tagName === param) return new XML(child);\n      }\n    } else {\n      return new XML(this.DOM.children[param]);\n    }\n  }\n\n  /**\n   * Adds a new child element and returns a reference to it.\n   *\n   * The parameter, `child`, is the <a href=\"#/p5.XML\">p5.XML</a> object to add\n   * as a child element. For example, calling `myXML.addChild(otherXML)` inserts\n   * `otherXML` as a child element of `myXML`.\n   *\n   * @param {p5.XML} child child element to add.\n   * @return {p5.XML} added child element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a new p5.XML object.\n   *   let newAnimal = new p5.XML();\n   *\n   *   // Set its properties.\n   *   newAnimal.setName('hydrozoa');\n   *   newAnimal.setAttribute('id', 4);\n   *   newAnimal.setAttribute('species', 'Physalia physalis');\n   *   newAnimal.setContent('Bluebottle');\n   *\n   *   // Add the child element.\n   *   myXML.addChild(newAnimal);\n   *\n   *   // Get the first child element that is a hydrozoa.\n   *   let blueBottle = myXML.getChild('hydrozoa');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Get the child element's content.\n   *   let content = blueBottle.getContent();\n   *\n   *   // Display the child element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe('The word \"Bluebottle\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  addChild(node) {\n    if (node instanceof XML) {\n      this.DOM.appendChild(node.DOM);\n    }\n  }\n\n  /**\n   * Removes the first matching child element.\n   *\n   * The parameter, `name`, is the child element to remove. If a string is\n   * passed, as in `myXML.removeChild('cat')`, then the first child element\n   * with the tag `&lt;cat&gt;` will be removed. If a number is passed, as in\n   * `myXML.removeChild(1)`, then the child element at that index will be\n   * removed.\n   *\n   * @param {String|Integer} name name or index of the child element to remove.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Remove the first mammal element.\n   *   myXML.removeChild('mammal');\n   *\n   *   // Get an array of child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Leopard\", \"Zebra\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Remove the element at index 2.\n   *   myXML.removeChild(2);\n   *\n   *   // Get an array of child elements.\n   *   let children = myXML.getChildren();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the array.\n   *   for (let i = 0; i < children.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the child element's content.\n   *     let content = children[i].getContent();\n   *\n   *     // Display the child element's content.\n   *     text(content, 10, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Turtle\" written on separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  removeChild(param) {\n    let ind = -1;\n    if (typeof param === 'string') {\n      for (let i = 0; i < this.DOM.children.length; i++) {\n        if (this.DOM.children[i].tagName === param) {\n          ind = i;\n          break;\n        }\n      }\n    } else {\n      ind = param;\n    }\n    if (ind !== -1) {\n      this.DOM.removeChild(this.DOM.children[ind]);\n    }\n  }\n\n  /**\n   * Returns the number of attributes the element has.\n   *\n   * @return {Integer} number of attributes.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element.\n   *   let first = myXML.getChild(0);\n   *\n   *   // Get the number of attributes.\n   *   let numAttributes = first.getAttributeCount();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the number of attributes.\n   *   text(numAttributes, 50, 50);\n   *\n   *   describe('The number \"2\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  getAttributeCount() {\n    return this.DOM.attributes.length;\n  }\n\n  /**\n   * Returns an `Array` with the names of the element's attributes.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @return {String[]} attribute names.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first child element.\n   *   let first = myXML.getChild(0);\n   *\n   *   // Get the number of attributes.\n   *   let attributes = first.listAttributes();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's attributes.\n   *   text(attributes, 50, 50);\n   *\n   *   describe('The text \"id,species\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  listAttributes() {\n    const arr = [];\n\n    for (const attribute of this.DOM.attributes) {\n      arr.push(attribute.nodeName);\n    }\n\n    return arr;\n  }\n\n  /**\n   * Returns `true` if the element has a given attribute and `false` if not.\n   *\n   * The parameter, `name`, is a string with the name of the attribute being\n   * checked.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @return {boolean} whether the element has the attribute.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first mammal child element.\n   *   let mammal = myXML.getChild('mammal');\n   *\n   *   // Check whether the element has an\n   *   // species attribute.\n   *   let hasSpecies = mammal.hasAttribute('species');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display whether the element has a species attribute.\n   *   if (hasSpecies === true) {\n   *     text('Species', 50, 50);\n   *   } else {\n   *     text('No species', 50, 50);\n   *   }\n   *\n   *   describe('The text \"Species\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  hasAttribute(name) {\n    const obj = {};\n\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n\n    return obj[name] ? true : false;\n  }\n\n  /**\n   * Return an attribute's value as a `Number`.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being checked. For example, calling `myXML.getNum('id')` returns the\n   * element's `id` attribute as a number.\n   *\n   * The second parameter, `defaultValue`, is optional. If a number is passed,\n   * as in `myXML.getNum('id', -1)`, it will be returned if the attribute\n   * doesn't exist or can't be converted to a number.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @param {Number} [defaultValue] value to return if the attribute doesn't exist.\n   * @return {Number} attribute value as a number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's ID.\n   *   let id = reptile.getNum('id');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the ID attribute.\n   *   text(`${content} is ${id + 1}th`, 5, 50, 90);\n   *\n   *   describe(`The text \"${content} is ${id + 1}th\" written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's size.\n   *   let weight = reptile.getNum('weight', 135);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the ID attribute.\n   *   text(`${content} is ${weight}kg`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${content} is ${weight}kg\" written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  getNum(name, defaultValue) {\n    const obj = {};\n\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n\n    return Number(obj[name]) || defaultValue || 0;\n  }\n\n  /**\n   * Return an attribute's value as a string.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being checked. For example, calling `myXML.getString('color')` returns the\n   * element's `id` attribute as a string.\n   *\n   * The second parameter, `defaultValue`, is optional. If a string is passed,\n   * as in `myXML.getString('color', 'deeppink')`, it will be returned if the\n   * attribute doesn't exist.\n   *\n   * Note: Use\n   * <a href=\"#/p5.XML/getString\">myXML.getString()</a> or\n   * <a href=\"#/p5.XML/getNum\">myXML.getNum()</a> to return an attribute's value.\n   *\n   * @param {String} name name of the attribute to be checked.\n   * @param {Number} [defaultValue] value to return if the attribute doesn't exist.\n   * @return {String} attribute value as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's species.\n   *   let species = reptile.getString('species');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the species attribute.\n   *   text(`${content}: ${species}`, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}: ${species}\" written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's color.\n   *   let attribute = reptile.getString('color', 'green');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *   fill(attribute);\n   *\n   *   // Display the element's content.\n   *   text(content, 50, 50);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  getString(name, defaultValue) {\n    const obj = {};\n\n    for (const attribute of this.DOM.attributes) {\n      obj[attribute.nodeName] = attribute.nodeValue;\n    }\n\n    return obj[name] ? String(obj[name]) : defaultValue || null;\n  }\n\n  /**\n   * Sets an attribute to a given value.\n   *\n   * The first parameter, `name`, is a string with the name of the attribute\n   * being set.\n   *\n   * The second parameter, `value`, is the attribute's new value. For example,\n   * calling `myXML.setAttribute('id', 123)` sets the `id` attribute to the\n   * value 123.\n   *\n   * @param {String} name name of the attribute to be set.\n   * @param {Number|String|Boolean} value attribute's new value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Set the reptile's color.\n   *   reptile.setAttribute('color', 'green');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Get the reptile's color.\n   *   let attribute = reptile.getString('color');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(`${content} is ${attribute}`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${content} is ${attribute}\" written in green on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  setAttribute(name, value) {\n    this.DOM.setAttribute(name, value);\n  }\n\n  /**\n   * Returns the element's content as a `String`.\n   *\n   * The parameter, `defaultValue`, is optional. If a string is passed, as in\n   * `myXML.getContent('???')`, it will be returned if the element has no\n   * content.\n   *\n   * @param {String} [defaultValue] value to return if the element has no\n   *                                content.\n   * @return {String} element's content as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's content.\n   *   let content = reptile.getContent();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(content, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.XML object.\n   *   let blankSpace = new p5.XML();\n   *\n   *   // Get the element's content and use a default value.\n   *   let content = blankSpace.getContent('Your name');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's content.\n   *   text(content, 5, 50, 90);\n   *\n   *   describe(`The text \"${content}\" written in green on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  getContent(defaultValue) {\n    let str;\n    str = this.DOM.textContent;\n    str = str.replace(/\\s\\s+/g, ',');\n    return str || defaultValue || null;\n  }\n\n  /**\n   * Sets the element's content.\n   *\n   * An element's content is the text between its tags. For example, the element\n   * `&lt;language&gt;JavaScript&lt;/language&gt;` has the content `JavaScript`.\n   *\n   * The parameter, `content`, is a string with the element's new content.\n   *\n   * @method setContent\n   * @param {String} content new content for the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the first reptile child element.\n   *   let reptile = myXML.getChild('reptile');\n   *\n   *   // Get the reptile's original content.\n   *   let oldContent = reptile.getContent();\n   *\n   *   // Set the reptile's content.\n   *   reptile.setContent('Loggerhead');\n   *\n   *   // Get the reptile's new content.\n   *   let newContent = reptile.getContent();\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Display the element's old and new content.\n   *   text(`${oldContent}: ${newContent}`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text \"${oldContent}: ${newContent}\" written in green on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  setContent(content) {\n    if (!this.DOM.children.length) {\n      this.DOM.textContent = content;\n    }\n  }\n\n  /**\n   * Returns the element as a `String`.\n   *\n   * `myXML.serialize()` is useful for sending the element over the network or\n   * saving it to a file.\n   *\n   * @return {String} element as a string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(12);\n   *\n   *   // Display instructions.\n   *   text('Double-click to save', 5, 50, 90);\n   *\n   *   describe('The text \"Double-click to save\" written in black on a gray background.');\n   * }\n   *\n   * // Save the file when the user double-clicks.\n   * function doubleClicked() {\n   *   // Create a p5.PrintWriter object.\n   *   // Use the file format .xml.\n   *   let myWriter = createWriter('animals', 'xml');\n   *\n   *   // Serialize the XML data to a string.\n   *   let data = myXML.serialize();\n   *\n   *   // Write the data to the print stream.\n   *   myWriter.write(data);\n   *\n   *   // Save the file and close the print stream.\n   *   myWriter.close();\n   * }\n   * </code>\n   * </div>\n   */\n  serialize() {\n    const xmlSerializer = new XMLSerializer();\n    return xmlSerializer.serializeToString(this.DOM);\n  }\n}\n\nfunction elementsToP5XML(elements) {\n  const arr = [];\n  for (let i = 0; i < elements.length; i++) {\n    arr.push(new XML(elements[i]));\n  }\n  return arr;\n}\n\nfunction xml(p5, fn){\n  /**\n   * A class to describe an XML object.\n   *\n   * Each `p5.XML` object provides an easy way to interact with XML data.\n   * Extensible Markup Language\n   * (<a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\" target=\"_blank\">XML</a>)\n   * is a standard format for sending data between applications. Like HTML, the\n   * XML format is based on tags and attributes, as in\n   * `&lt;time units=\"s\"&gt;1234&lt;/time&gt;`.\n   *\n   * Note: Use <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files.\n   *\n   * @class p5.XML\n   * @example\n   * <div>\n   * <code>\n   * let myXML;\n   *\n   * async function setup() {\n   *   // Load the XML and create a p5.XML object.\n   *   myXML = await loadXML('assets/animals.xml');\n   *\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get an array with all mammal tags.\n   *   let mammals = myXML.getChildren('mammal');\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(14);\n   *\n   *   // Iterate over the mammals array.\n   *   for (let i = 0; i < mammals.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Get the mammal's common name.\n   *     let name = mammals[i].getContent();\n   *\n   *     // Display the mammal's name.\n   *     text(name, 20, y);\n   *   }\n   *\n   *   describe(\n   *     'The words \"Goat\", \"Leopard\", and \"Zebra\" written on three separate lines. The text is black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  p5.XML = XML;\n}\n\nif(typeof p5 !== 'undefined'){\n  xml(p5, p5.prototype);\n}\n\nexport { XML, xml as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,GAAG,EAAC;IACd,IAAI,CAACA,GAAG,EAAE;MACR,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAACC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;MAClE,IAAI,CAACJ,GAAG,GAAGC,MAAM,CAACI,aAAa,CAAC,MAAM,CAAC;IACzC,CAAC,MAAM;MACL,IAAI,CAACL,GAAG,GAAGA,GAAG;IAChB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,SAASA,CAAA,EAAG;IACV,OAAO,IAAIR,GAAG,CAAC,IAAI,CAACE,GAAG,CAACO,aAAa,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,GAAG,CAACS,OAAO;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAACC,IAAI,EAAE;IACZ,MAAMC,OAAO,GAAG,IAAI,CAACZ,GAAG,CAACa,SAAS;IAClC,MAAMC,UAAU,GAAG,IAAI,CAACd,GAAG,CAACc,UAAU;IACtC,MAAMb,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC;IACtE,MAAMW,MAAM,GAAGd,MAAM,CAACI,aAAa,CAACM,IAAI,CAAC;IACzCI,MAAM,CAACF,SAAS,GAAGD,OAAO;IAC1B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1CD,MAAM,CAACG,YAAY,CAACJ,UAAU,CAACE,CAAC,CAAC,CAACG,QAAQ,EAAEL,UAAU,CAACE,CAAC,CAAC,CAACI,SAAS,CAAC;IACtE;IACA,IAAI,CAACpB,GAAG,GAAGe,MAAM;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACrB,GAAG,CAACsB,QAAQ,CAACL,MAAM,GAAG,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,YAAYA,CAAA,EAAG;IACb,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,GAAG,CAACyB,UAAU,CAACR,MAAM,EAAED,CAAC,EAAE,EAAE;MACnDQ,GAAG,CAACE,IAAI,CAAC,IAAI,CAAC1B,GAAG,CAACyjB,IAAIA,KAAK,EAAE;MACT,OAAOC,eAAe,CAAC,IAAI,CAAC7B,GAAG,CAAC8B,oBAAoB,CAACF,KAAK,CAAC,CAAC;IAC9D,CAAC,MAAM;MACL,OAAOC,eAAe,CAAC,IAAI,CAAC7B,GAAG,CAACsB,QAAQ,CAAC;IAC3C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,QAAQA,CAACH,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,KAAK,MAAMI,KAAK,IAAI,IAAI,CAAChC,GAAG,CAACsB,QAAQ,EAAE;QACrC,IAAIU,KAAK,CAACvB,OAAO,KAAKmB,KAAK,EAAE,OAAO,IAAI9B,GAAG,CAACkC,KAAK,CAAC;MACpD;IACF,CAAC,MAAM;MACL,OAAO,IAAIlC,GAAG,CAAC,IAAI,CAACE,GAAG,CAACsB,QAAQ,CAACM,KAAK,CAAC,CAAC;IAC1C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQA,CAACC,IAAI,EAAE;IACb,IAAIA,IAAI,YAAYpC,GAAG,EAAE;MACvB,IAAI,CAACE,GAAG,CAACmC,WAAW,CAACD,IAAI,CAAClC,GAAG,CAAC;IAChoC,WAAWA,CAACR,KAAK,EAAE;IACjB,IAAIS,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,OAAOT,KAAK,KAAK,QAAQ,EAAE;MAC7B,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,GAAG,CAACsB,QAAQ,CAACL,MAAM,EAAED,CAAC,EAAE,EAAE;QACjD,IAAI,IAAI,CAAChB,GAAG,CAACsB,QAAQ,CAACN,CAAC,CAAC,CAACP,OAAO,KAAKmB,KAAK,EAAE;UAC1CS,GAAG,GAAGrB,CAAC;UACP;QACF;MACF;IACF,CAAC,MAAM;MACLqB,GAAG,GAAGT,KAAK;IACb;IACA,IAAIS,GAAG,KAAK,CAAC,CAAC,EAAE;MACd,IAAI,CAACrC,GAAG,CAACoC,WAAW,CAAC,IAAI,CAACpC,GAAG,CAACsB,QAAQ,CAACe,GAAG,CAAC,CAAC;IAC9C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACtC,GAAG,CAACc,UAAU,CAACG,MAAM;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,cAAcA,CAAA,EAAG;IACf,MAAMf,GAAG,GAAG,EAAE;IAEd,KAAK,MAAMgB,SAAS,IAAI,IAAI,CAACxC,GAAG,CAACc,UAAU,EAAE;MAC3CU,GAAG,CAACE,IAAI,CAACc,SAAS,CAACrB,QAAQ,CAAC;IAC9B;IAEA,OAAOK,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEiB,YAAYA,CAAC9B,IAAI,EAAE;IACjB,MAAM+B,GAAG,GAAG,CAAC,CAAC;IAEd,KAAK,MAAMF,SAAS,IAAI,IAAI,CAACxC,GAAG,CAACc,UAAU,EAAE;MAC3C4B,GAAG,CAACF,SAAS,CAACrB,QAAQ,CAAC,GAAGqB,SAAS,CAACpB,SAAS;IAC/C;IAEA,OAAOsB,GAAG,CAAC/B,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgC,MAAMA,CAAChC,IAAI,EAAEiC,YAAY,EAAE;IACzB,MAAMF,GAAG,GAAG,CAAC,CAAC;IAEd,KAAK,MAAMF,SAAS,IAAI,IAAI,CAACxC,GAAG,CAACc,UAAU,EAAE;MAC3C4B,GAAG,CAACF,SAAS,CAACrB,QAAQ,CAAC,GAAGqB,SAAS,CAACpB,SAAS;IAC/C;IAEA,OAAOyB,MAAM,CAACH,GAAG,CAAC/B,IAAI,CAAC,CAAC,IAAIiC,YAAY,IAAI,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,SAASA,CAACnC,IAAI,EAAEiC,YAAY,EAAE;IAC5B,MAAMF,GAAG,GAAG,CAAC,CAAC;IAEd,KAAK,MAAMF,SAAS,IAAI,IAAI,CAACxC,GAAG,CAACc,UAAU,EAAE;MAC3C4B,GAAG,CAACF,SAAS,CAACrB,QAAQ,CAAC,GAAGqB,SAAS,CAACpB,SAAS;IAC/C;IAEA,OAAOsB,GAAG,CAAC/B,IAAI,CAAC,GAAGoC,MAAM,CAACL,GAAG,CAAC/B,IAAI,CAAC,CAAC,GAAGiC,YAAY,IAAI,IAAI;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE1B,YAAYA,CAACP,IAAI,EAAEqC,KAAK,EAAE;IACxB,IAAI,CAAChD,GAAG,CAACkB,YAAY,CAACP,IAAI,EAAEqC,KAAK,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAUA,CAACL,YAAY,EAAE;IACvB,IAAIM,GAAG;IACPA,GAAG,GAAG,IAAI,CAAClD,GAAG,CAACmD,WAAW;IAC1BD,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IAChC,OAAOF,GAAG,IAAIN,YAAY,IAAI,IAAI;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,UAAUA,CAACzC,OAAO,EAAE;IAClB,IAAI,CAAC,IAAI,CAACZ,GAAG,CAACsB,QAAQ,CAACL,MAAM,EAAE;MAC7B,IAAI,CAACjB,GAAG,CAACmD,WAAW,GAAGvC,OAAO;IAChC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0C,SAASA,CAAA,EAAG;IACV,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAAC,CAAC;IACzC,OAAOD,aAAa,CAACE,iBAAiB,CAAC,IAAI,CAACzD,GAAG,CAAC;EAClD;AACF;AAEA,SAAS6B,eAAeA,CAAC6B,QAAQ,EAAE;EACjC,MAAMlC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,QAAQ,CAACzC,MAAM,EAAED,CAAC,EAAE,EAAE;IACxCQ,GAAG,CAACE,IAAI,CAAC,IAAI5B,GAAG,CAAC4D,QAAQ,CAAC1C,CAAC,CAAC,CAAC,CAAC;EAChC;EACA,OAAOQ,GAAG;AACZ;AAEA,SAASmC,GAAGA,CAACC,EAAE,EAAEC,EAAE,EAAC;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACED,EAAE,CAAC9D,GAAG,GAAGA,GAAG;AACd;AAEA,IAAG,OAAO8D,EAAE,KAAK,WAAW,EAAC;EAC3BD,GAAG,CAACC,EAAE,EAAEA,EAAE,CAACE,SAAS,CAAC;AACvB;AAEA,SAAShE,GAAG,EAAE6D,GAAG,IAAII,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}