{"ast":null,"code":"import { stringify } from './csv.js';\n\n/**\n * @module IO\n * @submodule Table\n * @requires core\n */\n\nclass Table {\n  constructor(rows) {\n    this.columns = [];\n    this.rows = [];\n  }\n  toString(separator = ',') {\n    let rows = this.rows.map(row => row.arr);\n    if (!this.columns.some(column => column === null)) {\n      rows = [this.columns, ...rows];\n    }\n    return stringify(rows, {\n      separator\n    });\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/addRow/\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\n   *  an empty row is created. Typically, you would store a reference to\n   *  the new row in a TableRow object (see newRow in the example above),\n   *  and then set individual values using <a href=\"#/p5/set\">set()</a>.\n   *\n   *  If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\n   *  duplicated and added to the table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param   {p5.TableRow} [row] row to be added to the table\n   *  @return  {p5.TableRow} the row that was added\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 300x300 canvas\n   *   createCanvas(300, 300);\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add a new row for \"Wolf\"\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Canis Lupus');\n   *     newRow.setString('name', 'Wolf');\n   *\n   *   // Set text properties\n   *   fill(0);       // Text color: black\n   *    textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the table data on the canvas\n   *   // Each cell is positioned based on its row and column\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       let x = c * 50 + 10;  // Horizontal spacing for each column\n   *       let y = r * 30 + 20;  // Vertical spacing for each row\n   *       text(table.getString(r, c), x * c, y);\n   *     }\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  addRow(row) {\n    // make sure it is a valid TableRow\n    const r = row || new p5.TableRow();\n    if (typeof r.arr === 'undefined' || typeof r.obj === 'undefined') {\n      //r = new p5.prototype.TableRow(r);\n      throw new Error(`invalid TableRow: ${r}`);\n    }\n    r.table = this;\n    this.rows.push(r);\n    return r;\n  }\n\n  /**\n   * Removes a row from the table object.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param   {Integer} id ID number of the row to remove\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *    table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Remove the first row from the table\n   *   table.removeRow(0);\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the table values on the canvas:\n   *   // Each row's cell values are joined into a single string and drawn on a new line.\n   *   let y = 20; // Starting vertical position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 18, y * 3);\n   *     y += 20;\n   *   }\n   * \n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  removeRow(id) {\n    this.rows[id].table = null; // remove reference to table\n    const chunk = this.rows.splice(id + 1, this.rows.length);\n    this.rows.pop();\n    this.rows = this.rows.concat(chunk);\n  }\n\n  /**\n   * Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\n   * can then be used to get and set values of the selected row.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {Integer}   rowID ID number of the row to get\n   * @return {p5.TableRow} <a href=\"#/p5.TableRow\">p5.TableRow</a> object\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Get the row at index 1 (second row)\n   *   let row = table.getRow(1);\n   * \n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Set the text size\n   *\n   *   // Loop over each column in the row and display its value on the canvas\n   *   for (let c = 0; c < table.getColumnCount(); c++) {\n   *     text(row.getString(c), 10, 20 + c * 50 + 20);\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getRow(r) {\n    return this.rows[r];\n  }\n\n  /**\n   *  Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {p5.TableRow[]}   Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   let rows = table.getRows();\n   *\n   *   // Warning: rows is an array of objects.\n   *   // Set the 'name' of each row to 'Unicorn'\n   *   for (let r = 0; r < rows.length; r++) {\n   *     rows[r].set('name', 'Unicorn');\n   *   }\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the modified table values on the canvas\n   *   // We'll join each row's values with a space and display each row on a new line.\n   *   let y = 20; // Starting y position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 10, y * 2);\n   *     y += 20; // Move to next line\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getRows() {\n    return this.rows;\n  }\n\n  /**\n   *  Finds the first row in the Table that contains the value\n   *  provided, and returns a reference to that row. Even if\n   *  multiple rows are possible matches, only the first matching\n   *  row is returned. The column to search may be specified by\n   *  either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} value  The value to match\n   *  @param  {Integer|String} column ID number or title of the\n   *                                 column to search\n   *  @return {p5.TableRow}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *    // Find the row with the animal named \"Zebra\"\n   *   let row = table.findRow('Zebra', 'name');\n   *\n   *   // Get the species from the found row\n   *   let species = row.getString('species');\n   *\n   *   // Set text properties and display the species on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *   text(species, 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  findRow(value, column) {\n    // try the Object\n    if (typeof column === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)] === value) {\n          return this.rows[i];\n        }\n      }\n    } else {\n      // try the Array\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column] === value) {\n          return this.rows[j];\n        }\n      }\n    }\n    // otherwise...\n    return null;\n  }\n\n  /**\n   *  Finds the rows in the Table that contain the value\n   *  provided, and returns references to those rows. Returns an\n   *  Array, so for must be used to iterate through all the rows,\n   *  as shown in the example above. The column to search may be\n   *  specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} value  The value to match\n   *  @param  {Integer|String} column ID number or title of the\n   *                                 column to search\n   *  @return {p5.TableRow[]}        An Array of TableRow objects\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add another goat entry\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Scape Goat');\n   *   newRow.setString('name', 'Goat');\n   *\n   *   // Find rows where the name is \"Goat\"\n   *   let rows = table.findRows('Goat', 'name');\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the result on the canvas\n   *   text(rows.length + ' Goats found', 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  findRows(value, column) {\n    const ret = [];\n    if (typeof column === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)] === value) {\n          ret.push(this.rows[i]);\n        }\n      }\n    } else {\n      // try the Array\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column] === value) {\n          ret.push(this.rows[j]);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Finds the first row in the Table that matches the regular\n   * expression provided, and returns a reference to that row.\n   * Even if multiple rows are possible matches, only the first\n   * matching row is returned. The column to search may be\n   * specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String|RegExp} regexp The regular expression to match\n   * @param  {String|Integer} column The column ID (number) or\n   *                                  title (string)\n   * @return {p5.TableRow}        TableRow object\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Search using the specified regex on column index 1 (species)\n   *   let mammal = table.matchRow(new RegExp('ant'), 1);\n   *   let species = mammal.getString(1);  // \"Panthera pardus\"\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Adjust text size as needed\n   *   \n   *   // Display the species on the canvas\n   *   text(species, 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  matchRow(regexp, column) {\n    if (typeof column === 'number') {\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column].match(regexp)) {\n          return this.rows[j];\n        }\n      }\n    } else {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)].match(regexp)) {\n          return this.rows[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Finds the rows in the Table that match the regular expression provided,\n   * and returns references to those rows. Returns an array, so for must be\n   * used to iterate through all the rows, as shown in the example. The\n   * column to search may be specified by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String} regexp The regular expression to match\n   * @param  {String|Integer} [column] The column ID (number) or\n   *                                  title (string)\n   * @return {p5.TableRow[]}          An Array of TableRow objects\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Create a new p5.Table and add columns\n   *   table = new p5.Table();\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   // Add rows to the table\n   *    let newRow = table.addRow();\n   *   newRow.setString('name', 'Lion');\n   *    newRow.setString('type', 'Mammal');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', 'Snake');\n   *   newRow.setString('type', 'Reptile');\n   *\n   *    newRow = table.addRow();\n   *   newRow.setString('name', 'Mosquito');\n   *   newRow.setString('type', 'Insect');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', 'Lizard');\n   *   newRow.setString('type', 'Reptile');\n   *\n   *   // Search for rows where the \"type\" starts with \"R\"\n   *   let rows = table.matchRows('R.*', 'type');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Text size\n   *\n   *   // Display each matching row on the canvas\n   *   let y = 20;\n   *   for (let i = 0; i < rows.length; i++) {\n   *     let output = rows[i].getString('name') + ': ' + rows[i].getString('type');\n   *     text(output, 10, y);\n   *     y += 20;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  matchRows(regexp, column) {\n    const ret = [];\n    if (typeof column === 'number') {\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column].match(regexp)) {\n          ret.push(this.rows[j]);\n        }\n      }\n    } else {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)].match(regexp)) {\n          ret.push(this.rows[i]);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   *  Retrieves all values in the specified column, and returns them\n   *  as an array. The column may be specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Number} column String or Number of the column to return\n   *  @return {Array}       Array of column values\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   **\n   * async function setup() {\n   *   // The table is comma separated value \"csv\"\n   *   // and has a header specifying the columns labels.\n   *   table = await loadTable('assets/mammals.csv', 'csv', 'header');\n   *\n   *   //getColumn returns an array that can be printed directly\n   *   print(table.getColumn('species'));\n   *   //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getColumn(value) {\n    const ret = [];\n    if (typeof value === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        ret.push(this.rows[i].obj[this.columns.indexOf(value)]);\n      }\n    } else {\n      for (let j = 0; j < this.rows.length; j++) {\n        ret.push(this.rows[j].arr[value]);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   *  Removes all rows from a Table. While all rows are removed,\n   *  columns and column titles are maintained.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n  *\n   *   // Clear all rows from the table\n   *   table.clearRows();\n   *\n   *   // Set text properties\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the number of rows and columns on the canvas\n   *   text(table.getRowCount() + ' total rows in table', 10, 30);\n   *   text(table.getColumnCount() + ' total columns in table', 10, 60);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  clearRows() {\n    delete this.rows;\n    this.rows = [];\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/addColumn/\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\n   *  Typically, you will want to specify a title, so the column\n   *  may be easily referenced later by name. (If no title is\n   *  specified, the new column's title will be null.)\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param {String} [title] title of the given column\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   createCanvas(300, 300);\n   *   table = await loadTable('/assets/mammals.csv', ',', 'header');\n   *\n   *   table.addColumn('carnivore');\n   *   table.set(0, 'carnivore', 'no');\n   *   table.set(1, 'carnivore', 'yes');\n   *   table.set(2, 'carnivore', 'no');\n   *\n   *   fill(0);      // Set text color to black\n   *   textSize(11); // Adjust text size as needed\n   *\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       // Keep column spacing consistent (e.g. 80 pixels apart).\n   *       let x = c * 80 + 10;\n   *       let y = r * 30 + 20;\n   *       // Use x directly, rather than multiplying by c again\n   *       text(table.getString(r, c), x, y);\n   *     }\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  addColumn(title) {\n    const t = title || null;\n    this.columns.push(t);\n  }\n\n  /**\n   *  Returns the total number of columns in a Table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {Integer} Number of columns in this table\n   * @example\n   * <div>\n   * <code>\n   * // given the cvs file \"blobs.csv\" in /assets directory\n   * // ID, Name, Flavor, Shape, Color\n   * // Blob1, Blobby, Sweet, Blob, Pink\n   * // Blob2, Saddy, Savory, Blob, Blue\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   table = await loadTable('assets/blobs.csv');\n   *\n   *   createCanvas(200, 100);\n   *   textAlign(CENTER);\n   *   background(255);\n   * }\n   *\n   * function draw() {\n   *   let numOfColumn = table.getColumnCount();\n   *   text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  getColumnCount() {\n    return this.columns.length;\n  }\n\n  /**\n   *  Returns the total number of rows in a Table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {Integer} Number of rows in this table\n   * @example\n   * <div>\n   * <code>\n   * // given the cvs file \"blobs.csv\" in /assets directory\n   * //\n   * // ID, Name, Flavor, Shape, Color\n   * // Blob1, Blobby, Sweet, Blob, Pink\n   * // Blob2, Saddy, Savory, Blob, Blue\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   table = await loadTable('assets/blobs.csv');\n   *\n   *   createCanvas(200, 100);\n   *   textAlign(CENTER);\n   *   background(255);\n   * }\n   *\n   * function draw() {\n   *   text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  getRowCount() {\n    return this.rows.length;\n  }\n\n  /**\n   *  Removes any of the specified characters (or \"tokens\").\n   *\n   *  If no column is specified, then the values in all columns and\n   *  rows are processed. A specific column may be referenced by\n   *  either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} chars  String listing characters to be removed\n   *  @param  {String|Integer} [column] Column ID (number)\n   *                                   or name (string)\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   let table = new p5.Table();\n   *\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   let newRow = table.addRow();\n   *   newRow.setString('name', '   $Lion  ,');\n   *   newRow.setString('type', ',,,Mammal');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', '$Snake  ');\n   *   newRow.setString('type', ',,,Reptile');\n   *\n   *   table.removeTokens(',$ ');\n   *   print(table.getArray());\n   * }\n   *\n   * // prints:\n   * //  0  \"Lion\"   \"Mamal\"\n   * //  1  \"Snake\"  \"Reptile\"\n   * </code></div>\n   */\n  removeTokens(chars, column) {\n    const escape = s => s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    const charArray = [];\n    for (let i = 0; i < chars.length; i++) {\n      charArray.push(escape(chars.charAt(i)));\n    }\n    const regex = new RegExp(charArray.join('|'), 'g');\n    if (typeof column === 'undefined') {\n      for (let c = 0; c < this.columns.length; c++) {\n        for (let d = 0; d < this.rows.length; d++) {\n          let s = this.rows[d].arr[c];\n          s = s.replace(regex, '');\n          this.rows[d].arr[c] = s;\n          this.rows[d].obj[this.columns[c]] = s;\n        }\n      }\n    } else if (typeof column === 'string') {\n      for (let j = 0; j < this.rows.length; j++) {\n        let val = this.rows[j].obj[column];\n        val = val.replace(regex, '');\n        this.rows[j].obj[column] = val;\n        const pos = this.columns.indexOf(column);\n        this.rows[j].arr[pos] = val;\n      }\n    } else {\n      for (let k = 0; k < this.rows.length; k++) {\n        let str = this.rows[k].arr[column];\n        str = str.replace(regex, '');\n        this.rows[k].arr[column] = str;\n        this.rows[k].obj[this.columns[column]] = str;\n      }\n    }\n  }\n\n  /**\n   *  Trims leading and trailing whitespace, such as spaces and tabs,\n   *  from String table values. If no column is specified, then the\n   *  values in all columns and rows are trimmed. A specific column\n   *  may be referenced by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Integer} [column] Column ID (number)\n   *                                   or name (string)\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   let table = new p5.Table();\n   *\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   let newRow = table.addRow();\n   *   newRow.setString('name', '   Lion  ,');\n   *   newRow.setString('type', ' Mammal  ');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', '  Snake  ');\n   *   newRow.setString('type', '  Reptile  ');\n   *\n   *   table.trim();\n   *   print(table.getArray());\n   * }\n   *\n   * // prints:\n   * //  0  \"Lion\"   \"Mamal\"\n   * //  1  \"Snake\"  \"Reptile\"\n   * </code></div>\n   */\n  trim(column) {\n    const regex = new RegExp(' ', 'g');\n    if (typeof column === 'undefined') {\n      for (let c = 0; c < this.columns.length; c++) {\n        for (let d = 0; d < this.rows.length; d++) {\n          let s = this.rows[d].arr[c];\n          s = s.replace(regex, '');\n          this.rows[d].arr[c] = s;\n          this.rows[d].obj[this.columns[c]] = s;\n        }\n      }\n    } else if (typeof column === 'string') {\n      for (let j = 0; j < this.rows.length; j++) {\n        let val = this.rows[j].obj[column];\n        val = val.replace(regex, '');\n        this.rows[j].obj[column] = val;\n        const pos = this.columns.indexOf(column);\n        this.rows[j].arr[pos] = val;\n      }\n    } else {\n      for (let k = 0; k < this.rows.length; k++) {\n        let str = this.rows[k].arr[column];\n        str = str.replace(regex, '');\n        this.rows[k].arr[column] = str;\n        this.rows[k].obj[this.columns[column]] = str;\n      }\n    }\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/removeColumn/\">removeColumn()</a> to remove an existing column from a Table\n   *  object. The column to be removed may be identified by either\n   *  its title (a String) or its index value (an int).\n   *  removeColumn(0) would remove the first column, removeColumn(1)\n   *  would remove the second column, and so on.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Integer} column columnName (string) or ID (number)\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *    // Remove the \"id\" column\n   *    table.removeColumn('id');\n   *\n   *   // Get the remaining column count\n   *   let colCount = table.getColumnCount();\n   *\n   *   // Set text properties\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the column count on the canvas\n   *   text(colCount, 40, 50);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  removeColumn(c) {\n    let cString;\n    let cNumber;\n    if (typeof c === 'string') {\n      // find the position of c in the columns\n      cString = c;\n      cNumber = this.columns.indexOf(c);\n    } else {\n      cNumber = c;\n      cString = this.columns[c];\n    }\n    const chunk = this.columns.splice(cNumber + 1, this.columns.length);\n    this.columns.pop();\n    this.columns = this.columns.concat(chunk);\n    for (let i = 0; i < this.rows.length; i++) {\n      const tempR = this.rows[i].arr;\n      const chip = tempR.splice(cNumber + 1, tempR.length);\n      tempR.pop();\n      this.rows[i].arr = tempR.concat(chip);\n      delete this.rows[i].obj[cString];\n    }\n  }\n\n  /**\n   * Stores a value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {String|Number} value  value to assign\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Update the first row: change species to \"Canis Lupus\" and name to \"Wolf\"\n   *   table.set(0, 'species', 'Canis Lupus');\n   *   table.set(0, 'name', 'Wolf');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Text color: black\n   *    textSize(12); // Adjust text size as needed\n   *\n   *   // Display the table values on the canvas:\n   *   // Each row's values are concatenated into a single string and displayed on a new line.\n   *   let y = 20; // Starting vertical position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 10, y * 2.5);\n   *     y += 20;\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  set(row, column, value) {\n    this.rows[row].set(column, value);\n  }\n\n  /**\n   * Stores a Float value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {Number} value  value to assign\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas and set a white background\n   *   createCanvas(100, 100);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set the value in row 1, column \"id\" to the number 1\n   *   table.setNum(1, 'id', 1);\n   *\n   *   // Get the first column as an array and join its values into a string for display.\n   *   let col0 = table.getColumn(0);  // Expected output: [\"0\", 1, \"2\"]\n   *   let output = col0.join(\", \");\n   *\n   *   // Set text properties and display the output on the canvas\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *   text(output, 30, 50);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  setNum(row, column, value) {\n    this.rows[row].setNum(column, value);\n  }\n\n  /**\n   * Stores a String value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {String} value  value to assign\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add a new row with the new animal data\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Canis Lupus');\n   *   newRow.setString('name', 'Wolf');\n   *\n   *   // Convert the table to a 2D array\n   *   let tableArray = table.getArray();\n   *\n   *   // Set text properties\n   *   fill(0);       // Set text color to black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display each row of the table on the canvas\n   *   let y = 20;  // Starting y position\n   *   for (let i = 0; i < tableArray.length; i++) {\n   *     // Join the values of each row with a comma separator\n   *     let rowText = tableArray[i].join(', ');\n   *     text(rowText, 15, y * 2);\n   *     y += 20;  // Increment y position for the next row\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  setString(row, column, value) {\n    this.rows[row].setString(column, value);\n  }\n\n  /**\n   * Retrieves a value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {String|Number}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Get the values from the table\n   *   let value1 = table.get(0, 1);       // Using column index (1) => \"Capra hircus\"\n   *   let value2 = table.get(0, 'species'); // Using column name => \"Capra hircus\"\n   *\n   *   // Display the values on the canvas\n   *   text(value1, 10, 30);\n   *   text(value2, 10, 60);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  get(row, column) {\n    if (typeof column === 'string') {\n      return this.rows[row].get(this.columns.indexOf(column));\n    } else {\n      return this.rows[row].get(column);\n    }\n  }\n\n  /**\n   * Retrieves a Float value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {Number}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Compute the result: id at row 1, column 0 plus 100 (i.e. 1 + 100 = 101)\n   *   let result = table.getNum(1, 0) + 100;\n   *   \n   *   // Set text properties and display the result on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *   text(result, 10, 30);  // Display the result at position (10, 30)\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getNum(row, column) {\n    return this.rows[row].getNum(column);\n  }\n\n  /**\n   * Retrieves a String value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {String}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display each table cell value on the canvas one below the other.\n   *   // We use a variable 'y' to increment the vertical position.\n   *   let y = 20;\n   *   text(table.getString(0, 0), 10, y); // 0\n   *   y += 20;\n   *   text(table.getString(0, 1), 10, y); // Capra hircus\n   *   y += 20;\n   *   text(table.getString(0, 2), 10, y); // Goat\n   *   y += 20;\n   *   text(table.getString(1, 0), 10, y); // 1\n   *   y += 20;\n   *   text(table.getString(1, 1), 10, y); // Panthera pardus\n   *   y += 20;\n   *   text(table.getString(1, 2), 10, y); // Leopard\n   *   y += 20;\n   *   text(table.getString(2, 0), 10, y); // 2\n   *   y += 20;\n   *   text(table.getString(2, 1), 10, y); // Equus zebra\n   *   y += 20;\n   *   text(table.getString(2, 2), 10, y); // Zebra\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getString(row, column) {\n    return this.rows[row].getString(column);\n  }\n\n  /**\n   * Retrieves all table data and returns as an object. If a column name is\n   * passed in, each row object will be stored with that attribute as its\n   * title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {String} [headerColumn] Name of the column which should be used to\n   *                              title each row object (optional)\n   * @return {Object}\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // The table is comma separated value \"csv\"\n   *   // and has a header specifying the columns labels.\n   *   table = await loadTable('assets/mammals.csv', 'csv', 'header');\n   *\n   *   let tableObject = table.getObject();\n   *\n   *   print(tableObject);\n   *   //outputs an object\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getObject(headerColumn) {\n    const tableObject = {};\n    let obj, cPos, index;\n    for (let i = 0; i < this.rows.length; i++) {\n      obj = this.rows[i].obj;\n      if (typeof headerColumn === 'string') {\n        cPos = this.columns.indexOf(headerColumn); // index of columnID\n        if (cPos >= 0) {\n          index = obj[headerColumn];\n          tableObject[index] = obj;\n        } else {\n          throw new Error(`This table has no column named \"${headerColumn}\"`);\n        }\n      } else {\n        tableObject[i] = this.rows[i].obj;\n      }\n    }\n    return tableObject;\n  }\n\n  /**\n   * Retrieves all table data and returns it as a multidimensional array.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @return {Array}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Get the CSV data as a 2D array\n   *   let tableArray = table.getArray();\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display each row of the CSV on the canvas\n   *   // Each row is displayed on a separate line\n   *   for (let i = 0; i < tableArray.length; i++) {\n   *     let rowText = tableArray[i].join(\", \");\n   *     text(rowText, 10, 20 + i * 50 + 30);\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getArray() {\n    const tableArray = [];\n    for (let i = 0; i < this.rows.length; i++) {\n      tableArray.push(this.rows[i].arr);\n    }\n    return tableArray;\n  }\n}\nfunction table(p5, fn) {\n  /**\n   *  Table Options\n   *  Generic class for handling tabular data, typically from a\n   *  CSV, TSV, or other sort of spreadsheet file.\n   *  CSV files are\n   *  <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\n   *  comma separated values</a>, often with the data in quotes. TSV\n   *  files use tabs as separators, and usually don't bother with the\n   *  quotes.\n   *  File names should end with .csv if they're comma separated.\n   *  A rough \"spec\" for CSV can be found\n   *  <a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.\n   *  To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.\n   *  To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n   *   or the <a href=\"#/p5/saveTable\">saveTable</a> method.\n   *\n   *  Possible options include:\n   *  <ul>\n   *  <li>csv - parse the table as comma-separated values\n   *  <li>tsv - parse the table as tab-separated values\n   *  <li>header - this table has a header (title) row\n   *  </ul>\n   */\n\n  /**\n   *  <a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\n   *  like in a traditional spreadsheet. Tables can be generated from\n   *  scratch, dynamically, or using data from an existing file.\n   *\n   *  @class p5.Table\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {p5.TableRow[]}     [rows] An array of p5.TableRow objects\n   */\n  p5.Table = Table;\n\n  /**\n   * An array containing the names of the columns in the table, if the \"header\" the table is\n   * loaded with the \"header\" parameter.\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @type {String[]}\n   * @property columns\n   * @for p5.Table\n   * @name columns\n   * @example\n   * <div >\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Set text color to black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the column names on the canvas\n   *   for (let c = 0; c < table.getColumnCount(); c++) {\n   *     text('column ' + c + ' is named ' + table.columns[c], 10, 30 + c * 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the\n   * rows of the table. The same result as calling <a href=\"/reference/p5.Table/getRows/\">getRows()</a>\n   * @type {p5.TableRow[]}\n   * @property rows\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @for p5.Table\n   * @name rows\n  */\n}\nif (typeof p5 !== 'undefined') {\n  table(p5, p5.prototype);\n}\nexport { table as default };","map":{"version":3,"names":["stringify","Table","constructor","rows","columns","toString","separator","map","row","arr","some","column","addRow","r","p5","TableRow","obj","Error","table","push","removeRow","id","chunk","splice","length","pop","concat","getRow","getRows","findRow","value","i","indexOf","j","findRows","ret","matchRow","regexp","match","matchRows","getColumn","clearRows","addColumn","title","t","getColumnCount","getRowCount","removeTokens","chars","escape","s","replace","charArray","charAt","regex","RegExp","join","c","d","val","pos","k","str","trim","removeColumn","cString","cNumber","tempR","chip","set","setNum","setString","get","getNum","getString","getObject","headerColumn","tableObject","cPos","index","getArray","tableArray","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/io/p5.Table.js"],"sourcesContent":["import { stringify } from './csv.js';\n\n/**\n * @module IO\n * @submodule Table\n * @requires core\n */\n\n\nclass Table {\n  constructor(rows) {\n    this.columns = [];\n    this.rows = [];\n  }\n\n  toString(separator=',') {\n    let rows = this.rows.map((row) => row.arr);\n\n    if(!this.columns.some((column) => column === null)){\n      rows = [this.columns, ...rows,];\n    }\n\n    return stringify(rows, {\n      separator\n    });\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/addRow/\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\n   *  an empty row is created. Typically, you would store a reference to\n   *  the new row in a TableRow object (see newRow in the example above),\n   *  and then set individual values using <a href=\"#/p5/set\">set()</a>.\n   *\n   *  If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\n   *  duplicated and added to the table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param   {p5.TableRow} [row] row to be added to the table\n   *  @return  {p5.TableRow} the row that was added\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 300x300 canvas\n   *   createCanvas(300, 300);\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add a new row for \"Wolf\"\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Canis Lupus');\n   *     newRow.setString('name', 'Wolf');\n   *\n   *   // Set text properties\n   *   fill(0);       // Text color: black\n   *    textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the table data on the canvas\n   *   // Each cell is positioned based on its row and column\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       let x = c * 50 + 10;  // Horizontal spacing for each column\n   *       let y = r * 30 + 20;  // Vertical spacing for each row\n   *       text(table.getString(r, c), x * c, y);\n   *     }\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  addRow (row) {\n  // make sure it is a valid TableRow\n    const r = row || new p5.TableRow();\n\n    if (typeof r.arr === 'undefined' || typeof r.obj === 'undefined') {\n    //r = new p5.prototype.TableRow(r);\n      throw new Error(`invalid TableRow: ${r}`);\n    }\n    r.table = this;\n    this.rows.push(r);\n    return r;\n  }\n\n  /**\n   * Removes a row from the table object.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param   {Integer} id ID number of the row to remove\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *    table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Remove the first row from the table\n   *   table.removeRow(0);\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the table values on the canvas:\n   *   // Each row's cell values are joined into a single string and drawn on a new line.\n   *   let y = 20; // Starting vertical position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 18, y * 3);\n   *     y += 20;\n   *   }\n   * \n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  removeRow (id) {\n    this.rows[id].table = null; // remove reference to table\n    const chunk = this.rows.splice(id + 1, this.rows.length);\n    this.rows.pop();\n    this.rows = this.rows.concat(chunk);\n  }\n\n  /**\n   * Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\n   * can then be used to get and set values of the selected row.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {Integer}   rowID ID number of the row to get\n   * @return {p5.TableRow} <a href=\"#/p5.TableRow\">p5.TableRow</a> object\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Get the row at index 1 (second row)\n   *   let row = table.getRow(1);\n   * \n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Set the text size\n   *\n   *   // Loop over each column in the row and display its value on the canvas\n   *   for (let c = 0; c < table.getColumnCount(); c++) {\n   *     text(row.getString(c), 10, 20 + c * 50 + 20);\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getRow (r) {\n    return this.rows[r];\n  }\n\n  /**\n   *  Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {p5.TableRow[]}   Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   let rows = table.getRows();\n   *\n   *   // Warning: rows is an array of objects.\n   *   // Set the 'name' of each row to 'Unicorn'\n   *   for (let r = 0; r < rows.length; r++) {\n   *     rows[r].set('name', 'Unicorn');\n   *   }\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the modified table values on the canvas\n   *   // We'll join each row's values with a space and display each row on a new line.\n   *   let y = 20; // Starting y position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 10, y * 2);\n   *     y += 20; // Move to next line\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getRows () {\n    return this.rows;\n  }\n\n  /**\n   *  Finds the first row in the Table that contains the value\n   *  provided, and returns a reference to that row. Even if\n   *  multiple rows are possible matches, only the first matching\n   *  row is returned. The column to search may be specified by\n   *  either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} value  The value to match\n   *  @param  {Integer|String} column ID number or title of the\n   *                                 column to search\n   *  @return {p5.TableRow}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *    // Find the row with the animal named \"Zebra\"\n   *   let row = table.findRow('Zebra', 'name');\n   *\n   *   // Get the species from the found row\n   *   let species = row.getString('species');\n   *\n   *   // Set text properties and display the species on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *   text(species, 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  findRow (value, column) {\n  // try the Object\n    if (typeof column === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)] === value) {\n          return this.rows[i];\n        }\n      }\n    } else {\n    // try the Array\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column] === value) {\n          return this.rows[j];\n        }\n      }\n    }\n    // otherwise...\n    return null;\n  }\n\n  /**\n   *  Finds the rows in the Table that contain the value\n   *  provided, and returns references to those rows. Returns an\n   *  Array, so for must be used to iterate through all the rows,\n   *  as shown in the example above. The column to search may be\n   *  specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} value  The value to match\n   *  @param  {Integer|String} column ID number or title of the\n   *                                 column to search\n   *  @return {p5.TableRow[]}        An Array of TableRow objects\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add another goat entry\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Scape Goat');\n   *   newRow.setString('name', 'Goat');\n   *\n   *   // Find rows where the name is \"Goat\"\n   *   let rows = table.findRows('Goat', 'name');\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the result on the canvas\n   *   text(rows.length + ' Goats found', 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  findRows (value, column) {\n    const ret = [];\n    if (typeof column === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)] === value) {\n          ret.push(this.rows[i]);\n        }\n      }\n    } else {\n    // try the Array\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column] === value) {\n          ret.push(this.rows[j]);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Finds the first row in the Table that matches the regular\n   * expression provided, and returns a reference to that row.\n   * Even if multiple rows are possible matches, only the first\n   * matching row is returned. The column to search may be\n   * specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String|RegExp} regexp The regular expression to match\n   * @param  {String|Integer} column The column ID (number) or\n   *                                  title (string)\n   * @return {p5.TableRow}        TableRow object\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Search using the specified regex on column index 1 (species)\n   *   let mammal = table.matchRow(new RegExp('ant'), 1);\n   *   let species = mammal.getString(1);  // \"Panthera pardus\"\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Adjust text size as needed\n   *   \n   *   // Display the species on the canvas\n   *   text(species, 10, 30);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  matchRow (regexp, column) {\n    if (typeof column === 'number') {\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column].match(regexp)) {\n          return this.rows[j];\n        }\n      }\n    } else {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)].match(regexp)) {\n          return this.rows[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Finds the rows in the Table that match the regular expression provided,\n   * and returns references to those rows. Returns an array, so for must be\n   * used to iterate through all the rows, as shown in the example. The\n   * column to search may be specified by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param  {String} regexp The regular expression to match\n   * @param  {String|Integer} [column] The column ID (number) or\n   *                                  title (string)\n   * @return {p5.TableRow[]}          An Array of TableRow objects\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Create a new p5.Table and add columns\n   *   table = new p5.Table();\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   // Add rows to the table\n   *    let newRow = table.addRow();\n   *   newRow.setString('name', 'Lion');\n   *    newRow.setString('type', 'Mammal');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', 'Snake');\n   *   newRow.setString('type', 'Reptile');\n   *\n   *    newRow = table.addRow();\n   *   newRow.setString('name', 'Mosquito');\n   *   newRow.setString('type', 'Insect');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', 'Lizard');\n   *   newRow.setString('type', 'Reptile');\n   *\n   *   // Search for rows where the \"type\" starts with \"R\"\n   *   let rows = table.matchRows('R.*', 'type');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Text size\n   *\n   *   // Display each matching row on the canvas\n   *   let y = 20;\n   *   for (let i = 0; i < rows.length; i++) {\n   *     let output = rows[i].getString('name') + ': ' + rows[i].getString('type');\n   *     text(output, 10, y);\n   *     y += 20;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  matchRows (regexp, column) {\n    const ret = [];\n    if (typeof column === 'number') {\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j].arr[column].match(regexp)) {\n          ret.push(this.rows[j]);\n        }\n      }\n    } else {\n      for (let i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].obj[this.columns.indexOf(column)].match(regexp)) {\n          ret.push(this.rows[i]);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   *  Retrieves all values in the specified column, and returns them\n   *  as an array. The column may be specified by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Number} column String or Number of the column to return\n   *  @return {Array}       Array of column values\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   **\n   * async function setup() {\n   *   // The table is comma separated value \"csv\"\n   *   // and has a header specifying the columns labels.\n   *   table = await loadTable('assets/mammals.csv', 'csv', 'header');\n   *\n   *   //getColumn returns an array that can be printed directly\n   *   print(table.getColumn('species'));\n   *   //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getColumn (value) {\n    const ret = [];\n    if (typeof value === 'string') {\n      for (let i = 0; i < this.rows.length; i++) {\n        ret.push(this.rows[i].obj[this.columns.indexOf(value)]);    \n        }\n    } else {\n      for (let j = 0; j < this.rows.length; j++) {\n        ret.push(this.rows[j].arr[value]);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   *  Removes all rows from a Table. While all rows are removed,\n   *  columns and column titles are maintained.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n  *\n   *   // Clear all rows from the table\n   *   table.clearRows();\n   *\n   *   // Set text properties\n   *   fill(0);       // Text color: black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the number of rows and columns on the canvas\n   *   text(table.getRowCount() + ' total rows in table', 10, 30);\n   *   text(table.getColumnCount() + ' total columns in table', 10, 60);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  clearRows () {\n    delete this.rows;\n    this.rows = [];\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/addColumn/\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\n   *  Typically, you will want to specify a title, so the column\n   *  may be easily referenced later by name. (If no title is\n   *  specified, the new column's title will be null.)\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param {String} [title] title of the given column\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   createCanvas(300, 300);\n   *   table = await loadTable('/assets/mammals.csv', ',', 'header');\n   *\n   *   table.addColumn('carnivore');\n   *   table.set(0, 'carnivore', 'no');\n   *   table.set(1, 'carnivore', 'yes');\n   *   table.set(2, 'carnivore', 'no');\n   *\n   *   fill(0);      // Set text color to black\n   *   textSize(11); // Adjust text size as needed\n   *\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       // Keep column spacing consistent (e.g. 80 pixels apart).\n   *       let x = c * 80 + 10;\n   *       let y = r * 30 + 20;\n   *       // Use x directly, rather than multiplying by c again\n   *       text(table.getString(r, c), x, y);\n   *     }\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  addColumn (title) {\n    const t = title || null;\n    this.columns.push(t);\n  }\n\n  /**\n   *  Returns the total number of columns in a Table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {Integer} Number of columns in this table\n   * @example\n   * <div>\n   * <code>\n   * // given the cvs file \"blobs.csv\" in /assets directory\n   * // ID, Name, Flavor, Shape, Color\n   * // Blob1, Blobby, Sweet, Blob, Pink\n   * // Blob2, Saddy, Savory, Blob, Blue\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   table = await loadTable('assets/blobs.csv');\n   *\n   *   createCanvas(200, 100);\n   *   textAlign(CENTER);\n   *   background(255);\n   * }\n   *\n   * function draw() {\n   *   let numOfColumn = table.getColumnCount();\n   *   text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  getColumnCount () {\n    return this.columns.length;\n  }\n\n  /**\n   *  Returns the total number of rows in a Table.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @return {Integer} Number of rows in this table\n   * @example\n   * <div>\n   * <code>\n   * // given the cvs file \"blobs.csv\" in /assets directory\n   * //\n   * // ID, Name, Flavor, Shape, Color\n   * // Blob1, Blobby, Sweet, Blob, Pink\n   * // Blob2, Saddy, Savory, Blob, Blue\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   table = await loadTable('assets/blobs.csv');\n   *\n   *   createCanvas(200, 100);\n   *   textAlign(CENTER);\n   *   background(255);\n   * }\n   *\n   * function draw() {\n   *   text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  getRowCount () {\n    return this.rows.length;\n  }\n\n  /**\n   *  Removes any of the specified characters (or \"tokens\").\n   *\n   *  If no column is specified, then the values in all columns and\n   *  rows are processed. A specific column may be referenced by\n   *  either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String} chars  String listing characters to be removed\n   *  @param  {String|Integer} [column] Column ID (number)\n   *                                   or name (string)\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   let table = new p5.Table();\n   *\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   let newRow = table.addRow();\n   *   newRow.setString('name', '   $Lion  ,');\n   *   newRow.setString('type', ',,,Mammal');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', '$Snake  ');\n   *   newRow.setString('type', ',,,Reptile');\n   *\n   *   table.removeTokens(',$ ');\n   *   print(table.getArray());\n   * }\n   *\n   * // prints:\n   * //  0  \"Lion\"   \"Mamal\"\n   * //  1  \"Snake\"  \"Reptile\"\n   * </code></div>\n   */\n  removeTokens (chars, column) {\n    const escape = s => s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    const charArray = [];\n    for (let i = 0; i < chars.length; i++) {\n      charArray.push(escape(chars.charAt(i)));\n    }\n    const regex = new RegExp(charArray.join('|'), 'g');\n\n    if (typeof column === 'undefined') {\n      for (let c = 0; c < this.columns.length; c++) {\n        for (let d = 0; d < this.rows.length; d++) {\n          let s = this.rows[d].arr[c];\n          s = s.replace(regex, '');\n          this.rows[d].arr[c] = s;\n          this.rows[d].obj[this.columns[c]] = s;\n        }\n      }\n    } else if (typeof column === 'string') {\n      for (let j = 0; j < this.rows.length; j++) {\n        let val = this.rows[j].obj[column];\n        val = val.replace(regex, '');\n        this.rows[j].obj[column] = val;\n        const pos = this.columns.indexOf(column);\n        this.rows[j].arr[pos] = val;\n      }\n    } else {\n      for (let k = 0; k < this.rows.length; k++) {\n        let str = this.rows[k].arr[column];\n        str = str.replace(regex, '');\n        this.rows[k].arr[column] = str;\n        this.rows[k].obj[this.columns[column]] = str;\n      }\n    }\n  }\n\n  /**\n   *  Trims leading and trailing whitespace, such as spaces and tabs,\n   *  from String table values. If no column is specified, then the\n   *  values in all columns and rows are trimmed. A specific column\n   *  may be referenced by either its ID or title.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Integer} [column] Column ID (number)\n   *                                   or name (string)\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   let table = new p5.Table();\n   *\n   *   table.addColumn('name');\n   *   table.addColumn('type');\n   *\n   *   let newRow = table.addRow();\n   *   newRow.setString('name', '   Lion  ,');\n   *   newRow.setString('type', ' Mammal  ');\n   *\n   *   newRow = table.addRow();\n   *   newRow.setString('name', '  Snake  ');\n   *   newRow.setString('type', '  Reptile  ');\n   *\n   *   table.trim();\n   *   print(table.getArray());\n   * }\n   *\n   * // prints:\n   * //  0  \"Lion\"   \"Mamal\"\n   * //  1  \"Snake\"  \"Reptile\"\n   * </code></div>\n   */\n  trim (column) {\n    const regex = new RegExp(' ', 'g');\n\n    if (typeof column === 'undefined') {\n      for (let c = 0; c < this.columns.length; c++) {\n        for (let d = 0; d < this.rows.length; d++) {\n          let s = this.rows[d].arr[c];\n          s = s.replace(regex, '');\n          this.rows[d].arr[c] = s;\n          this.rows[d].obj[this.columns[c]] = s;\n        }\n      }\n    } else if (typeof column === 'string') {\n      for (let j = 0; j < this.rows.length; j++) {\n        let val = this.rows[j].obj[column];\n        val = val.replace(regex, '');\n        this.rows[j].obj[column] = val;\n        const pos = this.columns.indexOf(column);\n        this.rows[j].arr[pos] = val;\n      }\n    } else {\n      for (let k = 0; k < this.rows.length; k++) {\n        let str = this.rows[k].arr[column];\n        str = str.replace(regex, '');\n        this.rows[k].arr[column] = str;\n        this.rows[k].obj[this.columns[column]] = str;\n      }\n    }\n  }\n\n  /**\n   *  Use <a href=\"/reference/p5.Table/removeColumn/\">removeColumn()</a> to remove an existing column from a Table\n   *  object. The column to be removed may be identified by either\n   *  its title (a String) or its index value (an int).\n   *  removeColumn(0) would remove the first column, removeColumn(1)\n   *  would remove the second column, and so on.\n   *\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {String|Integer} column columnName (string) or ID (number)\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *    // Remove the \"id\" column\n   *    table.removeColumn('id');\n   *\n   *   // Get the remaining column count\n   *   let colCount = table.getColumnCount();\n   *\n   *   // Set text properties\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display the column count on the canvas\n   *   text(colCount, 40, 50);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  removeColumn (c) {\n    let cString;\n    let cNumber;\n    if (typeof c === 'string') {\n    // find the position of c in the columns\n      cString = c;\n      cNumber = this.columns.indexOf(c);\n    } else {\n      cNumber = c;\n      cString = this.columns[c];\n    }\n\n    const chunk = this.columns.splice(cNumber + 1, this.columns.length);\n    this.columns.pop();\n    this.columns = this.columns.concat(chunk);\n\n    for (let i = 0; i < this.rows.length; i++) {\n      const tempR = this.rows[i].arr;\n      const chip = tempR.splice(cNumber + 1, tempR.length);\n      tempR.pop();\n      this.rows[i].arr = tempR.concat(chip);\n      delete this.rows[i].obj[cString];\n    }\n  }\n\n  /**\n   * Stores a value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {String|Number} value  value to assign\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Update the first row: change species to \"Canis Lupus\" and name to \"Wolf\"\n   *   table.set(0, 'species', 'Canis Lupus');\n   *   table.set(0, 'name', 'Wolf');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Text color: black\n   *    textSize(12); // Adjust text size as needed\n   *\n   *   // Display the table values on the canvas:\n   *   // Each row's values are concatenated into a single string and displayed on a new line.\n   *   let y = 20; // Starting vertical position\n   *   for (let r = 0; r < table.getRowCount(); r++) {\n   *     let rowText = \"\";\n   *     for (let c = 0; c < table.getColumnCount(); c++) {\n   *       rowText += table.getString(r, c) + \" \";\n   *     }\n   *     text(rowText, 10, y * 2.5);\n   *     y += 20;\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  set (row, column, value) {\n    this.rows[row].set(column, value);\n  }\n\n  /**\n   * Stores a Float value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {Number} value  value to assign\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas and set a white background\n   *   createCanvas(100, 100);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set the value in row 1, column \"id\" to the number 1\n   *   table.setNum(1, 'id', 1);\n   *\n   *   // Get the first column as an array and join its values into a string for display.\n   *   let col0 = table.getColumn(0);  // Expected output: [\"0\", 1, \"2\"]\n   *   let output = col0.join(\", \");\n   *\n   *   // Set text properties and display the output on the canvas\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *   text(output, 30, 50);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  setNum (row, column, value) {\n    this.rows[row].setNum(column, value);\n  }\n\n  /**\n   * Stores a String value in the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified\n   * by either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param {String|Integer} column column ID (Number)\n   *                               or title (String)\n   * @param {String} value  value to assign\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Add a new row with the new animal data\n   *   let newRow = table.addRow();\n   *   newRow.setString('id', table.getRowCount() - 1);\n   *   newRow.setString('species', 'Canis Lupus');\n   *   newRow.setString('name', 'Wolf');\n   *\n   *   // Convert the table to a 2D array\n   *   let tableArray = table.getArray();\n   *\n   *   // Set text properties\n   *   fill(0);       // Set text color to black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display each row of the table on the canvas\n   *   let y = 20;  // Starting y position\n   *   for (let i = 0; i < tableArray.length; i++) {\n   *     // Join the values of each row with a comma separator\n   *     let rowText = tableArray[i].join(', ');\n   *     text(rowText, 15, y * 2);\n   *     y += 20;  // Increment y position for the next row\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  setString (row, column, value) {\n    this.rows[row].setString(column, value);\n  }\n\n  /**\n   * Retrieves a value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {String|Number}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file from the assets folder with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Get the values from the table\n   *   let value1 = table.get(0, 1);       // Using column index (1) => \"Capra hircus\"\n   *   let value2 = table.get(0, 'species'); // Using column name => \"Capra hircus\"\n   *\n   *   // Display the values on the canvas\n   *   text(value1, 10, 30);\n   *   text(value2, 10, 60);\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  get (row, column) {\n    if(typeof column === 'string'){\n      return this.rows[row].get(this.columns.indexOf(column));\n    } else {\n      return this.rows[row].get(column);\n    }\n  }\n\n  /**\n   * Retrieves a Float value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {Number}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 100x100 canvas\n   *   createCanvas(100, 100);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Compute the result: id at row 1, column 0 plus 100 (i.e. 1 + 100 = 101)\n   *   let result = table.getNum(1, 0) + 100;\n   *   \n   *   // Set text properties and display the result on the canvas\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *   text(result, 10, 30);  // Display the result at position (10, 30)\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getNum (row, column) {\n    return this.rows[row].getNum(column);\n  }\n\n  /**\n   * Retrieves a String value from the Table's specified row and column.\n   * The row is specified by its ID, while the column may be specified by\n   * either its ID or title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {Integer} row row ID\n   * @param  {String|Integer} column columnName (string) or\n   *                                   ID (number)\n   * @return {String}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *   background(255); // Set background to white\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties\n   *   fill(0);      // Text color: black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display each table cell value on the canvas one below the other.\n   *   // We use a variable 'y' to increment the vertical position.\n   *   let y = 20;\n   *   text(table.getString(0, 0), 10, y); // 0\n   *   y += 20;\n   *   text(table.getString(0, 1), 10, y); // Capra hircus\n   *   y += 20;\n   *   text(table.getString(0, 2), 10, y); // Goat\n   *   y += 20;\n   *   text(table.getString(1, 0), 10, y); // 1\n   *   y += 20;\n   *   text(table.getString(1, 1), 10, y); // Panthera pardus\n   *   y += 20;\n   *   text(table.getString(1, 2), 10, y); // Leopard\n   *   y += 20;\n   *   text(table.getString(2, 0), 10, y); // 2\n   *   y += 20;\n   *   text(table.getString(2, 1), 10, y); // Equus zebra\n   *   y += 20;\n   *   text(table.getString(2, 2), 10, y); // Zebra\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getString (row, column) {\n    return this.rows[row].getString(column);\n  }\n\n  /**\n   * Retrieves all table data and returns as an object. If a column name is\n   * passed in, each row object will be stored with that attribute as its\n   * title.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @param {String} [headerColumn] Name of the column which should be used to\n   *                              title each row object (optional)\n   * @return {Object}\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * // Given the CSV file \"mammals.csv\"\n   * // in the project's \"assets\" folder:\n   * //\n   * // id,species,name\n   * // 0,Capra hircus,Goat\n   * // 1,Panthera pardus,Leopard\n   * // 2,Equus zebra,Zebra\n   *\n   * let table;\n   *\n   * async function setup() {\n   *   // The table is comma separated value \"csv\"\n   *   // and has a header specifying the columns labels.\n   *   table = await loadTable('assets/mammals.csv', 'csv', 'header');\n   *\n   *   let tableObject = table.getObject();\n   *\n   *   print(tableObject);\n   *   //outputs an object\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getObject (headerColumn) {\n    const tableObject = {};\n    let obj, cPos, index;\n\n    for (let i = 0; i < this.rows.length; i++) {\n      obj = this.rows[i].obj;\n\n      if (typeof headerColumn === 'string') {\n        cPos = this.columns.indexOf(headerColumn); // index of columnID\n        if (cPos >= 0) {\n          index = obj[headerColumn];\n          tableObject[index] = obj;\n        } else {\n          throw new Error(`This table has no column named \"${headerColumn}\"`);\n        }\n      } else {\n        tableObject[i] = this.rows[i].obj;\n      }\n    }\n    return tableObject;\n  }\n\n  /**\n   * Retrieves all table data and returns it as a multidimensional array.\n   *\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @return {Array}\n   *\n   * @example\n   * <div>\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas and set a white background\n   *   createCanvas(200, 200);\n   *   background(255);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Get the CSV data as a 2D array\n   *   let tableArray = table.getArray();\n   *\n   *   // Set text properties\n   *   fill(0);      // Set text color to black\n   *   textSize(12); // Adjust text size as needed\n   *\n   *   // Display each row of the CSV on the canvas\n   *   // Each row is displayed on a separate line\n   *   for (let i = 0; i < tableArray.length; i++) {\n   *     let rowText = tableArray[i].join(\", \");\n   *     text(rowText, 10, 20 + i * 50 + 30);\n   *   }\n   *\n   *   describe('no image displayed');\n   * }\n   * </code>\n   * </div>\n   */\n  getArray () {\n    const tableArray = [];\n    for (let i = 0; i < this.rows.length; i++) {\n      tableArray.push(this.rows[i].arr);\n    }\n    return tableArray;\n  }\n}\nfunction table(p5, fn){\n  /**\n   *  Table Options\n   *  Generic class for handling tabular data, typically from a\n   *  CSV, TSV, or other sort of spreadsheet file.\n   *  CSV files are\n   *  <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\n   *  comma separated values</a>, often with the data in quotes. TSV\n   *  files use tabs as separators, and usually don't bother with the\n   *  quotes.\n   *  File names should end with .csv if they're comma separated.\n   *  A rough \"spec\" for CSV can be found\n   *  <a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.\n   *  To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.\n   *  To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n   *   or the <a href=\"#/p5/saveTable\">saveTable</a> method.\n   *\n   *  Possible options include:\n   *  <ul>\n   *  <li>csv - parse the table as comma-separated values\n   *  <li>tsv - parse the table as tab-separated values\n   *  <li>header - this table has a header (title) row\n   *  </ul>\n   */\n\n  /**\n   *  <a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\n   *  like in a traditional spreadsheet. Tables can be generated from\n   *  scratch, dynamically, or using data from an existing file.\n   *\n   *  @class p5.Table\n   *  @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   *  @param  {p5.TableRow[]}     [rows] An array of p5.TableRow objects\n   */\n  p5.Table = Table;\n\n  /**\n   * An array containing the names of the columns in the table, if the \"header\" the table is\n   * loaded with the \"header\" parameter.\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @type {String[]}\n   * @property columns\n   * @for p5.Table\n   * @name columns\n   * @example\n   * <div >\n   * <code>\n   * let table;\n   *\n   * async function setup() {\n   *   // Create a 200x200 canvas\n   *   createCanvas(200, 200);\n   *\n   *   // Load the CSV file with a header row\n   *   table = await loadTable('assets/mammals.csv', ',', 'header');\n   *\n   *   // Set text properties for drawing on the canvas\n   *   fill(0);       // Set text color to black\n   *   textSize(12);  // Adjust text size as needed\n   *\n   *   // Display the column names on the canvas\n   *   for (let c = 0; c < table.getColumnCount(); c++) {\n   *     text('column ' + c + ' is named ' + table.columns[c], 10, 30 + c * 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the\n   * rows of the table. The same result as calling <a href=\"/reference/p5.Table/getRows/\">getRows()</a>\n   * @type {p5.TableRow[]}\n   * @property rows\n   * @deprecated p5.Table will be removed in a future version of p5.js to make way for a new, friendlier version :)\n   * @for p5.Table\n   * @name rows\n  */\n}\n\nif(typeof p5 !== 'undefined'){\n  table(p5, p5.prototype);\n}\n\nexport { table as default };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;;AAEpC;AACA;AACA;AACA;AACA;;AAGA,MAAMC,KAAK,CAAC;EACVC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACD,IAAI,GAAG,EAAE;EAChB;EAEAE,QAAQA,CAACC,SAAS,GAAC,GAAG,EAAE;IACtB,IAAIH,IAAI,GAAG,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,GAAG,CAAC;IAE1C,IAAG,CAAC,IAAI,CAACL,OAAO,CAACM,IAAI,CAAEC,MAAM,IAAKA,MAAM,KAAK,IAAI,CAAC,EAAC;MACjDR,IAAI,GAAG,CAAC,IAAI,CAACC,OAAO,EAAE,GAAGD,IAAI,CAAE;IACjC;IAEA,OAAOH,SAAS,CAACG,IAAI,EAAE;MACrBG;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,MAAMA,CAAEJ,GAAG,EAAE;IACb;IACE,MAAMK,CAAC,GAAGL,GAAG,IAAI,IAAIM,EAAE,CAACC,QAAQ,CAAC,CAAC;IAElC,IAAI,OAAOF,CAAC,CAACJ,GAAG,KAAK,WAAW,IAAI,OAAOI,CAAC,CAACG,GAAG,KAAK,WAAW,EAAE;MAClE;MACE,MAAM,IAAIC,KAAK,CAAC,qBAAqBJ,CAAC,EAAE,CAAC;IAC3C;IACAA,CAAC,CAACK,KAAK,GAAG,IAAI;IACd,IAAI,CAACf,IAAI,CAACgB,IAAI,CAACN,CAAC,CAAC;IACjB,OAAOA,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,SAASA,CAAEC,EAAE,EAAE;IACb,IAAI,CAAClB,IAAI,CAACkB,EAAE,CAAC,CAACH,KAAK,GAAG,IAAI,CAAC,CAAC;IAC5B,MAAMI,KAAK,GAAG,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAACF,EAAE,GAAG,CAAC,EAAE,IAAI,CAAClB,IAAI,CAACqB,MAAM,CAAC;IACxD,IAAI,CAACrB,IAAI,CAACsB,GAAG,CAAC,CAAC;IACf,IAAI,CAACtB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACuB,MAAM,CAACJ,KAAK,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,MAAMA,CAAEd,CAAC,EAAE;IACT,OAAO,IAAI,CAACV,IAAI,CAACU,CAAC,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,OAAOA,CAAA,EAAI;IACT,OAAO,IAAI,CAACzB,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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ACF;IACA,OAAOI,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,SAASA,CAAEV,KAAK,EAAE;IAChB,MAAMK,GAAG,GAAG,EAAE;IACd,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,IAAI,CAACqB,MAAM,EAAEO,CAAC,EAAE,EAAE;QACzCI,GAAG,CAAChB,IAAI,CAAC,IAAI,CAAChB,IAAI,CAAC4B,CAAC,CAAC,CAACf,GAAG,CAAC,IAAI,CAACZ,OAAO,CAAC4B,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC;MACvD;IACJ,CAAC,MAAM;MACL,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,IAAI,CAACqB,MAAM,EAAES,CAAC,EAAE,EAAE;QACzCE,GAAG,CAAChB,IAAI,CAAC,IAAI,CAAChB,IAAI,CAAC8B,CAAC,CAAC,CAACxB,GAAG,CAACqB,KAAK,CAAC,CAAC;MACnC;IACF;IACA,OAAOK,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,SAASA,CAAA,EAAI;IACX,OAAO,IAAI,CAACtC,IAAI;IAChB,IAAI,CAACA,IAAI,GAAG,EAAE;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuC,SAASA,CAAEC,KAAK,EAAE;IAChB,MAAMC,CAAC,GAAGD,KAAK,IAAI,IAAI;IACvB,IAAI,CAACvC,OAAO,CAACe,IAAI,CAACyB,CAAC,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAcA,CAAA,EAAI;IAChB,OAAO,IAAI,CAACzC,OAAO,CAACoB,MAAM;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,WAAWA,CAAA,EAAI;IACb,OAAO,IAAI,CAAC3C,IAAI,CAACqB,MAAM;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuB,YAAYA,CAAEC,KAAK,EAAErC,MAAM,EAAE;IAC3B,MAAMsC,MAAM,GAAGC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;IAC9D,MAAMC,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,KAAK,CAACxB,MAAM,EAAEO,CAAC,EAAE,EAAE;MACrCqB,SAAS,CAACjC,IAAI,CAAC8B,MAAM,CAACD,KAAK,CAACK,MAAM,CAACtB,CAAC,CAAC,CAAC,CAAC;IACzC;IACA,MAAMuB,KAAK,GAAG,IAAIC,MAAM,CAACH,SAAS,CAACI,IAAI,C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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,GAAGA,CAAE7D,GAAG,EAAEG,MAAM,EAAEmB,KAAK,EAAE;IACvB,IAAI,CAAC3B,IAAI,CAACK,GAAG,CAAC,CAAC6D,GAAG,CAAC1D,MAAM,EAAEmB,KAAK,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEwC,MAAMA,CAAE9D,GAAG,EAAEG,MAAM,EAAEmB,KAAK,EAAE;IAC1B,IAAI,CAAC3B,IAAI,CAACK,GAAG,CAAC,CAAC8D,MAAM,CAAC3D,MAAM,EAAEmB,KAAK,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,SAASA,CAAE/D,GAAG,EAAEG,MAAM,EAAEmB,KAAK,EAAE;IAC7B,IAAI,CAAC3B,IAAI,CAACK,GAAG,CAAC,CAAC+D,SAAS,CAAC5D,MAAM,EAAEmB,KAAK,CAAC;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0C,GAAGA,CAAEhE,GAAG,EAAEG,MAAM,EAAE;IAChB,IAAG,OAAOA,MAAM,KAAK,QAAQ,EAAC;MAC5B,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC,CAACgE,GAAG,CAAC,IAAI,CAACpE,OAAO,CAAC4B,OAAO,CAACrB,MAAM,CAAC,CAAC;IACzD,CAAC,MAAM;MACL,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC,CAACgE,GAAG,CAAC7D,MAAM,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8D,MAAMA,CAAEjE,GAAG,EAAEG,MAAM,EAAE;IACnB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC,CAACiE,MAAM,CAAC9D,MAAM,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+D,SAASA,CAAElE,GAAG,EAAEG,MAAM,EAAE;IACtB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC,CAACkE,SAAS,CAAC/D,MAAM,CAAC;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgE,SAASA,CAAEC,YAAY,EAAE;IACvB,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtB,IAAI7D,GAAG,EAAE8D,IAAI,EAAEC,KAAK;IAEpB,KAAK,IAAIhD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,IAAI,CAACqB,MAAM,EAAEO,CAAC,EAAE,EAAE;MACzCf,GAAG,GAAG,IAAI,CAACb,IAAI,CAAC4B,CAAC,CAAC,CAACf,GAAG;MAEtB,IAAI,OAAO4D,YAAY,KAAK,QAAQ,EAAE;QACpCE,IAAI,GAAG,IAAI,CAAC1E,OAAO,CAAC4B,OAAO,CAAC4C,YAAY,CAAC,CAAC,CAAC;QAC3C,IAAIE,IAAI,IAAI,CAAC,EAAE;UACbC,KAAK,GAAG/D,GAAG,CAAC4D,YAAY,CAAC;UACzBC,WAAW,CAACE,KAAK,CAAC,GAAG/D,GAAG;QAC1B,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CAAC,mCAAmC2D,YAAY,GAAG,CAAC;QACrE;MACF,CAAC,MAAM;QACLC,WAAW,CAAC9C,CAAC,CAAC,GAAG,IAAI,CAAC5B,IAAI,CAAC4B,CAAC,CAAC,CAACf,GAAG;MACnC;IACF;IACA,OAAO6D,WAAW;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,QAAQA,CAAA,EAAI;IACV,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,IAAI,CAACqB,MAAM,EAAEO,CAAC,EAAE,EAAE;MACzCkD,UAAU,CAAC9D,IAAI,CAAC,IAAI,CAAChB,IAAI,CAAC4B,CAAC,CAAC,CAACtB,GAAG,CAAC;IACnC;IACA,OAAOwE,UAAU;EACnB;AACF;AACA,SAAS/D,KAAKA,CAACJ,EAAE,EAAEoE,EAAE,EAAC;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpE,EAAE,CAACb,KAAK,GAAGA,KAAK;;EAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAG,OAAOa,EAAE,KAAK,WAAW,EAAC;EAC3BI,KAAK,CAACJ,EAAE,EAAEA,EAAE,CAACqE,SAAS,CAAC;AACzB;AAEA,SAASjE,KAAK,IAAIkE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}