{"ast":null,"code":"import { b as ARROW, c as CROSS, H as HAND, M as MOVE, d as TEXT, W as WAIT, P as P2D } from '../constants-BRcElHU3.js';\nimport '../math/p5.Vector.js';\n\n/**\n * @module Environment\n * @submodule Environment\n * @for p5\n * @requires core\n * @requires constants\n */\n\nfunction environment(p5, fn) {\n  const standardCursors = [ARROW, CROSS, HAND, MOVE, TEXT, WAIT];\n  fn._frameRate = 0;\n  fn._lastFrameTime = window.performance.now();\n  fn._targetFrameRate = 60;\n  const _windowPrint = window.print;\n  let windowPrintDisabled = false;\n\n  /**\n   * Displays text in the web browser's console.\n   *\n   * `print()` is helpful for printing values while debugging. Each call to\n   * `print()` creates a new line of text.\n   *\n   * Note: Call `print('\\n')` to print a blank line. Calling `print()` without\n   * an argument opens the browser's dialog for printing documents.\n   *\n   * @method print\n   * @param {Any} contents content to print to the console.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Prints \"hello, world\" to the console.\n   *   print('hello, world');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   let name = 'ada';\n   *   // Prints \"hello, ada\" to the console.\n   *   print(`hello, ${name}`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.print = function (...args) {\n    if (!args.length) {\n      if (!windowPrintDisabled) {\n        _windowPrint();\n        if (window.confirm('You just tried to print the webpage. Do you want to prevent this from running again?')) {\n          windowPrintDisabled = true;\n        }\n      }\n    } else {\n      console.log(...args);\n    }\n  };\n\n  /**\n   * A `Number` variable that tracks the number of frames drawn since the sketch\n   * started.\n   *\n   * `frameCount`'s value is 0 inside <a href=\"#/p5/setup\">setup()</a>. It\n   * increments by 1 each time the code in <a href=\"#/p5/draw\">draw()</a>\n   * finishes executing.\n   *\n   * @property {Integer} frameCount\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the value of\n   *   // frameCount.\n   *   textSize(30);\n   *   textAlign(CENTER, CENTER);\n   *   text(frameCount, 50, 50);\n   *\n   *   describe('The number 0 written in black in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Set the frameRate to 30.\n   *   frameRate(30);\n   *\n   *   textSize(30);\n   *   textAlign(CENTER, CENTER);\n   *\n   *   describe('A number written in black in the middle of a gray square. Its value increases rapidly.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display the value of\n   *   // frameCount.\n   *   text(frameCount, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.frameCount = 0;\n\n  /**\n   * A `Number` variable that tracks the number of milliseconds it took to draw\n   * the last frame.\n   *\n   * `deltaTime` contains the amount of time it took\n   * <a href=\"#/p5/draw\">draw()</a> to execute during the previous frame. It's\n   * useful for simulating physics.\n   *\n   * @property {Integer} deltaTime\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * let x = 0;\n   * let speed = 0.05;\n   *\n   * function setup()  {\n   *   createCanvas(100, 100);\n   *\n   *   // Set the frameRate to 30.\n   *   frameRate(30);\n   *\n   *   describe('A white circle moves from left to right on a gray background. It reappears on the left side when it reaches the right side.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use deltaTime to calculate\n   *   // a change in position.\n   *   let deltaX = speed * deltaTime;\n   *\n   *   // Update the x variable.\n   *   x += deltaX;\n   *\n   *   // Reset x to 0 if it's\n   *   // greater than 100.\n   *   if (x > 100)  {\n   *     x = 0;\n   *   }\n   *\n   *   // Use x to set the circle's\n   *   // position.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.deltaTime = 0;\n\n  /**\n   * A `Boolean` variable that's `true` if the browser is focused and `false` if\n   * not.\n   *\n   * Note: The browser window can only receive input if it's focused.\n   *\n   * @property {Boolean} focused\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * // Open this example in two separate browser\n   * // windows placed side-by-side to demonstrate.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A square changes color from green to red when the browser window is out of focus.');\n   * }\n   *\n   * function draw() {\n   *   // Change the background color\n   *   // when the browser window\n   *   // goes in/out of focus.\n   *   if (focused === true) {\n   *     background(0, 255, 0);\n   *   } else {\n   *     background(255, 0, 0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.focused = document.hasFocus();\n\n  /**\n   * Changes the cursor's appearance.\n   *\n   * The first parameter, `type`, sets the type of cursor to display. The\n   * built-in options are `ARROW`, `CROSS`, `HAND`, `MOVE`, `TEXT`, and `WAIT`.\n   * `cursor()` also recognizes standard CSS cursor properties passed as\n   * strings: `'help'`, `'wait'`, `'crosshair'`, `'not-allowed'`, `'zoom-in'`,\n   * and `'grab'`. If the path to an image is passed, as in\n   * `cursor('assets/target.png')`, then the image will be used as the cursor.\n   * Images must be in .cur, .gif, .jpg, .jpeg, or .png format and should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#icon_size_limits\">at most 32 by 32 pixels large.</a>\n   *\n   * The parameters `x` and `y` are optional. If an image is used for the\n   * cursor, `x` and `y` set the location pointed to within the image. They are\n   * both 0 by default, so the cursor points to the image's top-left corner. `x`\n   * and `y` must be less than the image's width and height, respectively.\n   *\n   * @method cursor\n   * @param {(ARROW|CROSS|HAND|MOVE|TEXT|WAIT|String)} type Built-in: either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT.\n   *                               Native CSS properties: 'grab', 'progress', and so on.\n   *                               Path to cursor image.\n   * @param {Number}          [x]  horizontal active spot of the cursor.\n   * @param {Number}          [y]  vertical active spot of the cursor.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray square. The cursor appears as crosshairs.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the cursor to crosshairs: +\n   *   cursor(CROSS);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray square divided into quadrants. The cursor image changes when the mouse moves to each quadrant.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Divide the canvas into quadrants.\n   *   line(50, 0, 50, 100);\n   *   line(0, 50, 100, 50);\n   *\n   *   // Change cursor based on mouse position.\n   *   if (mouseX < 50 && mouseY < 50) {\n   *     cursor(CROSS);\n   *   } else if (mouseX > 50 && mouseY < 50) {\n   *     cursor('progress');\n   *   } else if (mouseX > 50 && mouseY > 50) {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n   *   } else {\n   *     cursor('grab');\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('An image of three purple curves follows the mouse. The image shifts when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Change the cursor's active spot\n   *   // when the mouse is pressed.\n   *   if (mouseIsPressed === true) {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16', 8, 8);\n   *   } else {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.cursor = function (type, x, y) {\n    let cursor = 'auto';\n    const canvas = this._curElement.elt;\n    if (standardCursors.includes(type)) {\n      // Standard css cursor\n      cursor = type;\n    } else if (typeof type === 'string') {\n      let coords = '';\n      if (x && y && typeof x === 'number' && typeof y === 'number') {\n        // Note that x and y values must be unit-less positive integers < 32\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n        coords = `${x} ${y}`;\n      }\n      if (type.substring(0, 7) === 'http://' || type.substring(0, 8) === 'https://') {\n        // Image (absolute url)\n        cursor = `url(${type}) ${coords}, auto`;\n      } else if (/\\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {\n        // Image file (relative path) - Separated for performance reasons\n        cursor = `url(${type}) ${coords}, auto`;\n      } else {\n        // Any valid string for the css cursor property\n        cursor = type;\n      }\n    }\n    canvas.style.cursor = cursor;\n  };\n\n  /**\n   * Sets the number of frames to draw per second.\n   *\n   * Calling `frameRate()` with one numeric argument, as in `frameRate(30)`,\n   * attempts to draw 30 frames per second (FPS). The target frame rate may not\n   * be achieved depending on the sketch's processing needs. Most computers\n   * default to a frame rate of 60 FPS. Frame rates of 24 FPS and above are\n   * fast enough for smooth animations.\n   *\n   * Calling `frameRate()` without an argument returns the current frame rate.\n   * The value returned is an approximation.\n   *\n   * @method frameRate\n   * @param  {Number} fps number of frames to draw per second.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background. The circle moves from left to right in a loop. It slows down when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the x variable based\n   *   // on the current frameCount.\n   *   let x = frameCount % 100;\n   *\n   *   // If the mouse is pressed,\n   *   // decrease the frame rate.\n   *   if (mouseIsPressed === true) {\n   *     frameRate(10);\n   *   } else {\n   *     frameRate(60);\n   *   }\n   *\n   *   // Use x to set the circle's\n   *   // position.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A number written in black on a gray background. The number decreases when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // If the mouse is pressed, do lots\n   *   // of math to slow down drawing.\n   *   if (mouseIsPressed === true) {\n   *     for (let i = 0; i < 1000000; i += 1) {\n   *       random();\n   *     }\n   *   }\n   *\n   *   // Get the current frame rate\n   *   // and display it.\n   *   let fps = frameRate();\n   *   text(fps, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method frameRate\n   * @return {Number}       current frame rate.\n   */\n  fn.frameRate = function (fps) {\n    // p5._validateParameters('frameRate', arguments);\n    if (typeof fps !== 'number' || fps < 0) {\n      return this._frameRate;\n    } else {\n      this._targetFrameRate = fps;\n      if (fps === 0) {\n        this._frameRate = fps;\n      }\n      return this;\n    }\n  };\n\n  /**\n   * Returns the current framerate.\n   *\n   * @private\n   * @return {Number} current frameRate\n   */\n  fn.getFrameRate = function () {\n    return this.frameRate();\n  };\n\n  /**\n   * Specifies the number of frames to be displayed every second. For example,\n   * the function call frameRate(30) will attempt to refresh 30 times a second.\n   * If the processor is not fast enough to maintain the specified rate, the\n   * frame rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\n   * recommended. The default rate is 60 frames per second.\n   *\n   * Calling `frameRate()` with no arguments returns the current frame rate.\n   *\n   * @private\n   * @param {Number} [fps] number of frames to be displayed every second\n   */\n  fn.setFrameRate = function (fps) {\n    return this.frameRate(fps);\n  };\n\n  /**\n   * Returns the target frame rate.\n   *\n   * The value is either the system frame rate or the last value passed to\n   * <a href=\"#/p5/frameRate\">frameRate()</a>.\n   *\n   * @method getTargetFrameRate\n   * @return {Number} _targetFrameRate\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('The number 20 written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the frame rate to 20.\n   *   frameRate(20);\n   *\n   *   // Get the target frame rate and\n   *   // display it.\n   *   let fps = getTargetFrameRate();\n   *   text(fps, 43, 54);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getTargetFrameRate = function () {\n    return this._targetFrameRate;\n  };\n\n  /**\n   * Hides the cursor from view.\n   *\n   * @method noCursor\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Hide the cursor.\n   *   noCursor();\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   circle(mouseX, mouseY, 10);\n   *\n   *   describe('A white circle on a gray background. The circle follows the mouse as it moves. The cursor is hidden.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noCursor = function () {\n    this._curElement.elt.style.cursor = 'none';\n  };\n\n  /**\n   * A `String` variable with the WebGL version in use.\n   *\n   * `webglVersion`'s value equals one of the following string constants:\n   *\n   * - `WEBGL2` whose value is `'webgl2'`,\n   * - `WEBGL` whose value is `'webgl'`, or\n   * - `P2D` whose value is `'p2d'`. This is the default for 2D sketches.\n   * - `P2DHDR` whose value is `'p2d-hdr'` (used for HDR 2D sketches, if available).\n   *\n   * See <a href=\"#/p5/setAttributes\">setAttributes()</a> for ways to set the\n   * WebGL version.\n   *\n   * @property {(WEBGL|WEBGL2)} webglVersion\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   text(webglVersion, 42, 54);\n   *\n   *   describe('The text \"p2d\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let font;\n   *\n   * async function setup() {\n   *   // Load a font to use.\n   *   font = await loadFont('assets/inconsolata.otf');\n   *\n   *   // Create a canvas using WEBGL mode.\n   *   createCanvas(100, 50, WEBGL);\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   fill(0);\n   *   textFont(font);\n   *   text(webglVersion, -15, 5);\n   *\n   *   describe('The text \"webgl2\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let font;\n   *\n   * async function setup() {\n   *   // Load a font to use.\n   *   font = await loadFont('assets/inconsolata.otf');\n   *\n   *   // Create a canvas using WEBGL mode.\n   *   createCanvas(100, 50, WEBGL);\n   *\n   *   // Set WebGL to version 1.\n   *   setAttributes({ version: 1 });\n   *\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   fill(0);\n   *   textFont(font);\n   *   text(webglVersion, -14, 5);\n   *\n   *   describe('The text \"webgl\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.webglVersion = P2D;\n\n  /**\n   * A `Number` variable that stores the width of the screen display.\n   *\n   * `displayWidth` is useful for running full-screen programs. Its value\n   * depends on the current <a href=\"#/p5/pixelDensity\">pixelDensity()</a>.\n   *\n   * Note: The actual screen width can be computed as\n   * `displayWidth * pixelDensity()`.\n   *\n   * @property {Number} displayWidth\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the display's dimensions.\n   *   createCanvas(displayWidth, displayHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that is the same size as the display.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.displayWidth = screen.width;\n\n  /**\n   * A `Number` variable that stores the height of the screen display.\n   *\n   * `displayHeight` is useful for running full-screen programs. Its value\n   * depends on the current <a href=\"#/p5/pixelDensity\">pixelDensity()</a>.\n   *\n   * Note: The actual screen height can be computed as\n   * `displayHeight * pixelDensity()`.\n   *\n   * @property {Number} displayHeight\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the display's dimensions.\n   *   createCanvas(displayWidth, displayHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that is the same size as the display.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.displayHeight = screen.height;\n\n  /**\n   * A `Number` variable that stores the width of the browser's viewport.\n   *\n   * The <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport\" target=\"_blank\">layout viewport</a>\n   * is the area within the browser that's available for drawing.\n   *\n   * @property {Number} windowWidth\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the browser's dimensions.\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.windowWidth = 0;\n\n  /**\n   * A `Number` variable that stores the height of the browser's viewport.\n   *\n   * The <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport\" target=\"_blank\">layout viewport</a>\n   * is the area within the browser that's available for drawing.\n   *\n   * @property {Number} windowHeight\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the browser's dimensions.\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.windowHeight = 0;\n\n  /**\n   * A function that's called when the browser window is resized.\n   *\n   * Code placed in the body of `windowResized()` will run when the\n   * browser window's size changes. It's a good place to call\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> or make other\n   * adjustments to accommodate the new window size.\n   *\n   * The `event` parameter is optional. If added to the function declaration, it\n   * can be used for debugging or other purposes.\n   *\n   * @method windowResized\n   * @param {UIEvent} [event] optional resize Event.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   describe('A gray canvas with a white circle at its center. The canvas takes up the entire browser window. It changes size to match the browser window.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a circle at the center.\n   *   circle(width / 2, height / 2, 50);\n   * }\n   *\n   * // Resize the canvas when the\n   * // browser's size changes.\n   * function windowResized() {\n   *   resizeCanvas(windowWidth, windowHeight);\n   * }\n   * </code>\n   * </div>\n   * @alt\n   * This example does not render anything.\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(windowWidth, windowHeight);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window. It changes size to match the browser window.');\n   * }\n   *\n   * function windowResized(event) {\n   *   // Resize the canvas when the\n   *   // browser's size changes.\n   *   resizeCanvas(windowWidth, windowHeight);\n   *\n   *   // Print the resize event to the console for debugging.\n   *   print(event);\n   * }\n   * </code>\n   * </div>\n   * @alt\n   * This example does not render anything.\n   */\n  fn._onresize = function (e) {\n    this.windowWidth = getWindowWidth();\n    this.windowHeight = getWindowHeight();\n    const context = this._isGlobal ? window : this;\n    let executeDefault;\n    if (typeof context.windowResized === 'function') {\n      executeDefault = context.windowResized(e);\n      if (executeDefault !== undefined && !executeDefault) {\n        e.preventDefault();\n      }\n    }\n  };\n  function getWindowWidth() {\n    return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;\n  }\n  function getWindowHeight() {\n    return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;\n  }\n\n  /**\n   * Called upon each p5 instantiation instead of module import due to the\n   * possibility of the window being resized when no sketch is active.\n   */\n  fn._updateWindowSize = function () {\n    this.windowWidth = getWindowWidth();\n    this.windowHeight = getWindowHeight();\n  };\n\n  /**\n   * A `Number` variable that stores the width of the canvas in pixels.\n   *\n   * `width`'s default value is 100. Calling\n   * <a href=\"#/p5/createCanvas\">createCanvas()</a> or\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> changes the value of\n   * `width`. Calling <a href=\"#/p5/noCanvas\">noCanvas()</a> sets its value to\n   * 0.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(50, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 21, 54);\n   *\n   *   describe('The number 50 written in black on a gray rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');\n   * }\n   *\n   * // If the mouse is pressed, reisze\n   * // the canvas and display its new\n   * // width.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     resizeCanvas(50, 100);\n   *     background(200);\n   *     text(width, 21, 54);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * @property {Number} width\n   * @readOnly\n   */\n  Object.defineProperty(fn, 'width', {\n    get() {\n      return this._renderer.width;\n    }\n  });\n\n  /**\n   * A `Number` variable that stores the height of the canvas in pixels.\n   *\n   * `height`'s default value is 100. Calling\n   * <a href=\"#/p5/createCanvas\">createCanvas()</a> or\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> changes the value of\n   * `height`. Calling <a href=\"#/p5/noCanvas\">noCanvas()</a> sets its value to\n   * 0.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 50);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 27);\n   *\n   *   describe('The number 50 written in black on a gray rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');\n   * }\n   *\n   * // If the mouse is pressed, reisze\n   * // the canvas and display its new\n   * // height.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     resizeCanvas(100, 50);\n   *     background(200);\n   *     text(height, 42, 27);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * @property {Number} height\n   * @readOnly\n   */\n  Object.defineProperty(fn, 'height', {\n    get() {\n      return this._renderer.height;\n    }\n  });\n\n  /**\n   * Toggles full-screen mode or returns the current mode.\n   *\n   * Calling `fullscreen(true)` makes the sketch full-screen. Calling\n   * `fullscreen(false)` makes the sketch its original size.\n   *\n   * Calling `fullscreen()` without an argument returns `true` if the sketch\n   * is in full-screen mode and `false` if not.\n   *\n   * Note: Due to browser restrictions, `fullscreen()` can only be called with\n   * user input such as a mouse press.\n   *\n   * @method fullscreen\n   * @param  {Boolean} [val] whether the sketch should be in fullscreen mode.\n   * @return {Boolean} current fullscreen state.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   describe('A gray canvas that switches between default and full-screen display when clicked.');\n   * }\n   *\n   * // If the mouse is pressed,\n   * // toggle full-screen mode.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     let fs = fullscreen();\n   *     fullscreen(!fs);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.fullscreen = function (val) {\n    // p5._validateParameters('fullscreen', arguments);\n    // no arguments, return fullscreen or not\n    if (typeof val === 'undefined') {\n      return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n    } else {\n      // otherwise set to fullscreen or not\n      if (val) {\n        launchFullscreen(document.documentElement);\n      } else {\n        exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * Sets the pixel density or returns the current density.\n   *\n   * Computer displays are grids of little lights called <em>pixels</em>. A\n   * display's <em>pixel density</em> describes how many pixels it packs into an\n   * area. Displays with smaller pixels have a higher pixel density and create\n   * sharper images.\n   *\n   * `pixelDensity()` sets the pixel scaling for high pixel density displays.\n   * By default, the pixel density is set to match the display's density.\n   * Calling `pixelDensity(1)` turn this off.\n   *\n   * Calling `pixelDensity()` without an argument returns the current pixel\n   * density.\n   *\n   * @method pixelDensity\n   * @param  {Number} [val] desired pixel density.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 1.\n   *   pixelDensity(1);\n   *\n   *   // Create a canvas and draw\n   *   // a circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A fuzzy white circle on a gray canvas.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 3.\n   *   pixelDensity(3);\n   *\n   *   // Create a canvas, paint the\n   *   // background, and draw a\n   *   // circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A sharp white circle on a gray canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method pixelDensity\n   * @returns {Number} current pixel density of the sketch.\n   */\n  fn.pixelDensity = function (val) {\n    // p5._validateParameters('pixelDensity', arguments);\n    let returnValue;\n    if (typeof val === 'number') {\n      if (val !== this._renderer._pixelDensity) {\n        this._renderer._pixelDensity = val;\n      }\n      returnValue = this;\n      this.resizeCanvas(this.width, this.height, true); // as a side effect, it will clear the canvas\n    } else {\n      returnValue = this._renderer._pixelDensity;\n    }\n    return returnValue;\n  };\n\n  /**\n   * Returns the display's current pixel density.\n   *\n   * @method displayDensity\n   * @returns {Number} current pixel density of the display.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 1.\n   *   pixelDensity(1);\n   *\n   *   // Create a canvas and draw\n   *   // a circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A fuzzy white circle drawn on a gray background. The circle becomes sharper when the mouse is pressed.');\n   * }\n   *\n   * function mousePressed() {\n   *   // Get the current display density.\n   *   let d = displayDensity();\n   *\n   *   // Use the display density to set\n   *   // the sketch's pixel density.\n   *   pixelDensity(d);\n   *\n   *   // Paint the background and\n   *   // draw a circle.\n   *   background(200);\n   *   circle(50, 50, 70);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.displayDensity = () => window.devicePixelRatio;\n  function launchFullscreen(element) {\n    const enabled = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;\n    if (!enabled) {\n      throw new Error('Fullscreen not enabled in this browser.');\n    }\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) {\n      element.msRequestFullscreen();\n    }\n  }\n  function exitFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    }\n  }\n\n  /**\n   * Returns the sketch's current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL\" target=\"_blank\">URL</a>\n   * as a `String`.\n   *\n   * @method getURL\n   * @return {String} url\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL\n   *   // and display it.\n   *   let url = getURL();\n   *   textWrap(CHAR);\n   *   text(url, 0, 40, 100);\n   *\n   *   describe('The URL \"https://p5js.org/reference/p5/getURL\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getURL = () => location.href;\n\n  /**\n   * Returns the current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#path_to_resource\" target=\"_blank\">URL</a>\n   * path as an `Array` of `String`s.\n   *\n   * For example, consider a sketch hosted at the URL\n   * `https://example.com/sketchbook`. Calling `getURLPath()` returns\n   * `['sketchbook']`. For a sketch hosted at the URL\n   * `https://example.com/sketchbook/monday`, `getURLPath()` returns\n   * `['sketchbook', 'monday']`.\n   *\n   * @method getURLPath\n   * @return {String[]} path components.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL path\n   *   // and display the first\n   *   // part.\n   *   let path = getURLPath();\n   *   text(path[0], 25, 54);\n   *\n   *   describe('The word \"reference\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getURLPath = () => location.pathname.split('/').filter(v => v !== '');\n\n  /**\n   * Returns the current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#parameters\" target=\"_blank\">URL parameters</a>\n   * in an `Object`.\n   *\n   * For example, calling `getURLParams()` in a sketch hosted at the URL\n   * `https://p5js.org?year=2014&month=May&day=15` returns\n   * `{ year: 2014, month: 'May', day: 15 }`.\n   *\n   * @method getURLParams\n   * @return {Object} URL params\n   * @example\n   * <div class='norender notest'>\n   * <code>\n   * // Imagine this sketch is hosted at the following URL:\n   * // https://p5js.org?year=2014&month=May&day=15\n   *\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL\n   *   // parameters and display\n   *   // them.\n   *   let params = getURLParams();\n   *   text(params.day, 10, 20);\n   *   text(params.month, 10, 40);\n   *   text(params.year, 10, 60);\n   *\n   *   describe('The text \"15\", \"May\", and \"2014\" written in black on separate lines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.getURLParams = function () {\n    const re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;\n    let m;\n    const v = {};\n    while ((m = re.exec(location.search)) != null) {\n      if (m.index === re.lastIndex) {\n        re.lastIndex++;\n      }\n      v[m[1]] = m[2];\n    }\n    return v;\n  };\n\n  /**\n   * Converts 3D world coordinates to 2D screen coordinates.\n   *\n   * This function takes a 3D vector and converts its coordinates\n   * from the world space to screen space. This can be useful for placing\n   * 2D elements in a 3D scene or for determining the screen position\n   * of 3D objects.\n   *\n   * @method worldToScreen\n   * @param {Number|p5.Vector} x The x coordinate in world space. (Or a vector for all three coordinates.)\n   * @param {Number} y The y coordinate in world space.\n   * @param {Number} [z] The z coordinate in world space.\n   * @return {p5.Vector} A vector containing the 2D screen coordinates.\n   * @example\n   * <div>\n   * <code>\n   *\n   * function setup() {\n   *   createCanvas(150, 150);\n   *   let vertices = [\n   *     createVector(-20, -20),\n   *     createVector(20, -20),\n   *     createVector(20, 20),\n   *     createVector(-20, 20)\n   *   ];\n   *\n   *   push();\n   *   translate(75, 55);\n   *   rotate(PI / 4);\n   *\n   *   // Convert world coordinates to screen coordinates\n   *   let screenPos = vertices.map(v => worldToScreen(v));\n   *   pop();\n   *\n   *   background(200);\n   *\n   *   stroke(0);\n   *   fill(100, 150, 255, 100);\n   *   beginShape();\n   *   screenPos.forEach(pos => vertex(pos.x, pos.y));\n   *   endShape(CLOSE);\n   *\n   *   screenPos.forEach((pos, i) => {\n   *     fill(0);\n   *     textSize(10);\n   *     if (i === 0) {\n   *       text(i + 1, pos.x + 3, pos.y - 7);\n   *     } else if (i === 1) {\n   *       text(i + 1, pos.x + 7, pos.y + 2);\n   *     } else if (i === 2) {\n   *       text(i + 1, pos.x - 2, pos.y + 12);\n   *     } else if (i === 3) {\n   *       text(i + 1, pos.x - 12, pos.y - 2);\n   *     }\n   *   });\n   *\n   *   fill(0);\n   *   noStroke();\n   *   textSize(10);\n   *   let legendY = height - 35;\n   *   screenPos.forEach((pos, i) => {\n   *     text(`Vertex ${i + 1}: (${pos.x.toFixed(1)}, ${pos.y.toFixed(1)})`, 5, legendY + i * 10);\n   *   });\n   *\n   *   describe('A rotating square is transformed and drawn using screen coordinates.');\n   *\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * let vertices;\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *   vertices = [\n   *     createVector(-25, -25, -25),\n   *     createVector(25, -25, -25),\n   *     createVector(25, 25, -25),\n   *     createVector(-25, 25, -25),\n   *     createVector(-25, -25, 25),\n   *     createVector(25, -25, 25),\n   *     createVector(25, 25, 25),\n   *     createVector(-25, 25, 25)\n   *   ];\n   *\n   *   describe('A rotating cube with points mapped to 2D screen space and displayed as ellipses.');\n   *\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Animate rotation\n   *   let rotationX = millis() / 1000;\n   *   let rotationY = millis() / 1200;\n   *\n   *   push();\n   *\n   *   rotateX(rotationX);\n   *   rotateY(rotationY);\n   *\n   *   // Convert world coordinates to screen coordinates\n   *   let screenPos = vertices.map(v => worldToScreen(v));\n   *\n   *   pop();\n   *\n   *   screenPos.forEach((pos, i) => {\n   *\n   *     let screenX = pos.x - width / 2;\n   *     let screenY = pos.y - height / 2;\n   *     fill(0);\n   *     noStroke();\n   *     ellipse(screenX, screenY, 3, 3);\n   *   });\n   * }\n   * </code>\n   * </div>\n   *\n   */\n  fn.worldToScreen = function (worldPosition) {\n    if (typeof worldPosition === \"number\") {\n      // We got passed numbers, convert to vector\n      worldPosition = this.createVector(...arguments);\n    }\n    const matrix = this._renderer.getWorldToScreenMatrix();\n    const screenPosition = matrix.multiplyAndNormalizePoint(worldPosition);\n    return screenPosition;\n  };\n  /**\n   * Converts 2D screen coordinates to 3D world coordinates.\n   *\n   * This function takes a vector and converts its coordinates from coordinates\n   * on the screen to coordinates in the currently drawn object. This can be\n   * useful for determining the mouse position relative to a 2D or 3D object.\n   *\n   * If given, the Z component of the input coordinates is treated as \"depth\",\n   * or distance from the camera.\n   *\n   * @method screenToWorld\n   * @param {Number|p5.Vector} x The x coordinate in screen space. (Or a vector for all three coordinates.)\n   * @param {Number} y The y coordinate in screen space.\n   * @param {Number} [z] The z coordinate in screen space.\n   * @return {p5.Vector} A vector containing the 3D world space coordinates.\n   * @example\n   * <div>\n   * <code>\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   describe('A rotating square with a line passing through the mouse drawn across it.');\n   * }\n   *\n   * function draw() {\n   *   background(220);\n   *\n   *   // Move to center and rotate\n   *   translate(width/2, height/2);\n   *   rotate(millis() / 1000);\n   *   rect(-30, -30, 60);\n   *\n   *   // Compute the location of the mouse in the coordinates of the square\n   *   let localMouse = screenToWorld(createVector(mouseX, mouseY));\n   *\n   *   // Draw a line parallel to the local Y axis, passing through the mouse\n   *   line(localMouse.x, -30, localMouse.x, 30);\n   * }\n   *\n   * </code>\n   * </div>\n   *\n   */\n  fn.screenToWorld = function (screenPosition) {\n    if (typeof screenPosition === \"number\") {\n      // We got passed numbers, convert to vector\n      screenPosition = this.createVector(...arguments);\n    }\n    const matrix = this._renderer.getWorldToScreenMatrix();\n    if (screenPosition.dimensions == 2) {\n      // Calculate a sensible Z value for the current camera projection that\n      // will result in 0 once converted to world coordinates\n      let z = matrix.mat4[14] / matrix.mat4[15];\n      screenPosition = this.createVector(screenPosition.x, screenPosition.y, z);\n    }\n    const matrixInverse = matrix.invert(matrix);\n    const worldPosition = matrixInverse.multiplyAndNormalizePoint(screenPosition);\n    return worldPosition;\n  };\n}\nif (typeof p5 !== 'undefined') {\n  environment(p5, p5.prototype);\n}\nexport { environment as default };","map":{"version":3,"names":["b","ARROW","c","CROSS","H","HAND","M","MOVE","d","TEXT","W","WAIT","P","P2D","environment","p5","fn","standardCursors","_frameRate","_lastFrameTime","window","performance","now","_targetFrameRate","_windowPrint","print","windowPrintDisabled","args","length","confirm","console","log","frameCount","deltaTime","focused","document","hasFocus","cursor","type","x","y","canvas","_curElement","elt","includes","coords","substring","test","style","frameRate","fps","getFrameRate","setFrameRate","getTargetFrameRate","noCursor","webglVersion","displayWidth","screen","width","displayHeight","height","windowWidth","windowHeight","_onresize","e","getWindowWidth","getWindowHeight","context","_isGlobal","executeDefault","windowResized","undefined","preventDefault","innerWidth","documentElement","clientWidth","body","innerHeight","clientHeight","_updateWindowSize","Object","defineProperty","get","_renderer","fullscreen","val","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","launchFullscreen","exitFullscreen","pixelDensity","returnValue","_pixelDensity","resizeCanvas","displayDensity","devicePixelRatio","element","enabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","Error","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","getURL","location","href","getURLPath","pathname","split","filter","v","getURLParams","re","m","exec","search","index","lastIndex","worldToScreen","worldPosition","createVector","arguments","matrix","getWorldToScreenMatrix","screenPosition","multiplyAndNormalizePoint","screenToWorld","dimensions","z","mat4","matrixInverse","invert","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/core/environment.js"],"sourcesContent":["import { b as ARROW, c as CROSS, H as HAND, M as MOVE, d as TEXT, W as WAIT, P as P2D } from '../constants-BRcElHU3.js';\nimport '../math/p5.Vector.js';\n\n/**\n * @module Environment\n * @submodule Environment\n * @for p5\n * @requires core\n * @requires constants\n */\n\n\nfunction environment(p5, fn){\n  const standardCursors = [ARROW, CROSS, HAND, MOVE, TEXT, WAIT];\n\n  fn._frameRate = 0;\n  fn._lastFrameTime = window.performance.now();\n  fn._targetFrameRate = 60;\n\n  const _windowPrint = window.print;\n  let windowPrintDisabled = false;\n\n  /**\n   * Displays text in the web browser's console.\n   *\n   * `print()` is helpful for printing values while debugging. Each call to\n   * `print()` creates a new line of text.\n   *\n   * Note: Call `print('\\n')` to print a blank line. Calling `print()` without\n   * an argument opens the browser's dialog for printing documents.\n   *\n   * @method print\n   * @param {Any} contents content to print to the console.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Prints \"hello, world\" to the console.\n   *   print('hello, world');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   let name = 'ada';\n   *   // Prints \"hello, ada\" to the console.\n   *   print(`hello, ${name}`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.print = function(...args) {\n    if (!args.length) {\n      if (!windowPrintDisabled) {\n        _windowPrint();\n        if (\n          window.confirm(\n            'You just tried to print the webpage. Do you want to prevent this from running again?'\n          )\n        ) {\n          windowPrintDisabled = true;\n        }\n      }\n    } else {\n      console.log(...args);\n    }\n  };\n\n  /**\n   * A `Number` variable that tracks the number of frames drawn since the sketch\n   * started.\n   *\n   * `frameCount`'s value is 0 inside <a href=\"#/p5/setup\">setup()</a>. It\n   * increments by 1 each time the code in <a href=\"#/p5/draw\">draw()</a>\n   * finishes executing.\n   *\n   * @property {Integer} frameCount\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the value of\n   *   // frameCount.\n   *   textSize(30);\n   *   textAlign(CENTER, CENTER);\n   *   text(frameCount, 50, 50);\n   *\n   *   describe('The number 0 written in black in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Set the frameRate to 30.\n   *   frameRate(30);\n   *\n   *   textSize(30);\n   *   textAlign(CENTER, CENTER);\n   *\n   *   describe('A number written in black in the middle of a gray square. Its value increases rapidly.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display the value of\n   *   // frameCount.\n   *   text(frameCount, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.frameCount = 0;\n\n  /**\n   * A `Number` variable that tracks the number of milliseconds it took to draw\n   * the last frame.\n   *\n   * `deltaTime` contains the amount of time it took\n   * <a href=\"#/p5/draw\">draw()</a> to execute during the previous frame. It's\n   * useful for simulating physics.\n   *\n   * @property {Integer} deltaTime\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * let x = 0;\n   * let speed = 0.05;\n   *\n   * function setup()  {\n   *   createCanvas(100, 100);\n   *\n   *   // Set the frameRate to 30.\n   *   frameRate(30);\n   *\n   *   describe('A white circle moves from left to right on a gray background. It reappears on the left side when it reaches the right side.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use deltaTime to calculate\n   *   // a change in position.\n   *   let deltaX = speed * deltaTime;\n   *\n   *   // Update the x variable.\n   *   x += deltaX;\n   *\n   *   // Reset x to 0 if it's\n   *   // greater than 100.\n   *   if (x > 100)  {\n   *     x = 0;\n   *   }\n   *\n   *   // Use x to set the circle's\n   *   // position.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.deltaTime = 0;\n\n  /**\n   * A `Boolean` variable that's `true` if the browser is focused and `false` if\n   * not.\n   *\n   * Note: The browser window can only receive input if it's focused.\n   *\n   * @property {Boolean} focused\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * // Open this example in two separate browser\n   * // windows placed side-by-side to demonstrate.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A square changes color from green to red when the browser window is out of focus.');\n   * }\n   *\n   * function draw() {\n   *   // Change the background color\n   *   // when the browser window\n   *   // goes in/out of focus.\n   *   if (focused === true) {\n   *     background(0, 255, 0);\n   *   } else {\n   *     background(255, 0, 0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.focused = document.hasFocus();\n\n  /**\n   * Changes the cursor's appearance.\n   *\n   * The first parameter, `type`, sets the type of cursor to display. The\n   * built-in options are `ARROW`, `CROSS`, `HAND`, `MOVE`, `TEXT`, and `WAIT`.\n   * `cursor()` also recognizes standard CSS cursor properties passed as\n   * strings: `'help'`, `'wait'`, `'crosshair'`, `'not-allowed'`, `'zoom-in'`,\n   * and `'grab'`. If the path to an image is passed, as in\n   * `cursor('assets/target.png')`, then the image will be used as the cursor.\n   * Images must be in .cur, .gif, .jpg, .jpeg, or .png format and should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#icon_size_limits\">at most 32 by 32 pixels large.</a>\n   *\n   * The parameters `x` and `y` are optional. If an image is used for the\n   * cursor, `x` and `y` set the location pointed to within the image. They are\n   * both 0 by default, so the cursor points to the image's top-left corner. `x`\n   * and `y` must be less than the image's width and height, respectively.\n   *\n   * @method cursor\n   * @param {(ARROW|CROSS|HAND|MOVE|TEXT|WAIT|String)} type Built-in: either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT.\n   *                               Native CSS properties: 'grab', 'progress', and so on.\n   *                               Path to cursor image.\n   * @param {Number}          [x]  horizontal active spot of the cursor.\n   * @param {Number}          [y]  vertical active spot of the cursor.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray square. The cursor appears as crosshairs.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the cursor to crosshairs: +\n   *   cursor(CROSS);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray square divided into quadrants. The cursor image changes when the mouse moves to each quadrant.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Divide the canvas into quadrants.\n   *   line(50, 0, 50, 100);\n   *   line(0, 50, 100, 50);\n   *\n   *   // Change cursor based on mouse position.\n   *   if (mouseX < 50 && mouseY < 50) {\n   *     cursor(CROSS);\n   *   } else if (mouseX > 50 && mouseY < 50) {\n   *     cursor('progress');\n   *   } else if (mouseX > 50 && mouseY > 50) {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n   *   } else {\n   *     cursor('grab');\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('An image of three purple curves follows the mouse. The image shifts when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Change the cursor's active spot\n   *   // when the mouse is pressed.\n   *   if (mouseIsPressed === true) {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16', 8, 8);\n   *   } else {\n   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.cursor = function(type, x, y) {\n    let cursor = 'auto';\n    const canvas = this._curElement.elt;\n    if (standardCursors.includes(type)) {\n      // Standard css cursor\n      cursor = type;\n    } else if (typeof type === 'string') {\n      let coords = '';\n      if (x && y && (typeof x === 'number' && typeof y === 'number')) {\n        // Note that x and y values must be unit-less positive integers < 32\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n        coords = `${x} ${y}`;\n      }\n      if (\n        type.substring(0, 7) === 'http://' ||\n        type.substring(0, 8) === 'https://'\n      ) {\n        // Image (absolute url)\n        cursor = `url(${type}) ${coords}, auto`;\n      } else if (/\\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {\n        // Image file (relative path) - Separated for performance reasons\n        cursor = `url(${type}) ${coords}, auto`;\n      } else {\n        // Any valid string for the css cursor property\n        cursor = type;\n      }\n    }\n    canvas.style.cursor = cursor;\n  };\n\n  /**\n   * Sets the number of frames to draw per second.\n   *\n   * Calling `frameRate()` with one numeric argument, as in `frameRate(30)`,\n   * attempts to draw 30 frames per second (FPS). The target frame rate may not\n   * be achieved depending on the sketch's processing needs. Most computers\n   * default to a frame rate of 60 FPS. Frame rates of 24 FPS and above are\n   * fast enough for smooth animations.\n   *\n   * Calling `frameRate()` without an argument returns the current frame rate.\n   * The value returned is an approximation.\n   *\n   * @method frameRate\n   * @param  {Number} fps number of frames to draw per second.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background. The circle moves from left to right in a loop. It slows down when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the x variable based\n   *   // on the current frameCount.\n   *   let x = frameCount % 100;\n   *\n   *   // If the mouse is pressed,\n   *   // decrease the frame rate.\n   *   if (mouseIsPressed === true) {\n   *     frameRate(10);\n   *   } else {\n   *     frameRate(60);\n   *   }\n   *\n   *   // Use x to set the circle's\n   *   // position.\n   *   circle(x, 50, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A number written in black on a gray background. The number decreases when the mouse is pressed.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // If the mouse is pressed, do lots\n   *   // of math to slow down drawing.\n   *   if (mouseIsPressed === true) {\n   *     for (let i = 0; i < 1000000; i += 1) {\n   *       random();\n   *     }\n   *   }\n   *\n   *   // Get the current frame rate\n   *   // and display it.\n   *   let fps = frameRate();\n   *   text(fps, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method frameRate\n   * @return {Number}       current frame rate.\n   */\n  fn.frameRate = function(fps) {\n    // p5._validateParameters('frameRate', arguments);\n    if (typeof fps !== 'number' || fps < 0) {\n      return this._frameRate;\n    } else {\n      this._targetFrameRate = fps;\n      if (fps === 0) {\n        this._frameRate = fps;\n      }\n      return this;\n    }\n  };\n\n  /**\n   * Returns the current framerate.\n   *\n   * @private\n   * @return {Number} current frameRate\n   */\n  fn.getFrameRate = function() {\n    return this.frameRate();\n  };\n\n  /**\n   * Specifies the number of frames to be displayed every second. For example,\n   * the function call frameRate(30) will attempt to refresh 30 times a second.\n   * If the processor is not fast enough to maintain the specified rate, the\n   * frame rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\n   * recommended. The default rate is 60 frames per second.\n   *\n   * Calling `frameRate()` with no arguments returns the current frame rate.\n   *\n   * @private\n   * @param {Number} [fps] number of frames to be displayed every second\n   */\n  fn.setFrameRate = function(fps) {\n    return this.frameRate(fps);\n  };\n\n  /**\n   * Returns the target frame rate.\n   *\n   * The value is either the system frame rate or the last value passed to\n   * <a href=\"#/p5/frameRate\">frameRate()</a>.\n   *\n   * @method getTargetFrameRate\n   * @return {Number} _targetFrameRate\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('The number 20 written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the frame rate to 20.\n   *   frameRate(20);\n   *\n   *   // Get the target frame rate and\n   *   // display it.\n   *   let fps = getTargetFrameRate();\n   *   text(fps, 43, 54);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getTargetFrameRate = function() {\n    return this._targetFrameRate;\n  };\n\n  /**\n   * Hides the cursor from view.\n   *\n   * @method noCursor\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Hide the cursor.\n   *   noCursor();\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   circle(mouseX, mouseY, 10);\n   *\n   *   describe('A white circle on a gray background. The circle follows the mouse as it moves. The cursor is hidden.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noCursor = function() {\n    this._curElement.elt.style.cursor = 'none';\n  };\n\n  /**\n   * A `String` variable with the WebGL version in use.\n   *\n   * `webglVersion`'s value equals one of the following string constants:\n   *\n   * - `WEBGL2` whose value is `'webgl2'`,\n   * - `WEBGL` whose value is `'webgl'`, or\n   * - `P2D` whose value is `'p2d'`. This is the default for 2D sketches.\n   * - `P2DHDR` whose value is `'p2d-hdr'` (used for HDR 2D sketches, if available).\n   *\n   * See <a href=\"#/p5/setAttributes\">setAttributes()</a> for ways to set the\n   * WebGL version.\n   *\n   * @property {(WEBGL|WEBGL2)} webglVersion\n   * @readOnly\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   text(webglVersion, 42, 54);\n   *\n   *   describe('The text \"p2d\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let font;\n   *\n   * async function setup() {\n   *   // Load a font to use.\n   *   font = await loadFont('assets/inconsolata.otf');\n   *\n   *   // Create a canvas using WEBGL mode.\n   *   createCanvas(100, 50, WEBGL);\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   fill(0);\n   *   textFont(font);\n   *   text(webglVersion, -15, 5);\n   *\n   *   describe('The text \"webgl2\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let font;\n   *\n   * async function setup() {\n   *   // Load a font to use.\n   *   font = await loadFont('assets/inconsolata.otf');\n   *\n   *   // Create a canvas using WEBGL mode.\n   *   createCanvas(100, 50, WEBGL);\n   *\n   *   // Set WebGL to version 1.\n   *   setAttributes({ version: 1 });\n   *\n   *   background(200);\n   *\n   *   // Display the current WebGL version.\n   *   fill(0);\n   *   textFont(font);\n   *   text(webglVersion, -14, 5);\n   *\n   *   describe('The text \"webgl\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.webglVersion = P2D;\n\n  /**\n   * A `Number` variable that stores the width of the screen display.\n   *\n   * `displayWidth` is useful for running full-screen programs. Its value\n   * depends on the current <a href=\"#/p5/pixelDensity\">pixelDensity()</a>.\n   *\n   * Note: The actual screen width can be computed as\n   * `displayWidth * pixelDensity()`.\n   *\n   * @property {Number} displayWidth\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the display's dimensions.\n   *   createCanvas(displayWidth, displayHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that is the same size as the display.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.displayWidth = screen.width;\n\n  /**\n   * A `Number` variable that stores the height of the screen display.\n   *\n   * `displayHeight` is useful for running full-screen programs. Its value\n   * depends on the current <a href=\"#/p5/pixelDensity\">pixelDensity()</a>.\n   *\n   * Note: The actual screen height can be computed as\n   * `displayHeight * pixelDensity()`.\n   *\n   * @property {Number} displayHeight\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the display's dimensions.\n   *   createCanvas(displayWidth, displayHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that is the same size as the display.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.displayHeight = screen.height;\n\n  /**\n   * A `Number` variable that stores the width of the browser's viewport.\n   *\n   * The <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport\" target=\"_blank\">layout viewport</a>\n   * is the area within the browser that's available for drawing.\n   *\n   * @property {Number} windowWidth\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the browser's dimensions.\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.windowWidth = 0;\n\n  /**\n   * A `Number` variable that stores the height of the browser's viewport.\n   *\n   * The <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport\" target=\"_blank\">layout viewport</a>\n   * is the area within the browser that's available for drawing.\n   *\n   * @property {Number} windowHeight\n   * @readOnly\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Set the canvas' width and height\n   *   // using the browser's dimensions.\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.windowHeight = 0;\n\n  /**\n   * A function that's called when the browser window is resized.\n   *\n   * Code placed in the body of `windowResized()` will run when the\n   * browser window's size changes. It's a good place to call\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> or make other\n   * adjustments to accommodate the new window size.\n   *\n   * The `event` parameter is optional. If added to the function declaration, it\n   * can be used for debugging or other purposes.\n   *\n   * @method windowResized\n   * @param {UIEvent} [event] optional resize Event.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(windowWidth, windowHeight);\n   *\n   *   describe('A gray canvas with a white circle at its center. The canvas takes up the entire browser window. It changes size to match the browser window.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a circle at the center.\n   *   circle(width / 2, height / 2, 50);\n   * }\n   *\n   * // Resize the canvas when the\n   * // browser's size changes.\n   * function windowResized() {\n   *   resizeCanvas(windowWidth, windowHeight);\n   * }\n   * </code>\n   * </div>\n   * @alt\n   * This example does not render anything.\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(windowWidth, windowHeight);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   describe('A gray canvas that takes up the entire browser window. It changes size to match the browser window.');\n   * }\n   *\n   * function windowResized(event) {\n   *   // Resize the canvas when the\n   *   // browser's size changes.\n   *   resizeCanvas(windowWidth, windowHeight);\n   *\n   *   // Print the resize event to the console for debugging.\n   *   print(event);\n   * }\n   * </code>\n   * </div>\n   * @alt\n   * This example does not render anything.\n   */\n  fn._onresize = function(e) {\n    this.windowWidth = getWindowWidth();\n    this.windowHeight = getWindowHeight();\n    const context = this._isGlobal ? window : this;\n    let executeDefault;\n    if (typeof context.windowResized === 'function') {\n      executeDefault = context.windowResized(e);\n      if (executeDefault !== undefined && !executeDefault) {\n        e.preventDefault();\n      }\n    }\n  };\n\n  function getWindowWidth() {\n    return (\n      window.innerWidth ||\n      (document.documentElement && document.documentElement.clientWidth) ||\n      (document.body && document.body.clientWidth) ||\n      0\n    );\n  }\n\n  function getWindowHeight() {\n    return (\n      window.innerHeight ||\n      (document.documentElement && document.documentElement.clientHeight) ||\n      (document.body && document.body.clientHeight) ||\n      0\n    );\n  }\n\n  /**\n   * Called upon each p5 instantiation instead of module import due to the\n   * possibility of the window being resized when no sketch is active.\n   */\n  fn._updateWindowSize = function() {\n    this.windowWidth = getWindowWidth();\n    this.windowHeight = getWindowHeight();\n  };\n\n  /**\n   * A `Number` variable that stores the width of the canvas in pixels.\n   *\n   * `width`'s default value is 100. Calling\n   * <a href=\"#/p5/createCanvas\">createCanvas()</a> or\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> changes the value of\n   * `width`. Calling <a href=\"#/p5/noCanvas\">noCanvas()</a> sets its value to\n   * 0.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(50, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 21, 54);\n   *\n   *   describe('The number 50 written in black on a gray rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' width.\n   *   text(width, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');\n   * }\n   *\n   * // If the mouse is pressed, reisze\n   * // the canvas and display its new\n   * // width.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     resizeCanvas(50, 100);\n   *     background(200);\n   *     text(width, 21, 54);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * @property {Number} width\n   * @readOnly\n   */\n  Object.defineProperty(fn, 'width', {\n    get(){\n      return this._renderer.width;\n    }\n  });\n\n  /**\n   * A `Number` variable that stores the height of the canvas in pixels.\n   *\n   * `height`'s default value is 100. Calling\n   * <a href=\"#/p5/createCanvas\">createCanvas()</a> or\n   * <a href=\"#/p5/resizeCanvas\">resizeCanvas()</a> changes the value of\n   * `height`. Calling <a href=\"#/p5/noCanvas\">noCanvas()</a> sets its value to\n   * 0.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 50);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 27);\n   *\n   *   describe('The number 50 written in black on a gray rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Display the canvas' height.\n   *   text(height, 42, 54);\n   *\n   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');\n   * }\n   *\n   * // If the mouse is pressed, reisze\n   * // the canvas and display its new\n   * // height.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     resizeCanvas(100, 50);\n   *     background(200);\n   *     text(height, 42, 27);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * @property {Number} height\n   * @readOnly\n   */\n  Object.defineProperty(fn, 'height', {\n    get(){\n      return this._renderer.height;\n    }\n  });\n\n  /**\n   * Toggles full-screen mode or returns the current mode.\n   *\n   * Calling `fullscreen(true)` makes the sketch full-screen. Calling\n   * `fullscreen(false)` makes the sketch its original size.\n   *\n   * Calling `fullscreen()` without an argument returns `true` if the sketch\n   * is in full-screen mode and `false` if not.\n   *\n   * Note: Due to browser restrictions, `fullscreen()` can only be called with\n   * user input such as a mouse press.\n   *\n   * @method fullscreen\n   * @param  {Boolean} [val] whether the sketch should be in fullscreen mode.\n   * @return {Boolean} current fullscreen state.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   describe('A gray canvas that switches between default and full-screen display when clicked.');\n   * }\n   *\n   * // If the mouse is pressed,\n   * // toggle full-screen mode.\n   * function mousePressed() {\n   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   *     let fs = fullscreen();\n   *     fullscreen(!fs);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.fullscreen = function(val) {\n    // p5._validateParameters('fullscreen', arguments);\n    // no arguments, return fullscreen or not\n    if (typeof val === 'undefined') {\n      return (\n        document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        document.mozFullScreenElement ||\n        document.msFullscreenElement\n      );\n    } else {\n      // otherwise set to fullscreen or not\n      if (val) {\n        launchFullscreen(document.documentElement);\n      } else {\n        exitFullscreen();\n      }\n    }\n  };\n\n  /**\n   * Sets the pixel density or returns the current density.\n   *\n   * Computer displays are grids of little lights called <em>pixels</em>. A\n   * display's <em>pixel density</em> describes how many pixels it packs into an\n   * area. Displays with smaller pixels have a higher pixel density and create\n   * sharper images.\n   *\n   * `pixelDensity()` sets the pixel scaling for high pixel density displays.\n   * By default, the pixel density is set to match the display's density.\n   * Calling `pixelDensity(1)` turn this off.\n   *\n   * Calling `pixelDensity()` without an argument returns the current pixel\n   * density.\n   *\n   * @method pixelDensity\n   * @param  {Number} [val] desired pixel density.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 1.\n   *   pixelDensity(1);\n   *\n   *   // Create a canvas and draw\n   *   // a circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A fuzzy white circle on a gray canvas.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 3.\n   *   pixelDensity(3);\n   *\n   *   // Create a canvas, paint the\n   *   // background, and draw a\n   *   // circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A sharp white circle on a gray canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method pixelDensity\n   * @returns {Number} current pixel density of the sketch.\n   */\n  fn.pixelDensity = function(val) {\n    // p5._validateParameters('pixelDensity', arguments);\n    let returnValue;\n    if (typeof val === 'number') {\n      if (val !== this._renderer._pixelDensity) {\n        this._renderer._pixelDensity = val;\n      }\n      returnValue = this;\n      this.resizeCanvas(this.width, this.height, true); // as a side effect, it will clear the canvas\n    } else {\n      returnValue = this._renderer._pixelDensity;\n    }\n    return returnValue;\n  };\n\n  /**\n   * Returns the display's current pixel density.\n   *\n   * @method displayDensity\n   * @returns {Number} current pixel density of the display.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Set the pixel density to 1.\n   *   pixelDensity(1);\n   *\n   *   // Create a canvas and draw\n   *   // a circle.\n   *   createCanvas(100, 100);\n   *   background(200);\n   *   circle(50, 50, 70);\n   *\n   *   describe('A fuzzy white circle drawn on a gray background. The circle becomes sharper when the mouse is pressed.');\n   * }\n   *\n   * function mousePressed() {\n   *   // Get the current display density.\n   *   let d = displayDensity();\n   *\n   *   // Use the display density to set\n   *   // the sketch's pixel density.\n   *   pixelDensity(d);\n   *\n   *   // Paint the background and\n   *   // draw a circle.\n   *   background(200);\n   *   circle(50, 50, 70);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.displayDensity = () => window.devicePixelRatio;\n\n  function launchFullscreen(element) {\n    const enabled =\n      document.fullscreenEnabled ||\n      document.webkitFullscreenEnabled ||\n      document.mozFullScreenEnabled ||\n      document.msFullscreenEnabled;\n    if (!enabled) {\n      throw new Error('Fullscreen not enabled in this browser.');\n    }\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) {\n      element.msRequestFullscreen();\n    }\n  }\n\n  function exitFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    }\n  }\n\n  /**\n   * Returns the sketch's current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL\" target=\"_blank\">URL</a>\n   * as a `String`.\n   *\n   * @method getURL\n   * @return {String} url\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL\n   *   // and display it.\n   *   let url = getURL();\n   *   textWrap(CHAR);\n   *   text(url, 0, 40, 100);\n   *\n   *   describe('The URL \"https://p5js.org/reference/p5/getURL\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getURL = () => location.href;\n\n  /**\n   * Returns the current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#path_to_resource\" target=\"_blank\">URL</a>\n   * path as an `Array` of `String`s.\n   *\n   * For example, consider a sketch hosted at the URL\n   * `https://example.com/sketchbook`. Calling `getURLPath()` returns\n   * `['sketchbook']`. For a sketch hosted at the URL\n   * `https://example.com/sketchbook/monday`, `getURLPath()` returns\n   * `['sketchbook', 'monday']`.\n   *\n   * @method getURLPath\n   * @return {String[]} path components.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL path\n   *   // and display the first\n   *   // part.\n   *   let path = getURLPath();\n   *   text(path[0], 25, 54);\n   *\n   *   describe('The word \"reference\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.getURLPath = () =>\n    location.pathname.split('/').filter(v => v !== '');\n\n  /**\n   * Returns the current\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#parameters\" target=\"_blank\">URL parameters</a>\n   * in an `Object`.\n   *\n   * For example, calling `getURLParams()` in a sketch hosted at the URL\n   * `https://p5js.org?year=2014&month=May&day=15` returns\n   * `{ year: 2014, month: 'May', day: 15 }`.\n   *\n   * @method getURLParams\n   * @return {Object} URL params\n   * @example\n   * <div class='norender notest'>\n   * <code>\n   * // Imagine this sketch is hosted at the following URL:\n   * // https://p5js.org?year=2014&month=May&day=15\n   *\n   * function setup() {\n   *   background(200);\n   *\n   *   // Get the sketch's URL\n   *   // parameters and display\n   *   // them.\n   *   let params = getURLParams();\n   *   text(params.day, 10, 20);\n   *   text(params.month, 10, 40);\n   *   text(params.year, 10, 60);\n   *\n   *   describe('The text \"15\", \"May\", and \"2014\" written in black on separate lines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @alt\n   * This example does not render anything.\n   */\n  fn.getURLParams = function() {\n    const re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;\n    let m;\n    const v = {};\n    while ((m = re.exec(location.search)) != null) {\n      if (m.index === re.lastIndex) {\n        re.lastIndex++;\n      }\n      v[m[1]] = m[2];\n    }\n    return v;\n  };\n\n  /**\n   * Converts 3D world coordinates to 2D screen coordinates.\n   *\n   * This function takes a 3D vector and converts its coordinates\n   * from the world space to screen space. This can be useful for placing\n   * 2D elements in a 3D scene or for determining the screen position\n   * of 3D objects.\n   *\n   * @method worldToScreen\n   * @param {Number|p5.Vector} x The x coordinate in world space. (Or a vector for all three coordinates.)\n   * @param {Number} y The y coordinate in world space.\n   * @param {Number} [z] The z coordinate in world space.\n   * @return {p5.Vector} A vector containing the 2D screen coordinates.\n   * @example\n   * <div>\n   * <code>\n   *\n   * function setup() {\n   *   createCanvas(150, 150);\n   *   let vertices = [\n   *     createVector(-20, -20),\n   *     createVector(20, -20),\n   *     createVector(20, 20),\n   *     createVector(-20, 20)\n   *   ];\n   *\n   *   push();\n   *   translate(75, 55);\n   *   rotate(PI / 4);\n   *\n   *   // Convert world coordinates to screen coordinates\n   *   let screenPos = vertices.map(v => worldToScreen(v));\n   *   pop();\n   *\n   *   background(200);\n   *\n   *   stroke(0);\n   *   fill(100, 150, 255, 100);\n   *   beginShape();\n   *   screenPos.forEach(pos => vertex(pos.x, pos.y));\n   *   endShape(CLOSE);\n   *\n   *   screenPos.forEach((pos, i) => {\n   *     fill(0);\n   *     textSize(10);\n   *     if (i === 0) {\n   *       text(i + 1, pos.x + 3, pos.y - 7);\n   *     } else if (i === 1) {\n   *       text(i + 1, pos.x + 7, pos.y + 2);\n   *     } else if (i === 2) {\n   *       text(i + 1, pos.x - 2, pos.y + 12);\n   *     } else if (i === 3) {\n   *       text(i + 1, pos.x - 12, pos.y - 2);\n   *     }\n   *   });\n   *\n   *   fill(0);\n   *   noStroke();\n   *   textSize(10);\n   *   let legendY = height - 35;\n   *   screenPos.forEach((pos, i) => {\n   *     text(`Vertex ${i + 1}: (${pos.x.toFixed(1)}, ${pos.y.toFixed(1)})`, 5, legendY + i * 10);\n   *   });\n   *\n   *   describe('A rotating square is transformed and drawn using screen coordinates.');\n   *\n   * }\n   * </code>\n   * </div>\n   *\n   * @example\n   * <div>\n   * <code>\n   * let vertices;\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *   vertices = [\n   *     createVector(-25, -25, -25),\n   *     createVector(25, -25, -25),\n   *     createVector(25, 25, -25),\n   *     createVector(-25, 25, -25),\n   *     createVector(-25, -25, 25),\n   *     createVector(25, -25, 25),\n   *     createVector(25, 25, 25),\n   *     createVector(-25, 25, 25)\n   *   ];\n   *\n   *   describe('A rotating cube with points mapped to 2D screen space and displayed as ellipses.');\n   *\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Animate rotation\n   *   let rotationX = millis() / 1000;\n   *   let rotationY = millis() / 1200;\n   *\n   *   push();\n   *\n   *   rotateX(rotationX);\n   *   rotateY(rotationY);\n   *\n   *   // Convert world coordinates to screen coordinates\n   *   let screenPos = vertices.map(v => worldToScreen(v));\n   *\n   *   pop();\n   *\n   *   screenPos.forEach((pos, i) => {\n   *\n   *     let screenX = pos.x - width / 2;\n   *     let screenY = pos.y - height / 2;\n   *     fill(0);\n   *     noStroke();\n   *     ellipse(screenX, screenY, 3, 3);\n   *   });\n   * }\n   * </code>\n   * </div>\n   *\n   */\n  fn.worldToScreen = function(worldPosition) {\n    if (typeof worldPosition === \"number\") {\n      // We got passed numbers, convert to vector\n      worldPosition = this.createVector(...arguments);\n    }\n\n    const matrix = this._renderer.getWorldToScreenMatrix();\n    const screenPosition = matrix.multiplyAndNormalizePoint(worldPosition);\n    return screenPosition;\n  };\n  /**\n   * Converts 2D screen coordinates to 3D world coordinates.\n   *\n   * This function takes a vector and converts its coordinates from coordinates\n   * on the screen to coordinates in the currently drawn object. This can be\n   * useful for determining the mouse position relative to a 2D or 3D object.\n   *\n   * If given, the Z component of the input coordinates is treated as \"depth\",\n   * or distance from the camera.\n   *\n   * @method screenToWorld\n   * @param {Number|p5.Vector} x The x coordinate in screen space. (Or a vector for all three coordinates.)\n   * @param {Number} y The y coordinate in screen space.\n   * @param {Number} [z] The z coordinate in screen space.\n   * @return {p5.Vector} A vector containing the 3D world space coordinates.\n   * @example\n   * <div>\n   * <code>\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   describe('A rotating square with a line passing through the mouse drawn across it.');\n   * }\n   *\n   * function draw() {\n   *   background(220);\n   *\n   *   // Move to center and rotate\n   *   translate(width/2, height/2);\n   *   rotate(millis() / 1000);\n   *   rect(-30, -30, 60);\n   *\n   *   // Compute the location of the mouse in the coordinates of the square\n   *   let localMouse = screenToWorld(createVector(mouseX, mouseY));\n   *\n   *   // Draw a line parallel to the local Y axis, passing through the mouse\n   *   line(localMouse.x, -30, localMouse.x, 30);\n   * }\n   *\n   * </code>\n   * </div>\n   *\n   */\n  fn.screenToWorld = function(screenPosition) {\n    if (typeof screenPosition === \"number\") {\n      // We got passed numbers, convert to vector\n      screenPosition = this.createVector(...arguments);\n    }\n\n    const matrix = this._renderer.getWorldToScreenMatrix();\n\n    if (screenPosition.dimensions == 2) {\n      // Calculate a sensible Z value for the current camera projection that\n      // will result in 0 once converted to world coordinates\n      let z = matrix.mat4[14] / matrix.mat4[15];\n      screenPosition = this.createVector(screenPosition.x, screenPosition.y, z);\n    }\n\n    const matrixInverse = matrix.invert(matrix);\n\n    const worldPosition = matrixInverse.multiplyAndNormalizePoint(screenPosition);\n    return worldPosition;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  environment(p5, p5.prototype);\n}\n\nexport { environment as default };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,KAAK,EAAEC,CAAC,IAAIC,KAAK,EAAEC,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,IAAI,EAAEC,CAAC,IAAIC,GAAG,QAAQ,0BAA0B;AACvH,OAAO,sBAAsB;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,WAAWA,CAACC,EAAE,EAAEC,EAAE,EAAC;EAC1B,MAAMC,eAAe,GAAG,CAAChB,KAAK,EAAEE,KAAK,EAAEE,IAAI,EAAEE,IAAI,EAAEE,IAAI,EAAEE,IAAI,CAAC;EAE9DK,EAAE,CAACE,UAAU,GAAG,CAAC;EACjBF,EAAE,CAACG,cAAc,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC;EAC5CN,EAAE,CAACO,gBAAgB,GAAG,EAAE;EAExB,MAAMC,YAAY,GAAGJ,MAAM,CAACK,KAAK;EACjC,IAAIC,mBAAmB,GAAG,KAAK;;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEV,EAAE,CAACS,KAAK,GAAG,UAAS,GAAGE,IAAI,EAAE;IAC3B,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;MAChB,IAAI,CAACF,mBAAmB,EAAE;QACxBF,YAAY,CAAC,CAAC;QACd,IACEJ,MAAM,CAACS,OAAO,CACZ,sFACF,CAAC,EACD;UACAH,mBAAmB,GAAG,IAAI;QAC5B;MACF;IACF,CAAC,MAAM;MACLI,OAAO,CAACC,GAAG,CAAC,GAAGJ,IAAI,CAAC;IACtB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEX,EAAE,CAACgB,UAAU,GAAG,CAAC;;EAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhB,EAAE,CAACiB,SAAS,GAAG,CAAC;;EAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,CAACkB,OAAO,GAAGC,QAAQ,CAACC,QAAQ,CAAC,CAAC;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,EAAE,CAACqB,MAAM,GAAG,UAASC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC/B,IAAIH,MAAM,GAAG,MAAM;IACnB,MAAMI,MAAM,GAAG,IAAI,CAACC,WAAW,CAACC,GAAG;IACnC,IAAI1B,eAAe,CAAC2B,QAAQ,CAACN,IAAI,CAAC,EAAE;MAClC;MACAD,MAAM,GAAGC,IAAI;IACf,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACnC,IAAIO,MAAM,GAAG,EAAE;MACf,IAAIN,CAAC,IAAIC,CAAC,IAAK,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAS,EAAE;QAC9D;QACA;QACAK,MAAM,GAAG,GAAGN,CAAC,IAAIC,CAAC,EAAE;MACtB;MACA,IACEF,IAAI,CAACQ,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,IAClCR,IAAI,CAACQ,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,UAAU,EACnC;QACA;QACAT,MAAM,GAAG,OAAOC,IAAI,KAAKO,MAAM,QAAQ;MACzC,CAAC,MAAM,IAAI,gDAAgD,CAACE,IAAI,CAACT,IAAI,CAAC,EAAE;QACtE;QACAD,MAAM,GAAG,OAAOC,IAAI,KAAKO,MAAM,QAAQ;MACzC,CAAC,MAAM;QACL;QACAR,MAAM,GAAGC,IAAI;MACf;IACF;IACAG,MAAM,CAACO,KAAK,CAACX,MAAM,GAAGA,MAAM;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACErB,EAAE,CAACiC,SAAS,GAAG,UAASC,GAAG,EAAE;IAC3B;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,GAAG,CAAC,EAAE;MACtC,OAAO,IAAI,CAAChC,UAAU;IACxB,CAAC,MAAM;MACL,IAAI,CAACK,gBAAgB,GAAG2B,GAAG;MAC3B,IAAIA,GAAG,KAAK,CAAC,EAAE;QACb,IAAI,CAAChC,UAAU,GAAGgC,GAAG;MACvB;MACA,OAAO,IAAI;IACb;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACElC,EAAE,CAACmC,YAAY,GAAG,YAAW;IAC3B,OAAO,IAAI,CAACF,SAAS,CAAC,CAAC;EACzB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjC,EAAE,CAACoC,YAAY,GAAG,UAASF,GAAG,EAAE;IAC9B,OAAO,IAAI,CAACD,SAAS,CAACC,GAAG,CAAC;EAC5B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElC,EAAE,CAACqC,kBAAkB,GAAG,YAAW;IACjC,OAAO,IAAI,CAAC9B,gBAAgB;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEP,EAAE,CAACsC,QAAQ,GAAG,YAAW;IACvB,IAAI,CAACZ,WAAW,CAACC,GAAG,CAACK,KAAK,CAACX,MAAM,GAAG,MAAM;EAC5C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErB,EAAE,CAACuC,YAAY,GAAG1C,GAAG;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,EAAE,CAACwC,YAAY,GAAGC,MAAM,CAACC,KAAK;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE1C,EAAE,CAAC2C,aAAa,GAAGF,MAAM,CAACG,MAAM;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5C,EAAE,CAAC6C,WAAW,GAAG,CAAC;;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7C,EAAE,CAAC8C,YAAY,GAAG,CAAC;;EAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE9C,EAAE,CAAC+C,SAAS,GAAG,UAASC,CAAC,EAAE;IACzB,IAAI,CAACH,WAAW,GAAGI,cAAc,CAAC,CAAC;IACnC,IAAI,CAACH,YAAY,GAAGI,eAAe,CAAC,CAAC;IACrC,MAAMC,OAAO,GAAG,IAAI,CAACC,SAAS,GAAGhD,MAAM,GAAG,IAAI;IAC9C,IAAIiD,cAAc;IAClB,IAAI,OAAOF,OAAO,CAACG,aAAa,KAAK,UAAU,EAAE;MAC/CD,cAAc,GAAGF,OAAO,CAACG,aAAa,CAACN,CAAC,CAAC;MACzC,IAAIK,cAAc,KAAKE,SAAS,IAAI,CAACF,cAAc,EAAE;QACnDL,CAAC,CAACQ,cAAc,CAAC,CAAC;MACpB;IACF;EACF,CAAC;EAED,SAASP,cAAcA,CAAA,EAAG;IACxB,OACE7C,MAAM,CAACqD,UAAU,IAChBtC,QAAQ,CAACuC,eAAe,IAAIvC,QAAQ,CAACuC,eAAe,CAACC,WAAY,IACjExC,QAAQ,CAACyC,IAAI,IAAIzC,QAAQ,CAACyC,IAAI,CAACD,WAAY,IAC5C,CAAC;EAEL;EAEA,SAAST,eAAeA,CAAA,EAAG;IACzB,OACE9C,MAAM,CAACyD,WAAW,IACjB1C,QAAQ,CAACuC,eAAe,IAAIvC,QAAQ,CAACuC,eAAe,CAACI,YAAa,IAClE3C,QAAQ,CAACyC,IAAI,IAAIzC,QAAQ,CAACyC,IAAI,CAACE,YAAa,IAC7C,CAAC;EAEL;;EAEA;AACF;AACA;AACA;EACE9D,EAAE,CAAC+D,iBAAiB,GAAG,YAAW;IAChC,IAAI,CAAClB,WAAW,GAAGI,cAAc,CAAC,CAAC;IACnC,IAAI,CAACH,YAAY,GAAGI,eAAe,CAAC,CAAC;EACvC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,MAAM,CAACC,cAAc,CAACjE,EAAE,EAAE,OAAO,EAAE;IACjCkE,GAAGA,CAAA,EAAE;MACH,OAAO,IAAI,CAACC,SAAS,CAACzB,KAAK;IAC7B;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,MAAM,CAACC,cAAc,CAACjE,EAAE,EAAE,QAAQ,EAAE;IAClCkE,GAAGA,CAAA,EAAE;MACH,OAAO,IAAI,CAACC,SAAS,CAACvB,MAAM;IAC9B;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5C,EAAE,CAACoE,UAAU,GAAG,UAASC,GAAG,EAAE;IAC5B;IACA;IACA,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;MAC9B,OACElD,QAAQ,CAACmD,iBAAiB,IAC1BnD,QAAQ,CAACoD,uBAAuB,IAChCpD,QAAQ,CAACqD,oBAAoB,IAC7BrD,QAAQ,CAACsD,mBAAmB;IAEhC,CAAC,MAAM;MACL;MACA,IAAIJ,GAAG,EAAE;QACPK,gBAAgB,CAACvD,QAAQ,CAACuC,eAAe,CAAC;MAC5C,CAAC,MAAM;QACLiB,cAAc,CAAC,CAAC;MAClB;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACE3E,EAAE,CAAC4E,YAAY,GAAG,UAASP,GAAG,EAAE;IAC9B;IACA,IAAIQ,WAAW;IACf,IAAI,OAAOR,GAAG,KAAK,QAAQ,EAAE;MAC3B,IAAIA,GAAG,KAAK,IAAI,CAACF,SAAS,CAACW,aAAa,EAAE;QACxC,IAAI,CAACX,SAAS,CAACW,aAAa,GAAGT,GAAG;MACpC;MACAQ,WAAW,GAAG,IAAI;MAClB,IAAI,CAACE,YAAY,CAAC,IAAI,CAACrC,KAAK,EAAE,IAAI,CAACE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC,MAAM;MACLiC,WAAW,GAAG,IAAI,CAACV,SAAS,CAACW,aAAa;IAC5C;IACA,OAAOD,WAAW;EACpB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7E,EAAE,CAACgF,cAAc,GAAG,MAAM5E,MAAM,CAAC6E,gBAAgB;EAEjD,SAASP,gBAAgBA,CAACQ,OAAO,EAAE;IACjC,MAAMC,OAAO,GACXhE,QAAQ,CAACiE,iBAAiB,IAC1BjE,QAAQ,CAACkE,uBAAuB,IAChClE,QAAQ,CAACmE,oBAAoB,IAC7BnE,QAAQ,CAACoE,mBAAmB;IAC9B,IAAI,CAACJ,OAAO,EAAE;MACZ,MAAM,IAAIK,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,IAAIN,OAAO,CAACO,iBAAiB,EAAE;MAC7BP,OAAO,CAACO,iBAAiB,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIP,OAAO,CAACQ,oBAAoB,EAAE;MACvCR,OAAO,CAACQ,oBAAoB,CAAC,CAAC;IAChC,CAAC,MAAM,IAAIR,OAAO,CAACS,uBAAuB,EAAE;MAC1CT,OAAO,CAACS,uBAAuB,CAAC,CAAC;IACnC,CAAC,MAAM,IAAIT,OAAO,CAACU,mBAAmB,EAAE;MACtCV,OAAO,CAACU,mBAAmB,CAAC,CAAC;IAC/B;EACF;EAEA,SAASjB,cAAcA,CAAA,EAAG;IACxB,IAAIxD,QAAQ,CAACwD,cAAc,EAAE;MAC3BxD,QAAQ,CAACwD,cAAc,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAIxD,QAAQ,CAAC0E,mBAAmB,EAAE;MACvC1E,QAAQ,CAAC0E,mBAAmB,CAAC,CAAC;IAChC,CAAC,MAAM,IAAI1E,QAAQ,CAAC2E,oBAAoB,EAAE;MACxC3E,QAAQ,CAAC2E,oBAAoB,CAAC,CAAC;IACjC,CAAC,MAAM,IAAI3E,QAAQ,CAAC4E,gBAAgB,EAAE;MACpC5E,QAAQ,CAAC4E,gBAAgB,CAAC,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE/F,EAAE,CAACgG,MAAM,GAAG,MAAMC,QAAQ,CAACC,IAAI;;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElG,EAAE,CAACmG,UAAU,GAAG,MACdF,QAAQ,CAACG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC;;EAEpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEvG,EAAE,CAACwG,YAAY,GAAG,YAAW;IAC3B,MAAMC,EAAE,GAAG,iCAAiC;IAC5C,IAAIC,CAAC;IACL,MAAMH,CAAC,GAAG,CAAC,CAAC;IACZ,OAAO,CAACG,CAAC,GAAGD,EAAE,CAACE,IAAI,CAACV,QAAQ,CAACW,MAAM,CAAC,KAAK,IAAI,EAAE;MAC7C,IAAIF,CAAC,CAACG,KAAK,KAAKJ,EAAE,CAACK,SAAS,EAAE;QAC5BL,EAAE,CAACK,SAAS,EAAE;MAChB;MACAP,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IAChB;IACA,OAAOH,CAAC;EACV,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEvG,EAAE,CAAC+G,aAAa,GAAG,UAASC,aAAa,EAAE;IACzC,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;MACrC;MACAA,aAAa,GAAG,IAAI,CAACC,YAAY,CAAC,GAAGC,SAAS,CAAC;IACjD;IAEA,MAAMC,MAAM,GAAG,IAAI,CAAChD,SAAS,CAACiD,sBAAsB,CAAC,CAAC;IACtD,MAAMC,cAAc,GAAGF,MAAM,CAACG,yBAAyB,CAACN,aAAa,CAAC;IACtE,OAAOK,cAAc;EACvB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErH,EAAE,CAACuH,aAAa,GAAG,UAASF,cAAc,EAAE;IAC1C,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;MACtC;MACAA,cAAc,GAAG,IAAI,CAACJ,YAAY,CAAC,GAAGC,SAAS,CAAC;IAClD;IAEA,MAAMC,MAAM,GAAG,IAAI,CAAChD,SAAS,CAACiD,sBAAsB,CAAC,CAAC;IAEtD,IAAIC,cAAc,CAACG,UAAU,IAAI,CAAC,EAAE;MAClC;MACA;MACA,IAAIC,CAAC,GAAGN,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC,GAAGP,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC;MACzCL,cAAc,GAAG,IAAI,CAACJ,YAAY,CAACI,cAAc,CAAC9F,CAAC,EAAE8F,cAAc,CAAC7F,CAAC,EAAEiG,CAAC,CAAC;IAC3E;IAEA,MAAME,aAAa,GAAGR,MAAM,CAACS,MAAM,CAACT,MAAM,CAAC;IAE3C,MAAMH,aAAa,GAAGW,aAAa,CAACL,yBAAyB,CAACD,cAAc,CAAC;IAC7E,OAAOL,aAAa;EACtB,CAAC;AACH;AAEA,IAAG,OAAOjH,EAAE,KAAK,WAAW,EAAC;EAC3BD,WAAW,CAACC,EAAE,EAAEA,EAAE,CAAC8H,SAAS,CAAC;AAC/B;AAEA,SAAS/H,WAAW,IAAIgI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}