{"ast":null,"code":"import { Element } from './p5.Element.js';\nimport './p5.File.js';\nimport '../io/p5.XML.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-BRcElHU3.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\nclass MediaElement extends Element {\n  constructor(elt, pInst) {\n    super(elt, pInst);\n    const self = this;\n    this.elt.crossOrigin = 'anonymous';\n    this._prevTime = 0;\n    this._cueIDCounter = 0;\n    this._cues = [];\n    this.pixels = [];\n    this._pixelsState = this;\n    this._pixelDensity = 1;\n    this._modified = false;\n\n    // Media has an internal canvas that is used when drawing it to the main\n    // canvas. It will need to be updated each frame as the video itself plays.\n    // We don't want to update it every time we draw, however, in case the user\n    // has used load/updatePixels. To handle this, we record the frame drawn to\n    // the internal canvas so we only update it if the frame has changed.\n    this._frameOnCanvas = -1;\n    Object.defineProperty(self, 'src', {\n      get() {\n        const firstChildSrc = self.elt.children[0].src;\n        const srcVal = self.elt.src === window.location.href ? '' : self.elt.src;\n        const ret = firstChildSrc === window.location.href ? srcVal : firstChildSrc;\n        return ret;\n      },\n      set(newValue) {\n        for (let i = 0; i < self.elt.children.length; i++) {\n          self.elt.removeChild(self.elt.children[i]);\n        }\n        const source = document.createElement('source');\n        source.src = newValue;\n        elt.appendChild(source);\n        self.elt.src = newValue;\n        self.modified = true;\n      }\n    });\n\n    // private _onended callback, set by the method: onended(callback)\n    self._onended = function () {};\n    self.elt.onended = function () {\n      self._onended(self);\n    };\n  }\n\n  /**\n   * Plays audio or video from a media element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display a message.\n   *   text('Click to play', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks the square.');\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   beat.play();\n   * }\n   * </code>\n   * </div>\n   */\n  play() {\n    if (this.elt.currentTime === this.elt.duration) {\n      this.elt.currentTime = 0;\n    }\n    let promise;\n    if (this.elt.readyState > 1) {\n      promise = this.elt.play();\n    } else {\n      // in Chrome, playback cannot resume after being stopped and must reload\n      this.elt.load();\n      promise = this.elt.play();\n    }\n    if (promise && promise.catch) {\n      promise.catch(e => {\n        // if it's an autoplay failure error\n        if (e.name === 'NotAllowedError') {\n          if (typeof IS_MINIFIED === 'undefined') {\n            p5._friendlyAutoplayError(this.src);\n          } else {\n            console.error(e);\n          }\n        } else {\n          // any other kind of error\n          console.error('Media play method encountered an unexpected error', e);\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Stops a media element and sets its current time to 0.\n   *\n   * Calling `media.play()` will restart playing audio/video from the beginning.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isStopped = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to start\" written in black on a gray background. The beat starts or stops when the user presses the mouse.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isStopped === true) {\n   *     text('Click to start', 50, 50);\n   *   } else {\n   *     text('Click to stop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isStopped === true) {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isStopped = false;\n   *   } else {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isStopped = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  stop() {\n    this.elt.pause();\n    this.elt.currentTime = 0;\n    return this;\n  }\n\n  /**\n   * Pauses a media element.\n   *\n   * Calling `media.play()` will resume playing audio/video from the moment it paused.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPaused = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. The beat plays or pauses when the user clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPaused === true) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Click to pause', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPaused === true) {\n   *     // If the beat is paused,\n   *     // play it.\n   *     beat.play();\n   *     isPaused = false;\n   *   } else {\n   *     // If the beat is playing,\n   *     // pause it.\n   *     beat.pause();\n   *     isPaused = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  pause() {\n    this.elt.pause();\n    return this;\n  }\n\n  /**\n   * Plays the audio/video repeatedly in a loop.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isLooping = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to loop\" written in black on a gray background. A beat plays repeatedly in a loop when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isLooping === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to loop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isLooping === true) {\n   *     // If the beat is looping, stop it.\n   *     beat.stop();\n   *     isLooping = false;\n   *   } else {\n   *     // If the beat is stopped, loop it.\n   *     beat.loop();\n   *     isLooping = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  loop() {\n    this.elt.setAttribute('loop', true);\n    this.play();\n    return this;\n  }\n  /**\n   * Stops the audio/video from playing in a loop.\n   *\n   * The media will stop when it finishes playing.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPlaying === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to play', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === true) {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isPlaying = false;\n   *   } else {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isPlaying = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  noLoop() {\n    this.elt.removeAttribute('loop');\n    return this;\n  }\n\n  /**\n   * Sets up logic to check that autoplay succeeded.\n   *\n   * @private\n   */\n  _setupAutoplayFailDetection() {\n    const timeout = setTimeout(() => {\n      if (typeof IS_MINIFIED === 'undefined') {\n        p5._friendlyAutoplayError(this.src);\n      } else {\n        console.error(e);\n      }\n    }, 500);\n    this.elt.addEventListener('play', () => clearTimeout(timeout), {\n      passive: true,\n      once: true\n    });\n  }\n\n  /**\n   * Sets the audio/video to play once it's loaded.\n   *\n   * The parameter, `shouldAutoplay`, is optional. Calling\n   * `media.autoplay()` without an argument causes the media to play\n   * automatically. If `true` is passed, as in `media.autoplay(true)`, the\n   * media will automatically play. If `false` is passed, as in\n   * `media.autoPlay(false)`, it won't play automatically.\n   *\n   * @param {Boolean} [shouldAutoplay] whether the element should autoplay.\n   * @chainable\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Call handleVideo() once the video loads.\n   *   video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   describe('A video of fingers walking on a treadmill.');\n   * }\n   *\n   * // Set the video's size and play it.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video, but don't play it automatically.\n   *   let video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   // Play the video when the user clicks on it.\n   *   video.mousePressed(handlePress);\n   *\n   *   describe('An image of fingers on a treadmill. They start walking when the user double-clicks on them.');\n   * }\n   * </code>\n   * </div>\n   *\n   * // Set the video's size and playback mode.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay(false);\n   * }\n   *\n   * // Play the video.\n   * function handleClick() {\n   *   video.play();\n   * }\n   */\n  autoplay(val) {\n    const oldVal = this.elt.getAttribute('autoplay');\n    this.elt.setAttribute('autoplay', val);\n    // if we turned on autoplay\n    if (val && !oldVal) {\n      // bind method to this scope\n      const setupAutoplayFailDetection = () => this._setupAutoplayFailDetection();\n      // if media is ready to play, schedule check now\n      if (this.elt.readyState === 4) {\n        setupAutoplayFailDetection();\n      } else {\n        // otherwise, schedule check whenever it is ready\n        this.elt.addEventListener('canplay', setupAutoplayFailDetection, {\n          passive: true,\n          once: true\n        });\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the audio/video volume.\n   *\n   * Calling `media.volume()` without an argument returns the current volume\n   * as a number in the range 0 (off) to 1 (maximum).\n   *\n   * The parameter, `val`, is optional. It's a number that sets the volume\n   * from 0 (off) to 1 (maximum). For example, calling `media.volume(0.5)`\n   * sets the volume to half of its maximum.\n   *\n   * @return {Number} current volume.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Volume: V\" on a gray square with media controls beneath it. The number \"V\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 1.\n   *   let n = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *\n   *   // Use n to set the volume.\n   *   dragon.volume(n);\n   *\n   *   // Get the current volume and display it.\n   *   let v = dragon.volume();\n   *\n   *   // Round v to 1 decimal place for display.\n   *   v = round(v, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the volume.\n   *   text(`Volume: ${v}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number}            val volume between 0.0 and 1.0.\n   * @chainable\n   */\n  volume(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.volume;\n    } else {\n      this.elt.volume = val;\n    }\n  }\n\n  /**\n   * Sets the audio/video playback speed.\n   *\n   * The parameter, `val`, is optional. It's a number that sets the playback\n   * speed. 1 plays the media at normal speed, 0.5 plays it at half speed, 2\n   * plays it at double speed, and so on. -1 plays the media at normal speed\n   * in reverse.\n   *\n   * Calling `media.speed()` returns the current speed as a number.\n   *\n   * Note: Not all browsers support backward playback. Even if they do,\n   * playback might not be smooth.\n   *\n   * @return {Number} current playback speed.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Speed: S\" on a gray square with media controls beneath it. The number \"S\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 2.\n   *   let n = sin(frameCount * 0.01) + 1;\n   *\n   *   // Use n to set the playback speed.\n   *   dragon.speed(n);\n   *\n   *   // Get the current speed and display it.\n   *   let s = dragon.speed();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the speed.\n   *   text(`Speed: ${s}`, 50, 50);\n   * }\n   * </code>\n   */\n  /**\n   * @param {Number} speed  speed multiplier for playback.\n   * @chainable\n   */\n  speed(val) {\n    if (typeof val === 'undefined') {\n      return this.presetPlaybackRate || this.elt.playbackRate;\n    } else {\n      if (this.loadedmetadata) {\n        this.elt.playbackRate = val;\n      } else {\n        this.presetPlaybackRate = val;\n      }\n    }\n  }\n\n  /**\n   * Sets the media element's playback time.\n   *\n   * The parameter, `time`, is optional. It's a number that specifies the\n   * time, in seconds, to jump to when playback begins.\n   *\n   * Calling `media.time()` without an argument returns the number of seconds\n   * the audio/video has played.\n   *\n   * Note: Time resets to 0 when looping media restarts.\n   *\n   * @return {Number} current time (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   // Jump to 2 seconds to start.\n   *   dragon.time(2);\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number} time time to jump to (in seconds).\n   * @chainable\n   */\n  time(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.currentTime;\n    } else {\n      this.elt.currentTime = val;\n      return this;\n    }\n  }\n\n  /**\n   * Returns the audio/video's duration in seconds.\n   *\n   * @return {Number} duration (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds left\" on a gray square with media controls beneath it. The number \"S\" decreases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the time remaining.\n   *   let s = dragon.duration() - dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the time remaining.\n   *   text(`${s} seconds left`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  duration() {\n    return this.elt.duration;\n  }\n  _ensureCanvas() {\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.drawingContext = this.canvas.getContext('2d');\n      this.setModified(true);\n    }\n\n    // Don't update the canvas again if we have already updated the canvas with\n    // the current frame\n    const needsRedraw = this._frameOnCanvas !== this._pInst.frameCount;\n    if (this.loadedmetadata && needsRedraw) {\n      // wait for metadata for w/h\n      if (this.canvas.width !== this.elt.width) {\n        this.canvas.width = this.elt.width;\n        this.canvas.height = this.elt.height;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n      }\n      this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      if (this.flipped === true) {\n        this.drawingContext.save();\n        this.drawingContext.scale(-1, 1);\n        this.drawingContext.translate(-this.canvas.width, 0);\n      }\n      this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height);\n      if (this.flipped === true) {\n        this.drawingContext.restore();\n      }\n      this.setModified(true);\n      this._frameOnCanvas = this._pInst.frameCount;\n    }\n  }\n  loadPixels(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.loadPixels.apply(this, args);\n  }\n  updatePixels(x, y, w, h) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n    }\n    this.setModified(true);\n    return this;\n  }\n  get(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.get.apply(this, args);\n  }\n  _getPixel(...args) {\n    this.loadPixels();\n    return p5.Renderer2D.prototype._getPixel.apply(this, args);\n  }\n  set(x, y, imgOrCol) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n      this.setModified(true);\n    }\n  }\n  copy(...args) {\n    this._ensureCanvas();\n    fn.copy.apply(this, args);\n  }\n  mask(...args) {\n    this.loadPixels();\n    this.setModified(true);\n    p5.Image.prototype.mask.apply(this, args);\n  }\n  /**\n   * helper method for web GL mode to figure out if the element\n   * has been modified and might need to be re-uploaded to texture\n   * memory between frames.\n   * @private\n   * @return {boolean} a boolean indicating whether or not the\n   * image has been updated or modified since last texture upload.\n   */\n  isModified() {\n    return this._modified;\n  }\n  /**\n   * helper method for web GL mode to indicate that an element has been\n   * changed or unchanged since last upload. gl texture upload will\n   * set this value to false after uploading the texture; or might set\n   * it to true if metadata has become available but there is no actual\n   * texture data available yet..\n   * @param {Boolean} val sets whether or not the element has been\n   * modified.\n   * @private\n   */\n  setModified(value) {\n    this._modified = value;\n  }\n  /**\n   * Calls a function when the audio/video reaches the end of its playback.\n   *\n   * The element is passed as an argument to the callback function.\n   *\n   * Note: The function won't be called if the media is looping.\n   *\n   * @param  {Function} callback function to call when playback ends.\n   *                             The `p5.MediaElement` is passed as\n   *                             the argument.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   * let isDone = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   // Call handleEnd() when the beat finishes.\n   *   beat.onended(handleEnd);\n   *\n   *   describe('The text \"Click to play\" written in black on a gray square. A beat plays when the user clicks. The text \"Done!\" appears when the beat finishes playing.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different messages based on playback.\n   *   if (isDone === true) {\n   *     text('Done!', 50, 50);\n   *   } else if (isPlaying === false) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Playing...', 50, 50);\n   *   }\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === false) {\n   *     isPlaying = true;\n   *     beat.play();\n   *   }\n   * }\n   *\n   * // Set isDone when playback ends.\n   * function handleEnd() {\n   *   isDone = false;\n   * }\n   * </code>\n   * </div>\n   */\n  onended(callback) {\n    this._onended = callback;\n    return this;\n  }\n\n  /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/\n\n  /**\n   * Sends the element's audio to an output.\n   *\n   * The parameter, `audioNode`, can be an `AudioNode` or an object from the\n   * `p5.sound` library.\n   *\n   * If no element is provided, as in `myElement.connect()`, the element\n   * connects to the main output. All connections are removed by the\n   * `.disconnect()` method.\n   *\n   * Note: This method is meant to be used with the p5.sound.js addon library.\n   *\n   * @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n   * or an object from the p5.sound library\n   */\n  connect(obj) {\n    let audioContext, mainOutput;\n\n    // if p5.sound exists, same audio context\n    if (typeof fn.getAudioContext === 'function') {\n      audioContext = fn.getAudioContext();\n      mainOutput = p5.soundOut.input;\n    } else {\n      try {\n        audioContext = obj.context;\n        mainOutput = audioContext.destination;\n      } catch (e) {\n        throw 'connect() is meant to be used with Web Audio API or p5.sound.js';\n      }\n    }\n\n    // create a Web Audio MediaElementAudioSourceNode if none already exists\n    if (!this.audioSourceNode) {\n      this.audioSourceNode = audioContext.createMediaElementSource(this.elt);\n\n      // connect to main output when this method is first called\n      this.audioSourceNode.connect(mainOutput);\n    }\n\n    // connect to object if provided\n    if (obj) {\n      if (obj.input) {\n        this.audioSourceNode.connect(obj.input);\n      } else {\n        this.audioSourceNode.connect(obj);\n      }\n    } else {\n      // otherwise connect to main output of p5.sound / AudioContext\n      this.audioSourceNode.connect(mainOutput);\n    }\n  }\n\n  /**\n   * Disconnect all Web Audio routing, including to the main output.\n   *\n   * This is useful if you want to re-route the output through audio effects,\n   * for example.\n   *\n   */\n  disconnect() {\n    if (this.audioSourceNode) {\n      this.audioSourceNode.disconnect();\n    } else {\n      throw 'nothing to disconnect';\n    }\n  }\n\n  /*** SHOW / HIDE CONTROLS ***/\n\n  /**\n   * Show the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * Note: The controls vary between web browsers.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('cornflowerblue');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(50);\n   *\n   *   // Display a dragon.\n   *   text('🐉', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('A dragon emoji, 🐉, drawn in the center of a blue square. A song plays in the background. Audio controls are displayed beneath the canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  showControls() {\n    // must set style for the element to show on the page\n    this.elt.style['text-align'] = 'inherit';\n    this.elt.controls = true;\n  }\n\n  /**\n   * Hide the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   * let isHidden = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Double-click to hide controls\" written in the middle of a gray square. A song plays in the background. Audio controls are displayed beneath the canvas. The controls appear/disappear when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display a different message when controls are hidden or shown.\n   *   if (isHidden === true) {\n   *     text('Double-click to show controls', 10, 20, 80, 80);\n   *   } else {\n   *     text('Double-click to hide controls', 10, 20, 80, 80);\n   *   }\n   * }\n   *\n   * // Show/hide controls based on a double-click.\n   * function doubleClicked() {\n   *   if (isHidden === true) {\n   *     dragon.showControls();\n   *     isHidden = false;\n   *   } else {\n   *     dragon.hideControls();\n   *     isHidden = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hideControls() {\n    this.elt.controls = false;\n  }\n\n  /**\n   * Schedules a function to call when the audio/video reaches a specific time\n   * during its playback.\n   *\n   * The first parameter, `time`, is the time, in seconds, when the function\n   * should run. This value is passed to `callback` as its first argument.\n   *\n   * The second parameter, `callback`, is the function to call at the specified\n   * cue time.\n   *\n   * The third parameter, `value`, is optional and can be any type of value.\n   * `value` is passed to `callback`.\n   *\n   * Calling `media.addCue()` returns an ID as a string. This is useful for\n   * removing the cue later.\n   *\n   * @param {Number}   time     cue time to run the callback function.\n   * @param {Function} callback function to call at the cue time.\n   * @param {Object} [value]    object to pass as the argument to\n   *                            `callback`.\n   * @return {Number} id ID of this cue,\n   *                     useful for `media.removeCue(id)`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('A red square with a beat playing in the background. Its color changes every 2 seconds while the audio plays.');\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  addCue(time, callback, val) {\n    const id = this._cueIDCounter++;\n    const cue = new Cue(callback, time, id, val);\n    this._cues.push(cue);\n    if (!this.elt.ontimeupdate) {\n      this.elt.ontimeupdate = this._onTimeUpdate.bind(this);\n    }\n    return id;\n  }\n\n  /**\n   * Removes a callback based on its ID.\n   *\n   * @param  {Number} id ID of the cue, created by `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let lavenderID;\n   * let isRemoved = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *\n   *   // Record the ID of the \"lavender\" callback.\n   *   lavenderID = beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to remove lavender.\" written on a red square. The color changes every 2 seconds while the audio plays. The lavender option is removed when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isRemoved === false) {\n   *     text('Double-click to remove lavender.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more lavender.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove the lavender color-change cue when the user double-clicks.\n   * function doubleClicked() {\n   *   if (isRemoved === false) {\n   *     beat.removeCue(lavenderID);\n   *     isRemoved = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  removeCue(id) {\n    for (let i = 0; i < this._cues.length; i++) {\n      if (this._cues[i].id === id) {\n        console.log(id);\n        this._cues.splice(i, 1);\n      }\n    }\n    if (this._cues.length === 0) {\n      this.elt.ontimeupdate = null;\n    }\n  }\n\n  /**\n   * Removes all functions scheduled with `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let isChanging = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to stop changing.\" written on a square. The color changes every 2 seconds while the audio plays. The color stops changing when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isChanging === true) {\n   *     text('Double-click to stop changing.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more changes.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove cued functions and stop changing colors when the user\n   * // double-clicks.\n   * function doubleClicked() {\n   *   if (isChanging === true) {\n   *     beat.clearCues();\n   *     isChanging = false;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  clearCues() {\n    this._cues = [];\n    this.elt.ontimeupdate = null;\n  }\n\n  // private method that checks for cues to be fired if events\n  // have been scheduled using addCue(callback, time).\n  _onTimeUpdate() {\n    const playbackTime = this.time();\n    for (let i = 0; i < this._cues.length; i++) {\n      const callbackTime = this._cues[i].time;\n      const val = this._cues[i].val;\n      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {\n        // pass the scheduled callbackTime as parameter to the callback\n        this._cues[i].callback(val);\n      }\n    }\n    this._prevTime = playbackTime;\n  }\n}\n\n// Cue inspired by JavaScript setTimeout, and the\n// Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org\n// eslint-disable-next-line no-unused-vars\nclass Cue {\n  constructor(callback, time, id, val) {\n    this.callback = callback;\n    this.time = time;\n    this.id = id;\n    this.val = val;\n  }\n}\nfunction media(p5, fn) {\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media ? new MediaElement(elt, pInst) : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /** VIDEO STUFF **/\n\n  // Helps perform similar tasks for media element methods.\n  function createMedia(pInst, type, src, callback) {\n    const elt = document.createElement(type);\n\n    // Create source elements from given sources\n    src = src || '';\n    if (typeof src === 'string') {\n      src = [src];\n    }\n    for (const mediaSource of src) {\n      const sourceEl = document.createElement('source');\n      sourceEl.setAttribute('src', mediaSource);\n      elt.appendChild(sourceEl);\n    }\n\n    // If callback is provided, attach to element\n    if (typeof callback === 'function') {\n      const callbackHandler = () => {\n        callback();\n        elt.removeEventListener('canplaythrough', callbackHandler);\n      };\n      elt.addEventListener('canplaythrough', callbackHandler);\n    }\n    const mediaEl = addElement(elt, pInst, true);\n    mediaEl.loadedmetadata = false;\n\n    // set width and height onload metadata\n    elt.addEventListener('loadedmetadata', () => {\n      mediaEl.width = elt.videoWidth;\n      mediaEl.height = elt.videoHeight;\n\n      // set elt width and height if not set\n      if (mediaEl.elt.width === 0) mediaEl.elt.width = elt.videoWidth;\n      if (mediaEl.elt.height === 0) mediaEl.elt.height = elt.videoHeight;\n      if (mediaEl.presetPlaybackRate) {\n        mediaEl.elt.playbackRate = mediaEl.presetPlaybackRate;\n        delete mediaEl.presetPlaybackRate;\n      }\n      mediaEl.loadedmetadata = true;\n    });\n    return mediaEl;\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element for simple audio/video playback.\n   *\n   * `createVideo()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `video.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/topsecret.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/topsecret.mp4', 'assets/topsecret.ogv', 'assets/topsecret.webm']`.\n   * This is useful for ensuring that the video can play across different browsers with\n   * different capabilities. See\n   * <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the video is ready to play.\n   *\n   * @param  {String|String[]} src path to a video file, or an array of paths for\n   *                               supporting different browsers.\n   * @param  {Function} [callback] function to call once the video is ready to play.\n   * @return {p5.MediaElement}   new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Note: this may not work in some browsers.\n   *   let video = createVideo('assets/small.mp4');\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   let video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm']\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   // Call mute() once the video loads.\n   *   video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n   *     muteVideo\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   *\n   * // Mute the video once it loads.\n   * function muteVideo() {\n   *   video.volume(0);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVideo = function (src, callback) {\n    // p5._validateParameters('createVideo', arguments);\n    return createMedia(this, 'video', src, callback);\n  };\n\n  /** AUDIO STUFF **/\n\n  /**\n   * Creates a hidden `&lt;audio&gt;` element for simple audio playback.\n   *\n   * `createAudio()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/video.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/video.mp4', 'assets/video.ogv', 'assets/video.webm']`.\n   * This is useful for ensuring that the video can play across different\n   * browsers with different capabilities. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\" target=\"_blank\">MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the audio is ready to play.\n   *\n   * @param  {String|String[]} [src] path to an audio file, or an array of paths\n   *                                 for supporting different browsers.\n   * @param  {Function} [callback]   function to call once the audio is ready to play.\n   * @return {p5.MediaElement}       new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load the audio.\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Show the default audio controls.\n   *   beat.showControls();\n   *\n   *   describe('An audio beat plays when the user double-clicks the square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createAudio = function (src, callback) {\n    // p5._validateParameters('createAudio', arguments);\n    return createMedia(this, 'audio', src, callback);\n  };\n\n  /** CAMERA STUFF **/\n\n  fn.VIDEO = 'video';\n  fn.AUDIO = 'audio';\n\n  // from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element that \"captures\" the audio/video stream from\n   * the webcam and microphone.\n   *\n   * `createCapture()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `capture.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `type`, is optional. It sets the type of capture to\n   * use. By default, `createCapture()` captures both audio and video. If `VIDEO`\n   * is passed, as in `createCapture(VIDEO)`, only video will be captured.\n   * If `AUDIO` is passed, as in `createCapture(AUDIO)`, only audio will be\n   * captured. A constraints object can also be passed to customize the stream.\n   * See the <a href=\"http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints\" target=\"_blank\">\n   * W3C documentation</a> for possible properties. Different browsers support different\n   * properties.\n   *\n   * The 'flipped' property is an optional property which can be set to `{flipped:true}`\n   * to mirror the video output.If it is true then it means that video will be mirrored\n   * or flipped and if nothing is mentioned then by default it will be `false`.\n   *\n   * The second parameter,`callback`, is optional. It's a function to call once\n   * the capture is ready for use. The callback function should have one\n   * parameter, `stream`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" target=\"_blank\">MediaStream</a> object.\n   *\n   * Note: `createCapture()` only works when running a sketch locally or using HTTPS. Learn more\n   * <a href=\"http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https\" target=\"_blank\">here</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" target=\"_blank\">here</a>.\n   *\n   * @param  {(AUDIO|VIDEO|Object)}  [type] type of capture, either AUDIO or VIDEO,\n   *                                   or a constraints object. Both video and audio\n   *                                   audio streams are captured by default.\n   * @param  {Object}                  [flipped] flip the capturing video and mirror the output with `{flipped:true}`. By\n   *                                   default it is false.\n   * @param  {Function}                [callback] function to call once the stream\n   *                                   has loaded.\n   * @return {p5.MediaElement} new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Create the video capture.\n   *   createCapture(VIDEO);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture and hide the element.\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A video stream from the webcam with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Draw the video capture within the canvas.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *\n   *   // Invert the colors in the stream.\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture with mirrored output.\n   *   capture = createCapture(VIDEO,{ flipped:true });\n   *   capture.size(100,100);\n   *\n   *   describe('A video stream from the webcam with flipped or mirrored output.');\n   * }\n   *\n   * </code>\n   * </div>\n   *\n   * <div class='notest norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(480, 120);\n   *\n   *   // Create a constraints object.\n   *   let constraints = {\n   *     video: {\n   *       mandatory: {\n   *         minWidth: 1280,\n   *         minHeight: 720\n   *       },\n   *       optional: [{ maxFrameRate: 10 }]\n   *     },\n   *     audio: false\n   *   };\n   *\n   *   // Create the video capture.\n   *   createCapture(constraints);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCapture = function (...args) {\n    // p5._validateParameters('createCapture', args);\n\n    // return if getUserMedia is not supported by the browser\n    if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n      throw new DOMException('getUserMedia not supported in this browser');\n    }\n    let useVideo = true;\n    let useAudio = true;\n    let constraints;\n    let callback;\n    let flipped = false;\n    for (const arg of args) {\n      if (arg === fn.VIDEO) useAudio = false;else if (arg === fn.AUDIO) useVideo = false;else if (typeof arg === 'object') {\n        if (arg.flipped !== undefined) {\n          flipped = arg.flipped;\n          delete arg.flipped;\n        }\n        constraints = Object.assign({}, constraints, arg);\n      } else if (typeof arg === 'function') {\n        callback = arg;\n      }\n    }\n    const videoConstraints = {\n      video: useVideo,\n      audio: useAudio\n    };\n    constraints = Object.assign({}, videoConstraints, constraints);\n    const domElement = document.createElement('video');\n    // required to work in iOS 11 & up:\n    domElement.setAttribute('playsinline', '');\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      try {\n        if ('srcObject' in domElement) {\n          domElement.srcObject = stream;\n        } else {\n          domElement.src = window.URL.createObjectURL(stream);\n        }\n      } catch (err) {\n        domElement.src = stream;\n      }\n    }).catch(e => {\n      if (e.name === 'NotFoundError') p5._friendlyError('No webcam found on this device', 'createCapture');\n      if (e.name === 'NotAllowedError') p5._friendlyError('Access to the camera was denied', 'createCapture');\n      console.error(e);\n    });\n    const videoEl = addElement(domElement, this, true);\n    videoEl.loadedmetadata = false;\n    // set width and height onload metadata\n    domElement.addEventListener('loadedmetadata', function () {\n      domElement.play();\n      if (domElement.width) {\n        videoEl.width = domElement.width;\n        videoEl.height = domElement.height;\n        if (flipped) {\n          videoEl.elt.style.transform = 'scaleX(-1)';\n        }\n      } else {\n        videoEl.width = videoEl.elt.width = domElement.videoWidth;\n        videoEl.height = videoEl.elt.height = domElement.videoHeight;\n      }\n      videoEl.loadedmetadata = true;\n      if (callback) callback(domElement.srcObject);\n    });\n    videoEl.flipped = flipped;\n    return videoEl;\n  };\n\n  // =============================================================================\n  //                         p5.MediaElement additions\n  // =============================================================================\n\n  /**\n   * A class to handle audio and video.\n   *\n   * `p5.MediaElement` extends <a href=\"#/p5.Element\">p5.Element</a> with\n   * methods to handle audio and video. `p5.MediaElement` objects are created by\n   * calling <a href=\"#/p5/createVideo\">createVideo</a>,\n   * <a href=\"#/p5/createAudio\">createAudio</a>, and\n   * <a href=\"#/p5/createCapture\">createCapture</a>.\n   *\n   * @class p5.MediaElement\n   * @param {String} elt DOM node that is wrapped\n   * @extends p5.Element\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createCapture().\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A webcam feed with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Display the video stream and invert the colors.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.MediaElement = MediaElement;\n\n  /**\n   * Path to the media element's source as a string.\n   *\n   * @for p5.MediaElement\n   * @property src\n   * @return {String} src\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"https://p5js.org/reference/assets/beat.mp3\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   textWrap(CHAR);\n   *   text(beat.src, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\nif (typeof p5 !== 'undefined') {\n  media(p5, p5.prototype);\n}\nexport { MediaElement, media as default };","map":{"version":3,"names":["Element","MediaElement","constructor","elt","pInst","self","crossOrigin","_prevTime","_cueIDCounter","_cues","pixels","_pixelsState","_pixelDensity","_modified","_frameOnCanvas","Object","defineProperty","get","firstChildSrc","children","src","srcVal","window","location","href","ret","set","newValue","i","length","removeChild","source","document","createElement","appendChild","modified","_onended","onended","play","currentTime","duration","promise","readyState","load","catch","e","name","IS_MINIFIED","p5","_friendlyAutoplayError","console","error","stop","pause","loop","setAttribute","noLoop","removeAttribute","_setupAutoplayFailDetection","timeout","setTimeout","addEventListener","clearTimeout","passive","once","autoplay","val","oldVal","getAttribute","setupAutoplayFailDetection","volume","speed","presetPlaybackRate","playbackRate","loadedmetadata","time","_ensureCanvas","canvas","drawingContext","getContext","setModified","needsRedraw","_pInst","frameCount","width","height","clearRect","flipped","save","scale","translate","drawImage","restore","loadPixels","args","Renderer2D","prototype","apply","updatePixels","x","y","w","h","call","_getPixel","imgOrCol","copy","fn","mask","Image","isModified","value","callback","connect","obj","audioContext","mainOutput","getAudioContext","soundOut","input","context","destination","audioSourceNode","createMediaElementSource","disconnect","showControls","style","controls","hideControls","addCue","id","cue","Cue","push","ontimeupdate","_onTimeUpdate","bind","removeCue","log","splice","clearCues","playbackTime","callbackTime","media","addElement","node","_userNode","body","c","_elements","createMedia","type","mediaSource","sourceEl","callbackHandler","removeEventListener","mediaEl","videoWidth","videoHeight","createVideo","createAudio","VIDEO","AUDIO","navigator","mediaDevices","undefined","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","createCapture","DOMException","useVideo","useAudio","arg","assign","videoConstraints","video","audio","domElement","then","stream","srcObject","URL","createObjectURL","err","_friendlyError","videoEl","transform","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/dom/p5.MediaElement.js"],"sourcesContent":["import { Element } from './p5.Element.js';\nimport './p5.File.js';\nimport '../io/p5.XML.js';\nimport '../creating_reading-Cr8L2Jnm.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-BRcElHU3.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\n\nclass MediaElement extends Element {\n  constructor(elt, pInst) {\n    super(elt, pInst);\n\n    const self = this;\n    this.elt.crossOrigin = 'anonymous';\n\n    this._prevTime = 0;\n    this._cueIDCounter = 0;\n    this._cues = [];\n    this.pixels = [];\n    this._pixelsState = this;\n    this._pixelDensity = 1;\n    this._modified = false;\n\n    // Media has an internal canvas that is used when drawing it to the main\n    // canvas. It will need to be updated each frame as the video itself plays.\n    // We don't want to update it every time we draw, however, in case the user\n    // has used load/updatePixels. To handle this, we record the frame drawn to\n    // the internal canvas so we only update it if the frame has changed.\n    this._frameOnCanvas = -1;\n\n    Object.defineProperty(self, 'src', {\n      get() {\n        const firstChildSrc = self.elt.children[0].src;\n        const srcVal = self.elt.src === window.location.href ? '' : self.elt.src;\n        const ret =\n          firstChildSrc === window.location.href ? srcVal : firstChildSrc;\n        return ret;\n      },\n      set(newValue) {\n        for (let i = 0; i < self.elt.children.length; i++) {\n          self.elt.removeChild(self.elt.children[i]);\n        }\n        const source = document.createElement('source');\n        source.src = newValue;\n        elt.appendChild(source);\n        self.elt.src = newValue;\n        self.modified = true;\n      }\n    });\n\n    // private _onended callback, set by the method: onended(callback)\n    self._onended = function () { };\n    self.elt.onended = function () {\n      self._onended(self);\n    };\n  }\n\n\n  /**\n   * Plays audio or video from a media element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display a message.\n   *   text('Click to play', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks the square.');\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   beat.play();\n   * }\n   * </code>\n   * </div>\n   */\n  play() {\n    if (this.elt.currentTime === this.elt.duration) {\n      this.elt.currentTime = 0;\n    }\n    let promise;\n    if (this.elt.readyState > 1) {\n      promise = this.elt.play();\n    } else {\n      // in Chrome, playback cannot resume after being stopped and must reload\n      this.elt.load();\n      promise = this.elt.play();\n    }\n    if (promise && promise.catch) {\n      promise.catch(e => {\n        // if it's an autoplay failure error\n        if (e.name === 'NotAllowedError') {\n          if (typeof IS_MINIFIED === 'undefined') {\n            p5._friendlyAutoplayError(this.src);\n          } else {\n            console.error(e);\n          }\n        } else {\n          // any other kind of error\n          console.error('Media play method encountered an unexpected error', e);\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Stops a media element and sets its current time to 0.\n   *\n   * Calling `media.play()` will restart playing audio/video from the beginning.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isStopped = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to start\" written in black on a gray background. The beat starts or stops when the user presses the mouse.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isStopped === true) {\n   *     text('Click to start', 50, 50);\n   *   } else {\n   *     text('Click to stop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isStopped === true) {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isStopped = false;\n   *   } else {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isStopped = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  stop() {\n    this.elt.pause();\n    this.elt.currentTime = 0;\n    return this;\n  }\n\n  /**\n   * Pauses a media element.\n   *\n   * Calling `media.play()` will resume playing audio/video from the moment it paused.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPaused = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. The beat plays or pauses when the user clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPaused === true) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Click to pause', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPaused === true) {\n   *     // If the beat is paused,\n   *     // play it.\n   *     beat.play();\n   *     isPaused = false;\n   *   } else {\n   *     // If the beat is playing,\n   *     // pause it.\n   *     beat.pause();\n   *     isPaused = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  pause() {\n    this.elt.pause();\n    return this;\n  }\n\n  /**\n   * Plays the audio/video repeatedly in a loop.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isLooping = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to loop\" written in black on a gray background. A beat plays repeatedly in a loop when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isLooping === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to loop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isLooping === true) {\n   *     // If the beat is looping, stop it.\n   *     beat.stop();\n   *     isLooping = false;\n   *   } else {\n   *     // If the beat is stopped, loop it.\n   *     beat.loop();\n   *     isLooping = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  loop() {\n    this.elt.setAttribute('loop', true);\n    this.play();\n    return this;\n  }\n  /**\n   * Stops the audio/video from playing in a loop.\n   *\n   * The media will stop when it finishes playing.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPlaying === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to play', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === true) {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isPlaying = false;\n   *   } else {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isPlaying = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  noLoop() {\n    this.elt.removeAttribute('loop');\n    return this;\n  }\n\n  /**\n   * Sets up logic to check that autoplay succeeded.\n   *\n   * @private\n   */\n  _setupAutoplayFailDetection() {\n    const timeout = setTimeout(() => {\n      if (typeof IS_MINIFIED === 'undefined') {\n        p5._friendlyAutoplayError(this.src);\n      } else {\n        console.error(e);\n      }\n    }, 500);\n    this.elt.addEventListener('play', () => clearTimeout(timeout), {\n      passive: true,\n      once: true\n    });\n  }\n\n  /**\n   * Sets the audio/video to play once it's loaded.\n   *\n   * The parameter, `shouldAutoplay`, is optional. Calling\n   * `media.autoplay()` without an argument causes the media to play\n   * automatically. If `true` is passed, as in `media.autoplay(true)`, the\n   * media will automatically play. If `false` is passed, as in\n   * `media.autoPlay(false)`, it won't play automatically.\n   *\n   * @param {Boolean} [shouldAutoplay] whether the element should autoplay.\n   * @chainable\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Call handleVideo() once the video loads.\n   *   video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   describe('A video of fingers walking on a treadmill.');\n   * }\n   *\n   * // Set the video's size and play it.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video, but don't play it automatically.\n   *   let video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   // Play the video when the user clicks on it.\n   *   video.mousePressed(handlePress);\n   *\n   *   describe('An image of fingers on a treadmill. They start walking when the user double-clicks on them.');\n   * }\n   * </code>\n   * </div>\n   *\n   * // Set the video's size and playback mode.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay(false);\n   * }\n   *\n   * // Play the video.\n   * function handleClick() {\n   *   video.play();\n   * }\n   */\n  autoplay(val) {\n    const oldVal = this.elt.getAttribute('autoplay');\n    this.elt.setAttribute('autoplay', val);\n    // if we turned on autoplay\n    if (val && !oldVal) {\n      // bind method to this scope\n      const setupAutoplayFailDetection =\n        () => this._setupAutoplayFailDetection();\n      // if media is ready to play, schedule check now\n      if (this.elt.readyState === 4) {\n        setupAutoplayFailDetection();\n      } else {\n        // otherwise, schedule check whenever it is ready\n        this.elt.addEventListener('canplay', setupAutoplayFailDetection, {\n          passive: true,\n          once: true\n        });\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the audio/video volume.\n   *\n   * Calling `media.volume()` without an argument returns the current volume\n   * as a number in the range 0 (off) to 1 (maximum).\n   *\n   * The parameter, `val`, is optional. It's a number that sets the volume\n   * from 0 (off) to 1 (maximum). For example, calling `media.volume(0.5)`\n   * sets the volume to half of its maximum.\n   *\n   * @return {Number} current volume.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Volume: V\" on a gray square with media controls beneath it. The number \"V\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 1.\n   *   let n = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *\n   *   // Use n to set the volume.\n   *   dragon.volume(n);\n   *\n   *   // Get the current volume and display it.\n   *   let v = dragon.volume();\n   *\n   *   // Round v to 1 decimal place for display.\n   *   v = round(v, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the volume.\n   *   text(`Volume: ${v}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number}            val volume between 0.0 and 1.0.\n   * @chainable\n   */\n  volume(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.volume;\n    } else {\n      this.elt.volume = val;\n    }\n  }\n\n  /**\n   * Sets the audio/video playback speed.\n   *\n   * The parameter, `val`, is optional. It's a number that sets the playback\n   * speed. 1 plays the media at normal speed, 0.5 plays it at half speed, 2\n   * plays it at double speed, and so on. -1 plays the media at normal speed\n   * in reverse.\n   *\n   * Calling `media.speed()` returns the current speed as a number.\n   *\n   * Note: Not all browsers support backward playback. Even if they do,\n   * playback might not be smooth.\n   *\n   * @return {Number} current playback speed.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Speed: S\" on a gray square with media controls beneath it. The number \"S\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 2.\n   *   let n = sin(frameCount * 0.01) + 1;\n   *\n   *   // Use n to set the playback speed.\n   *   dragon.speed(n);\n   *\n   *   // Get the current speed and display it.\n   *   let s = dragon.speed();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the speed.\n   *   text(`Speed: ${s}`, 50, 50);\n   * }\n   * </code>\n   */\n  /**\n   * @param {Number} speed  speed multiplier for playback.\n   * @chainable\n   */\n  speed(val) {\n    if (typeof val === 'undefined') {\n      return this.presetPlaybackRate || this.elt.playbackRate;\n    } else {\n      if (this.loadedmetadata) {\n        this.elt.playbackRate = val;\n      } else {\n        this.presetPlaybackRate = val;\n      }\n    }\n  }\n\n  /**\n   * Sets the media element's playback time.\n   *\n   * The parameter, `time`, is optional. It's a number that specifies the\n   * time, in seconds, to jump to when playback begins.\n   *\n   * Calling `media.time()` without an argument returns the number of seconds\n   * the audio/video has played.\n   *\n   * Note: Time resets to 0 when looping media restarts.\n   *\n   * @return {Number} current time (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   // Jump to 2 seconds to start.\n   *   dragon.time(2);\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number} time time to jump to (in seconds).\n   * @chainable\n   */\n  time(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.currentTime;\n    } else {\n      this.elt.currentTime = val;\n      return this;\n    }\n  }\n\n  /**\n   * Returns the audio/video's duration in seconds.\n   *\n   * @return {Number} duration (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds left\" on a gray square with media controls beneath it. The number \"S\" decreases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the time remaining.\n   *   let s = dragon.duration() - dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the time remaining.\n   *   text(`${s} seconds left`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  duration() {\n    return this.elt.duration;\n  }\n  _ensureCanvas() {\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.drawingContext = this.canvas.getContext('2d');\n      this.setModified(true);\n    }\n\n    // Don't update the canvas again if we have already updated the canvas with\n    // the current frame\n    const needsRedraw = this._frameOnCanvas !== this._pInst.frameCount;\n    if (this.loadedmetadata && needsRedraw) {\n      // wait for metadata for w/h\n      if (this.canvas.width !== this.elt.width) {\n        this.canvas.width = this.elt.width;\n        this.canvas.height = this.elt.height;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n      }\n\n      this.drawingContext.clearRect(\n        0, 0, this.canvas.width, this.canvas.height);\n\n      if (this.flipped === true) {\n        this.drawingContext.save();\n        this.drawingContext.scale(-1, 1);\n        this.drawingContext.translate(-this.canvas.width, 0);\n      }\n\n      this.drawingContext.drawImage(\n        this.elt,\n        0,\n        0,\n        this.canvas.width,\n        this.canvas.height\n      );\n\n      if (this.flipped === true) {\n        this.drawingContext.restore();\n      }\n\n      this.setModified(true);\n      this._frameOnCanvas = this._pInst.frameCount;\n    }\n  }\n  loadPixels(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.loadPixels.apply(this, args);\n  }\n  updatePixels(x, y, w, h) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n    }\n    this.setModified(true);\n    return this;\n  }\n  get(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.get.apply(this, args);\n  }\n  _getPixel(...args) {\n    this.loadPixels();\n    return p5.Renderer2D.prototype._getPixel.apply(this, args);\n  }\n\n  set(x, y, imgOrCol) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n      this.setModified(true);\n    }\n  }\n  copy(...args) {\n    this._ensureCanvas();\n    fn.copy.apply(this, args);\n  }\n  mask(...args) {\n    this.loadPixels();\n    this.setModified(true);\n    p5.Image.prototype.mask.apply(this, args);\n  }\n  /**\n   * helper method for web GL mode to figure out if the element\n   * has been modified and might need to be re-uploaded to texture\n   * memory between frames.\n   * @private\n   * @return {boolean} a boolean indicating whether or not the\n   * image has been updated or modified since last texture upload.\n   */\n  isModified() {\n    return this._modified;\n  }\n  /**\n   * helper method for web GL mode to indicate that an element has been\n   * changed or unchanged since last upload. gl texture upload will\n   * set this value to false after uploading the texture; or might set\n   * it to true if metadata has become available but there is no actual\n   * texture data available yet..\n   * @param {Boolean} val sets whether or not the element has been\n   * modified.\n   * @private\n   */\n  setModified(value) {\n    this._modified = value;\n  }\n  /**\n   * Calls a function when the audio/video reaches the end of its playback.\n   *\n   * The element is passed as an argument to the callback function.\n   *\n   * Note: The function won't be called if the media is looping.\n   *\n   * @param  {Function} callback function to call when playback ends.\n   *                             The `p5.MediaElement` is passed as\n   *                             the argument.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   * let isDone = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   // Call handleEnd() when the beat finishes.\n   *   beat.onended(handleEnd);\n   *\n   *   describe('The text \"Click to play\" written in black on a gray square. A beat plays when the user clicks. The text \"Done!\" appears when the beat finishes playing.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different messages based on playback.\n   *   if (isDone === true) {\n   *     text('Done!', 50, 50);\n   *   } else if (isPlaying === false) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Playing...', 50, 50);\n   *   }\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === false) {\n   *     isPlaying = true;\n   *     beat.play();\n   *   }\n   * }\n   *\n   * // Set isDone when playback ends.\n   * function handleEnd() {\n   *   isDone = false;\n   * }\n   * </code>\n   * </div>\n   */\n  onended(callback) {\n    this._onended = callback;\n    return this;\n  }\n\n  /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/\n\n  /**\n   * Sends the element's audio to an output.\n   *\n   * The parameter, `audioNode`, can be an `AudioNode` or an object from the\n   * `p5.sound` library.\n   *\n   * If no element is provided, as in `myElement.connect()`, the element\n   * connects to the main output. All connections are removed by the\n   * `.disconnect()` method.\n   *\n   * Note: This method is meant to be used with the p5.sound.js addon library.\n   *\n   * @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n   * or an object from the p5.sound library\n   */\n  connect(obj) {\n    let audioContext, mainOutput;\n\n    // if p5.sound exists, same audio context\n    if (typeof fn.getAudioContext === 'function') {\n      audioContext = fn.getAudioContext();\n      mainOutput = p5.soundOut.input;\n    } else {\n      try {\n        audioContext = obj.context;\n        mainOutput = audioContext.destination;\n      } catch (e) {\n        throw 'connect() is meant to be used with Web Audio API or p5.sound.js';\n      }\n    }\n\n    // create a Web Audio MediaElementAudioSourceNode if none already exists\n    if (!this.audioSourceNode) {\n      this.audioSourceNode = audioContext.createMediaElementSource(this.elt);\n\n      // connect to main output when this method is first called\n      this.audioSourceNode.connect(mainOutput);\n    }\n\n    // connect to object if provided\n    if (obj) {\n      if (obj.input) {\n        this.audioSourceNode.connect(obj.input);\n      } else {\n        this.audioSourceNode.connect(obj);\n      }\n    } else {\n      // otherwise connect to main output of p5.sound / AudioContext\n      this.audioSourceNode.connect(mainOutput);\n    }\n  }\n\n  /**\n   * Disconnect all Web Audio routing, including to the main output.\n   *\n   * This is useful if you want to re-route the output through audio effects,\n   * for example.\n   *\n   */\n  disconnect() {\n    if (this.audioSourceNode) {\n      this.audioSourceNode.disconnect();\n    } else {\n      throw 'nothing to disconnect';\n    }\n  }\n\n  /*** SHOW / HIDE CONTROLS ***/\n\n  /**\n   * Show the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * Note: The controls vary between web browsers.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('cornflowerblue');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(50);\n   *\n   *   // Display a dragon.\n   *   text('🐉', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('A dragon emoji, 🐉, drawn in the center of a blue square. A song plays in the background. Audio controls are displayed beneath the canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  showControls() {\n    // must set style for the element to show on the page\n    this.elt.style['text-align'] = 'inherit';\n    this.elt.controls = true;\n  }\n\n  /**\n   * Hide the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   * let isHidden = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Double-click to hide controls\" written in the middle of a gray square. A song plays in the background. Audio controls are displayed beneath the canvas. The controls appear/disappear when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display a different message when controls are hidden or shown.\n   *   if (isHidden === true) {\n   *     text('Double-click to show controls', 10, 20, 80, 80);\n   *   } else {\n   *     text('Double-click to hide controls', 10, 20, 80, 80);\n   *   }\n   * }\n   *\n   * // Show/hide controls based on a double-click.\n   * function doubleClicked() {\n   *   if (isHidden === true) {\n   *     dragon.showControls();\n   *     isHidden = false;\n   *   } else {\n   *     dragon.hideControls();\n   *     isHidden = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hideControls() {\n    this.elt.controls = false;\n  }\n\n  /**\n   * Schedules a function to call when the audio/video reaches a specific time\n   * during its playback.\n   *\n   * The first parameter, `time`, is the time, in seconds, when the function\n   * should run. This value is passed to `callback` as its first argument.\n   *\n   * The second parameter, `callback`, is the function to call at the specified\n   * cue time.\n   *\n   * The third parameter, `value`, is optional and can be any type of value.\n   * `value` is passed to `callback`.\n   *\n   * Calling `media.addCue()` returns an ID as a string. This is useful for\n   * removing the cue later.\n   *\n   * @param {Number}   time     cue time to run the callback function.\n   * @param {Function} callback function to call at the cue time.\n   * @param {Object} [value]    object to pass as the argument to\n   *                            `callback`.\n   * @return {Number} id ID of this cue,\n   *                     useful for `media.removeCue(id)`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('A red square with a beat playing in the background. Its color changes every 2 seconds while the audio plays.');\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  addCue(time, callback, val) {\n    const id = this._cueIDCounter++;\n\n    const cue = new Cue(callback, time, id, val);\n    this._cues.push(cue);\n\n    if (!this.elt.ontimeupdate) {\n      this.elt.ontimeupdate = this._onTimeUpdate.bind(this);\n    }\n\n    return id;\n  }\n\n  /**\n   * Removes a callback based on its ID.\n   *\n   * @param  {Number} id ID of the cue, created by `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let lavenderID;\n   * let isRemoved = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *\n   *   // Record the ID of the \"lavender\" callback.\n   *   lavenderID = beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to remove lavender.\" written on a red square. The color changes every 2 seconds while the audio plays. The lavender option is removed when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isRemoved === false) {\n   *     text('Double-click to remove lavender.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more lavender.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove the lavender color-change cue when the user double-clicks.\n   * function doubleClicked() {\n   *   if (isRemoved === false) {\n   *     beat.removeCue(lavenderID);\n   *     isRemoved = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  removeCue(id) {\n    for (let i = 0; i < this._cues.length; i++) {\n      if (this._cues[i].id === id) {\n        console.log(id);\n        this._cues.splice(i, 1);\n      }\n    }\n\n    if (this._cues.length === 0) {\n      this.elt.ontimeupdate = null;\n    }\n  }\n\n  /**\n   * Removes all functions scheduled with `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let isChanging = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to stop changing.\" written on a square. The color changes every 2 seconds while the audio plays. The color stops changing when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isChanging === true) {\n   *     text('Double-click to stop changing.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more changes.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove cued functions and stop changing colors when the user\n   * // double-clicks.\n   * function doubleClicked() {\n   *   if (isChanging === true) {\n   *     beat.clearCues();\n   *     isChanging = false;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  clearCues() {\n    this._cues = [];\n    this.elt.ontimeupdate = null;\n  }\n\n  // private method that checks for cues to be fired if events\n  // have been scheduled using addCue(callback, time).\n  _onTimeUpdate() {\n    const playbackTime = this.time();\n\n    for (let i = 0; i < this._cues.length; i++) {\n      const callbackTime = this._cues[i].time;\n      const val = this._cues[i].val;\n\n      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {\n        // pass the scheduled callbackTime as parameter to the callback\n        this._cues[i].callback(val);\n      }\n    }\n\n    this._prevTime = playbackTime;\n  }\n}\n\n// Cue inspired by JavaScript setTimeout, and the\n// Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org\n// eslint-disable-next-line no-unused-vars\nclass Cue {\n  constructor(callback, time, id, val) {\n    this.callback = callback;\n    this.time = time;\n    this.id = id;\n    this.val = val;\n  }\n}\n\nfunction media(p5, fn){\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media\n      ? new MediaElement(elt, pInst)\n      : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /** VIDEO STUFF **/\n\n  // Helps perform similar tasks for media element methods.\n  function createMedia(pInst, type, src, callback) {\n    const elt = document.createElement(type);\n\n    // Create source elements from given sources\n    src = src || '';\n    if (typeof src === 'string') {\n      src = [src];\n    }\n    for (const mediaSource of src) {\n      const sourceEl = document.createElement('source');\n      sourceEl.setAttribute('src', mediaSource);\n      elt.appendChild(sourceEl);\n    }\n\n    // If callback is provided, attach to element\n    if (typeof callback === 'function') {\n      const callbackHandler = () => {\n        callback();\n        elt.removeEventListener('canplaythrough', callbackHandler);\n      };\n      elt.addEventListener('canplaythrough', callbackHandler);\n    }\n\n    const mediaEl = addElement(elt, pInst, true);\n    mediaEl.loadedmetadata = false;\n\n    // set width and height onload metadata\n    elt.addEventListener('loadedmetadata', () => {\n      mediaEl.width = elt.videoWidth;\n      mediaEl.height = elt.videoHeight;\n\n      // set elt width and height if not set\n      if (mediaEl.elt.width === 0) mediaEl.elt.width = elt.videoWidth;\n      if (mediaEl.elt.height === 0) mediaEl.elt.height = elt.videoHeight;\n      if (mediaEl.presetPlaybackRate) {\n        mediaEl.elt.playbackRate = mediaEl.presetPlaybackRate;\n        delete mediaEl.presetPlaybackRate;\n      }\n      mediaEl.loadedmetadata = true;\n    });\n\n    return mediaEl;\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element for simple audio/video playback.\n   *\n   * `createVideo()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `video.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/topsecret.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/topsecret.mp4', 'assets/topsecret.ogv', 'assets/topsecret.webm']`.\n   * This is useful for ensuring that the video can play across different browsers with\n   * different capabilities. See\n   * <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the video is ready to play.\n   *\n   * @param  {String|String[]} src path to a video file, or an array of paths for\n   *                               supporting different browsers.\n   * @param  {Function} [callback] function to call once the video is ready to play.\n   * @return {p5.MediaElement}   new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Note: this may not work in some browsers.\n   *   let video = createVideo('assets/small.mp4');\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   let video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm']\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   // Call mute() once the video loads.\n   *   video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n   *     muteVideo\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   *\n   * // Mute the video once it loads.\n   * function muteVideo() {\n   *   video.volume(0);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVideo = function (src, callback) {\n    // p5._validateParameters('createVideo', arguments);\n    return createMedia(this, 'video', src, callback);\n  };\n\n  /** AUDIO STUFF **/\n\n  /**\n   * Creates a hidden `&lt;audio&gt;` element for simple audio playback.\n   *\n   * `createAudio()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/video.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/video.mp4', 'assets/video.ogv', 'assets/video.webm']`.\n   * This is useful for ensuring that the video can play across different\n   * browsers with different capabilities. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\" target=\"_blank\">MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the audio is ready to play.\n   *\n   * @param  {String|String[]} [src] path to an audio file, or an array of paths\n   *                                 for supporting different browsers.\n   * @param  {Function} [callback]   function to call once the audio is ready to play.\n   * @return {p5.MediaElement}       new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load the audio.\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Show the default audio controls.\n   *   beat.showControls();\n   *\n   *   describe('An audio beat plays when the user double-clicks the square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createAudio = function (src, callback) {\n    // p5._validateParameters('createAudio', arguments);\n    return createMedia(this, 'audio', src, callback);\n  };\n\n  /** CAMERA STUFF **/\n\n  fn.VIDEO = 'video';\n\n  fn.AUDIO = 'audio';\n\n  // from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      const getUserMedia =\n        navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        return Promise.reject(\n          new Error('getUserMedia is not implemented in this browser')\n        );\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element that \"captures\" the audio/video stream from\n   * the webcam and microphone.\n   *\n   * `createCapture()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `capture.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `type`, is optional. It sets the type of capture to\n   * use. By default, `createCapture()` captures both audio and video. If `VIDEO`\n   * is passed, as in `createCapture(VIDEO)`, only video will be captured.\n   * If `AUDIO` is passed, as in `createCapture(AUDIO)`, only audio will be\n   * captured. A constraints object can also be passed to customize the stream.\n   * See the <a href=\"http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints\" target=\"_blank\">\n   * W3C documentation</a> for possible properties. Different browsers support different\n   * properties.\n   *\n   * The 'flipped' property is an optional property which can be set to `{flipped:true}`\n   * to mirror the video output.If it is true then it means that video will be mirrored\n   * or flipped and if nothing is mentioned then by default it will be `false`.\n   *\n   * The second parameter,`callback`, is optional. It's a function to call once\n   * the capture is ready for use. The callback function should have one\n   * parameter, `stream`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" target=\"_blank\">MediaStream</a> object.\n   *\n   * Note: `createCapture()` only works when running a sketch locally or using HTTPS. Learn more\n   * <a href=\"http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https\" target=\"_blank\">here</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" target=\"_blank\">here</a>.\n   *\n   * @param  {(AUDIO|VIDEO|Object)}  [type] type of capture, either AUDIO or VIDEO,\n   *                                   or a constraints object. Both video and audio\n   *                                   audio streams are captured by default.\n   * @param  {Object}                  [flipped] flip the capturing video and mirror the output with `{flipped:true}`. By\n   *                                   default it is false.\n   * @param  {Function}                [callback] function to call once the stream\n   *                                   has loaded.\n   * @return {p5.MediaElement} new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Create the video capture.\n   *   createCapture(VIDEO);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture and hide the element.\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A video stream from the webcam with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Draw the video capture within the canvas.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *\n   *   // Invert the colors in the stream.\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture with mirrored output.\n   *   capture = createCapture(VIDEO,{ flipped:true });\n   *   capture.size(100,100);\n   *\n   *   describe('A video stream from the webcam with flipped or mirrored output.');\n   * }\n   *\n   * </code>\n   * </div>\n   *\n   * <div class='notest norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(480, 120);\n   *\n   *   // Create a constraints object.\n   *   let constraints = {\n   *     video: {\n   *       mandatory: {\n   *         minWidth: 1280,\n   *         minHeight: 720\n   *       },\n   *       optional: [{ maxFrameRate: 10 }]\n   *     },\n   *     audio: false\n   *   };\n   *\n   *   // Create the video capture.\n   *   createCapture(constraints);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCapture = function (...args) {\n    // p5._validateParameters('createCapture', args);\n\n    // return if getUserMedia is not supported by the browser\n    if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n      throw new DOMException('getUserMedia not supported in this browser');\n    }\n\n    let useVideo = true;\n    let useAudio = true;\n    let constraints;\n    let callback;\n    let flipped = false;\n\n    for (const arg of args) {\n      if (arg === fn.VIDEO) useAudio = false;\n      else if (arg === fn.AUDIO) useVideo = false;\n      else if (typeof arg === 'object') {\n        if (arg.flipped !== undefined) {\n          flipped = arg.flipped;\n          delete arg.flipped;\n        }\n        constraints = Object.assign({}, constraints, arg);\n      }\n      else if (typeof arg === 'function') {\n        callback = arg;\n      }\n    }\n\n    const videoConstraints = { video: useVideo, audio: useAudio };\n    constraints = Object.assign({}, videoConstraints, constraints);\n    const domElement = document.createElement('video');\n    // required to work in iOS 11 & up:\n    domElement.setAttribute('playsinline', '');\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      try {\n        if ('srcObject' in domElement) {\n          domElement.srcObject = stream;\n        } else {\n          domElement.src = window.URL.createObjectURL(stream);\n        }\n      }\n      catch (err) {\n        domElement.src = stream;\n      }\n    }).catch(e => {\n      if (e.name === 'NotFoundError')\n        p5._friendlyError('No webcam found on this device', 'createCapture');\n      if (e.name === 'NotAllowedError')\n        p5._friendlyError('Access to the camera was denied', 'createCapture');\n\n      console.error(e);\n    });\n\n    const videoEl = addElement(domElement, this, true);\n    videoEl.loadedmetadata = false;\n    // set width and height onload metadata\n    domElement.addEventListener('loadedmetadata', function () {\n      domElement.play();\n      if (domElement.width) {\n        videoEl.width = domElement.width;\n        videoEl.height = domElement.height;\n        if (flipped) {\n          videoEl.elt.style.transform = 'scaleX(-1)';\n        }\n      } else {\n        videoEl.width = videoEl.elt.width = domElement.videoWidth;\n        videoEl.height = videoEl.elt.height = domElement.videoHeight;\n      }\n      videoEl.loadedmetadata = true;\n\n      if (callback) callback(domElement.srcObject);\n    });\n    videoEl.flipped = flipped;\n    return videoEl;\n  };\n\n  // =============================================================================\n  //                         p5.MediaElement additions\n  // =============================================================================\n\n  /**\n   * A class to handle audio and video.\n   *\n   * `p5.MediaElement` extends <a href=\"#/p5.Element\">p5.Element</a> with\n   * methods to handle audio and video. `p5.MediaElement` objects are created by\n   * calling <a href=\"#/p5/createVideo\">createVideo</a>,\n   * <a href=\"#/p5/createAudio\">createAudio</a>, and\n   * <a href=\"#/p5/createCapture\">createCapture</a>.\n   *\n   * @class p5.MediaElement\n   * @param {String} elt DOM node that is wrapped\n   * @extends p5.Element\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createCapture().\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A webcam feed with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Display the video stream and invert the colors.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.MediaElement = MediaElement;\n\n  /**\n   * Path to the media element's source as a string.\n   *\n   * @for p5.MediaElement\n   * @property src\n   * @return {String} src\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"https://p5js.org/reference/assets/beat.mp3\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   textWrap(CHAR);\n   *   text(beat.src, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  media(p5, p5.prototype);\n}\n\nexport { MediaElement, media as default };\n"],"mappings":"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sB,CAAC,IAAI,CAAC7B,GAAG,CAAC;UACrC,CAAC,MAAM;YACL8B,OAAO,CAACC,KAAK,CAACN,CAAC,CAAC;UAClB;QACF,CAAC,MAAM;UACL;UACAK,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEN,CAAC,CAAC;QACvE;MACF,CAAC,CAAC;IACJ;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,IAAIA,CAAA,EAAG;IACL,IAAI,CAACjD,GAAG,CAACkD,KAAK,CAAC,CAAC;IAChB,IAAI,CAAClD,GAAG,CAACoC,WAAW,GAAG,CAAC;IACxB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,KAAKA,CAAA,EAAG;IACN,IAAI,CAAClD,GAAG,CAACkD,KAAK,CAAC,CAAC;IAChB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,IAAIA,CAAA,EAAG;IACL,IAAI,CAACnD,GAAG,CAACoD,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;IACnC,IAAI,CAACjB,IAAI,CAAC,CAAC;IACX,OAAO,IAAI;EACb;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,MAAMA,CAAA,EAAG;IACP,IAAI,CAACrD,GAAG,CAACsD,eAAe,CAAC,MAAM,CAAC;IAChC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEC,2BAA2BA,CAAA,EAAG;IAC5B,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/B,IAAI,OAAOb,WAAW,KAAK,WAAW,EAAE;QACtCC,EAAE,CAACC,sBAAsB,CAAC,IAAI,CAAC7B,GAAG,CAAC;MACrC,CAAC,MAAM;QACL8B,OAAO,CAACC,KAAK,CAACN,CAAC,CAAC;MAClB;IACF,CAAC,EAAE,GAAG,CAAC;IACP,IAAI,CAAC1C,GAAG,CAAC0D,gBAAgB,CAAC,MAAM,EAAE,MAAMC,YAAY,CAACH,OAAO,CAAC,EAAE;MAC7DI,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACC,GAAG,EAAE;IACZ,MAAMC,MAAM,GAAG,IAAI,CAAChE,GAAG,CAACiE,YAAY,CAAC,UAAU,CAAC;IAChD,IAAI,CAACjE,GAAG,CAACoD,YAAY,CAAC,UAAU,EAAEW,GAAG,CAAC;IACtC;IACA,IAAIA,GAAG,IAAI,CAACC,MAAM,EAAE;MAClB;MACA,MAAME,0BAA0B,GAC9BA,CAAA,KAAM,IAAI,CAACX,2BAA2B,CAAC,CAAC;MAC1C;MACA,IAAI,IAAI,CAACvD,GAAG,CAACuC,UAAU,KAAK,CAAC,EAAE;QAC7B2B,0BAA0B,CAAC,CAAC;MAC9B,CAAC,MAAM;QACL;QACA,IAAI,CAAClE,GAAG,CAAC0D,gBAAgB,CAAC,SAAS,EAAEQ,0BAA0B,EAAE;UAC/DN,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEM,MAAMA,CAACJ,GAAG,EAAE;IACV,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;MAC9B,OAAO,IAAI,CAAC/D,GAAG,CAACmE,MAAM;IACxB,CAAC,MAAM;MACL,IAAI,CAACnE,GAAG,CAACmE,MAAM,GAAGJ,GAAG;IACvB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEK,KAAKA,CAACL,GAAG,EAAE;IACT,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;MAC9B,OAAO,IAAI,CAACM,kBAAkB,IAAI,IAAI,CAACrE,GAAG,CAACsE,YAAY;IACzD,CAAC,MAAM;MACL,IAAI,IAAI,CAACC,cAAc,EAAE;QACvB,IAAI,CAACvE,GAAG,CAACsE,YAAY,GAAGP,GAAG;MAC7B,CAAC,MAAM;QACL,IAAI,CAACM,kBAAkB,GAAGN,GAAG;MAC/B;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACES,IAAIA,CAACT,GAAG,EAAE;IACR,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;MAC9B,OAAO,IAAI,CAAC/D,GAAG,CAACoC,WAAW;IAC7B,CAAC,MAAM;MACL,IAAI,CAACpC,GAAG,CAACoC,WAAW,GAAG2B,GAAG;MAC1B,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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MACvB;MACA,IAAI,CAACE,aAAa,CAAC,CAAC;MACpB5B,EAAE,CAAC+C,UAAU,CAACC,SAAS,CAACtE,GAAG,CAAC6E,IAAI,CAAC,IAAI,EAAEJ,CAAC,EAAEC,CAAC,EAAEK,QAAQ,CAAC;MACtD,IAAI,CAACzB,WAAW,CAAC,IAAI,CAAC;IACxB;EACF;EACA0B,IAAIA,CAAC,GAAGZ,IAAI,EAAE;IACZ,IAAI,CAAClB,aAAa,CAAC,CAAC;IACpB+B,EAAE,CAACD,IAAI,CAACT,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;EAC3B;EACAc,IAAIA,CAAC,GAAGd,IAAI,EAAE;IACZ,IAAI,CAACD,UAAU,CAAC,CAAC;IACjB,IAAI,CAACb,WAAW,CAAC,IAAI,CAAC;IACtBhC,EAAE,CAAC6D,KAAK,CAACb,SAAS,CAACY,IAAI,CAACX,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;EAC3C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACjG,SAAS;EACvB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmE,WAAWA,CAAC+B,KAAK,EAAE;IACjB,IAAI,CAAClG,SAAS,GAAGkG,KAAK;EACxB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE1E,OAAOA,CAAC2E,QAAQ,EAAE;IAChB,IAAI,CAAC5E,QAAQ,GAAG4E,QAAQ;IACxB,OAAO,IAAI;EACb;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAACC,GAAG,EAAE;IACX,IAAIC,YAAY,EAAEC,UAAU;;IAE5B;IACA,IAAI,OAAOT,EAAE,CAACU,eAAe,KAAK,UAAU,EAAE;MAC5CF,YAAY,GAAGR,EAAE,CAACU,eAAe,CAAC,CAAC;MACnCD,UAAU,GAAGpE,EAAE,CAACsE,QAAQ,CAACC,KAAK;IAChC,CAAC,MAAM;MACL,IAAI;QACFJ,YAAY,GAAGD,GAAG,CAACM,OAAO;QAC1BJ,UAAU,GAAGD,YAAY,CAACM,WAAW;MACvC,CAAC,CAAC,OAAO5E,CAAC,EAAE;QACV,MAAM,iEAAiE;MACzE;IACF;;IAEA;IACA,IAAI,CAAC,IAAI,CAAC6E,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAGP,YAAY,CAACQ,wBAAwB,CAAC,IAAI,CAACxH,GAAG,CAAC;;MAEtE;MACA,IAAI,CAACuH,eAAe,CAACT,OAAO,CAACG,UAAU,CAAC;IAC1C;;IAEA;IACA,IAAIF,GAAG,EAAE;MACP,IAAIA,GAAG,CAACK,KAAK,EAAE;QACb,IAAI,CAACG,eAAe,CAACT,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MACzC,CAAC,MAAM;QACL,IAAI,CAACG,eAAe,CAACT,OAAO,CAACC,GAAG,CAAC;MACnC;IACF,CAAC,MAAM;MACL;MACA,IAAI,CAACQ,eAAe,CAACT,OAAO,CAACG,UAAU,CAAC;IAC1C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACF,eAAe,EAAE;MACxB,IAAI,CAACA,eAAe,CAACE,UAAU,CAAC,CAAC;IACnC,CAAC,MAAM;MACL,MAAM,uBAAuB;IAC/B;EACF;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAAA,EAAG;IACb;IACA,IAAI,CAAC1H,GAAG,CAAC2H,KAAK,CAAC,YAAY,CAAC,GAAG,SAAS;IACxC,IAAI,CAAC3H,GAAG,CAAC4H,QAAQ,GAAG,IAAI;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAAA,EAAG;IACb,IAAI,CAAC7H,GAAG,CAAC4H,QAAQ,GAAG,KAAK;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,MAAMA,CAACtD,IAAI,EAAEqC,QAAQ,EAAE9C,GAAG,EAAE;IAC1B,MAAMgE,EAAE,GAAG,IAAI,CAAC1H,aAAa,EAAE;IAE/B,MAAM2H,GAAG,GAAG,IAAIC,GAAG,CAACpB,QAAQ,EAAErC,IAAI,EAAEuD,EAAE,EAAEhE,GAAG,CAAC;IAC5C,IAAI,CAACzD,KAAK,CAAC4H,IAAI,CAACF,GAAG,CAAC;IAEpB,IAAI,CAAC,IAAI,CAAChI,GAAG,CAACmI,YAAY,EAAE;MAC1B,IAAI,CAACnI,GAAG,CAACmI,YAAY,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;IACvD;IAEA,OAAON,EAAE;EACX;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,SAASA,CAACP,EAAE,EAAE;IACZ,KAAK,IAAItG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,KAAK,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,IAAI,IAAI,CAACnB,KAAK,CAACmB,CAAC,CAAC,CAACsG,EAAE,KAAKA,EAAE,EAAE;QAC3BhF,OAAO,CAACwF,GAAG,CAACR,EAAE,CAAC;QACf,IAAI,CAACzH,KAAK,CAACkI,MAAM,CAAC/G,CAAC,EAAE,CAAC,CAAC;MACzB;IACF;IAEA,IAAI,IAAI,CAACnB,KAAK,CAACoB,MAAM,KAAK,CAAC,EAAE;MAC3B,IAAI,CAAC1B,GAAG,CAACmI,YAAY,GAAG,IAAI;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,SAASA,CAAA,EAAG;IACV,IAAI,CAACnI,KAAK,GAAG,EAAE;IACf,IAAI,CAACN,GAAG,CAACmI,YAAY,GAAG,IAAI;EAC9B;;EAEA;EACA;EACAC,aAAaA,CAAA,EAAG;IACd,MAAMM,YAAY,GAAG,IAAI,CAAClE,IAAI,CAAC,CAAC;IAEhC,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,KAAK,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAMkH,YAAY,GAAG,IAAI,CAACrI,KAAK,CAACmB,CAAC,CAAC,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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjD,EAAE,CAACoD,WAAW,GAAG,UAAU3I,GAAG,EAAE4F,QAAQ,EAAE;IACxC;IACA,OAAOsC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAElI,GAAG,EAAE4F,QAAQ,CAAC;EAClD,CAAC;;EAED;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACqD,WAAW,GAAG,UAAU5I,GAAG,EAAE4F,QAAQ,EAAE;IACxC;IACA,OAAOsC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAElI,GAAG,EAAE4F,QAAQ,CAAC;EAClD,CAAC;;EAED;;EAEAL,EAAE,CAACsD,KAAK,GAAG,OAAO;EAElBtD,EAAE,CAACuD,KAAK,GAAG,OAAO;;EAElB;EACA;EACA,IAAIC,SAAS,CAACC,YAAY,KAAKC,SAAS,EAAE;IACxCF,SAAS,CAACC,YAAY,GAAG,CAAC,CAAC;EAC7B;;EAEA;EACA;EACA;EACA,IAAID,SAAS,CAACC,YAAY,CAACE,YAAY,KAAKD,SAAS,EAAE;IACrDF,SAAS,CAACC,YAAY,CAACE,YAAY,GAAG,UAAUC,WAAW,EAAE;MAC3D;MACA,MAAMD,YAAY,GAChBH,SAAS,CAACK,kBAAkB,IAAIL,SAAS,CAACM,eAAe;;MAE3D;MACA;MACA,IAAI,CAACH,YAAY,EAAE;QACjB,OAAOI,OAAO,CAACC,MAAM,CACnB,IAAIC,KAAK,CAAC,iDAAiD,CAC7D,CAAC;MACH;;MAEA;MACA,OAAO,IAAIF,OAAO,CAAC,UAAUG,OAAO,EAAEF,MAAM,EAAE;QAC5CL,YAAY,CAAC/D,IAAI,CAAC4D,SAAS,EAAEI,WAAW,EAAEM,OAAO,EAAEF,MAAM,CAAC;MAC5D,CAAC,CAAC;IACJ,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhE,EAAE,CAACmE,aAAa,GAAG,UAAU,GAAGhF,IAAI,EAAE;IACpC;;IAEA;IACA,IAAI,EAAEqE,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACE,YAAY,CAAC,EAAE;MACpE,MAAM,IAAIS,YAAY,CAAC,4CAA4C,CAAC;IACtE;IAEA,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIV,WAAW;IACf,IAAIvD,QAAQ;IACZ,IAAIzB,OAAO,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}