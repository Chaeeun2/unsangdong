{"ast":null,"code":"import RGBColorSpace from \"../rgbspace.js\";\nimport sRGBLinear from \"./srgb-linear.js\";\nimport KEYWORDS from \"../keywords.js\";\nlet coordGrammar = Array(3).fill(\"<percentage> | <number>[0, 255]\");\nlet coordGrammarNumber = Array(3).fill(\"<number>[0, 255]\");\nexport default new RGBColorSpace({\n  id: \"srgb\",\n  name: \"sRGB\",\n  base: sRGBLinear,\n  fromBase: rgb => {\n    // convert an array of linear-light sRGB values in the range 0.0-1.0\n    // to gamma corrected form\n    // https://en.wikipedia.org/wiki/SRGB\n    return rgb.map(val => {\n      let sign = val < 0 ? -1 : 1;\n      let abs = val * sign;\n      if (abs > 0.0031308) {\n        return sign * (1.055 * abs ** (1 / 2.4) - 0.055);\n      }\n      return 12.92 * val;\n    });\n  },\n  toBase: rgb => {\n    // convert an array of sRGB values in the range 0.0 - 1.0\n    // to linear light (un-companded) form.\n    // https://en.wikipedia.org/wiki/SRGB\n    return rgb.map(val => {\n      let sign = val < 0 ? -1 : 1;\n      let abs = val * sign;\n      if (abs <= 0.04045) {\n        return val / 12.92;\n      }\n      return sign * ((abs + 0.055) / 1.055) ** 2.4;\n    });\n  },\n  formats: {\n    \"rgb\": {\n      coords: coordGrammar\n    },\n    \"rgb_number\": {\n      name: \"rgb\",\n      commas: true,\n      coords: coordGrammarNumber,\n      noAlpha: true\n    },\n    \"color\": {/* use defaults */},\n    \"rgba\": {\n      coords: coordGrammar,\n      commas: true,\n      lastAlpha: true\n    },\n    \"rgba_number\": {\n      name: \"rgba\",\n      commas: true,\n      coords: coordGrammarNumber\n    },\n    \"hex\": {\n      type: \"custom\",\n      toGamut: true,\n      test: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),\n      parse(str) {\n        if (str.length <= 5) {\n          // #rgb or #rgba, duplicate digits\n          str = str.replace(/[a-f0-9]/gi, \"$&$&\");\n        }\n        let rgba = [];\n        str.replace(/[a-f0-9]{2}/gi, component => {\n          rgba.push(parseInt(component, 16) / 255);\n        });\n        return {\n          spaceId: \"srgb\",\n          coords: rgba.slice(0, 3),\n          alpha: rgba.slice(3)[0]\n        };\n      },\n      serialize: (coords, alpha, {\n        collapse = true // collapse to 3-4 digit hex when possible?\n      } = {}) => {\n        if (alpha < 1) {\n          coords.push(alpha);\n        }\n        coords = coords.map(c => Math.round(c * 255));\n        let collapsible = collapse && coords.every(c => c % 17 === 0);\n        let hex = coords.map(c => {\n          if (collapsible) {\n            return (c / 17).toString(16);\n          }\n          return c.toString(16).padStart(2, \"0\");\n        }).join(\"\");\n        return \"#\" + hex;\n      }\n    },\n    \"keyword\": {\n      type: \"custom\",\n      test: str => /^[a-z]+$/i.test(str),\n      parse(str) {\n        str = str.toLowerCase();\n        let ret = {\n          spaceId: \"srgb\",\n          coords: null,\n          alpha: 1\n        };\n        if (str === \"transparent\") {\n          ret.coords = KEYWORDS.black;\n          ret.alpha = 0;\n        } else {\n          ret.coords = KEYWORDS[str];\n        }\n        if (ret.coords) {\n          return ret;\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["RGBColorSpace","sRGBLinear","KEYWORDS","coordGrammar","Array","fill","coordGrammarNumber","id","name","base","fromBase","rgb","map","val","sign","abs","toBase","formats","coords","commas","noAlpha","lastAlpha","type","toGamut","test","str","parse","length","replace","rgba","component","push","parseInt","spaceId","slice","alpha","serialize","collapse","c","Math","round","collapsible","every","hex","toString","padStart","join","toLowerCase","ret","black"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/spaces/srgb.js"],"sourcesContent":["import RGBColorSpace from \"../rgbspace.js\";\nimport sRGBLinear from \"./srgb-linear.js\";\nimport KEYWORDS from \"../keywords.js\";\n\nlet coordGrammar = Array(3).fill(\"<percentage> | <number>[0, 255]\");\nlet coordGrammarNumber = Array(3).fill(\"<number>[0, 255]\");\n\nexport default new RGBColorSpace({\n\tid: \"srgb\",\n\tname: \"sRGB\",\n\tbase: sRGBLinear,\n\tfromBase: rgb => {\n\t\t// convert an array of linear-light sRGB values in the range 0.0-1.0\n\t\t// to gamma corrected form\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs > 0.0031308) {\n\t\t\t\treturn sign * (1.055 * (abs ** (1 / 2.4)) - 0.055);\n\t\t\t}\n\n\t\t\treturn 12.92 * val;\n\t\t});\n\t},\n\ttoBase: rgb => {\n\t\t// convert an array of sRGB values in the range 0.0 - 1.0\n\t\t// to linear light (un-companded) form.\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs <= 0.04045) {\n\t\t\t\treturn val / 12.92;\n\t\t\t}\n\n\t\t\treturn sign * (((abs + 0.055) / 1.055) ** 2.4);\n\t\t});\n\t},\n\tformats: {\n\t\t\"rgb\": {\n\t\t\tcoords: coordGrammar,\n\t\t},\n\t\t\"rgb_number\": {\n\t\t\tname: \"rgb\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t\tnoAlpha: true,\n\t\t},\n\t\t\"color\": { /* use defaults */ },\n\t\t\"rgba\": {\n\t\t\tcoords: coordGrammar,\n\t\t\tcommas: true,\n\t\t\tlastAlpha: true,\n\t\t},\n\t\t\"rgba_number\": {\n\t\t\tname: \"rgba\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t},\n\t\t\"hex\": {\n\t\t\ttype: \"custom\",\n\t\t\ttoGamut: true,\n\t\t\ttest: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tif (str.length <= 5) {\n\t\t\t\t\t// #rgb or #rgba, duplicate digits\n\t\t\t\t\tstr = str.replace(/[a-f0-9]/gi, \"$&$&\");\n\t\t\t\t}\n\n\t\t\t\tlet rgba = [];\n\t\t\t\tstr.replace(/[a-f0-9]{2}/gi, component => {\n\t\t\t\t\trgba.push(parseInt(component, 16) / 255);\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tspaceId: \"srgb\",\n\t\t\t\t\tcoords: rgba.slice(0, 3),\n\t\t\t\t\talpha: rgba.slice(3)[0],\n\t\t\t\t};\n\t\t\t},\n\t\t\tserialize: (coords, alpha, {\n\t\t\t\tcollapse = true, // collapse to 3-4 digit hex when possible?\n\t\t\t} = {}) => {\n\t\t\t\tif (alpha < 1) {\n\t\t\t\t\tcoords.push(alpha);\n\t\t\t\t}\n\n\t\t\t\tcoords = coords.map(c => Math.round(c * 255));\n\n\t\t\t\tlet collapsible = collapse && coords.every(c => c % 17 === 0);\n\n\t\t\t\tlet hex = coords.map(c => {\n\t\t\t\t\tif (collapsible) {\n\t\t\t\t\t\treturn (c / 17).toString(16);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn c.toString(16).padStart(2, \"0\");\n\t\t\t\t}).join(\"\");\n\n\t\t\t\treturn \"#\" + hex;\n\t\t\t},\n\t\t},\n\t\t\"keyword\": {\n\t\t\ttype: \"custom\",\n\t\t\ttest: str => /^[a-z]+$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tstr = str.toLowerCase();\n\t\t\t\tlet ret = {spaceId: \"srgb\", coords: null, alpha: 1};\n\n\t\t\t\tif (str === \"transparent\") {\n\t\t\t\t\tret.coords = KEYWORDS.black;\n\t\t\t\t\tret.alpha = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret.coords = KEYWORDS[str];\n\t\t\t\t}\n\n\t\t\t\tif (ret.coords) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}