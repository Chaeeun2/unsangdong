{"ast":null,"code":"import { x as RAD_TO_DEG, D as DEG_TO_RAD } from '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @submodule Trigonometry\n * @for p5\n * @requires core\n * @requires constants\n */\n\nfunction trigonometry(p5, fn) {\n  const DEGREES = fn.DEGREES = 'degrees';\n  const RADIANS = fn.RADIANS = 'radians';\n\n  /*\n   * all DEGREES/RADIANS conversion should be done in the p5 instance\n   * if possible, using the p5._toRadians(), p5._fromRadians() methods.\n   */\n  fn._angleMode = RADIANS;\n\n  /**\n   * Calculates the arc cosine of a number.\n   *\n   * `acos()` is the inverse of <a href=\"#/p5/cos\">cos()</a>. It expects\n   * arguments in the range -1 to 1. By default, `acos()` returns values in the\n   * range 0 to &pi; (about 3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range 0 to 180.\n   *\n   * @method acos\n   * @param  {Number} value value whose arc cosine is to be returned.\n   * @return {Number}       arc cosine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.142, -1, and 3.142 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI + QUARTER_PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.927, -0.707, and 2.356 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.acos = function (ratio) {\n    return this._fromRadians(Math.acos(ratio));\n  };\n\n  /**\n   * Calculates the arc sine of a number.\n   *\n   * `asin()` is the inverse of <a href=\"#/p5/sin\">sin()</a>. It expects input\n   * values in the range of -1 to 1. By default, `asin()` returns values in the\n   * range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2 (about 1.57). If\n   * the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES` then values are\n   * returned in the range -90 to 90.\n   *\n   * @method asin\n   * @param  {Number} value value whose arc sine is to be returned.\n   * @return {Number}       arc sine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 0.866, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI + PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, -0.866, and -1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.asin = function (ratio) {\n    return this._fromRadians(Math.asin(ratio));\n  };\n\n  /**\n   * Calculates the arc tangent of a number.\n   *\n   * `atan()` is the inverse of <a href=\"#/p5/tan\">tan()</a>. It expects input\n   * values in the range of -Infinity to Infinity. By default, `atan()` returns\n   * values in the range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2\n   * (about 1.57). If the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`\n   * then values are returned in the range -90 to 90.\n   *\n   * @method atan\n   * @param  {Number} value value whose arc tangent is to be returned.\n   * @return {Number}       arc tangent of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI + PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan = function (ratio) {\n    return this._fromRadians(Math.atan(ratio));\n  };\n\n  /**\n   * Calculates the angle formed by a point, the origin, and the positive\n   * x-axis.\n   *\n   * `atan2()` is most often used for orienting geometry to the mouse's\n   * position, as in `atan2(mouseY, mouseX)`. The first parameter is the point's\n   * y-coordinate and the second parameter is its x-coordinate.\n   *\n   * By default, `atan2()` returns values in the range\n   * -&pi; (about -3.14) to &pi; (3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range -180 to 180.\n   *\n   * @method atan2\n   * @param  {Number} y y-coordinate of the point.\n   * @param  {Number} x x-coordinate of the point.\n   * @return {Number}   arc tangent of the given point.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the top-left of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the angle between the mouse\n   *   // and the origin.\n   *   let a = atan2(mouseY, mouseX);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(0, 0, 60, 10);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the center of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Get the mouse's coordinates relative to the origin.\n   *   let x = mouseX - 50;\n   *   let y = mouseY - 50;\n   *\n   *   // Calculate the angle between the mouse and the origin.\n   *   let a = atan2(y, x);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(-30, -5, 60, 10);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan2 = function (y, x) {\n    return this._fromRadians(Math.atan2(y, x));\n  };\n\n  /**\n   * Calculates the cosine of an angle.\n   *\n   * `cos()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `cos()`\n   * calculates the cosine of an angle, using radians by default, or according\n   * to if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method cos\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       cosine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * cos(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.cos = function (angle) {\n    return Math.cos(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the sine of an angle.\n   *\n   * `sin()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `sin()`\n   * calculates the sine of an angle, using radians by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method sin\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       sine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates up and down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 50;\n   *   let y = 30 * sin(frameCount * 0.05) + 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * sin(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.sin = function (angle) {\n    return Math.sin(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the tangent of an angle.\n   *\n   * `tan()` is useful for many geometric tasks in creative coding. The values\n   * returned range from -Infinity to Infinity and repeat periodically as the\n   * input angle increases. `tan()` calculates the tan of an angle, using radians\n   * by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method tan\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       tangent of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of identical curves drawn with black dots. Each curve starts from the top of the canvas, continues down at a slight angle, flattens out at the middle of the canvas, then continues to the bottom.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 5 * tan(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.tan = function (angle) {\n    return Math.tan(this._toRadians(angle));\n  };\n\n  /**\n   * Converts an angle measured in radians to its value in degrees.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method degrees\n   * @param  {Number} radians radians value to convert to degrees.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate the angle conversion.\n   *   let rad = QUARTER_PI;\n   *   let deg = degrees(rad);\n   *\n   *   // Display the conversion.\n   *   text(`${round(rad, 2)} rad = ${deg}˚`, 10, 50);\n   *\n   *   describe('The text \"0.79 rad = 45˚\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.degrees = angle => angle * RAD_TO_DEG;\n\n  /**\n   * Converts an angle measured in degrees to its value in radians.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method radians\n   * @param  {Number} degrees degree value to convert to radians.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Caclulate the angle conversion.\n   *   let deg = 45;\n   *   let rad = radians(deg);\n   *\n   *   // Display the angle conversion.\n   *   text(`${deg}˚ = ${round(rad, 3)} rad`, 10, 50);\n   *\n   *   describe('The text \"45˚ = 0.785 rad\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.radians = angle => angle * DEG_TO_RAD;\n\n  /**\n   * Changes the unit system used to measure angles.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * Functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n   * <a href=\"#/p5/sin\">sin()</a> expect angles measured radians by default.\n   * Calling `angleMode(DEGREES)` switches to degrees. Calling\n   * `angleMode(RADIANS)` switches back to radians.\n   *\n   * Calling `angleMode()` with no arguments returns current angle mode, which\n   * is either `RADIANS` or `DEGREES`.\n   *\n   * @method angleMode\n   * @param {(RADIANS|DEGREES)} mode either RADIANS or DEGREES.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(QUARTER_PI);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(45);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = TWO_PI / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = 360 / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 2.86) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the upper line.\n   *   rotate(PI / 6);\n   *   line(0, 0, 80, 0);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Draw the lower line.\n   *   rotate(30);\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('Two diagonal lines radiating from the top-left corner of a square. The lines are oriented 30 degrees from the edges of the square and 30 degrees apart from each other.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method angleMode\n   * @return {(RADIANS|DEGREES)} mode either RADIANS or DEGREES\n   */\n  fn.angleMode = function (mode) {\n    // p5._validateParameters('angleMode', arguments);\n    if (typeof mode === 'undefined') {\n      return this._angleMode;\n    } else if (mode === DEGREES || mode === RADIANS) {\n      const prevMode = this._angleMode;\n\n      // No change\n      if (mode === prevMode) return;\n\n      // Otherwise adjust pRotation according to new mode\n      // This is necessary for acceleration events to work properly\n      if (mode === RADIANS) {\n        // Change pRotation to radians\n        this.pRotationX = this.pRotationX * DEG_TO_RAD;\n        this.pRotationY = this.pRotationY * DEG_TO_RAD;\n        this.pRotationZ = this.pRotationZ * DEG_TO_RAD;\n      } else {\n        // Change pRotation to degrees\n        this.pRotationX = this.pRotationX * RAD_TO_DEG;\n        this.pRotationY = this.pRotationY * RAD_TO_DEG;\n        this.pRotationZ = this.pRotationZ * RAD_TO_DEG;\n      }\n      this._angleMode = mode;\n    }\n  };\n\n  /**\n   * converts angles from the current angleMode to RADIANS\n   *\n   * @method _toRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toRadians = function (angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from the current angleMode to DEGREES\n   *\n   * @method _toDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toDegrees = function (angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from RADIANS into the current angleMode\n   *\n   * @method _fromRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromRadians = function (angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from DEGREES into the current angleMode\n   *\n   * @method _fromDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromDegrees = function (angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n}\nif (typeof p5 !== 'undefined') {\n  trigonometry(p5, p5.prototype);\n}\nexport { trigonometry as default };","map":{"version":3,"names":["x","RAD_TO_DEG","D","DEG_TO_RAD","trigonometry","p5","fn","DEGREES","RADIANS","_angleMode","acos","ratio","_fromRadians","Math","asin","atan","atan2","y","cos","angle","_toRadians","sin","tan","degrees","radians","angleMode","mode","prevMode","pRotationX","pRotationY","pRotationZ","_toDegrees","_fromDegrees","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/trigonometry.js"],"sourcesContent":["import { x as RAD_TO_DEG, D as DEG_TO_RAD } from '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @submodule Trigonometry\n * @for p5\n * @requires core\n * @requires constants\n */\n\n\nfunction trigonometry(p5, fn){\n  const DEGREES = fn.DEGREES = 'degrees';\n  const RADIANS = fn.RADIANS = 'radians';\n\n  /*\n   * all DEGREES/RADIANS conversion should be done in the p5 instance\n   * if possible, using the p5._toRadians(), p5._fromRadians() methods.\n   */\n  fn._angleMode = RADIANS;\n\n  /**\n   * Calculates the arc cosine of a number.\n   *\n   * `acos()` is the inverse of <a href=\"#/p5/cos\">cos()</a>. It expects\n   * arguments in the range -1 to 1. By default, `acos()` returns values in the\n   * range 0 to &pi; (about 3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range 0 to 180.\n   *\n   * @method acos\n   * @param  {Number} value value whose arc cosine is to be returned.\n   * @return {Number}       arc cosine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.142, -1, and 3.142 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI + QUARTER_PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.927, -0.707, and 2.356 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.acos = function(ratio) {\n    return this._fromRadians(Math.acos(ratio));\n  };\n\n  /**\n   * Calculates the arc sine of a number.\n   *\n   * `asin()` is the inverse of <a href=\"#/p5/sin\">sin()</a>. It expects input\n   * values in the range of -1 to 1. By default, `asin()` returns values in the\n   * range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2 (about 1.57). If\n   * the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES` then values are\n   * returned in the range -90 to 90.\n   *\n   * @method asin\n   * @param  {Number} value value whose arc sine is to be returned.\n   * @return {Number}       arc sine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 0.866, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI + PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, -0.866, and -1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.asin = function(ratio) {\n    return this._fromRadians(Math.asin(ratio));\n  };\n\n  /**\n   * Calculates the arc tangent of a number.\n   *\n   * `atan()` is the inverse of <a href=\"#/p5/tan\">tan()</a>. It expects input\n   * values in the range of -Infinity to Infinity. By default, `atan()` returns\n   * values in the range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2\n   * (about 1.57). If the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`\n   * then values are returned in the range -90 to 90.\n   *\n   * @method atan\n   * @param  {Number} value value whose arc tangent is to be returned.\n   * @return {Number}       arc tangent of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI + PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan = function(ratio) {\n    return this._fromRadians(Math.atan(ratio));\n  };\n\n  /**\n   * Calculates the angle formed by a point, the origin, and the positive\n   * x-axis.\n   *\n   * `atan2()` is most often used for orienting geometry to the mouse's\n   * position, as in `atan2(mouseY, mouseX)`. The first parameter is the point's\n   * y-coordinate and the second parameter is its x-coordinate.\n   *\n   * By default, `atan2()` returns values in the range\n   * -&pi; (about -3.14) to &pi; (3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range -180 to 180.\n   *\n   * @method atan2\n   * @param  {Number} y y-coordinate of the point.\n   * @param  {Number} x x-coordinate of the point.\n   * @return {Number}   arc tangent of the given point.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the top-left of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the angle between the mouse\n   *   // and the origin.\n   *   let a = atan2(mouseY, mouseX);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(0, 0, 60, 10);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the center of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Get the mouse's coordinates relative to the origin.\n   *   let x = mouseX - 50;\n   *   let y = mouseY - 50;\n   *\n   *   // Calculate the angle between the mouse and the origin.\n   *   let a = atan2(y, x);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(-30, -5, 60, 10);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan2 = function(y, x) {\n    return this._fromRadians(Math.atan2(y, x));\n  };\n\n  /**\n   * Calculates the cosine of an angle.\n   *\n   * `cos()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `cos()`\n   * calculates the cosine of an angle, using radians by default, or according\n   * to if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method cos\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       cosine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * cos(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.cos = function(angle) {\n    return Math.cos(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the sine of an angle.\n   *\n   * `sin()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `sin()`\n   * calculates the sine of an angle, using radians by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method sin\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       sine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates up and down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 50;\n   *   let y = 30 * sin(frameCount * 0.05) + 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * sin(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.sin = function(angle) {\n    return Math.sin(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the tangent of an angle.\n   *\n   * `tan()` is useful for many geometric tasks in creative coding. The values\n   * returned range from -Infinity to Infinity and repeat periodically as the\n   * input angle increases. `tan()` calculates the tan of an angle, using radians\n   * by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method tan\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       tangent of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of identical curves drawn with black dots. Each curve starts from the top of the canvas, continues down at a slight angle, flattens out at the middle of the canvas, then continues to the bottom.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 5 * tan(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.tan = function(angle) {\n    return Math.tan(this._toRadians(angle));\n  };\n\n  /**\n   * Converts an angle measured in radians to its value in degrees.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method degrees\n   * @param  {Number} radians radians value to convert to degrees.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate the angle conversion.\n   *   let rad = QUARTER_PI;\n   *   let deg = degrees(rad);\n   *\n   *   // Display the conversion.\n   *   text(`${round(rad, 2)} rad = ${deg}˚`, 10, 50);\n   *\n   *   describe('The text \"0.79 rad = 45˚\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.degrees = angle => angle * RAD_TO_DEG;\n\n  /**\n   * Converts an angle measured in degrees to its value in radians.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method radians\n   * @param  {Number} degrees degree value to convert to radians.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Caclulate the angle conversion.\n   *   let deg = 45;\n   *   let rad = radians(deg);\n   *\n   *   // Display the angle conversion.\n   *   text(`${deg}˚ = ${round(rad, 3)} rad`, 10, 50);\n   *\n   *   describe('The text \"45˚ = 0.785 rad\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.radians = angle => angle * DEG_TO_RAD;\n\n  /**\n   * Changes the unit system used to measure angles.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * Functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n   * <a href=\"#/p5/sin\">sin()</a> expect angles measured radians by default.\n   * Calling `angleMode(DEGREES)` switches to degrees. Calling\n   * `angleMode(RADIANS)` switches back to radians.\n   *\n   * Calling `angleMode()` with no arguments returns current angle mode, which\n   * is either `RADIANS` or `DEGREES`.\n   *\n   * @method angleMode\n   * @param {(RADIANS|DEGREES)} mode either RADIANS or DEGREES.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(QUARTER_PI);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(45);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = TWO_PI / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = 360 / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 2.86) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the upper line.\n   *   rotate(PI / 6);\n   *   line(0, 0, 80, 0);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Draw the lower line.\n   *   rotate(30);\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('Two diagonal lines radiating from the top-left corner of a square. The lines are oriented 30 degrees from the edges of the square and 30 degrees apart from each other.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method angleMode\n   * @return {(RADIANS|DEGREES)} mode either RADIANS or DEGREES\n   */\n  fn.angleMode = function(mode) {\n    // p5._validateParameters('angleMode', arguments);\n    if (typeof mode === 'undefined') {\n      return this._angleMode;\n    } else if (mode === DEGREES || mode === RADIANS) {\n      const prevMode = this._angleMode;\n\n      // No change\n      if(mode === prevMode) return;\n\n      // Otherwise adjust pRotation according to new mode\n      // This is necessary for acceleration events to work properly\n      if(mode === RADIANS) {\n        // Change pRotation to radians\n        this.pRotationX = this.pRotationX * DEG_TO_RAD;\n        this.pRotationY = this.pRotationY * DEG_TO_RAD;\n        this.pRotationZ = this.pRotationZ * DEG_TO_RAD;\n      } else {\n        // Change pRotation to degrees\n        this.pRotationX = this.pRotationX * RAD_TO_DEG;\n        this.pRotationY = this.pRotationY * RAD_TO_DEG;\n        this.pRotationZ = this.pRotationZ * RAD_TO_DEG;\n      }\n\n      this._angleMode = mode;\n    }\n  };\n\n  /**\n   * converts angles from the current angleMode to RADIANS\n   *\n   * @method _toRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toRadians = function(angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from the current angleMode to DEGREES\n   *\n   * @method _toDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toDegrees = function(angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from RADIANS into the current angleMode\n   *\n   * @method _fromRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromRadians = function(angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from DEGREES into the current angleMode\n   *\n   * @method _fromDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromDegrees = function(angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  trigonometry(p5, p5.prototype);\n}\n\nexport { trigonometry as default };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,UAAU,EAAEC,CAAC,IAAIC,UAAU,QAAQ,0BAA0B;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,YAAYA,CAACC,EAAE,EAAEC,EAAE,EAAC;EAC3B,MAAMC,OAAO,GAAGD,EAAE,CAACC,OAAO,GAAG,SAAS;EACtC,MAAMC,OAAO,GAAGF,EAAE,CAACE,OAAO,GAAG,SAAS;;EAEtC;AACF;AACA;AACA;EACEF,EAAE,CAACG,UAAU,GAAGD,OAAO;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,EAAE,CAACI,IAAI,GAAG,UAASC,KAAK,EAAE;IACxB,OAAO,IAAI,CAACC,YAAY,CAACC,IAAI,CAACH,IAAI,CAACC,KAAK,CAAC,CAAC;EAC5C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACQ,IAAI,GAAG,UAASH,KAAK,EAAE;IACxB,OAAO,IAAI,CAACC,YAAY,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK,CAAC,CAAC;EAC5C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACS,IAAI,GAAG,UAASJ,KAAK,EAAE;IACxB,OAAO,IAAI,CAACC,YAAY,CAACC,IAAI,CAACE,IAAI,CAACJ,KAAK,CAAC,CAAC;EAC5C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACU,KAAK,GAAG,UAASC,CAAC,EAAEjB,CAAC,EAAE;IACxB,OAAO,IAAI,CAACY,YAAY,CAACC,IAAI,CAACG,KAAK,CAACC,CAAC,EAAEjB,CAAC,CAAC,CAAC;EAC5C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,EAAE,CAACY,GAAG,GAAG,UAASC,KAAK,EAAE;IACvB,OAAON,IAAI,CAACK,GAAG,CAAC,IAAI,CAACE,UAAU,CAACD,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAACe,GAAG,GAAG,UAASF,KAAK,EAAE;IACvB,OAAON,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACD,UAAU,CAACD,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAACgB,GAAG,GAAG,UAASH,KAAK,EAAE;IACvB,OAAON,IAAI,CAACS,GAAG,CAAC,IAAI,CAACF,UAAU,CAACD,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAACiB,OAAO,GAAGJ,KAAK,IAAIA,KAAK,GAAGlB,UAAU;;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,EAAE,CAACkB,OAAO,GAAGL,KAAK,IAAIA,KAAK,GAAGhB,UAAU;;EAExmB,SAAS,GAAG,UAASC,IAAI,EAAE;IAC5B;IACA,IAAI,OAAOA,IAAI,KAAK,WAAW,EAAE;MAC/B,OAAO,IAAI,CAACjB,UAAU;IACxB,CAAC,MAAM,IAAIiB,IAAI,KAAKnB,OAAO,IAAImB,IAAI,KAAKlB,OAAO,EAAE;MAC/C,MAAMmB,QAAQ,GAAG,IAAI,CAAClB,UAAU;;MAEhC;MACA,IAAGiB,IAAI,KAAKC,QAAQ,EAAE;;MAEtB;MACA;MACA,IAAGD,IAAI,KAAKlB,OAAO,EAAE;QACnB;QACA,IAAI,CAACoB,UAAU,GAAG,IAAI,CAACA,UAAU,GAAGzB,UAAU;QAC9C,IAAI,CAAC0B,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG1B,UAAU;QAC9C,IAAI,CAAC2B,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG3B,UAAU;MAChD,CAAC,MAAM;QACL;QACA,IAAI,CAACyB,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG3B,UAAU;QAC9C,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG5B,UAAU;QAC9C,IAAI,CAAC6B,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG7B,UAAU;MAChD;MAEA,IAAI,CAACQ,UAAU,GAAGiB,IAAI;IACxB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,EAAE,CAACc,UAAU,GAAG,UAASD,KAAK,EAAE;IAC9B,IAAI,IAAI,CAACV,UAAU,KAAKF,OAAO,EAAE;MAC/B,OAAOY,KAAK,GAAGhB,UAAU;IAC3B;IACA,OAAOgB,KAAK;EACd,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAACyB,UAAU,GAAG,UAASZ,KAAK,EAAE;IAC9B,IAAI,IAAI,CAACV,UAAU,KAAKD,OAAO,EAAE;MAC/B,OAAOW,KAAK,GAAGlB,UAAU;IAC3B;IACA,OAAOkB,KAAK;EACd,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAACM,YAAY,GAAG,UAASO,KAAK,EAAE;IAChC,IAAI,IAAI,CAACV,UAAU,KAAKF,OAAO,EAAE;MAC/B,OAAOY,KAAK,GAAGlB,UAAU;IAC3B;IACA,OAAOkB,KAAK;EACd,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,EAAE,CAAC0B,YAAY,GAAG,UAASb,KAAK,EAAE;IAChC,IAAI,IAAI,CAACV,UAAU,KAAKD,OAAO,EAAE;MAC/B,OAAOW,KAAK,GAAGhB,UAAU;IAC3B;IACA,OAAOgB,KAAK;EACd,CAAC;AACH;AAEA,IAAG,OAAOd,EAAE,KAAK,WAAW,EAAC;EAC3BD,YAAY,CAACC,EAAE,EAAEA,EAAE,CAAC4B,SAAS,CAAC;AAChC;AAEA,SAAS7B,YAAY,IAAI8B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}