{"ast":null,"code":"import hooks from \"./hooks.js\";\nimport { multiplyMatrices } from \"./util.js\";\nexport const WHITES = {\n  // for compatibility, the four-digit chromaticity-derived ones everyone else uses\n  D50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\n  D65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290]\n};\nexport function getWhite(name) {\n  if (Array.isArray(name)) {\n    return name;\n  }\n  return WHITES[name];\n}\n\n// Adapt XYZ from white point W1 to W2\nexport default function adapt(W1, W2, XYZ, options = {}) {\n  W1 = getWhite(W1);\n  W2 = getWhite(W2);\n  if (!W1 || !W2) {\n    throw new TypeError(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);\n  }\n  if (W1 === W2) {\n    // Same whitepoints, no conversion needed\n    return XYZ;\n  }\n  let env = {\n    W1,\n    W2,\n    XYZ,\n    options\n  };\n  hooks.run(\"chromatic-adaptation-start\", env);\n  if (!env.M) {\n    if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n      env.M = [[1.0479297925449969, 0.022946870601609652, -0.05019226628920524], [0.02962780877005599, 0.9904344267538799, -0.017073799063418826], [-0.009243040646204504, 0.015055191490298152, 0.7518742814281371]];\n    } else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n      env.M = [[0.955473421488075, -0.02309845494876471, 0.06325924320057072], [-0.0283697093338637, 1.0099953980813041, 0.021041441191917323], [0.012314014864481998, -0.020507649298898964, 1.330365926242124]];\n    }\n  }\n  hooks.run(\"chromatic-adaptation-end\", env);\n  if (env.M) {\n    return multiplyMatrices(env.M, env.XYZ);\n  } else {\n    throw new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n  }\n}","map":{"version":3,"names":["hooks","multiplyMatrices","WHITES","D50","D65","getWhite","name","Array","isArray","adapt","W1","W2","XYZ","options","TypeError","env","run","M"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/colorjs.io/src/adapt.js"],"sourcesContent":["import hooks from \"./hooks.js\";\nimport {multiplyMatrices} from \"./util.js\";\n\nexport const WHITES = {\n\t// for compatibility, the four-digit chromaticity-derived ones everyone else uses\n\tD50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\n\tD65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],\n};\n\nexport function getWhite (name) {\n\tif (Array.isArray(name)) {\n\t\treturn name;\n\t}\n\n\treturn WHITES[name];\n}\n\n// Adapt XYZ from white point W1 to W2\nexport default function adapt (W1, W2, XYZ, options = {}) {\n\tW1 = getWhite(W1);\n\tW2 = getWhite(W2);\n\n\tif (!W1 || !W2) {\n\t\tthrow new TypeError(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);\n\t}\n\n\tif (W1 === W2) {\n\t\t// Same whitepoints, no conversion needed\n\t\treturn XYZ;\n\t}\n\n\tlet env = {W1, W2, XYZ, options};\n\n\thooks.run(\"chromatic-adaptation-start\", env);\n\n\tif (!env.M) {\n\t\tif (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n\t\t\tenv.M = [\n\t\t\t\t[ 1.0479297925449969, 0.022946870601609652, -0.05019226628920524 ],\n\t\t\t\t[ 0.02962780877005599, 0.9904344267538799, -0.017073799063418826 ],\n\t\t\t\t[ -0.009243040646204504, 0.015055191490298152, 0.7518742814281371 ],\n\t\t\t];\n\t\t}\n\t\telse if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n\n\t\t\tenv.M = [\n\t\t\t\t[ 0.955473421488075, -0.02309845494876471, 0.06325924320057072 ],\n\t\t\t\t[ -0.0283697093338637, 1.0099953980813041, 0.021041441191917323 ],\n\t\t\t\t[ 0.012314014864481998, -0.020507649298898964, 1.330365926242124 ],\n\t\t\t];\n\t\t}\n\t}\n\n\thooks.run(\"chromatic-adaptation-end\", env);\n\n\tif (env.M) {\n\t\treturn multiplyMatrices(env.M, env.XYZ);\n\t}\n\telse {\n\t\tthrow new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n\t}\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,SAAQC,gBAAgB,QAAO,WAAW;AAE1C,OAAO,MAAMC,MAAM,GAAG;EACrB;EACAC,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,EAAE,OAAO,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM,CAAC;EACjEC,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,EAAE,OAAO,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM;AACjE,CAAC;AAED,OAAO,SAASC,QAAQA,CAAEC,IAAI,EAAE;EAC/B,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACxB,OAAOA,IAAI;EACZ;EAEA,OAAOJ,MAAM,CAACI,IAAI,CAAC;AACpB;;AAEA;AACA,eAAe,SAASG,KAAKA,CAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzDH,EAAE,GAAGL,QAAQ,CAACK,EAAE,CAAC;EACjBC,EAAE,GAAGN,QAAQ,CAACM,EAAE,CAAC;EAEjB,IAAI,CAACD,EAAE,IAAI,CAACC,EAAE,EAAE;IACf,MAAM,IAAIG,SAAS,CAAC,kCAAkC,CAACJ,EAAE,GAAG,MAAM,GAAG,EAAE,GAAG,CAACA,EAAE,IAAI,CAACC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAACA,EAAE,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC;EACrH;EAEA,IAAID,EAAE,KAAKC,EAAE,EAAE;IACd;IACA,OAAOC,GAAG;EACX;EAEA,IAAIG,GAAG,GAAG;IAACL,EAAE;IAAEC,EAAE;IAAEC,GAAG;IAAEC;EAAO,CAAC;EAEhCb,KAAK,CAACgB,GAAG,CAAC,4BAA4B,EAAED,GAAG,CAAC;EAE5C,IAAI,CAACA,GAAG,CAACE,CAAC,EAAE;IACX,IAAIF,GAAG,CAACL,EAAE,KAAKR,MAAM,CAACE,GAAG,IAAIW,GAAG,CAACJ,EAAE,KAAKT,MAAM,CAACC,GAAG,EAAE;MACnDY,GAAG,CAACE,CAAC,GAAG,CACP,CAAE,kBAAkB,EAAE,oBAAoB,EAAE,CAAC,mBAAmB,CAAE,EAClE,CAAE,mBAAmB,EAAE,kBAAkB,EAAE,CAAC,oBAAoB,CAAE,EAClE,CAAE,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,kBAAkB,CAAE,CACnE;IACF,CAAC,MACI,IAAIF,GAAG,CAACL,EAAE,KAAKR,MAAM,CAACC,GAAG,IAAIY,GAAG,CAACJ,EAAE,KAAKT,MAAM,CAACE,GAAG,EAAE;MAExDW,GAAG,CAACE,CAAC,GAAG,CACP,CAAE,iBAAiB,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,CAAE,EAChE,CAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,oBAAoB,CAAE,EACjE,CAAE,oBAAoB,EAAE,CAAC,oBAAoB,EAAE,iBAAiB,CAAE,CAClE;IACF;EACD;EAEAjB,KAAK,CAACgB,GAAG,CAAC,0BAA0B,EAAED,GAAG,CAAC;EAE1C,IAAIA,GAAG,CAACE,CAAC,EAAE;IACV,OAAOhB,gBAAgB,CAACc,GAAG,CAACE,CAAC,EAAEF,GAAG,CAACH,GAAG,CAAC;EACxC,CAAC,MACI;IACJ,MAAM,IAAIE,SAAS,CAAC,oEAAoE,CAAC;EAC1F;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}