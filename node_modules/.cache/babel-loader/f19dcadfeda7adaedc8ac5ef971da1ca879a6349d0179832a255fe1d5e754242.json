{"ast":null,"code":"import { Vector } from '../math/p5.Vector.js';\nimport '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @submodule Quaternion\n */\n\nclass Quat {\n  constructor(w, x, y, z) {\n    this.w = w;\n    this.vec = new Vector(x, y, z);\n  }\n\n  /**\n     * Returns a Quaternion for the\n     * axis angle representation of the rotation\n     *\n     * @method fromAxisAngle\n     * @param {Number} [angle] Angle with which the points needs to be rotated\n     * @param {Number} [x] x component of the axis vector\n     * @param {Number} [y] y component of the axis vector\n     * @param {Number} [z] z component of the axis vector\n     * @chainable\n    */\n  static fromAxisAngle(angle, x, y, z) {\n    const w = Math.cos(angle / 2);\n    const vec = new Vector(x, y, z).normalize().mult(Math.sin(angle / 2));\n    return new Quat(w, vec.x, vec.y, vec.z);\n  }\n  conjugate() {\n    return new Quat(this.w, -this.vec.x, -this.vec.y, -this.vec.z);\n  }\n\n  /**\n     * Multiplies a quaternion with other quaternion.\n     * @method mult\n     * @param  {p5.Quat} [quat] quaternion to multiply with the quaternion calling the method.\n     * @chainable\n     */\n  multiply(quat) {\n    /* eslint-disable max-len */\n    return new Quat(this.w * quat.w - this.vec.x * quat.vec.x - this.vec.y * quat.vec.y - this.vec.z - quat.vec.z, this.w * quat.vec.x + this.vec.x * quat.w + this.vec.y * quat.vec.z - this.vec.z * quat.vec.y, this.w * quat.vec.y - this.vec.x * quat.vec.z + this.vec.y * quat.w + this.vec.z * quat.vec.x, this.w * quat.vec.z + this.vec.x * quat.vec.y - this.vec.y * quat.vec.x + this.vec.z * quat.w);\n    /* eslint-enable max-len */\n  }\n\n  /**\n   * This is similar to quaternion multiplication\n   * but when multipying vector with quaternion\n   * the multiplication can be simplified to the below formula.\n   * This was taken from the below stackexchange link\n   * https://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion/50545#50545\n   * @param {p5.Vector} [p] vector to rotate on the axis quaternion\n   */\n  rotateVector(p) {\n    return Vector.mult(p, this.w * this.w - this.vec.dot(this.vec)).add(Vector.mult(this.vec, 2 * p.dot(this.vec))).add(Vector.mult(this.vec, 2 * this.w).cross(p)).clampToZero();\n  }\n\n  /**\n     * Rotates the Quaternion by the quaternion passed\n     * which contains the axis of roation and angle of rotation\n     *\n     * @method rotateBy\n     * @param {p5.Quat} [axesQuat] axis quaternion which contains\n     *  the axis of rotation and angle of rotation\n     * @chainable\n     */\n  rotateBy(axesQuat) {\n    return axesQuat.multiply(this).multiply(axesQuat.conjugate()).vec.clampToZero();\n  }\n}\nfunction quat(p5, fn) {\n  /**\n   * A class to describe a Quaternion\n   * for vector rotations in the p5js webgl renderer.\n   * Please refer the following link for details on the implementation\n   * https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html\n   * @class p5.Quat\n   * @constructor\n   * @param {Number} [w] Scalar part of the quaternion\n   * @param {Number} [x] x component of imaginary part of quaternion\n   * @param {Number} [y] y component of imaginary part of quaternion\n   * @param {Number} [z] z component of imaginary part of quaternion\n   * @private\n   */\n  p5.Quat = Quat;\n}\nif (typeof p5 !== 'undefined') {\n  quat(p5, p5.prototype);\n}\nexport { Quat, quat as default };","map":{"version":3,"names":["Vector","Quat","constructor","w","x","y","z","vec","fromAxisAngle","angle","Math","cos","normalize","mult","sin","conjugate","multiply","quat","rotateVector","p","dot","add","cross","clampToZero","rotateBy","axesQuat","p5","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/webgl/p5.Quat.js"],"sourcesContent":["import { Vector } from '../math/p5.Vector.js';\nimport '../constants-BRcElHU3.js';\n\n/**\n * @module Math\n * @submodule Quaternion\n */\n\n\nclass Quat {\n  constructor(w, x, y, z) {\n    this.w = w;\n    this.vec = new Vector(x, y, z);\n  }\n\n  /**\n     * Returns a Quaternion for the\n     * axis angle representation of the rotation\n     *\n     * @method fromAxisAngle\n     * @param {Number} [angle] Angle with which the points needs to be rotated\n     * @param {Number} [x] x component of the axis vector\n     * @param {Number} [y] y component of the axis vector\n     * @param {Number} [z] z component of the axis vector\n     * @chainable\n    */\n  static fromAxisAngle(angle, x, y, z) {\n    const w = Math.cos(angle/2);\n    const vec = new Vector(x, y, z).normalize().mult(Math.sin(angle/2));\n    return new Quat(w, vec.x, vec.y, vec.z);\n  }\n\n  conjugate() {\n    return new Quat(this.w, -this.vec.x, -this.vec.y, -this.vec.z);\n  }\n\n  /**\n     * Multiplies a quaternion with other quaternion.\n     * @method mult\n     * @param  {p5.Quat} [quat] quaternion to multiply with the quaternion calling the method.\n     * @chainable\n     */\n  multiply(quat) {\n    /* eslint-disable max-len */\n    return new Quat(\n      this.w * quat.w - this.vec.x * quat.vec.x - this.vec.y * quat.vec.y - this.vec.z - quat.vec.z,\n      this.w * quat.vec.x + this.vec.x * quat.w + this.vec.y * quat.vec.z - this.vec.z * quat.vec.y,\n      this.w * quat.vec.y - this.vec.x * quat.vec.z + this.vec.y * quat.w + this.vec.z * quat.vec.x,\n      this.w * quat.vec.z + this.vec.x * quat.vec.y - this.vec.y * quat.vec.x + this.vec.z * quat.w\n    );\n    /* eslint-enable max-len */\n  }\n\n  /**\n   * This is similar to quaternion multiplication\n   * but when multipying vector with quaternion\n   * the multiplication can be simplified to the below formula.\n   * This was taken from the below stackexchange link\n   * https://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion/50545#50545\n   * @param {p5.Vector} [p] vector to rotate on the axis quaternion\n   */\n  rotateVector(p) {\n    return Vector.mult( p, this.w*this.w - this.vec.dot(this.vec) )\n      .add( Vector.mult( this.vec, 2 * p.dot(this.vec) ) )\n      .add( Vector.mult( this.vec, 2 * this.w ).cross( p ) )\n      .clampToZero();\n  }\n\n  /**\n     * Rotates the Quaternion by the quaternion passed\n     * which contains the axis of roation and angle of rotation\n     *\n     * @method rotateBy\n     * @param {p5.Quat} [axesQuat] axis quaternion which contains\n     *  the axis of rotation and angle of rotation\n     * @chainable\n     */\n  rotateBy(axesQuat) {\n    return axesQuat.multiply(this).multiply(axesQuat.conjugate()).\n      vec.clampToZero();\n  }\n}\n\nfunction quat(p5, fn){\n  /**\n   * A class to describe a Quaternion\n   * for vector rotations in the p5js webgl renderer.\n   * Please refer the following link for details on the implementation\n   * https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html\n   * @class p5.Quat\n   * @constructor\n   * @param {Number} [w] Scalar part of the quaternion\n   * @param {Number} [x] x component of imaginary part of quaternion\n   * @param {Number} [y] y component of imaginary part of quaternion\n   * @param {Number} [z] z component of imaginary part of quaternion\n   * @private\n   */\n  p5.Quat = Quat;\n}\n\nif(typeof p5 !== 'undefined'){\n  quat(p5, p5.prototype);\n}\n\nexport { Quat, quat as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}