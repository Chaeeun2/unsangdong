{"ast":null,"code":"/**\n * @module Data\n * @submodule Conversion\n * @for p5\n * @requires core\n */\n\nfunction conversion(p5, fn) {\n  /**\n   * Converts a `String` to a floating point (decimal) `Number`.\n   *\n   * `float()` converts strings that resemble numbers, such as `'12.34'`, into\n   * numbers.\n   *\n   * The parameter, `str`, is the string value to convert. For example, calling\n   * `float('12.34')` returns the number `12.34`.  If an array of strings is\n   * passed, as in `float(['12.34', '56.78'])`, then an array of numbers will be\n   * returned.\n   *\n   * Note: If a string can't be converted to a number, as in `float('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method float\n   * @param {String}  str string to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '12.3';\n   *\n   *   // Convert the string to a number.\n   *   let converted = float(original);\n   *\n   *   // Double the converted value.\n   *   let twice = converted * 2;\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(12);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} × 2 = ${twice}`, 50, 50);\n   *\n   *   describe('The text \"12.3 × 2 = 24.6\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of strings.\n   *   let original = ['60', '30', '15'];\n   *\n   *   // Convert the strings to numbers.\n   *   let diameters = float(original);\n   *\n   *   for (let d of diameters) {\n   *     // Draw a circle.\n   *     circle(50, 50, d);\n   *   }\n   *\n   *   describe('Three white, concentric circles on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method float\n   * @param {String[]} ns array of strings to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.float = function (str) {\n    if (str instanceof Array) {\n      return str.map(parseFloat);\n    }\n    return parseFloat(str);\n  };\n\n  /**\n   * Converts a `Boolean`, `String`, or decimal `Number` to an integer.\n   *\n   * `int()` converts values to integers. Integers are positive or negative\n   * numbers without decimals. If the original value has decimals, as in -34.56,\n   * they're removed to produce an integer such as -34.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `int(false)` or `int(true)`, then the number 0 (`false`) or 1 (`true`) will\n   * be returned. If `n` is a string or number, as in `int('45')` or\n   * `int(67.89)`, then an integer will be returned. If an array is passed, as\n   * in `int([12.34, 56.78])`, then an array of integers will be returned.\n   *\n   * Note: If a value can't be converted to a number, as in `int('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method int\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = false;\n   *\n   *   // Convert the Boolean to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"false : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '12.34';\n   *\n   *   // Convert the string to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} ≈ ${converted}`, 50, 50);\n   *\n   *   describe('The text \"12.34 ≈ 12\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a decimal number variable.\n   *   let original = 12.34;\n   *\n   *   // Convert the decimal number to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} ≈ ${converted}`, 50, 50);\n   *\n   *   describe('The text \"12.34 ≈ 12\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of strings.\n   *   let original = ['60', '30', '15'];\n   *\n   *   // Convert the strings to integers.\n   *   let diameters = int(original);\n   *\n   *   for (let d of diameters) {\n   *     // Draw a circle.\n   *     circle(50, 50, d);\n   *   }\n   *\n   *   describe('Three white, concentric circles on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method int\n   * @param {Array} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.int = function (n, radix = 10) {\n    if (n === Infinity || n === 'Infinity') {\n      return Infinity;\n    } else if (n === -Infinity || n === '-Infinity') {\n      return -Infinity;\n    } else if (typeof n === 'string') {\n      return parseInt(n, radix);\n    } else if (typeof n === 'number') {\n      return n | 0;\n    } else if (typeof n === 'boolean') {\n      return n ? 1 : 0;\n    } else if (n instanceof Array) {\n      return n.map(n => fn.int(n, radix));\n    }\n  };\n\n  /**\n   * Converts a `Boolean` or `Number` to `String`.\n   *\n   * `str()` converts values to strings. See the\n   * <a href=\"#/p5/String\">String</a> reference page for guidance on using\n   * template literals instead.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `str(false)` or `str(true)`, then the value will be returned as a string,\n   * as in `'false'` or `'true'`. If `n` is a number, as in `str(123)`, then its\n   * value will be returned as a string, as in `'123'`. If an array is passed,\n   * as in `str([12.34, 56.78])`, then an array of strings will be returned.\n   *\n   * @method str\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {String} converted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = false;\n   *\n   *   // Convert the Boolean to a string.\n   *   let converted = str(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"false : false\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 123;\n   *\n   *   // Convert the number to a string.\n   *   let converted = str(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"123 = 123\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = [12, 34, 56];\n   *\n   *   // Convert the numbers to strings.\n   *   let strings = str(original);\n   *\n   *   // Create an empty string variable.\n   *   let final = '';\n   *\n   *   // Concatenate all the strings.\n   *   for (let s of strings) {\n   *     final += s;\n   *   }\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the concatenated string.\n   *   text(final, 50, 50);\n   *\n   *   describe('The text \"123456\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.str = function (n) {\n    if (n instanceof Array) {\n      return n.map(fn.str);\n    } else {\n      return String(n);\n    }\n  };\n\n  /**\n   * Converts a `String` or `Number` to a `Boolean`.\n   *\n   * `boolean()` converts values to `true` or `false`.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a string, then\n   * `boolean('true')` will return `true` and every other string value will\n   * return `false`. If `n` is a number, then `boolean(0)` will return `false`\n   * and every other numeric value will return `true`. If an array is passed, as\n   * `in boolean([0, 1, 'true', 'blue'])`, then an array of Boolean values will\n   * be returned.\n   *\n   * @method boolean\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Boolean} converted Boolean value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 0;\n   *\n   *   // Convert the number to a Boolean value.\n   *   let converted = boolean(original);\n   *\n   *   // Style the circle based on the converted value.\n   *   if (converted === true) {\n   *     fill('blue');\n   *   } else {\n   *     fill('red');\n   *   }\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 40);\n   *\n   *   describe('A red circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = 'true';\n   *\n   *   // Convert the string to a Boolean value.\n   *   let converted = boolean(original);\n   *\n   *   // Style the circle based on the converted value.\n   *   if (converted === true) {\n   *     fill('blue');\n   *   } else {\n   *     fill('red');\n   *   }\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 40);\n   *\n   *   describe('A blue circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of values.\n   *   let original = [0, 'hi', 123, 'true'];\n   *\n   *   // Convert the array to a Boolean values.\n   *   let converted = boolean(original);\n   *\n   *   // Iterate over the array of converted Boolean values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Style the circle based on the converted value.\n   *     if (converted[i] === true) {\n   *       fill('blue');\n   *     } else {\n   *       fill('red');\n   *     }\n   *\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 20;\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 15);\n   *   }\n   *\n   *   describe(\n   *     'A row of circles on a gray background. The two circles on the left are red and the two on the right are blue.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method boolean\n   * @param {Array} ns values to convert.\n   * @return {Boolean[]} converted Boolean values.\n   */\n  fn.boolean = function (n) {\n    if (typeof n === 'number') {\n      return n !== 0;\n    } else if (typeof n === 'string') {\n      return n.toLowerCase() === 'true';\n    } else if (typeof n === 'boolean') {\n      return n;\n    } else if (n instanceof Array) {\n      return n.map(fn.boolean);\n    }\n  };\n\n  /**\n   * Converts a `Boolean`, `String`, or `Number` to its byte value.\n   *\n   * `byte()` converts a value to an integer (whole number) between -128 and\n   * 127. Values greater than 127 wrap around while negative values are\n   * unchanged. For example, 128 becomes -128 and -129 remains the same.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `byte(false)` or `byte(true)`, the number 0 (`false`) or 1 (`true`) will be\n   * returned. If `n` is a string or number, as in `byte('256')` or `byte(256)`,\n   * then the byte value will be returned. Decimal values are ignored. If an\n   * array is passed, as in `byte([true, 123, '456'])`, then an array of byte\n   * values will be returned.\n   *\n   * Note: If a value can't be converted to a number, as in `byte('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method byte\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Number} converted byte value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = true;\n   *\n   *   // Convert the Boolean to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"true : 1\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '256';\n   *\n   *   // Convert the string to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"256 : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 256;\n   *\n   *   // Convert the number to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"256 : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of values.\n   *   let original = [false, '64', 383];\n   *\n   *   // Convert the array elements to their byte values.\n   *   let converted = byte(original);\n   *\n   *   // Iterate over the converted array elements.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Style the circle.\n   *     fill(converted[i]);\n   *\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 25;\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 20);\n   *   }\n   *\n   *   describe(\n   *     'Three gray circles on a gray background. The circles get lighter from left to right.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method byte\n   * @param {Array} ns values to convert.\n   * @return {Number[]} converted byte values.\n   */\n  fn.byte = function (n) {\n    const nn = fn.int(n, 10);\n    if (typeof nn === 'number') {\n      return (nn + 128) % 256 - 128;\n    } else if (nn instanceof Array) {\n      return nn.map(fn.byte);\n    }\n  };\n\n  /**\n   * Converts a `Number` or `String` to a single-character `String`.\n   *\n   * `char()` converts numbers to their single-character string representations.\n   *\n   * The parameter, `n`, is the value to convert. If a number is passed, as in\n   * `char(65)`, the corresponding single-character string is returned. If a\n   * string is passed, as in `char('65')`, the string is converted to an integer\n   * (whole number) and the corresponding single-character string is returned.\n   * If an array is passed, as in `char([65, 66, 67])`, an array of\n   * single-character strings is returned.\n   *\n   * See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\" target=\"_blank\">MDN</a>\n   * for more information about conversions.\n   *\n   * @method char\n   * @param {String|Number} n value to convert.\n   * @return {String} converted single-character string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 65;\n   *\n   *   // Convert the number to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"65 : A\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '65';\n   *\n   *   // Convert the string to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"65 : A\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = ['65', 66, '67'];\n   *\n   *   // Convert the string to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over elements of the converted array.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${original[i]} : ${converted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"65 : A\", \"66 : B\", and \"67 : C\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method char\n   * @param {Array} ns values to convert.\n   * @return {String[]} converted single-character strings.\n   */\n  fn.char = function (n) {\n    if (typeof n === 'number' && !isNaN(n)) {\n      return String.fromCharCode(n);\n    } else if (n instanceof Array) {\n      return n.map(fn.char);\n    } else if (typeof n === 'string') {\n      return fn.char(parseInt(n, 10));\n    }\n  };\n\n  /**\n   * Converts a single-character `String` to a `Number`.\n   *\n   * `unchar()` converts single-character strings to their corresponding\n   * integer (whole number).\n   *\n   * The parameter, `n`, is the character to convert. For example,\n   * `unchar('A')`, returns the number 65. If an array is passed, as in\n   * `unchar(['A', 'B', 'C'])`, an array of integers is returned.\n   *\n   * @method unchar\n   * @param {String} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = 'A';\n   *\n   *   // Convert the string to a number.\n   *   let converted = unchar(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"A : 65\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of characters.\n   *   let original = ['A', 'B', 'C'];\n   *\n   *   // Convert the string to a number.\n   *   let converted = unchar(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over elements of the converted array.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${original[i]} : ${converted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"A : 65\", \"B : 66\", and \"C :67\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method unchar\n   * @param {String[]} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.unchar = function (n) {\n    if (typeof n === 'string' && n.length === 1) {\n      return n.charCodeAt(0);\n    } else if (n instanceof Array) {\n      return n.map(fn.unchar);\n    }\n  };\n\n  /**\n   * Converts a `Number` to a `String` with its hexadecimal value.\n   *\n   * `hex()` converts a number to a string with its hexadecimal number value.\n   * Hexadecimal (hex) numbers are base-16, which means there are 16 unique\n   * digits. Hex extends the numbers 0–9 with the letters A–F. For example, the\n   * number `11` (eleven) in base-10 is written as the letter `B` in hex.\n   *\n   * The first parameter, `n`, is the number to convert. For example, `hex(20)`,\n   * returns the string `'00000014'`. If an array is passed, as in\n   * `hex([1, 10, 100])`, an array of hexadecimal strings is returned.\n   *\n   * The second parameter, `digits`, is optional. If a number is passed, as in\n   * `hex(20, 2)`, it sets the number of hexadecimal digits to display. For\n   * example, calling `hex(20, 2)` returns the string `'14'`.\n   *\n   * @method hex\n   * @param {Number} n value to convert.\n   * @param {Number} [digits] number of digits to include.\n   * @return {String} converted hexadecimal value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 20;\n   *\n   *   // Convert the number to a hex string.\n   *   let converted = hex(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"20 = 00000014\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 20;\n   *\n   *   // Convert the number to a hex string.\n   *   // Only display two hex digits.\n   *   let converted = hex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"20 = 14\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = [1, 10, 100];\n   *\n   *   // Convert the numbers to hex strings.\n   *   // Only use two hex digits.\n   *   let converted = hex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(RIGHT, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over the converted values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${ original[i]} = ${converted[i]}`, 75, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"1 = 01\", \"10 = 0A\", and \"100 = 64\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method hex\n   * @param {Number[]} ns values to convert.\n   * @param {Number} [digits]\n   * @return {String[]} converted hexadecimal values.\n   */\n  fn.hex = function (n, digits) {\n    digits = digits === undefined || digits === null ? digits = 8 : digits;\n    if (n instanceof Array) {\n      return n.map(n => fn.hex(n, digits));\n    } else if (n === Infinity || n === -Infinity) {\n      const c = n === Infinity ? 'F' : '0';\n      return c.repeat(digits);\n    } else if (typeof n === 'number') {\n      if (n < 0) {\n        n = 0xffffffff + n + 1;\n      }\n      let hex = Number(n).toString(16).toUpperCase();\n      while (hex.length < digits) {\n        hex = `0${hex}`;\n      }\n      if (hex.length >= digits) {\n        hex = hex.substring(hex.length - digits, hex.length);\n      }\n      return hex;\n    }\n  };\n\n  /**\n   * Converts a `String` with a hexadecimal value to a  `Number`.\n   *\n   * `unhex()` converts a string with its hexadecimal number value to a number.\n   * Hexadecimal (hex) numbers are base-16, which means there are 16 unique\n   * digits. Hex extends the numbers 0–9 with the letters A–F. For example, the\n   * number `11` (eleven) in base-10 is written as the letter `B` in hex.\n   *\n   * The first parameter, `n`, is the hex string to convert. For example,\n   * `unhex('FF')`, returns the number 255. If an array is passed, as in\n   * `unhex(['00', '80', 'FF'])`, an array of numbers is returned.\n   *\n   * @method unhex\n   * @param {String} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a a hex string variable\n   *   let original = 'FF';\n   *\n   *   // Convert the hex string to a number.\n   *   let converted = unhex(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"FF = 255\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = ['00', '80', 'FF'];\n   *\n   *   // Convert the numbers to hex strings.\n   *   // Only use two hex digits.\n   *   let converted = unhex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(RIGHT, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over the converted values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${ original[i]} = ${converted[i]}`, 80, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"00 = 0\", \"80 = 128\", and \"FF = 255\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method unhex\n   * @param {String[]} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.unhex = function (n) {\n    if (n instanceof Array) {\n      return n.map(fn.unhex);\n    } else {\n      return parseInt(`0x${n}`, 16);\n    }\n  };\n}\nif (typeof p5 !== 'undefined') {\n  conversion(p5, p5.prototype);\n}\nexport { conversion as default };","map":{"version":3,"names":["conversion","p5","fn","float","str","Array","map","parseFloat","int","n","radix","Infinity","parseInt","String","boolean","toLowerCase","byte","nn","char","isNaN","fromCharCode","unchar","length","charCodeAt","hex","digits","undefined","c","repeat","Number","toString","toUpperCase","substring","unhex","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/utilities/conversion.js"],"sourcesContent":["/**\n * @module Data\n * @submodule Conversion\n * @for p5\n * @requires core\n */\n\nfunction conversion(p5, fn){\n  /**\n   * Converts a `String` to a floating point (decimal) `Number`.\n   *\n   * `float()` converts strings that resemble numbers, such as `'12.34'`, into\n   * numbers.\n   *\n   * The parameter, `str`, is the string value to convert. For example, calling\n   * `float('12.34')` returns the number `12.34`.  If an array of strings is\n   * passed, as in `float(['12.34', '56.78'])`, then an array of numbers will be\n   * returned.\n   *\n   * Note: If a string can't be converted to a number, as in `float('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method float\n   * @param {String}  str string to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '12.3';\n   *\n   *   // Convert the string to a number.\n   *   let converted = float(original);\n   *\n   *   // Double the converted value.\n   *   let twice = converted * 2;\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(12);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} × 2 = ${twice}`, 50, 50);\n   *\n   *   describe('The text \"12.3 × 2 = 24.6\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of strings.\n   *   let original = ['60', '30', '15'];\n   *\n   *   // Convert the strings to numbers.\n   *   let diameters = float(original);\n   *\n   *   for (let d of diameters) {\n   *     // Draw a circle.\n   *     circle(50, 50, d);\n   *   }\n   *\n   *   describe('Three white, concentric circles on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method float\n   * @param {String[]} ns array of strings to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.float = function(str) {\n    if (str instanceof Array) {\n      return str.map(parseFloat);\n    }\n    return parseFloat(str);\n  };\n\n  /**\n   * Converts a `Boolean`, `String`, or decimal `Number` to an integer.\n   *\n   * `int()` converts values to integers. Integers are positive or negative\n   * numbers without decimals. If the original value has decimals, as in -34.56,\n   * they're removed to produce an integer such as -34.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `int(false)` or `int(true)`, then the number 0 (`false`) or 1 (`true`) will\n   * be returned. If `n` is a string or number, as in `int('45')` or\n   * `int(67.89)`, then an integer will be returned. If an array is passed, as\n   * in `int([12.34, 56.78])`, then an array of integers will be returned.\n   *\n   * Note: If a value can't be converted to a number, as in `int('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method int\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = false;\n   *\n   *   // Convert the Boolean to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"false : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '12.34';\n   *\n   *   // Convert the string to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} ≈ ${converted}`, 50, 50);\n   *\n   *   describe('The text \"12.34 ≈ 12\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a decimal number variable.\n   *   let original = 12.34;\n   *\n   *   // Convert the decimal number to an integer.\n   *   let converted = int(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} ≈ ${converted}`, 50, 50);\n   *\n   *   describe('The text \"12.34 ≈ 12\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of strings.\n   *   let original = ['60', '30', '15'];\n   *\n   *   // Convert the strings to integers.\n   *   let diameters = int(original);\n   *\n   *   for (let d of diameters) {\n   *     // Draw a circle.\n   *     circle(50, 50, d);\n   *   }\n   *\n   *   describe('Three white, concentric circles on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method int\n   * @param {Array} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.int = function(n, radix = 10) {\n    if (n === Infinity || n === 'Infinity') {\n      return Infinity;\n    } else if (n === -Infinity || n === '-Infinity') {\n      return -Infinity;\n    } else if (typeof n === 'string') {\n      return parseInt(n, radix);\n    } else if (typeof n === 'number') {\n      return n | 0;\n    } else if (typeof n === 'boolean') {\n      return n ? 1 : 0;\n    } else if (n instanceof Array) {\n      return n.map(n => fn.int(n, radix));\n    }\n  };\n\n  /**\n   * Converts a `Boolean` or `Number` to `String`.\n   *\n   * `str()` converts values to strings. See the\n   * <a href=\"#/p5/String\">String</a> reference page for guidance on using\n   * template literals instead.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `str(false)` or `str(true)`, then the value will be returned as a string,\n   * as in `'false'` or `'true'`. If `n` is a number, as in `str(123)`, then its\n   * value will be returned as a string, as in `'123'`. If an array is passed,\n   * as in `str([12.34, 56.78])`, then an array of strings will be returned.\n   *\n   * @method str\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {String} converted string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = false;\n   *\n   *   // Convert the Boolean to a string.\n   *   let converted = str(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"false : false\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 123;\n   *\n   *   // Convert the number to a string.\n   *   let converted = str(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"123 = 123\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = [12, 34, 56];\n   *\n   *   // Convert the numbers to strings.\n   *   let strings = str(original);\n   *\n   *   // Create an empty string variable.\n   *   let final = '';\n   *\n   *   // Concatenate all the strings.\n   *   for (let s of strings) {\n   *     final += s;\n   *   }\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the concatenated string.\n   *   text(final, 50, 50);\n   *\n   *   describe('The text \"123456\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.str = function(n) {\n    if (n instanceof Array) {\n      return n.map(fn.str);\n    } else {\n      return String(n);\n    }\n  };\n\n  /**\n   * Converts a `String` or `Number` to a `Boolean`.\n   *\n   * `boolean()` converts values to `true` or `false`.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a string, then\n   * `boolean('true')` will return `true` and every other string value will\n   * return `false`. If `n` is a number, then `boolean(0)` will return `false`\n   * and every other numeric value will return `true`. If an array is passed, as\n   * `in boolean([0, 1, 'true', 'blue'])`, then an array of Boolean values will\n   * be returned.\n   *\n   * @method boolean\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Boolean} converted Boolean value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 0;\n   *\n   *   // Convert the number to a Boolean value.\n   *   let converted = boolean(original);\n   *\n   *   // Style the circle based on the converted value.\n   *   if (converted === true) {\n   *     fill('blue');\n   *   } else {\n   *     fill('red');\n   *   }\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 40);\n   *\n   *   describe('A red circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = 'true';\n   *\n   *   // Convert the string to a Boolean value.\n   *   let converted = boolean(original);\n   *\n   *   // Style the circle based on the converted value.\n   *   if (converted === true) {\n   *     fill('blue');\n   *   } else {\n   *     fill('red');\n   *   }\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 40);\n   *\n   *   describe('A blue circle on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of values.\n   *   let original = [0, 'hi', 123, 'true'];\n   *\n   *   // Convert the array to a Boolean values.\n   *   let converted = boolean(original);\n   *\n   *   // Iterate over the array of converted Boolean values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Style the circle based on the converted value.\n   *     if (converted[i] === true) {\n   *       fill('blue');\n   *     } else {\n   *       fill('red');\n   *     }\n   *\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 20;\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 15);\n   *   }\n   *\n   *   describe(\n   *     'A row of circles on a gray background. The two circles on the left are red and the two on the right are blue.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method boolean\n   * @param {Array} ns values to convert.\n   * @return {Boolean[]} converted Boolean values.\n   */\n  fn.boolean = function(n) {\n    if (typeof n === 'number') {\n      return n !== 0;\n    } else if (typeof n === 'string') {\n      return n.toLowerCase() === 'true';\n    } else if (typeof n === 'boolean') {\n      return n;\n    } else if (n instanceof Array) {\n      return n.map(fn.boolean);\n    }\n  };\n\n  /**\n   * Converts a `Boolean`, `String`, or `Number` to its byte value.\n   *\n   * `byte()` converts a value to an integer (whole number) between -128 and\n   * 127. Values greater than 127 wrap around while negative values are\n   * unchanged. For example, 128 becomes -128 and -129 remains the same.\n   *\n   * The parameter, `n`, is the value to convert. If `n` is a Boolean, as in\n   * `byte(false)` or `byte(true)`, the number 0 (`false`) or 1 (`true`) will be\n   * returned. If `n` is a string or number, as in `byte('256')` or `byte(256)`,\n   * then the byte value will be returned. Decimal values are ignored. If an\n   * array is passed, as in `byte([true, 123, '456'])`, then an array of byte\n   * values will be returned.\n   *\n   * Note: If a value can't be converted to a number, as in `byte('giraffe')`,\n   * then the value `NaN` (not a number) will be returned.\n   *\n   * @method byte\n   * @param {String|Boolean|Number} n value to convert.\n   * @return {Number} converted byte value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a Boolean variable.\n   *   let original = true;\n   *\n   *   // Convert the Boolean to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"true : 1\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '256';\n   *\n   *   // Convert the string to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"256 : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 256;\n   *\n   *   // Convert the number to its byte value.\n   *   let converted = byte(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"256 : 0\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of values.\n   *   let original = [false, '64', 383];\n   *\n   *   // Convert the array elements to their byte values.\n   *   let converted = byte(original);\n   *\n   *   // Iterate over the converted array elements.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Style the circle.\n   *     fill(converted[i]);\n   *\n   *     // Calculate the x-coordinate.\n   *     let x = (i + 1) * 25;\n   *\n   *     // Draw the circle.\n   *     circle(x, 50, 20);\n   *   }\n   *\n   *   describe(\n   *     'Three gray circles on a gray background. The circles get lighter from left to right.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method byte\n   * @param {Array} ns values to convert.\n   * @return {Number[]} converted byte values.\n   */\n  fn.byte = function(n) {\n    const nn = fn.int(n, 10);\n    if (typeof nn === 'number') {\n      return (nn + 128) % 256 - 128;\n    } else if (nn instanceof Array) {\n      return nn.map(fn.byte);\n    }\n  };\n\n  /**\n   * Converts a `Number` or `String` to a single-character `String`.\n   *\n   * `char()` converts numbers to their single-character string representations.\n   *\n   * The parameter, `n`, is the value to convert. If a number is passed, as in\n   * `char(65)`, the corresponding single-character string is returned. If a\n   * string is passed, as in `char('65')`, the string is converted to an integer\n   * (whole number) and the corresponding single-character string is returned.\n   * If an array is passed, as in `char([65, 66, 67])`, an array of\n   * single-character strings is returned.\n   *\n   * See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\" target=\"_blank\">MDN</a>\n   * for more information about conversions.\n   *\n   * @method char\n   * @param {String|Number} n value to convert.\n   * @return {String} converted single-character string.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 65;\n   *\n   *   // Convert the number to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"65 : A\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = '65';\n   *\n   *   // Convert the string to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"65 : A\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = ['65', 66, '67'];\n   *\n   *   // Convert the string to a char.\n   *   let converted = char(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over elements of the converted array.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${original[i]} : ${converted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"65 : A\", \"66 : B\", and \"67 : C\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method char\n   * @param {Array} ns values to convert.\n   * @return {String[]} converted single-character strings.\n   */\n  fn.char = function(n) {\n    if (typeof n === 'number' && !isNaN(n)) {\n      return String.fromCharCode(n);\n    } else if (n instanceof Array) {\n      return n.map(fn.char);\n    } else if (typeof n === 'string') {\n      return fn.char(parseInt(n, 10));\n    }\n  };\n\n  /**\n   * Converts a single-character `String` to a `Number`.\n   *\n   * `unchar()` converts single-character strings to their corresponding\n   * integer (whole number).\n   *\n   * The parameter, `n`, is the character to convert. For example,\n   * `unchar('A')`, returns the number 65. If an array is passed, as in\n   * `unchar(['A', 'B', 'C'])`, an array of integers is returned.\n   *\n   * @method unchar\n   * @param {String} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a string variable.\n   *   let original = 'A';\n   *\n   *   // Convert the string to a number.\n   *   let converted = unchar(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} : ${converted}`, 50, 50);\n   *\n   *   describe('The text \"A : 65\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of characters.\n   *   let original = ['A', 'B', 'C'];\n   *\n   *   // Convert the string to a number.\n   *   let converted = unchar(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over elements of the converted array.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${original[i]} : ${converted[i]}`, 50, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"A : 65\", \"B : 66\", and \"C :67\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method unchar\n   * @param {String[]} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.unchar = function(n) {\n    if (typeof n === 'string' && n.length === 1) {\n      return n.charCodeAt(0);\n    } else if (n instanceof Array) {\n      return n.map(fn.unchar);\n    }\n  };\n\n  /**\n   * Converts a `Number` to a `String` with its hexadecimal value.\n   *\n   * `hex()` converts a number to a string with its hexadecimal number value.\n   * Hexadecimal (hex) numbers are base-16, which means there are 16 unique\n   * digits. Hex extends the numbers 0–9 with the letters A–F. For example, the\n   * number `11` (eleven) in base-10 is written as the letter `B` in hex.\n   *\n   * The first parameter, `n`, is the number to convert. For example, `hex(20)`,\n   * returns the string `'00000014'`. If an array is passed, as in\n   * `hex([1, 10, 100])`, an array of hexadecimal strings is returned.\n   *\n   * The second parameter, `digits`, is optional. If a number is passed, as in\n   * `hex(20, 2)`, it sets the number of hexadecimal digits to display. For\n   * example, calling `hex(20, 2)` returns the string `'14'`.\n   *\n   * @method hex\n   * @param {Number} n value to convert.\n   * @param {Number} [digits] number of digits to include.\n   * @return {String} converted hexadecimal value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 20;\n   *\n   *   // Convert the number to a hex string.\n   *   let converted = hex(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(14);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"20 = 00000014\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a number variable.\n   *   let original = 20;\n   *\n   *   // Convert the number to a hex string.\n   *   // Only display two hex digits.\n   *   let converted = hex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"20 = 14\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = [1, 10, 100];\n   *\n   *   // Convert the numbers to hex strings.\n   *   // Only use two hex digits.\n   *   let converted = hex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(RIGHT, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over the converted values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${ original[i]} = ${converted[i]}`, 75, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"1 = 01\", \"10 = 0A\", and \"100 = 64\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method hex\n   * @param {Number[]} ns values to convert.\n   * @param {Number} [digits]\n   * @return {String[]} converted hexadecimal values.\n   */\n  fn.hex = function(n, digits) {\n    digits = digits === undefined || digits === null ? (digits = 8) : digits;\n    if (n instanceof Array) {\n      return n.map(n => fn.hex(n, digits));\n    } else if (n === Infinity || n === -Infinity) {\n      const c = n === Infinity ? 'F' : '0';\n      return c.repeat(digits);\n    } else if (typeof n === 'number') {\n      if (n < 0) {\n        n = 0xffffffff + n + 1;\n      }\n      let hex = Number(n)\n        .toString(16)\n        .toUpperCase();\n      while (hex.length < digits) {\n        hex = `0${hex}`;\n      }\n      if (hex.length >= digits) {\n        hex = hex.substring(hex.length - digits, hex.length);\n      }\n      return hex;\n    }\n  };\n\n  /**\n   * Converts a `String` with a hexadecimal value to a  `Number`.\n   *\n   * `unhex()` converts a string with its hexadecimal number value to a number.\n   * Hexadecimal (hex) numbers are base-16, which means there are 16 unique\n   * digits. Hex extends the numbers 0–9 with the letters A–F. For example, the\n   * number `11` (eleven) in base-10 is written as the letter `B` in hex.\n   *\n   * The first parameter, `n`, is the hex string to convert. For example,\n   * `unhex('FF')`, returns the number 255. If an array is passed, as in\n   * `unhex(['00', '80', 'FF'])`, an array of numbers is returned.\n   *\n   * @method unhex\n   * @param {String} n value to convert.\n   * @return {Number} converted number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a a hex string variable\n   *   let original = 'FF';\n   *\n   *   // Convert the hex string to a number.\n   *   let converted = unhex(original);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER, CENTER);\n   *   textSize(16);\n   *\n   *   // Display the original and converted values.\n   *   text(`${original} = ${converted}`, 50, 50);\n   *\n   *   describe('The text \"FF = 255\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let original = ['00', '80', 'FF'];\n   *\n   *   // Convert the numbers to hex strings.\n   *   // Only use two hex digits.\n   *   let converted = unhex(original, 2);\n   *\n   *   // Style the text.\n   *   textAlign(RIGHT, CENTER);\n   *   textSize(16);\n   *\n   *   // Iterate over the converted values.\n   *   for (let i = 0; i < converted.length; i += 1) {\n   *\n   *     // Calculate the y-coordinate.\n   *     let y = (i + 1) * 25;\n   *\n   *     // Display the original and converted values.\n   *     text(`${ original[i]} = ${converted[i]}`, 80, y);\n   *   }\n   *\n   *   describe(\n   *     'The text \"00 = 0\", \"80 = 128\", and \"FF = 255\" written on three separate lines. The text is in black on a gray background.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method unhex\n   * @param {String[]} ns values to convert.\n   * @return {Number[]} converted numbers.\n   */\n  fn.unhex = function(n) {\n    if (n instanceof Array) {\n      return n.map(fn.unhex);\n    } else {\n      return parseInt(`0x${n}`, 16);\n    }\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  conversion(p5, p5.prototype);\n}\n\nexport { conversion as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAUA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACEA,EAAE,CAACC,KAAK,GAAG,UAASC,GAAG,EAAE;IACvB,IAAIA,GAAG,YAAYC,KAAK,EAAE;MACxB,OAAOD,GAAG,CAACE,GAAG,CAACC,UAAU,CAAC;IAC5B;IACA,OAAOA,UAAU,CAACH,GAAG,CAAC;EACxtC,OAAOE,QAAQ;IACjB,CAAC,MAAM,IAAIF,CAAC,KAAK,CAACE,QAAQ,IAAIF,CAAC,KAAK,WAAW,EAAE;MAC/C,OAAO,CAACE,QAAQ;IAClB,CAAC,MAAM,IAAI,OAAOF,CAAC,KAAK,QAAQ,EAAE;MAChC,OAAOG,QAAQ,CAACH,CAAC,EAAEC,KAAK,CAAC;IAC3B,CAAC,MAAM,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;MAChC,OAAOA,CAAC,GAAG,CAAC;IACd,CAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE;MACjC,OAAOA,CAAC,GAAG,CAAC,GAAG,CAAC;IAClB,CAAC,MAAM,IAAIA,CAAC,YAAYJ,KAAK,EAAE;MAC7B,OAAOI,CAAC,CAACH,GAAG,CAACG,CAAC,IAAIP,EAAE,CAACM,GAAG,CAACC,CAAC,EAAEC,KAAK,CAAC,CAAC;IACrnB,IAAIA,CAAC,YAAYJ,KAAK,EAAE;MACtB,OAAOI,CAAC,CAACH,GAAG,CAACJ,EAAE,CAACE,GAAG,CAAC;IACtB,CAAC,MAAM;MACL,OAAOS,MAAM,CAACJ,CAAC,CAAC;IAClvB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MACzB,OAAOA,CAAC,KAAK,CAAC;IAChB,CAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MAChC,OAAOA,CAAC,CAACM,WAAW,CAAC,CAAC,KAAK,MAAM;IACnC,CAAC,MAAM,IAAI,OAAON,CAAC,KAAK,SAAS,EAAE;MACjC,OAAOA,CAAC;IACV,CAAC,MAAM,IAAIA,CAAC,YAAYJ,KAAK,EAAE;MAC7B,OAAOI,CAAC,CAACH,GAAG,CAACJ,EAAE,CAACY,OAAO,CAAC;IAC1B;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACEZ,EAAE,CAACc,IAAI,GAAG,UAASP,CAAC,EAAE;IACpB,MAAMQ,EAAE,GAAGf,EAAE,CAACM,GAAG,CAACC,CAAC,EAAE,EAAE,CAAC;IACxB,IAAI,OAAOQ,EAAE,KAAK,QAAQ,EAAE;MAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}