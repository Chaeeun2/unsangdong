{"ast":null,"code":"/**\n * @module Transform\n * @submodule Transform\n * @for p5\n * @requires core\n * @requires constants\n */\n\nfunction transform(p5, fn) {\n  /**\n   * Applies a transformation matrix to the coordinate system.\n   *\n   * Transformations such as\n   * <a href=\"#/p5/translate\">translate()</a>,\n   * <a href=\"#/p5/rotate\">rotate()</a>, and\n   * <a href=\"#/p5/scale\">scale()</a>\n   * use matrix-vector multiplication behind the scenes. A table of numbers,\n   * called a matrix, encodes each transformation. The values in the matrix\n   * then multiply each point on the canvas, which is represented by a vector.\n   *\n   * `applyMatrix()` allows for many transformations to be applied at once. See\n   * <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\" target=\"_blank\">Wikipedia</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web\" target=\"_blank\">MDN</a>\n   * for more details about transformations.\n   *\n   * There are two ways to call `applyMatrix()` in two and three dimensions.\n   *\n   * In 2D mode, the parameters `a`, `b`, `c`, `d`, `e`, and `f`, correspond to\n   * elements in the following transformation matrix:\n   *\n   * > <img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\n   * alt=\"The transformation matrix used when applyMatrix is called in 2D mode.\"/>\n   *\n   * The numbers can be passed individually, as in\n   * `applyMatrix(2, 0, 0, 0, 2, 0)`. They can also be passed in an array, as in\n   * `applyMatrix([2, 0, 0, 0, 2, 0])`.\n   *\n   * In 3D mode, the parameters `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`,\n   * `j`, `k`, `l`, `m`, `n`, `o`, and `p` correspond to elements in the\n   * following transformation matrix:\n   *\n   * <img style=\"max-width: 300px\" src=\"assets/transformation-matrix-4-4.png\"\n   * alt=\"The transformation matrix used when applyMatrix is called in 3D mode.\"/>\n   *\n   * The numbers can be passed individually, as in\n   * `applyMatrix(2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1)`. They can\n   * also be passed in an array, as in\n   * `applyMatrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1])`.\n   *\n   * By default, transformations accumulate. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `applyMatrix()` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to transform continuously.\n   *\n   * @method applyMatrix\n   * @param  {Array} arr an array containing the elements of the transformation matrix. Its length should be either 6 (2D) or 16 (3D).\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   applyMatrix(1, 0, 0, 1, 50, 50);\n   *\n   *   // Draw the circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   let m = [1, 0, 0, 1, 50, 50];\n   *   applyMatrix(m);\n   *\n   *   // Draw the circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   let angle = QUARTER_PI;\n   *   let ca = cos(angle);\n   *   let sa = sin(angle);\n   *   applyMatrix(ca, sa, -sa, ca, 0, 0);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by a factor of 0.5.\n   *   applyMatrix(0.5, 0, 0, 0.5, 0, 0);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears at (15, 10) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the shear factor.\n   *   let angle = QUARTER_PI;\n   *   let shearFactor = 1 / tan(HALF_PI - angle);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   applyMatrix(1, 0, shearFactor, 1, 0, 0);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   let ca = cos(angle);\n   *   let sa = sin(angle);\n   *   applyMatrix(ca, 0, sa, 0, 0, 1, 0, 0, -sa, 0, ca, 0, 0, 0, 0, 1);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method applyMatrix\n   * @param  {Number} a an element of the transformation matrix.\n   * @param  {Number} b an element of the transformation matrix.\n   * @param  {Number} c an element of the transformation matrix.\n   * @param  {Number} d an element of the transformation matrix.\n   * @param  {Number} e an element of the transformation matrix.\n   * @param  {Number} f an element of the transformation matrix.\n   * @chainable\n   */\n  /**\n   * @method applyMatrix\n   * @param  {Number} a\n   * @param  {Number} b\n   * @param  {Number} c\n   * @param  {Number} d\n   * @param  {Number} e\n   * @param  {Number} f\n   * @param  {Number} g an element of the transformation matrix.\n   * @param  {Number} h an element of the transformation matrix.\n   * @param  {Number} i an element of the transformation matrix.\n   * @param  {Number} j an element of the transformation matrix.\n   * @param  {Number} k an element of the transformation matrix.\n   * @param  {Number} l an element of the transformation matrix.\n   * @param  {Number} m an element of the transformation matrix.\n   * @param  {Number} n an element of the transformation matrix.\n   * @param  {Number} o an element of the transformation matrix.\n   * @param  {Number} p an element of the transformation matrix.\n   * @chainable\n   */\n  fn.applyMatrix = function (...args) {\n    let isTypedArray = args[0] instanceof Object.getPrototypeOf(Uint8Array);\n    if (Array.isArray(args[0]) || isTypedArray) {\n      this._renderer.applyMatrix(...args[0]);\n    } else {\n      this._renderer.applyMatrix(...args);\n    }\n    return this;\n  };\n\n  /**\n   * Clears all transformations applied to the coordinate system.\n   *\n   * @method resetMatrix\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two circles drawn on a gray background. A blue circle is at the top-left and a red circle is at the bottom-right.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw a blue circle at the coordinates (25, 25).\n   *   fill('blue');\n   *   circle(25, 25, 20);\n   *\n   *   // Clear all transformations.\n   *   // The origin is now at the top-left corner.\n   *   resetMatrix();\n   *\n   *   // Draw a red circle at the coordinates (25, 25).\n   *   fill('red');\n   *   circle(25, 25, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.resetMatrix = function () {\n    this._renderer.resetMatrix();\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system.\n   *\n   * By default, the positive x-axis points to the right and the positive y-axis\n   * points downward. The `rotate()` function changes this orientation by\n   * rotating the coordinate system about the origin. Everything drawn after\n   * `rotate()` is called will appear to be rotated.\n   *\n   * The first parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotate(1)` rotates the coordinate system clockwise 1 radian which is\n   * nearly 57Ëš. `rotate()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The second parameter, `axis`, is optional. It's used to orient 3D rotations\n   * in WebGL mode. If a <a href=\"#/p5.Vector\">p5.Vector</a> is passed, as in\n   * `rotate(QUARTER_PI, myVector)`, then the coordinate system will rotate\n   * `QUARTER_PI` radians about `myVector`. If an array of vector components is\n   * passed, as in `rotate(QUARTER_PI, [1, 0, 0])`, then the coordinate system\n   * will rotate `QUARTER_PI` radians about a vector with the components\n   * `[1, 0, 0]`.\n   *\n   * By default, transformations accumulate. For example, calling `rotate(1)`\n   * twice has the same effect as calling `rotate(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotate(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotate\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @param  {p5.Vector|Number[]} [axis] axis to rotate about in 3D.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotate(QUARTER_PI);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotate(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system another 1/16 turn.\n   *   rotate(QUARTER_PI / 2);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotate(45);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A white rectangle on a gray background. The rectangle rotates slowly about the top-left corner. It disappears and reappears periodically.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotate(angle);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\"A cube on a gray background. The cube's front face points to the top-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn about\n   *   // the axis [1, 1, 0].\n   *   let axis = createVector(1, 1, 0);\n   *   rotate(QUARTER_PI, axis);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\"A cube on a gray background. The cube's front face points to the top-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn about\n   *   // the axis [1, 1, 0].\n   *   let axis = [1, 1, 0];\n   *   rotate(QUARTER_PI, axis);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotate = function (angle, axis) {\n    // p5._validateParameters('rotate', arguments);\n    this._renderer.rotate(this._toRadians(angle), axis);\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the x-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateX(1)` rotates the coordinate system about the x-axis by 1 radian.\n   * `rotateX()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateX(1)`\n   * twice has the same effect as calling `rotateX(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateX(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method  rotateX\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateX(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateX(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateX(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateX(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateX(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateX = function (angle) {\n    this._assert3d('rotateX');\n    // p5._validateParameters('rotateX', arguments);\n    this._renderer.rotateX(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the y-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateY(1)` rotates the coordinate system about the y-axis by 1 radian.\n   * `rotateY()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateY(1)`\n   * twice has the same effect as calling `rotateY(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateY(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotateY\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateY(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateY(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateY(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateY(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateY(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateY = function (angle) {\n    this._assert3d('rotateY');\n    // p5._validateParameters('rotateY', arguments);\n    this._renderer.rotateY(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the z-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateZ(1)` rotates the coordinate system about the z-axis by 1 radian.\n   * `rotateZ()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateZ(1)`\n   * twice has the same effect as calling `rotateZ(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateZ(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotateZ\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateZ(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateZ(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateZ(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateZ(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateZ(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateZ = function (angle) {\n    this._assert3d('rotateZ');\n    // p5._validateParameters('rotateZ', arguments);\n    this._renderer.rotateZ(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Scales the coordinate system.\n   *\n   * By default, shapes are drawn at their original scale. A rectangle that's 50\n   * pixels wide appears to take up half the width of a 100 pixel-wide canvas.\n   * The `scale()` function can shrink or stretch the coordinate system so that\n   * shapes appear at different sizes. There are two ways to call `scale()` with\n   * parameters that set the scale factor(s).\n   *\n   * The first way to call `scale()` uses numbers to set the amount of scaling.\n   * The first parameter, `s`, sets the amount to scale each axis. For example,\n   * calling `scale(2)` stretches the x-, y-, and z-axes by a factor of 2. The\n   * next two parameters, `y` and `z`, are optional. They set the amount to\n   * scale the y- and z-axes. For example, calling `scale(2, 0.5, 1)` stretches\n   * the x-axis by a factor of 2, shrinks the y-axis by a factor of 0.5, and\n   * leaves the z-axis unchanged.\n   *\n   * The second way to call `scale()` uses a <a href=\"#/p5.Vector\">p5.Vector</a>\n   * object to set the scale factors. For example, calling `scale(myVector)`\n   * uses the x-, y-, and z-components of `myVector` to set the amount of\n   * scaling along the x-, y-, and z-axes. Doing so is the same as calling\n   * `scale(myVector.x, myVector.y, myVector.z)`.\n   *\n   * By default, transformations accumulate. For example, calling `scale(1)`\n   * twice has the same effect as calling `scale(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `scale(2)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to grow continuously.\n   *\n   * @method scale\n   * @param  {Number|p5.Vector|Number[]} s amount to scale along the positive x-axis.\n   * @param  {Number} [y] amount to scale along the positive y-axis. Defaults to `s`.\n   * @param  {Number} [z] amount to scale along the positive z-axis. Defaults to `y`.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by a factor of 0.5.\n   *   scale(0.5);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears at (15, 10) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle and a square drawn in white on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis.\n   *   scale(0.5, 1.3);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears as a rectangle at (15, 26) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle and a square drawn in white on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0.5, 1.3);\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis.\n   *   scale(v);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears as a rectangle at (15, 26) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'A red box and a blue box drawn on a gray background. The red box appears embedded in the blue box.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Turn on the lights.\n   *   lights();\n   *\n   *   // Style the spheres.\n   *   noStroke();\n   *\n   *   // Draw the red sphere.\n   *   fill('red');\n   *   box();\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis and\n   *   // 2 along the z-axis.\n   *   scale(0.5, 1.3, 2);\n   *\n   *   // Draw the blue sphere.\n   *   fill('blue');\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method scale\n   * @param  {p5.Vector|Number[]} scales vector whose components should be used to scale.\n   * @chainable\n   */\n  fn.scale = function (x, y, z) {\n    // p5._validateParameters('scale', arguments);\n    // Only check for Vector argument type if Vector is available\n    if (x instanceof p5.Vector) {\n      const v = x;\n      x = v.x;\n      y = v.y;\n      z = v.z;\n    } else if (Array.isArray(x)) {\n      const rg = x;\n      x = rg[0];\n      y = rg[1];\n      z = rg[2] || 1;\n    }\n    if (isNaN(y)) {\n      y = z = x;\n    } else if (isNaN(z)) {\n      z = 1;\n    }\n    this._renderer.scale(x, y, z);\n    return this;\n  };\n\n  /**\n   * Shears the x-axis so that shapes appear skewed.\n   *\n   * By default, the x- and y-axes are perpendicular. The `shearX()` function\n   * transforms the coordinate system so that x-coordinates are translated while\n   * y-coordinates are fixed.\n   *\n   * The first parameter, `angle`, is the amount to shear. For example, calling\n   * `shearX(1)` transforms all x-coordinates using the formula\n   * `x = x + y * tan(angle)`. `shearX()` interprets angle values using the\n   * current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `shearX(1)` twice has the same effect as calling `shearX(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `shearX(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to shear continuously.\n   *\n   * @method shearX\n   * @param  {Number} angle angle to shear by in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearX(QUARTER_PI);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearX(45);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shearX = function (angle) {\n    // p5._validateParameters('shearX', arguments);\n    const rad = this._toRadians(angle);\n    this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);\n    return this;\n  };\n\n  /**\n   * Shears the y-axis so that shapes appear skewed.\n   *\n   * By default, the x- and y-axes are perpendicular. The `shearY()` function\n   * transforms the coordinate system so that y-coordinates are translated while\n   * x-coordinates are fixed.\n   *\n   * The first parameter, `angle`, is the amount to shear. For example, calling\n   * `shearY(1)` transforms all y-coordinates using the formula\n   * `y = y + x * tan(angle)`. `shearY()` interprets angle values using the\n   * current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `shearY(1)` twice has the same effect as calling `shearY(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `shearY(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to shear continuously.\n   *\n   * @method shearY\n   * @param  {Number} angle angle to shear by in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearY(QUARTER_PI);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearY(45);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shearY = function (angle) {\n    // p5._validateParameters('shearY', arguments);\n    const rad = this._toRadians(angle);\n    this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);\n    return this;\n  };\n\n  /**\n   * Translates the coordinate system.\n   *\n   * By default, the origin `(0, 0)` is at the sketch's top-left corner in 2D\n   * mode and center in WebGL mode. The `translate()` function shifts the origin\n   * to a different position. Everything drawn after `translate()` is called\n   * will appear to be shifted. There are two ways to call `translate()` with\n   * parameters that set the origin's position.\n   *\n   * The first way to call `translate()` uses numbers to set the amount of\n   * translation. The first two parameters, `x` and `y`, set the amount to\n   * translate along the positive x- and y-axes. For example, calling\n   * `translate(20, 30)` translates the origin 20 pixels along the x-axis and 30\n   * pixels along the y-axis. The third parameter, `z`, is optional. It sets the\n   * amount to translate along the positive z-axis. For example, calling\n   * `translate(20, 30, 40)` translates the origin 20 pixels along the x-axis,\n   * 30 pixels along the y-axis, and 40 pixels along the z-axis.\n   *\n   * The second way to call `translate()` uses a\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object to set the amount of\n   * translation. For example, calling `translate(myVector)` uses the x-, y-,\n   * and z-components of `myVector` to set the amount to translate along the x-,\n   * y-, and z-axes. Doing so is the same as calling\n   * `translate(myVector.x, myVector.y, myVector.z)`.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `translate(10, 0)` twice has the same effect as calling\n   * `translate(20, 0)` once. The <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `translate(10, 0)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to move continuously.\n   *\n   * @method translate\n   * @param  {Number} x amount to translate along the positive x-axis.\n   * @param  {Number} y amount to translate along the positive y-axis.\n   * @param  {Number} [z] amount to translate along the positive z-axis.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two circles drawn on a gray background. The blue circle on the right overlaps the red circle at the center.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw the red circle.\n   *   fill('red');\n   *   circle(0, 0, 40);\n   *\n   *   // Translate the origin to the right.\n   *   translate(25, 0);\n   *\n   *   // Draw the blue circle.\n   *   fill('blue');\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle moves slowly from left to right on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the x-coordinate.\n   *   let x = frameCount * 0.2;\n   *\n   *   // Translate the origin.\n   *   translate(x, 50);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(50, 50);\n   *\n   *   // Translate the origin by the vector.\n   *   translate(v);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres sitting side-by-side on gray background. The sphere at the center is red. The sphere on the right is blue.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Turn on the lights.\n   *   lights();\n   *\n   *   // Style the spheres.\n   *   noStroke();\n   *\n   *   // Draw the red sphere.\n   *   fill('red');\n   *   sphere(10);\n   *\n   *   // Translate the origin to the right.\n   *   translate(30, 0, 0);\n   *\n   *   // Draw the blue sphere.\n   *   fill('blue');\n   *   sphere(10);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method translate\n   * @param  {p5.Vector} vector vector by which to translate.\n   * @chainable\n   */\n  fn.translate = function (x, y, z) {\n    // p5._validateParameters('translate', arguments);\n    if (this._renderer.isP3D) {\n      this._renderer.translate(x, y, z);\n    } else {\n      this._renderer.translate(x, y);\n    }\n    return this;\n  };\n\n  /**\n   * Begins a drawing group that contains its own styles and transformations.\n   *\n   * By default, styles such as <a href=\"#/p5/fill\">fill()</a> and\n   * transformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\n   * all drawing that follows. The `push()` and <a href=\"#/p5/pop\">pop()</a>\n   * functions can limit the effect of styles and transformations to a specific\n   * group of shapes, images, and text. For example, a group of shapes could be\n   * translated to follow the mouse without affecting the rest of the sketch:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw the face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * ellipse(-20, -20, 30, 20);\n   *\n   * // Draw the right eye.\n   * ellipse(20, -20, 30, 20);\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In the code snippet above, the bug's position isn't affected by\n   * `translate(mouseX, mouseY)` because that transformation is contained\n   * between `push()` and <a href=\"#/p5/pop\">pop()</a>. The bug moves around\n   * the entire canvas as expected.\n   *\n   * Note: `push()` and <a href=\"#/p5/pop\">pop()</a> are always called as a\n   * pair. Both functions are required to begin and end a drawing group.\n   *\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> can also be nested to create\n   * subgroups. For example, the code snippet above could be changed to give\n   * more detail to the frogâ€™s eyes:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw a face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * push();\n   * translate(-20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // Draw the right eye.\n   * push();\n   * translate(20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In this version, the code to draw each eye is contained between its own\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> functions. Doing so makes it\n   * easier to add details in the correct part of a drawing.\n   *\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> contain the effects of the\n   * following functions:\n   *\n   * - <a href=\"#/p5/fill\">fill()</a>\n   * - <a href=\"#/p5/noFill\">noFill()</a>\n   * - <a href=\"#/p5/noStroke\">noStroke()</a>\n   * - <a href=\"#/p5/stroke\">stroke()</a>\n   * - <a href=\"#/p5/tint\">tint()</a>\n   * - <a href=\"#/p5/noTint\">noTint()</a>\n   * - <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n   * - <a href=\"#/p5/strokeCap\">strokeCap()</a>\n   * - <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n   * - <a href=\"#/p5/imageMode\">imageMode()</a>\n   * - <a href=\"#/p5/rectMode\">rectMode()</a>\n   * - <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n   * - <a href=\"#/p5/colorMode\">colorMode()</a>\n   * - <a href=\"#/p5/textAlign\">textAlign()</a>\n   * - <a href=\"#/p5/textFont\">textFont()</a>\n   * - <a href=\"#/p5/textSize\">textSize()</a>\n   * - <a href=\"#/p5/textLeading\">textLeading()</a>\n   * - <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n   * - <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n   * - <a href=\"#/p5/rotate\">rotate()</a>\n   * - <a href=\"#/p5/scale\">scale()</a>\n   * - <a href=\"#/p5/shearX\">shearX()</a>\n   * - <a href=\"#/p5/shearY\">shearY()</a>\n   * - <a href=\"#/p5/translate\">translate()</a>\n   *\n   * In WebGL mode, `push()` and <a href=\"#/p5/pop\">pop()</a> contain the\n   * effects of a few additional styles:\n   *\n   * - <a href=\"#/p5/setCamera\">setCamera()</a>\n   * - <a href=\"#/p5/ambientLight\">ambientLight()</a>\n   * - <a href=\"#/p5/directionalLight\">directionalLight()</a>\n   * - <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n   * - <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n   * - <a href=\"#/p5/shininess\">shininess()</a>\n   * - <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n   * - <a href=\"#/p5/shader\">shader()</a>\n   *\n   * @method push\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the left circle.\n   *   circle(25, 50, 20);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the circle.\n   *   strokeWeight(5);\n   *   stroke('royalblue');\n   *   fill('orange');\n   *\n   *   // Draw the circle.\n   *   circle(0, 0, 20);\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw the right circle.\n   *   circle(75, 50, 20);\n   *\n   *   describe(\n   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(24);\n   *\n   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the mouse's position.\n   *   translate(mouseX, mouseY);\n   *\n   *   // Style the face.\n   *   noStroke();\n   *   fill('green');\n   *\n   *   // Draw a face.\n   *   circle(0, 0, 60);\n   *\n   *   // Style the eyes.\n   *   fill('white');\n   *\n   *   // Draw the left eye.\n   *   push();\n   *   translate(-20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // Draw the right eye.\n   *   push();\n   *   translate(20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw a bug.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *   text('ðŸ¦Ÿ', x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Draw the red sphere.\n   *   push();\n   *   translate(-25, 0, 0);\n   *   noStroke();\n   *   directionalLight(255, 0, 0, 0, 0, -1);\n   *   sphere(20);\n   *   pop();\n   *\n   *   // Draw the blue sphere.\n   *   push();\n   *   translate(25, 0, 0);\n   *   strokeWeight(0.3);\n   *   stroke(0, 0, 255);\n   *   noFill();\n   *   sphere(20);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.push = function () {\n    this._renderer.push();\n  };\n\n  /**\n   * Ends a drawing group that contains its own styles and transformations.\n   *\n   * By default, styles such as <a href=\"#/p5/fill\">fill()</a> and\n   * transformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\n   * all drawing that follows. The <a href=\"#/p5/push\">push()</a> and `pop()`\n   * functions can limit the effect of styles and transformations to a specific\n   * group of shapes, images, and text. For example, a group of shapes could be\n   * translated to follow the mouse without affecting the rest of the sketch:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw the face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * ellipse(-20, -20, 30, 20);\n   *\n   * // Draw the right eye.\n   * ellipse(20, -20, 30, 20);\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In the code snippet above, the bug's position isn't affected by\n   * `translate(mouseX, mouseY)` because that transformation is contained\n   * between <a href=\"#/p5/push\">push()</a> and `pop()`. The bug moves around\n   * the entire canvas as expected.\n   *\n   * Note: <a href=\"#/p5/push\">push()</a> and `pop()` are always called as a\n   * pair. Both functions are required to begin and end a drawing group.\n   *\n   * <a href=\"#/p5/push\">push()</a> and `pop()` can also be nested to create\n   * subgroups. For example, the code snippet above could be changed to give\n   * more detail to the frogâ€™s eyes:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw a face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * push();\n   * translate(-20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // Draw the right eye.\n   * push();\n   * translate(20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In this version, the code to draw each eye is contained between its own\n   * <a href=\"#/p5/push\">push()</a> and `pop()` functions. Doing so makes it\n   * easier to add details in the correct part of a drawing.\n   *\n   * <a href=\"#/p5/push\">push()</a> and `pop()` contain the effects of the\n   * following functions:\n   *\n   * - <a href=\"#/p5/fill\">fill()</a>\n   * - <a href=\"#/p5/noFill\">noFill()</a>\n   * - <a href=\"#/p5/noStroke\">noStroke()</a>\n   * - <a href=\"#/p5/stroke\">stroke()</a>\n   * - <a href=\"#/p5/tint\">tint()</a>\n   * - <a href=\"#/p5/noTint\">noTint()</a>\n   * - <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n   * - <a href=\"#/p5/strokeCap\">strokeCap()</a>\n   * - <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n   * - <a href=\"#/p5/imageMode\">imageMode()</a>\n   * - <a href=\"#/p5/rectMode\">rectMode()</a>\n   * - <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n   * - <a href=\"#/p5/colorMode\">colorMode()</a>\n   * - <a href=\"#/p5/textAlign\">textAlign()</a>\n   * - <a href=\"#/p5/textFont\">textFont()</a>\n   * - <a href=\"#/p5/textSize\">textSize()</a>\n   * - <a href=\"#/p5/textLeading\">textLeading()</a>\n   * - <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n   * - <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n   * - <a href=\"#/p5/rotate\">rotate()</a>\n   * - <a href=\"#/p5/scale\">scale()</a>\n   * - <a href=\"#/p5/shearX\">shearX()</a>\n   * - <a href=\"#/p5/shearY\">shearY()</a>\n   * - <a href=\"#/p5/translate\">translate()</a>\n   *\n   * In WebGL mode, <a href=\"#/p5/push\">push()</a> and `pop()` contain the\n   * effects of a few additional styles:\n   *\n   * - <a href=\"#/p5/setCamera\">setCamera()</a>\n   * - <a href=\"#/p5/ambientLight\">ambientLight()</a>\n   * - <a href=\"#/p5/directionalLight\">directionalLight()</a>\n   * - <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n   * - <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n   * - <a href=\"#/p5/shininess\">shininess()</a>\n   * - <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n   * - <a href=\"#/p5/shader\">shader()</a>\n   *\n   * @method pop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the left circle.\n   *   circle(25, 50, 20);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the circle.\n   *   strokeWeight(5);\n   *   stroke('royalblue');\n   *   fill('orange');\n   *\n   *   // Draw the circle.\n   *   circle(0, 0, 20);\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw the right circle.\n   *   circle(75, 50, 20);\n   *\n   *   describe(\n   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(24);\n   *\n   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the mouse's position.\n   *   translate(mouseX, mouseY);\n   *\n   *   // Style the face.\n   *   noStroke();\n   *   fill('green');\n   *\n   *   // Draw a face.\n   *   circle(0, 0, 60);\n   *\n   *   // Style the eyes.\n   *   fill('white');\n   *\n   *   // Draw the left eye.\n   *   push();\n   *   translate(-20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // Draw the right eye.\n   *   push();\n   *   translate(20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw a bug.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *   text('ðŸ¦Ÿ', x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Draw the red sphere.\n   *   push();\n   *   translate(-25, 0, 0);\n   *   noStroke();\n   *   directionalLight(255, 0, 0, 0, 0, -1);\n   *   sphere(20);\n   *   pop();\n   *\n   *   // Draw the blue sphere.\n   *   push();\n   *   translate(25, 0, 0);\n   *   strokeWeight(0.3);\n   *   stroke(0, 0, 255);\n   *   noFill();\n   *   sphere(20);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.pop = function () {\n    this._renderer.pop();\n  };\n}\nif (typeof p5 !== 'undefined') {\n  transform(p5, p5.prototype);\n}\nexport { transform as default };","map":{"version":3,"names":["transform","p5","fn","applyMatrix","args","isTypedArray","Object","getPrototypeOf","Uint8Array","Array","isArray","_renderer","resetMatrix","rotate","angle","axis","_toRadians","rotateX","_assert3d","rotateY","rotateZ","scale","x","y","z","Vector","v","rg","isNaN","shearX","rad","Math","tan","shearY","translate","isP3D","push","pop","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/core/transform.js"],"sourcesContent":["/**\n * @module Transform\n * @submodule Transform\n * @for p5\n * @requires core\n * @requires constants\n */\n\nfunction transform(p5, fn){\n  /**\n   * Applies a transformation matrix to the coordinate system.\n   *\n   * Transformations such as\n   * <a href=\"#/p5/translate\">translate()</a>,\n   * <a href=\"#/p5/rotate\">rotate()</a>, and\n   * <a href=\"#/p5/scale\">scale()</a>\n   * use matrix-vector multiplication behind the scenes. A table of numbers,\n   * called a matrix, encodes each transformation. The values in the matrix\n   * then multiply each point on the canvas, which is represented by a vector.\n   *\n   * `applyMatrix()` allows for many transformations to be applied at once. See\n   * <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\" target=\"_blank\">Wikipedia</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web\" target=\"_blank\">MDN</a>\n   * for more details about transformations.\n   *\n   * There are two ways to call `applyMatrix()` in two and three dimensions.\n   *\n   * In 2D mode, the parameters `a`, `b`, `c`, `d`, `e`, and `f`, correspond to\n   * elements in the following transformation matrix:\n   *\n   * > <img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\n   * alt=\"The transformation matrix used when applyMatrix is called in 2D mode.\"/>\n   *\n   * The numbers can be passed individually, as in\n   * `applyMatrix(2, 0, 0, 0, 2, 0)`. They can also be passed in an array, as in\n   * `applyMatrix([2, 0, 0, 0, 2, 0])`.\n   *\n   * In 3D mode, the parameters `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`,\n   * `j`, `k`, `l`, `m`, `n`, `o`, and `p` correspond to elements in the\n   * following transformation matrix:\n   *\n   * <img style=\"max-width: 300px\" src=\"assets/transformation-matrix-4-4.png\"\n   * alt=\"The transformation matrix used when applyMatrix is called in 3D mode.\"/>\n   *\n   * The numbers can be passed individually, as in\n   * `applyMatrix(2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1)`. They can\n   * also be passed in an array, as in\n   * `applyMatrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1])`.\n   *\n   * By default, transformations accumulate. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `applyMatrix()` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to transform continuously.\n   *\n   * @method applyMatrix\n   * @param  {Array} arr an array containing the elements of the transformation matrix. Its length should be either 6 (2D) or 16 (3D).\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   applyMatrix(1, 0, 0, 1, 50, 50);\n   *\n   *   // Draw the circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   let m = [1, 0, 0, 1, 50, 50];\n   *   applyMatrix(m);\n   *\n   *   // Draw the circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   let angle = QUARTER_PI;\n   *   let ca = cos(angle);\n   *   let sa = sin(angle);\n   *   applyMatrix(ca, sa, -sa, ca, 0, 0);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by a factor of 0.5.\n   *   applyMatrix(0.5, 0, 0, 0.5, 0, 0);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears at (15, 10) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the shear factor.\n   *   let angle = QUARTER_PI;\n   *   let shearFactor = 1 / tan(HALF_PI - angle);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   applyMatrix(1, 0, shearFactor, 1, 0, 0);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   let ca = cos(angle);\n   *   let sa = sin(angle);\n   *   applyMatrix(ca, 0, sa, 0, 0, 1, 0, 0, -sa, 0, ca, 0, 0, 0, 0, 1);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method applyMatrix\n   * @param  {Number} a an element of the transformation matrix.\n   * @param  {Number} b an element of the transformation matrix.\n   * @param  {Number} c an element of the transformation matrix.\n   * @param  {Number} d an element of the transformation matrix.\n   * @param  {Number} e an element of the transformation matrix.\n   * @param  {Number} f an element of the transformation matrix.\n   * @chainable\n   */\n  /**\n   * @method applyMatrix\n   * @param  {Number} a\n   * @param  {Number} b\n   * @param  {Number} c\n   * @param  {Number} d\n   * @param  {Number} e\n   * @param  {Number} f\n   * @param  {Number} g an element of the transformation matrix.\n   * @param  {Number} h an element of the transformation matrix.\n   * @param  {Number} i an element of the transformation matrix.\n   * @param  {Number} j an element of the transformation matrix.\n   * @param  {Number} k an element of the transformation matrix.\n   * @param  {Number} l an element of the transformation matrix.\n   * @param  {Number} m an element of the transformation matrix.\n   * @param  {Number} n an element of the transformation matrix.\n   * @param  {Number} o an element of the transformation matrix.\n   * @param  {Number} p an element of the transformation matrix.\n   * @chainable\n   */\n  fn.applyMatrix = function(...args) {\n    let isTypedArray = args[0] instanceof Object.getPrototypeOf(Uint8Array);\n    if (Array.isArray(args[0]) || isTypedArray) {\n      this._renderer.applyMatrix(...args[0]);\n    } else {\n      this._renderer.applyMatrix(...args);\n    }\n    return this;\n  };\n\n  /**\n   * Clears all transformations applied to the coordinate system.\n   *\n   * @method resetMatrix\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two circles drawn on a gray background. A blue circle is at the top-left and a red circle is at the bottom-right.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw a blue circle at the coordinates (25, 25).\n   *   fill('blue');\n   *   circle(25, 25, 20);\n   *\n   *   // Clear all transformations.\n   *   // The origin is now at the top-left corner.\n   *   resetMatrix();\n   *\n   *   // Draw a red circle at the coordinates (25, 25).\n   *   fill('red');\n   *   circle(25, 25, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.resetMatrix = function() {\n    this._renderer.resetMatrix();\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system.\n   *\n   * By default, the positive x-axis points to the right and the positive y-axis\n   * points downward. The `rotate()` function changes this orientation by\n   * rotating the coordinate system about the origin. Everything drawn after\n   * `rotate()` is called will appear to be rotated.\n   *\n   * The first parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotate(1)` rotates the coordinate system clockwise 1 radian which is\n   * nearly 57Ëš. `rotate()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The second parameter, `axis`, is optional. It's used to orient 3D rotations\n   * in WebGL mode. If a <a href=\"#/p5.Vector\">p5.Vector</a> is passed, as in\n   * `rotate(QUARTER_PI, myVector)`, then the coordinate system will rotate\n   * `QUARTER_PI` radians about `myVector`. If an array of vector components is\n   * passed, as in `rotate(QUARTER_PI, [1, 0, 0])`, then the coordinate system\n   * will rotate `QUARTER_PI` radians about a vector with the components\n   * `[1, 0, 0]`.\n   *\n   * By default, transformations accumulate. For example, calling `rotate(1)`\n   * twice has the same effect as calling `rotate(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotate(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotate\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @param  {p5.Vector|Number[]} [axis] axis to rotate about in 3D.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotate(QUARTER_PI);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotate(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system another 1/16 turn.\n   *   rotate(QUARTER_PI / 2);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe(\n   *     \"A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.\"\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotate(45);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'A white rectangle on a gray background. The rectangle rotates slowly about the top-left corner. It disappears and reappears periodically.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotate(angle);\n   *\n   *   // Draw a rectangle at coordinates (50, 0).\n   *   rect(50, 0, 40, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\"A cube on a gray background. The cube's front face points to the top-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn about\n   *   // the axis [1, 1, 0].\n   *   let axis = createVector(1, 1, 0);\n   *   rotate(QUARTER_PI, axis);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\"A cube on a gray background. The cube's front face points to the top-right.\");\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Rotate the coordinate system 1/8 turn about\n   *   // the axis [1, 1, 0].\n   *   let axis = [1, 1, 0];\n   *   rotate(QUARTER_PI, axis);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotate = function(angle, axis) {\n    // p5._validateParameters('rotate', arguments);\n    this._renderer.rotate(this._toRadians(angle), axis);\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the x-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateX(1)` rotates the coordinate system about the x-axis by 1 radian.\n   * `rotateX()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateX(1)`\n   * twice has the same effect as calling `rotateX(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateX(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method  rotateX\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateX(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateX(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateX(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateX(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateX(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateX = function(angle) {\n    this._assert3d('rotateX');\n    // p5._validateParameters('rotateX', arguments);\n    this._renderer.rotateX(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the y-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateY(1)` rotates the coordinate system about the y-axis by 1 radian.\n   * `rotateY()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateY(1)`\n   * twice has the same effect as calling `rotateY(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateY(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotateY\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateY(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateY(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateY(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateY(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateY(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateY = function(angle) {\n    this._assert3d('rotateY');\n    // p5._validateParameters('rotateY', arguments);\n    this._renderer.rotateY(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Rotates the coordinate system about the z-axis in WebGL mode.\n   *\n   * The parameter, `angle`, is the amount to rotate. For example, calling\n   * `rotateZ(1)` rotates the coordinate system about the z-axis by 1 radian.\n   * `rotateZ()` interprets angle values using the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling `rotateZ(1)`\n   * twice has the same effect as calling `rotateZ(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `rotateZ(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to spin.\n   *\n   * @method rotateZ\n   * @param  {Number} angle angle of rotation in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateZ(QUARTER_PI);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateZ(QUARTER_PI / 2);\n   *\n   *   // Rotate the coordinate system 1/16 turn.\n   *   rotateZ(QUARTER_PI / 2);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white cube on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system 1/8 turn.\n   *   rotateZ(45);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A white cube rotates slowly against a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Rotate the coordinate system a little more each frame.\n   *   let angle = frameCount * 0.01;\n   *   rotateZ(angle);\n   *\n   *   // Draw a box.\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.rotateZ = function(angle) {\n    this._assert3d('rotateZ');\n    // p5._validateParameters('rotateZ', arguments);\n    this._renderer.rotateZ(this._toRadians(angle));\n    return this;\n  };\n\n  /**\n   * Scales the coordinate system.\n   *\n   * By default, shapes are drawn at their original scale. A rectangle that's 50\n   * pixels wide appears to take up half the width of a 100 pixel-wide canvas.\n   * The `scale()` function can shrink or stretch the coordinate system so that\n   * shapes appear at different sizes. There are two ways to call `scale()` with\n   * parameters that set the scale factor(s).\n   *\n   * The first way to call `scale()` uses numbers to set the amount of scaling.\n   * The first parameter, `s`, sets the amount to scale each axis. For example,\n   * calling `scale(2)` stretches the x-, y-, and z-axes by a factor of 2. The\n   * next two parameters, `y` and `z`, are optional. They set the amount to\n   * scale the y- and z-axes. For example, calling `scale(2, 0.5, 1)` stretches\n   * the x-axis by a factor of 2, shrinks the y-axis by a factor of 0.5, and\n   * leaves the z-axis unchanged.\n   *\n   * The second way to call `scale()` uses a <a href=\"#/p5.Vector\">p5.Vector</a>\n   * object to set the scale factors. For example, calling `scale(myVector)`\n   * uses the x-, y-, and z-components of `myVector` to set the amount of\n   * scaling along the x-, y-, and z-axes. Doing so is the same as calling\n   * `scale(myVector.x, myVector.y, myVector.z)`.\n   *\n   * By default, transformations accumulate. For example, calling `scale(1)`\n   * twice has the same effect as calling `scale(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions\n   * can be used to isolate transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `scale(2)` inside the <a href=\"#/p5/draw\">draw()</a> function won't cause\n   * shapes to grow continuously.\n   *\n   * @method scale\n   * @param  {Number|p5.Vector|Number[]} s amount to scale along the positive x-axis.\n   * @param  {Number} [y] amount to scale along the positive y-axis. Defaults to `s`.\n   * @param  {Number} [z] amount to scale along the positive z-axis. Defaults to `y`.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by a factor of 0.5.\n   *   scale(0.5);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears at (15, 10) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle and a square drawn in white on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis.\n   *   scale(0.5, 1.3);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears as a rectangle at (15, 26) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle and a square drawn in white on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a square at (30, 20).\n   *   square(30, 20, 40);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0.5, 1.3);\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis.\n   *   scale(v);\n   *\n   *   // Draw a square at (30, 20).\n   *   // It appears as a rectangle at (15, 26) after scaling.\n   *   square(30, 20, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'A red box and a blue box drawn on a gray background. The red box appears embedded in the blue box.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Turn on the lights.\n   *   lights();\n   *\n   *   // Style the spheres.\n   *   noStroke();\n   *\n   *   // Draw the red sphere.\n   *   fill('red');\n   *   box();\n   *\n   *   // Scale the coordinate system by factors of\n   *   // 0.5 along the x-axis and\n   *   // 1.3 along the y-axis and\n   *   // 2 along the z-axis.\n   *   scale(0.5, 1.3, 2);\n   *\n   *   // Draw the blue sphere.\n   *   fill('blue');\n   *   box();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method scale\n   * @param  {p5.Vector|Number[]} scales vector whose components should be used to scale.\n   * @chainable\n   */\n  fn.scale = function(x, y, z) {\n    // p5._validateParameters('scale', arguments);\n    // Only check for Vector argument type if Vector is available\n    if (x instanceof p5.Vector) {\n      const v = x;\n      x = v.x;\n      y = v.y;\n      z = v.z;\n    } else if (Array.isArray(x)) {\n      const rg = x;\n      x = rg[0];\n      y = rg[1];\n      z = rg[2] || 1;\n    }\n    if (isNaN(y)) {\n      y = z = x;\n    } else if (isNaN(z)) {\n      z = 1;\n    }\n\n    this._renderer.scale(x, y, z);\n\n    return this;\n  };\n\n  /**\n   * Shears the x-axis so that shapes appear skewed.\n   *\n   * By default, the x- and y-axes are perpendicular. The `shearX()` function\n   * transforms the coordinate system so that x-coordinates are translated while\n   * y-coordinates are fixed.\n   *\n   * The first parameter, `angle`, is the amount to shear. For example, calling\n   * `shearX(1)` transforms all x-coordinates using the formula\n   * `x = x + y * tan(angle)`. `shearX()` interprets angle values using the\n   * current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `shearX(1)` twice has the same effect as calling `shearX(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `shearX(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to shear continuously.\n   *\n   * @method shearX\n   * @param  {Number} angle angle to shear by in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearX(QUARTER_PI);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearX(45);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shearX = function(angle) {\n    // p5._validateParameters('shearX', arguments);\n    const rad = this._toRadians(angle);\n    this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);\n    return this;\n  };\n\n  /**\n   * Shears the y-axis so that shapes appear skewed.\n   *\n   * By default, the x- and y-axes are perpendicular. The `shearY()` function\n   * transforms the coordinate system so that y-coordinates are translated while\n   * x-coordinates are fixed.\n   *\n   * The first parameter, `angle`, is the amount to shear. For example, calling\n   * `shearY(1)` transforms all y-coordinates using the formula\n   * `y = y + x * tan(angle)`. `shearY()` interprets angle values using the\n   * current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `shearY(1)` twice has the same effect as calling `shearY(2)` once. The\n   * <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `shearY(1)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to shear continuously.\n   *\n   * @method shearY\n   * @param  {Number} angle angle to shear by in the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearY(QUARTER_PI);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white quadrilateral on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Shear the coordinate system along the x-axis.\n   *   shearY(45);\n   *\n   *   // Draw the square.\n   *   square(0, 0, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.shearY = function(angle) {\n    // p5._validateParameters('shearY', arguments);\n    const rad = this._toRadians(angle);\n    this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);\n    return this;\n  };\n\n  /**\n   * Translates the coordinate system.\n   *\n   * By default, the origin `(0, 0)` is at the sketch's top-left corner in 2D\n   * mode and center in WebGL mode. The `translate()` function shifts the origin\n   * to a different position. Everything drawn after `translate()` is called\n   * will appear to be shifted. There are two ways to call `translate()` with\n   * parameters that set the origin's position.\n   *\n   * The first way to call `translate()` uses numbers to set the amount of\n   * translation. The first two parameters, `x` and `y`, set the amount to\n   * translate along the positive x- and y-axes. For example, calling\n   * `translate(20, 30)` translates the origin 20 pixels along the x-axis and 30\n   * pixels along the y-axis. The third parameter, `z`, is optional. It sets the\n   * amount to translate along the positive z-axis. For example, calling\n   * `translate(20, 30, 40)` translates the origin 20 pixels along the x-axis,\n   * 30 pixels along the y-axis, and 40 pixels along the z-axis.\n   *\n   * The second way to call `translate()` uses a\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object to set the amount of\n   * translation. For example, calling `translate(myVector)` uses the x-, y-,\n   * and z-components of `myVector` to set the amount to translate along the x-,\n   * y-, and z-axes. Doing so is the same as calling\n   * `translate(myVector.x, myVector.y, myVector.z)`.\n   *\n   * By default, transformations accumulate. For example, calling\n   * `translate(10, 0)` twice has the same effect as calling\n   * `translate(20, 0)` once. The <a href=\"#/p5/push\">push()</a> and\n   * <a href=\"#/p5/pop\">pop()</a> functions can be used to isolate\n   * transformations within distinct drawing groups.\n   *\n   * Note: Transformations are reset at the beginning of the draw loop. Calling\n   * `translate(10, 0)` inside the <a href=\"#/p5/draw\">draw()</a> function won't\n   * cause shapes to move continuously.\n   *\n   * @method translate\n   * @param  {Number} x amount to translate along the positive x-axis.\n   * @param  {Number} y amount to translate along the positive y-axis.\n   * @param  {Number} [z] amount to translate along the positive z-axis.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\n   *     'Two circles drawn on a gray background. The blue circle on the right overlaps the red circle at the center.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Draw the red circle.\n   *   fill('red');\n   *   circle(0, 0, 40);\n   *\n   *   // Translate the origin to the right.\n   *   translate(25, 0);\n   *\n   *   // Draw the blue circle.\n   *   fill('blue');\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle moves slowly from left to right on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the x-coordinate.\n   *   let x = frameCount * 0.2;\n   *\n   *   // Translate the origin.\n   *   translate(x, 50);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(50, 50);\n   *\n   *   // Translate the origin by the vector.\n   *   translate(v);\n   *\n   *   // Draw a circle at coordinates (0, 0).\n   *   circle(0, 0, 40);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres sitting side-by-side on gray background. The sphere at the center is red. The sphere on the right is blue.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Turn on the lights.\n   *   lights();\n   *\n   *   // Style the spheres.\n   *   noStroke();\n   *\n   *   // Draw the red sphere.\n   *   fill('red');\n   *   sphere(10);\n   *\n   *   // Translate the origin to the right.\n   *   translate(30, 0, 0);\n   *\n   *   // Draw the blue sphere.\n   *   fill('blue');\n   *   sphere(10);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method translate\n   * @param  {p5.Vector} vector vector by which to translate.\n   * @chainable\n   */\n  fn.translate = function(x, y, z) {\n    // p5._validateParameters('translate', arguments);\n    if (this._renderer.isP3D) {\n      this._renderer.translate(x, y, z);\n    } else {\n      this._renderer.translate(x, y);\n    }\n    return this;\n  };\n\n  /**\n   * Begins a drawing group that contains its own styles and transformations.\n   *\n   * By default, styles such as <a href=\"#/p5/fill\">fill()</a> and\n   * transformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\n   * all drawing that follows. The `push()` and <a href=\"#/p5/pop\">pop()</a>\n   * functions can limit the effect of styles and transformations to a specific\n   * group of shapes, images, and text. For example, a group of shapes could be\n   * translated to follow the mouse without affecting the rest of the sketch:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw the face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * ellipse(-20, -20, 30, 20);\n   *\n   * // Draw the right eye.\n   * ellipse(20, -20, 30, 20);\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In the code snippet above, the bug's position isn't affected by\n   * `translate(mouseX, mouseY)` because that transformation is contained\n   * between `push()` and <a href=\"#/p5/pop\">pop()</a>. The bug moves around\n   * the entire canvas as expected.\n   *\n   * Note: `push()` and <a href=\"#/p5/pop\">pop()</a> are always called as a\n   * pair. Both functions are required to begin and end a drawing group.\n   *\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> can also be nested to create\n   * subgroups. For example, the code snippet above could be changed to give\n   * more detail to the frogâ€™s eyes:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw a face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * push();\n   * translate(-20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // Draw the right eye.\n   * push();\n   * translate(20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In this version, the code to draw each eye is contained between its own\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> functions. Doing so makes it\n   * easier to add details in the correct part of a drawing.\n   *\n   * `push()` and <a href=\"#/p5/pop\">pop()</a> contain the effects of the\n   * following functions:\n   *\n   * - <a href=\"#/p5/fill\">fill()</a>\n   * - <a href=\"#/p5/noFill\">noFill()</a>\n   * - <a href=\"#/p5/noStroke\">noStroke()</a>\n   * - <a href=\"#/p5/stroke\">stroke()</a>\n   * - <a href=\"#/p5/tint\">tint()</a>\n   * - <a href=\"#/p5/noTint\">noTint()</a>\n   * - <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n   * - <a href=\"#/p5/strokeCap\">strokeCap()</a>\n   * - <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n   * - <a href=\"#/p5/imageMode\">imageMode()</a>\n   * - <a href=\"#/p5/rectMode\">rectMode()</a>\n   * - <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n   * - <a href=\"#/p5/colorMode\">colorMode()</a>\n   * - <a href=\"#/p5/textAlign\">textAlign()</a>\n   * - <a href=\"#/p5/textFont\">textFont()</a>\n   * - <a href=\"#/p5/textSize\">textSize()</a>\n   * - <a href=\"#/p5/textLeading\">textLeading()</a>\n   * - <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n   * - <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n   * - <a href=\"#/p5/rotate\">rotate()</a>\n   * - <a href=\"#/p5/scale\">scale()</a>\n   * - <a href=\"#/p5/shearX\">shearX()</a>\n   * - <a href=\"#/p5/shearY\">shearY()</a>\n   * - <a href=\"#/p5/translate\">translate()</a>\n   *\n   * In WebGL mode, `push()` and <a href=\"#/p5/pop\">pop()</a> contain the\n   * effects of a few additional styles:\n   *\n   * - <a href=\"#/p5/setCamera\">setCamera()</a>\n   * - <a href=\"#/p5/ambientLight\">ambientLight()</a>\n   * - <a href=\"#/p5/directionalLight\">directionalLight()</a>\n   * - <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n   * - <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n   * - <a href=\"#/p5/shininess\">shininess()</a>\n   * - <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n   * - <a href=\"#/p5/shader\">shader()</a>\n   *\n   * @method push\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the left circle.\n   *   circle(25, 50, 20);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the circle.\n   *   strokeWeight(5);\n   *   stroke('royalblue');\n   *   fill('orange');\n   *\n   *   // Draw the circle.\n   *   circle(0, 0, 20);\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw the right circle.\n   *   circle(75, 50, 20);\n   *\n   *   describe(\n   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(24);\n   *\n   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the mouse's position.\n   *   translate(mouseX, mouseY);\n   *\n   *   // Style the face.\n   *   noStroke();\n   *   fill('green');\n   *\n   *   // Draw a face.\n   *   circle(0, 0, 60);\n   *\n   *   // Style the eyes.\n   *   fill('white');\n   *\n   *   // Draw the left eye.\n   *   push();\n   *   translate(-20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // Draw the right eye.\n   *   push();\n   *   translate(20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw a bug.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *   text('ðŸ¦Ÿ', x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Draw the red sphere.\n   *   push();\n   *   translate(-25, 0, 0);\n   *   noStroke();\n   *   directionalLight(255, 0, 0, 0, 0, -1);\n   *   sphere(20);\n   *   pop();\n   *\n   *   // Draw the blue sphere.\n   *   push();\n   *   translate(25, 0, 0);\n   *   strokeWeight(0.3);\n   *   stroke(0, 0, 255);\n   *   noFill();\n   *   sphere(20);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.push = function() {\n    this._renderer.push();\n  };\n\n  /**\n   * Ends a drawing group that contains its own styles and transformations.\n   *\n   * By default, styles such as <a href=\"#/p5/fill\">fill()</a> and\n   * transformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\n   * all drawing that follows. The <a href=\"#/p5/push\">push()</a> and `pop()`\n   * functions can limit the effect of styles and transformations to a specific\n   * group of shapes, images, and text. For example, a group of shapes could be\n   * translated to follow the mouse without affecting the rest of the sketch:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw the face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * ellipse(-20, -20, 30, 20);\n   *\n   * // Draw the right eye.\n   * ellipse(20, -20, 30, 20);\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In the code snippet above, the bug's position isn't affected by\n   * `translate(mouseX, mouseY)` because that transformation is contained\n   * between <a href=\"#/p5/push\">push()</a> and `pop()`. The bug moves around\n   * the entire canvas as expected.\n   *\n   * Note: <a href=\"#/p5/push\">push()</a> and `pop()` are always called as a\n   * pair. Both functions are required to begin and end a drawing group.\n   *\n   * <a href=\"#/p5/push\">push()</a> and `pop()` can also be nested to create\n   * subgroups. For example, the code snippet above could be changed to give\n   * more detail to the frogâ€™s eyes:\n   *\n   * ```js\n   * // Begin the drawing group.\n   * push();\n   *\n   * // Translate the origin to the mouse's position.\n   * translate(mouseX, mouseY);\n   *\n   * // Style the face.\n   * noStroke();\n   * fill('green');\n   *\n   * // Draw a face.\n   * circle(0, 0, 60);\n   *\n   * // Style the eyes.\n   * fill('white');\n   *\n   * // Draw the left eye.\n   * push();\n   * translate(-20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // Draw the right eye.\n   * push();\n   * translate(20, -20);\n   * ellipse(0, 0, 30, 20);\n   * fill('black');\n   * circle(0, 0, 8);\n   * pop();\n   *\n   * // End the drawing group.\n   * pop();\n   *\n   * // Draw a bug.\n   * let x = random(0, 100);\n   * let y = random(0, 100);\n   * text('ðŸ¦Ÿ', x, y);\n   * ```\n   *\n   * In this version, the code to draw each eye is contained between its own\n   * <a href=\"#/p5/push\">push()</a> and `pop()` functions. Doing so makes it\n   * easier to add details in the correct part of a drawing.\n   *\n   * <a href=\"#/p5/push\">push()</a> and `pop()` contain the effects of the\n   * following functions:\n   *\n   * - <a href=\"#/p5/fill\">fill()</a>\n   * - <a href=\"#/p5/noFill\">noFill()</a>\n   * - <a href=\"#/p5/noStroke\">noStroke()</a>\n   * - <a href=\"#/p5/stroke\">stroke()</a>\n   * - <a href=\"#/p5/tint\">tint()</a>\n   * - <a href=\"#/p5/noTint\">noTint()</a>\n   * - <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n   * - <a href=\"#/p5/strokeCap\">strokeCap()</a>\n   * - <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n   * - <a href=\"#/p5/imageMode\">imageMode()</a>\n   * - <a href=\"#/p5/rectMode\">rectMode()</a>\n   * - <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n   * - <a href=\"#/p5/colorMode\">colorMode()</a>\n   * - <a href=\"#/p5/textAlign\">textAlign()</a>\n   * - <a href=\"#/p5/textFont\">textFont()</a>\n   * - <a href=\"#/p5/textSize\">textSize()</a>\n   * - <a href=\"#/p5/textLeading\">textLeading()</a>\n   * - <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n   * - <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n   * - <a href=\"#/p5/rotate\">rotate()</a>\n   * - <a href=\"#/p5/scale\">scale()</a>\n   * - <a href=\"#/p5/shearX\">shearX()</a>\n   * - <a href=\"#/p5/shearY\">shearY()</a>\n   * - <a href=\"#/p5/translate\">translate()</a>\n   *\n   * In WebGL mode, <a href=\"#/p5/push\">push()</a> and `pop()` contain the\n   * effects of a few additional styles:\n   *\n   * - <a href=\"#/p5/setCamera\">setCamera()</a>\n   * - <a href=\"#/p5/ambientLight\">ambientLight()</a>\n   * - <a href=\"#/p5/directionalLight\">directionalLight()</a>\n   * - <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n   * - <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n   * - <a href=\"#/p5/shininess\">shininess()</a>\n   * - <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n   * - <a href=\"#/p5/shader\">shader()</a>\n   *\n   * @method pop\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the left circle.\n   *   circle(25, 50, 20);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the circle.\n   *   strokeWeight(5);\n   *   stroke('royalblue');\n   *   fill('orange');\n   *\n   *   // Draw the circle.\n   *   circle(0, 0, 20);\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw the right circle.\n   *   circle(75, 50, 20);\n   *\n   *   describe(\n   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(24);\n   *\n   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Begin the drawing group.\n   *   push();\n   *\n   *   // Translate the origin to the mouse's position.\n   *   translate(mouseX, mouseY);\n   *\n   *   // Style the face.\n   *   noStroke();\n   *   fill('green');\n   *\n   *   // Draw a face.\n   *   circle(0, 0, 60);\n   *\n   *   // Style the eyes.\n   *   fill('white');\n   *\n   *   // Draw the left eye.\n   *   push();\n   *   translate(-20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // Draw the right eye.\n   *   push();\n   *   translate(20, -20);\n   *   ellipse(0, 0, 30, 20);\n   *   fill('black');\n   *   circle(0, 0, 8);\n   *   pop();\n   *\n   *   // End the drawing group.\n   *   pop();\n   *\n   *   // Draw a bug.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *   text('ðŸ¦Ÿ', x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Click and drag the mouse to view the scene from different angles.\n   *\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe(\n   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n   *   );\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Enable orbiting with the mouse.\n   *   orbitControl();\n   *\n   *   // Draw the red sphere.\n   *   push();\n   *   translate(-25, 0, 0);\n   *   noStroke();\n   *   directionalLight(255, 0, 0, 0, 0, -1);\n   *   sphere(20);\n   *   pop();\n   *\n   *   // Draw the blue sphere.\n   *   push();\n   *   translate(25, 0, 0);\n   *   strokeWeight(0.3);\n   *   stroke(0, 0, 255);\n   *   noFill();\n   *   sphere(20);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.pop = function() {\n    this._renderer.pop();\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  transform(p5, p5.prototype);\n}\n\nexport { transform as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAASA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACxjC,IAAIC,YAAY,GAAGD,IAAI,CAAC,CAAC,CAAC,YAAYE,MAAM,CAACC,cAAc,CAACC,UAAU,CAAC;IACvE,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIC,YAAY,EAAE;MAC1C,IAAI,CAACM,SAAS,CAACR,WAAW,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,MAAM;MACL,IAAI,CAACO,SAAS,CAACR,WAAW,CAAC,GAAGC,IAAI,CAAC;IACrC;IACA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,EAAE,CAACU,WAAW,GAAG,YAAW;IAC1B,IAAI,CAACD,SAAS,CAACC,WAAW,CAAC,CAAC;IAC5B,OAAO,IAAI;EACbhC;IACA,IAAI,CAACJ,SAAS,CAACE,MAAM,CAAC,IAAI,CAACG,UAAU,CAACF,KAAK,CAAC,EAAEC,IAAI,CAAC;IACnD,OAAO,IAAI;EACbb,EAAE,CAACe,OAAO,GAAG,UAASH,KAAK,EAAE;IAC3B,IAAI,CAACI,SAAS,CAAC,SAAS,CAAC;IACzB;IACA,IAAI,CAACP,SAAS,CAACM,OAAO,CAAC,IAAI,CAACD,UAAU,CAACF,KAAK,CAAC,CAAC;IAC9C,OAAO,IAAI;EACbiB,OAAO,GAAG,UAASL,KAAK,EAAE;IAC3B,IAAI,CAACI,SAAS,CAAC,SAAS,CAAC;IACzB;IACA,IAAI,CAACP,SAAS,CAACQ,OAAO,CAAC,IAAI,CAACH,UAAU,CAACF,KAAK,CAAC,CAAC;IAC9C,OAAO,IAAI;EACbkB,OAAO,GAAG,UAASN,KAAK,EAAE;IAC3B,IAAI,CAACI,SAAS,CAAC,SAAS,CAAC;IACzB;IACA,IAAI,CAACP,SAAS,CAACS,OAAO,CAAC,IAAI,CAACJ,UAAU,CAACF,KAAK,CAAC,CAAC;IAC9C,OAAO,IAAI;EACbmB,KAAK,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC3B;IACA;IACA,IAAIF,CAAC,YAAYrB,EAAE,CAACwB,MAAM,EAAE;MAC1B,MAAMC,CAAC,GAAGJ,CAAC;MACXA,CAAC,GAAGI,CAAC,CAACJ,CAAC;MACPC,CAAC,GAAGG,CAAC,CAACH,CAAC;MACPC,CAAC,GAAGE,CAAC,CAACF,CAAC;IACT,CAAC,MAAM,IAAIf,KAAK,CAACC,OAAO,CAACY,CAAC,CAAC,EAAE;MAC3B,MAAMK,EAAE,GAAGL,CAAC;MACZA,CAAC,GAAGK,EAAE,CAAC,CAAC,CAAC;MACTJ,CAAC,GAAGI,EAAE,CAAC,CAAC,CAAC;MACTH,CAAC,GAAGG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAChB;IACA,IAAIC,KAAK,CAACL,CAAC,CAAC,EAAE;MACZA,CAAC,GAAGC,CAAC,GAAGF,CAAC;IACX,CAAC,MAAM,IAAIM,KAAK,CAACJ,CAAC,CAAC,EAAE;MACnBA,CAAC,GAAG,CAAC;IACP;IAEA,IAAI,CAACb,SAAS,CAACU,KAAK,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAE7B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEtB,EAAE,CAAC2B,MAAM,GAAG,UAASf,KAAK,EAAE;IAC1B;IACA,MAAMgB,GAAG,GAAG,IAAI,CAACd,UAAU,CAACF,KAAK,CAAC;IAClC,IAAI,CAACH,SAAS,CAACR,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE4B,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5B,EAAE,CAAC+B,MAAM,GAAG,UAASnB,KAAK,EAAE;IAC1B;IACA,MAAMgB,GAAG,GAAG,IAAI,CAACd,UAAU,CAACF,KAAK,CAAC;IAClC,IAAI,CAACH,SAAS,CAACR,WAAW,CAAC,CAAC,EAAE4B,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACE5B,EAAE,CAACgC,SAAS,GAAG,UAASZ,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC/B;IACA,IAAI,IAAI,CAACb,SAAS,CAACwB,KAAK,EAAE;MACxB,IAAI,CAACxB,SAAS,CAACuB,SAAS,CAACZ,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACnC,CAAC,MAAM;MACL,IAAI,CAACb,SAAS,CAACuB,SAAS,CAACZ,CAAC,EAAEC,CAAC,CAAC;IAChC;IACA,OAAO,IAAI;EACbrB,EAAE,CAACkC,IAAI,GAAG,YAAW;IACnB,IAAI,CAACzB,SAAS,CAACyB,IAAI,CAAC,CAAC;EACvlC,EAAE,CAACmC,GAAG,GAAG,YAAW;IAClB,IAAI,CAAC1B,SAAS,CAAC0B,GAAG,CAAC,CAAC;EACtB,CAAC;AACH;AAEA,IAAG,OAAOpC,EAAE,KAAK,WAAW,EAAC;EAC3BD,SAAS,CAACC,EAAE,EAAEA,EAAE,CAACqC,SAAS,CAAC;AAC7B;AAEA,SAAStC,SAAS,IAAIuC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}