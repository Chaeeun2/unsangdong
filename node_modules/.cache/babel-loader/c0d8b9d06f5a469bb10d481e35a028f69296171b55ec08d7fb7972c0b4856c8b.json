{"ast":null,"code":"/**\n * @module Math\n * @submodule Random\n * @for p5\n * @requires core\n */\n\nfunction random(p5, fn) {\n  // variables used for random number generators\n  const randomStateProp = '_lcg_random_state';\n  // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n  // m is basically chosen to be large (as it is the max period)\n  // and for its relationships to a and c\n  const m = 4294967296;\n  // a - 1 should be divisible by m's prime factors\n  const a = 1664525;\n  // c and m should be co-prime\n  const c = 1013904223;\n  let y2 = 0;\n\n  // Linear Congruential Generator that stores its state at instance[stateProperty]\n  fn._lcg = function (stateProperty) {\n    // define the recurrence relationship\n    this[stateProperty] = (a * this[stateProperty] + c) % m;\n    // return a float in [0, 1)\n    // we've just used % m, so / m is always < 1\n    return this[stateProperty] / m;\n  };\n  fn._lcgSetSeed = function (stateProperty, val) {\n    // pick a random seed if val is undefined or null\n    // the >>> 0 casts the seed to an unsigned 32-bit integer\n    this[stateProperty] = (val == null ? Math.random() * m : val) >>> 0;\n  };\n\n  /**\n   * Sets the seed value for the <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> functions.\n   *\n   * By default, <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> produce different\n   * results each time a sketch is run. Calling `randomSeed()` with a constant\n   * argument, such as `randomSeed(99)`, makes these functions produce the same\n   * results each time a sketch is run.\n   *\n   * @method randomSeed\n   * @param {Number} seed   seed value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the white circle.\n   *   circle(x, y, 10);\n   *\n   *   // Set a random seed for consistency.\n   *   randomSeed(99);\n   *\n   *   // Get random coordinates.\n   *   x = random(0, 100);\n   *   y = random(0, 100);\n   *\n   *   // Draw the black circle.\n   *   fill(0);\n   *   circle(x, y, 10);\n   *\n   *   describe('A white circle appears at a random position. A black circle appears at (27.4, 25.8).');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomSeed = function (seed) {\n    this._lcgSetSeed(randomStateProp, seed);\n    this._gaussian_previous = false;\n  };\n\n  /**\n   * Returns a random number or a random element from an array.\n   *\n   * `random()` follows uniform distribution, which means that all outcomes are\n   * equally likely. When `random()` is used to generate numbers, all\n   * numbers in the output range are equally likely to be returned. When\n   * `random()` is used to select elements from an array, all elements are\n   * equally likely to be chosen.\n   *\n   * By default, `random()` produces different results each time a sketch runs.\n   * The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be used to\n   * generate the same sequence of numbers or choices each time a sketch runs.\n   *\n   * The version of `random()` with no parameters returns a random number from 0\n   * up to but not including 1.\n   *\n   * The version of `random()` with one parameter works one of two ways. If the\n   * argument passed is a number, `random()` returns a random number from 0 up\n   * to but not including the number. For example, calling `random(5)` returns\n   * values between 0 and 5. If the argument passed is an array, `random()`\n   * returns a random element from that array. For example, calling\n   * `random(['ü¶Å', 'üêØ', 'üêª'])` returns either a lion, tiger, or bear emoji.\n   *\n   * The version of `random()` with two parameters returns a random number from\n   * a given range. The arguments passed set the range's lower and upper bounds.\n   * For example, calling `random(-5, 10.2)` returns values from -5 up to but\n   * not including 10.2.\n   *\n   * @method random\n   * @param  {Number} [min]   lower bound (inclusive).\n   * @param  {Number} [max]   upper bound (exclusive).\n   * @return {Number} random number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw a point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of emoji strings.\n   *   let animals = ['ü¶Å', 'üêØ', 'üêª'];\n   *\n   *   // Choose a random element from the array.\n   *   let choice = random(animals);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(20);\n   *\n   *   // Display the emoji.\n   *   text(choice, 50, 50);\n   *\n   *   describe('An animal face is displayed at random. Either a lion, tiger, or bear.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly in the middle of a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 45 and 55.\n   *   let x = random(45, 55);\n   *   let y = random(45, 55);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x = 50;\n   * let y = 50;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A black dot moves around randomly leaving a trail.');\n   * }\n   *\n   * function draw() {\n   *   // Update x and y randomly.\n   *   x += random(-1, 1);\n   *   y += random(-1, 1);\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method random\n   * @param  {Array} choices   array to choose from.\n   * @return {*} random element from the array.\n   */\n  fn.random = function (min, max) {\n    // p5._validateParameters('random', arguments);\n    let rand;\n    if (this[randomStateProp] != null) {\n      rand = this._lcg(randomStateProp);\n    } else {\n      rand = Math.random();\n    }\n    if (typeof min === 'undefined') {\n      return rand;\n    } else if (typeof max === 'undefined') {\n      if (min instanceof Array) {\n        return min[Math.floor(rand * min.length)];\n      } else {\n        return rand * min;\n      }\n    } else {\n      if (min > max) {\n        const tmp = min;\n        min = max;\n        max = tmp;\n      }\n      return rand * (max - min) + min;\n    }\n  };\n\n  /**\n   * Returns a random number fitting a Gaussian, or normal, distribution.\n   *\n   * Normal distributions look like bell curves when plotted. Values from a\n   * normal distribution cluster around a central value called the mean. The\n   * cluster's standard deviation describes its spread.\n   *\n   * By default, `randomGaussian()` produces different results each time a\n   * sketch runs. The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be\n   * used to generate the same sequence of numbers each time a sketch runs.\n   *\n   * There's no minimum or maximum value that `randomGaussian()` might return.\n   * Values far from the mean are very unlikely and values near the mean are\n   * very likely.\n   *\n   * The version of `randomGaussian()` with no parameters returns values with a\n   * mean of 0 and standard deviation of 1.\n   *\n   * The version of `randomGaussian()` with one parameter interprets the\n   * argument passed as the mean. The standard deviation is 1.\n   *\n   * The version of `randomGaussian()` with two parameters interprets the first\n   * argument passed as the mean and the second as the standard deviation.\n   *\n   * @method randomGaussian\n   * @param  {Number} [mean]  mean.\n   * @param  {Number} [sd]    standard deviation.\n   * @return {Number} random number.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('Three horizontal black lines are filled in randomly. The top line spans entire canvas. The middle line is very short. The bottom line spans two-thirds of the canvas.');\n   * }\n   *\n   * function draw() {\n   *   // Style the circles.\n   *   noStroke();\n   *   fill(0, 10);\n   *\n   *   // Uniform distribution between 0 and 100.\n   *   let x = random(100);\n   *   let y = 25;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 1.\n   *   x = randomGaussian(50);\n   *   y = 50;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 10.\n   *   x = randomGaussian(50, 10);\n   *   y = 75;\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomGaussian = function (mean, sd = 1) {\n    let y1, x1, x2, w;\n    if (this._gaussian_previous) {\n      y1 = y2;\n      this._gaussian_previous = false;\n    } else {\n      do {\n        x1 = this.random(2) - 1;\n        x2 = this.random(2) - 1;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1);\n      w = Math.sqrt(-2 * Math.log(w) / w);\n      y1 = x1 * w;\n      y2 = x2 * w;\n      this._gaussian_previous = true;\n    }\n    const m = mean || 0;\n    return y1 * sd + m;\n  };\n}\nif (typeof p5 !== 'undefined') {\n  random(p5, p5.prototype);\n}\nexport { random as default };","map":{"version":3,"names":["random","p5","fn","randomStateProp","m","a","c","y2","_lcg","stateProperty","_lcgSetSeed","val","Math","randomSeed","seed","_gaussian_previous","min","max","rand","Array","floor","length","tmp","randomGaussian","mean","sd","y1","x1","x2","w","sqrt","log","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/math/random.js"],"sourcesContent":["/**\n * @module Math\n * @submodule Random\n * @for p5\n * @requires core\n */\n\nfunction random(p5, fn){\n  // variables used for random number generators\n  const randomStateProp = '_lcg_random_state';\n  // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n  // m is basically chosen to be large (as it is the max period)\n  // and for its relationships to a and c\n  const m = 4294967296;\n  // a - 1 should be divisible by m's prime factors\n  const a = 1664525;\n  // c and m should be co-prime\n  const c = 1013904223;\n  let y2 = 0;\n\n  // Linear Congruential Generator that stores its state at instance[stateProperty]\n  fn._lcg = function(stateProperty) {\n    // define the recurrence relationship\n    this[stateProperty] = (a * this[stateProperty] + c) % m;\n    // return a float in [0, 1)\n    // we've just used % m, so / m is always < 1\n    return this[stateProperty] / m;\n  };\n\n  fn._lcgSetSeed = function(stateProperty, val) {\n    // pick a random seed if val is undefined or null\n    // the >>> 0 casts the seed to an unsigned 32-bit integer\n    this[stateProperty] = (val == null ? Math.random() * m : val) >>> 0;\n  };\n\n  /**\n   * Sets the seed value for the <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> functions.\n   *\n   * By default, <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> produce different\n   * results each time a sketch is run. Calling `randomSeed()` with a constant\n   * argument, such as `randomSeed(99)`, makes these functions produce the same\n   * results each time a sketch is run.\n   *\n   * @method randomSeed\n   * @param {Number} seed   seed value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the white circle.\n   *   circle(x, y, 10);\n   *\n   *   // Set a random seed for consistency.\n   *   randomSeed(99);\n   *\n   *   // Get random coordinates.\n   *   x = random(0, 100);\n   *   y = random(0, 100);\n   *\n   *   // Draw the black circle.\n   *   fill(0);\n   *   circle(x, y, 10);\n   *\n   *   describe('A white circle appears at a random position. A black circle appears at (27.4, 25.8).');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomSeed = function(seed) {\n    this._lcgSetSeed(randomStateProp, seed);\n    this._gaussian_previous = false;\n  };\n\n  /**\n   * Returns a random number or a random element from an array.\n   *\n   * `random()` follows uniform distribution, which means that all outcomes are\n   * equally likely. When `random()` is used to generate numbers, all\n   * numbers in the output range are equally likely to be returned. When\n   * `random()` is used to select elements from an array, all elements are\n   * equally likely to be chosen.\n   *\n   * By default, `random()` produces different results each time a sketch runs.\n   * The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be used to\n   * generate the same sequence of numbers or choices each time a sketch runs.\n   *\n   * The version of `random()` with no parameters returns a random number from 0\n   * up to but not including 1.\n   *\n   * The version of `random()` with one parameter works one of two ways. If the\n   * argument passed is a number, `random()` returns a random number from 0 up\n   * to but not including the number. For example, calling `random(5)` returns\n   * values between 0 and 5. If the argument passed is an array, `random()`\n   * returns a random element from that array. For example, calling\n   * `random(['ü¶Å', 'üêØ', 'üêª'])` returns either a lion, tiger, or bear emoji.\n   *\n   * The version of `random()` with two parameters returns a random number from\n   * a given range. The arguments passed set the range's lower and upper bounds.\n   * For example, calling `random(-5, 10.2)` returns values from -5 up to but\n   * not including 10.2.\n   *\n   * @method random\n   * @param  {Number} [min]   lower bound (inclusive).\n   * @param  {Number} [max]   upper bound (exclusive).\n   * @return {Number} random number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw a point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of emoji strings.\n   *   let animals = ['ü¶Å', 'üêØ', 'üêª'];\n   *\n   *   // Choose a random element from the array.\n   *   let choice = random(animals);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(20);\n   *\n   *   // Display the emoji.\n   *   text(choice, 50, 50);\n   *\n   *   describe('An animal face is displayed at random. Either a lion, tiger, or bear.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly in the middle of a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 45 and 55.\n   *   let x = random(45, 55);\n   *   let y = random(45, 55);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x = 50;\n   * let y = 50;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A black dot moves around randomly leaving a trail.');\n   * }\n   *\n   * function draw() {\n   *   // Update x and y randomly.\n   *   x += random(-1, 1);\n   *   y += random(-1, 1);\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method random\n   * @param  {Array} choices   array to choose from.\n   * @return {*} random element from the array.\n   */\n  fn.random = function(min, max) {\n    // p5._validateParameters('random', arguments);\n    let rand;\n\n    if (this[randomStateProp] != null) {\n      rand = this._lcg(randomStateProp);\n    } else {\n      rand = Math.random();\n    }\n    if (typeof min === 'undefined') {\n      return rand;\n    } else if (typeof max === 'undefined') {\n      if (min instanceof Array) {\n        return min[Math.floor(rand * min.length)];\n      } else {\n        return rand * min;\n      }\n    } else {\n      if (min > max) {\n        const tmp = min;\n        min = max;\n        max = tmp;\n      }\n\n      return rand * (max - min) + min;\n    }\n  };\n\n  /**\n   * Returns a random number fitting a Gaussian, or normal, distribution.\n   *\n   * Normal distributions look like bell curves when plotted. Values from a\n   * normal distribution cluster around a central value called the mean. The\n   * cluster's standard deviation describes its spread.\n   *\n   * By default, `randomGaussian()` produces different results each time a\n   * sketch runs. The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be\n   * used to generate the same sequence of numbers each time a sketch runs.\n   *\n   * There's no minimum or maximum value that `randomGaussian()` might return.\n   * Values far from the mean are very unlikely and values near the mean are\n   * very likely.\n   *\n   * The version of `randomGaussian()` with no parameters returns values with a\n   * mean of 0 and standard deviation of 1.\n   *\n   * The version of `randomGaussian()` with one parameter interprets the\n   * argument passed as the mean. The standard deviation is 1.\n   *\n   * The version of `randomGaussian()` with two parameters interprets the first\n   * argument passed as the mean and the second as the standard deviation.\n   *\n   * @method randomGaussian\n   * @param  {Number} [mean]  mean.\n   * @param  {Number} [sd]    standard deviation.\n   * @return {Number} random number.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('Three horizontal black lines are filled in randomly. The top line spans entire canvas. The middle line is very short. The bottom line spans two-thirds of the canvas.');\n   * }\n   *\n   * function draw() {\n   *   // Style the circles.\n   *   noStroke();\n   *   fill(0, 10);\n   *\n   *   // Uniform distribution between 0 and 100.\n   *   let x = random(100);\n   *   let y = 25;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 1.\n   *   x = randomGaussian(50);\n   *   y = 50;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 10.\n   *   x = randomGaussian(50, 10);\n   *   y = 75;\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomGaussian = function(mean, sd = 1) {\n    let y1, x1, x2, w;\n    if (this._gaussian_previous) {\n      y1 = y2;\n      this._gaussian_previous = false;\n    } else {\n      do {\n        x1 = this.random(2) - 1;\n        x2 = this.random(2) - 1;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1);\n      w = Math.sqrt(-2 * Math.log(w) / w);\n      y1 = x1 * w;\n      y2 = x2 * w;\n      this._gaussian_previous = true;\n    }\n\n    const m = mean || 0;\n    return y1 * sd + m;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  random(p5, p5.prototype);\n}\n\nexport { random as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}