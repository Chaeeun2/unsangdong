{"ast":null,"code":"/**\n * @module IO\n * @submodule Time & Date\n * @for p5\n * @requires core\n */\n\nfunction timeDate(p5, fn) {\n  /**\n   * Returns the current day as a number from 1–31.\n   *\n   * @method day\n   * @return {Integer} current day between 1 and 31.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current day.\n   *   let d = day();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the day.\n   *   text(`Current day: ${d}`, 20, 50, 60);\n   *\n   *   describe(`The text 'Current day: ${d}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.day = function () {\n    return new Date().getDate();\n  };\n\n  /**\n   * Returns the current hour as a number from 0–23.\n   *\n   * @method hour\n   * @return {Integer} current hour between 0 and 23.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current hour.\n   *   let h = hour();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the hour.\n   *   text(`Current hour: ${h}`, 20, 50, 60);\n   *\n   *   describe(`The text 'Current hour: ${h}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.hour = function () {\n    return new Date().getHours();\n  };\n\n  /**\n   * Returns the current minute as a number from 0–59.\n   *\n   * @method minute\n   * @return {Integer} current minute between 0 and 59.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current minute.\n   *   let m = minute();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the minute.\n   *   text(`Current minute: ${m}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current minute: ${m}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.minute = function () {\n    return new Date().getMinutes();\n  };\n\n  /**\n   * Returns the number of milliseconds since a sketch started running.\n   *\n   * `millis()` keeps track of how long a sketch has been running in\n   * milliseconds (thousandths of a second). This information is often\n   * helpful for timing events and animations.\n   *\n   * If a sketch has a\n   * <a href=\"#/p5/setup\">setup()</a> function, then `millis()` begins tracking\n   * time before the code in <a href=\"#/p5/setup\">setup()</a> runs.  If a\n   * sketch includes asynchronous loading using `async`/`await`, then\n   * `millis()` begins tracking time as soon as the asynchronous code\n   * starts running.\n   * @method millis\n   * @return {Number} number of milliseconds since starting the sketch.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the number of milliseconds the sketch has run.\n   *   let ms = millis();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(10);\n   *   textFont('Courier New');\n   *\n   *   // Display how long it took setup() to be called.\n   *   text(`Startup time: ${round(ms, 2)} ms`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text 'Startup time: ${round(ms, 2)} ms' written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('The text \"Running time: S sec\" written in black on a gray background. The number S increases as the sketch runs.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the number of seconds the sketch has run.\n   *   let s = millis() / 1000;\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(10);\n   *   textFont('Courier New');\n   *\n   *   // Display how long the sketch has run.\n   *   text(`Running time: ${nf(s, 1, 1)} sec`, 5, 50, 90);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle oscillates left and right on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the number of seconds the sketch has run.\n   *   let s = millis() / 1000;\n   *\n   *   // Calculate an x-coordinate.\n   *   let x = 30 * sin(s) + 50;\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * async function setup() {\n   *   // Load the GeoJSON.\n   *   await loadJSON('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson');\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the number of milliseconds the sketch has run.\n   *   let ms = millis();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(11);\n   *\n   *   // Display how long it took to load the data.\n   *   text(`It took ${round(ms, 2)} ms to load the data`, 5, 50, 100);\n   *\n   *   describe(\n   *     `The text \"It took ${round(ms, 2)} ms to load the data\" written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.millis = function () {\n    if (this._millisStart === -1) {\n      // Sketch has not started\n      return 0;\n    } else {\n      return window.performance.now() - this._millisStart;\n    }\n  };\n\n  /**\n   * Returns the current month as a number from 1–12.\n   *\n   * @method month\n   * @return {Integer} current month between 1 and 12.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current month.\n   *   let m = month();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the month.\n   *   text(`Current month: ${m}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current month: ${m}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.month = function () {\n    //January is 0!\n    return new Date().getMonth() + 1;\n  };\n\n  /**\n   * Returns the current second as a number from 0–59.\n   *\n   * @method second\n   * @return {Integer} current second between 0 and 59.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current second.\n   *   let s = second();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the second.\n   *   text(`Current second: ${s}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current second: ${s}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.second = function () {\n    return new Date().getSeconds();\n  };\n\n  /**\n   * Returns the current year as a number such as 1999.\n   *\n   * @method year\n   * @return {Integer} current year.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current year.\n   *   let y = year();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the year.\n   *   text(`Current year: ${y}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current year: ${y}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.year = function () {\n    return new Date().getFullYear();\n  };\n}\nif (typeof p5 !== 'undefined') {\n  timeDate(p5, p5.prototype);\n}\nexport { timeDate as default };","map":{"version":3,"names":["timeDate","p5","fn","day","Date","getDate","hour","getHours","minute","getMinutes","millis","_millisStart","window","performance","now","month","getMonth","second","getSeconds","year","getFullYear","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/utilities/time_date.js"],"sourcesContent":["/**\n * @module IO\n * @submodule Time & Date\n * @for p5\n * @requires core\n */\n\nfunction timeDate(p5, fn){\n  /**\n   * Returns the current day as a number from 1–31.\n   *\n   * @method day\n   * @return {Integer} current day between 1 and 31.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current day.\n   *   let d = day();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the day.\n   *   text(`Current day: ${d}`, 20, 50, 60);\n   *\n   *   describe(`The text 'Current day: ${d}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.day = function() {\n    return new Date().getDate();\n  };\n\n  /**\n   * Returns the current hour as a number from 0–23.\n   *\n   * @method hour\n   * @return {Integer} current hour between 0 and 23.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current hour.\n   *   let h = hour();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the hour.\n   *   text(`Current hour: ${h}`, 20, 50, 60);\n   *\n   *   describe(`The text 'Current hour: ${h}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.hour = function() {\n    return new Date().getHours();\n  };\n\n  /**\n   * Returns the current minute as a number from 0–59.\n   *\n   * @method minute\n   * @return {Integer} current minute between 0 and 59.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current minute.\n   *   let m = minute();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the minute.\n   *   text(`Current minute: ${m}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current minute: ${m}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.minute = function() {\n    return new Date().getMinutes();\n  };\n\n  /**\n   * Returns the number of milliseconds since a sketch started running.\n   *\n   * `millis()` keeps track of how long a sketch has been running in\n   * milliseconds (thousandths of a second). This information is often\n   * helpful for timing events and animations.\n   *\n   * If a sketch has a\n   * <a href=\"#/p5/setup\">setup()</a> function, then `millis()` begins tracking\n   * time before the code in <a href=\"#/p5/setup\">setup()</a> runs.  If a\n   * sketch includes asynchronous loading using `async`/`await`, then\n   * `millis()` begins tracking time as soon as the asynchronous code\n   * starts running.\n   * @method millis\n   * @return {Number} number of milliseconds since starting the sketch.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the number of milliseconds the sketch has run.\n   *   let ms = millis();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(10);\n   *   textFont('Courier New');\n   *\n   *   // Display how long it took setup() to be called.\n   *   text(`Startup time: ${round(ms, 2)} ms`, 5, 50, 90);\n   *\n   *   describe(\n   *     `The text 'Startup time: ${round(ms, 2)} ms' written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('The text \"Running time: S sec\" written in black on a gray background. The number S increases as the sketch runs.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the number of seconds the sketch has run.\n   *   let s = millis() / 1000;\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(10);\n   *   textFont('Courier New');\n   *\n   *   // Display how long the sketch has run.\n   *   text(`Running time: ${nf(s, 1, 1)} sec`, 5, 50, 90);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white circle oscillates left and right on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the number of seconds the sketch has run.\n   *   let s = millis() / 1000;\n   *\n   *   // Calculate an x-coordinate.\n   *   let x = 30 * sin(s) + 50;\n   *\n   *   // Draw the circle.\n   *   circle(x, 50, 30);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * async function setup() {\n   *   // Load the GeoJSON.\n   *   await loadJSON('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson');\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the number of milliseconds the sketch has run.\n   *   let ms = millis();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textFont('Courier New');\n   *   textSize(11);\n   *\n   *   // Display how long it took to load the data.\n   *   text(`It took ${round(ms, 2)} ms to load the data`, 5, 50, 100);\n   *\n   *   describe(\n   *     `The text \"It took ${round(ms, 2)} ms to load the data\" written in black on a gray background.`\n   *   );\n   * }\n   * </code>\n   * </div>\n   */\n  fn.millis = function() {\n    if (this._millisStart === -1) {\n      // Sketch has not started\n      return 0;\n    } else {\n      return window.performance.now() - this._millisStart;\n    }\n  };\n\n  /**\n   * Returns the current month as a number from 1–12.\n   *\n   * @method month\n   * @return {Integer} current month between 1 and 12.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current month.\n   *   let m = month();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the month.\n   *   text(`Current month: ${m}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current month: ${m}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.month = function() {\n    //January is 0!\n    return new Date().getMonth() + 1;\n  };\n\n  /**\n   * Returns the current second as a number from 0–59.\n   *\n   * @method second\n   * @return {Integer} current second between 0 and 59.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current second.\n   *   let s = second();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the second.\n   *   text(`Current second: ${s}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current second: ${s}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.second = function() {\n    return new Date().getSeconds();\n  };\n\n  /**\n   * Returns the current year as a number such as 1999.\n   *\n   * @method year\n   * @return {Integer} current year.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get the current year.\n   *   let y = year();\n   *\n   *   // Style the text.\n   *   textAlign(LEFT, CENTER);\n   *   textSize(12);\n   *   textFont('Courier New');\n   *\n   *   // Display the year.\n   *   text(`Current year: ${y}`, 10, 50, 80);\n   *\n   *   describe(`The text 'Current year: ${y}' written in black on a gray background.`);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.year = function() {\n    return new Date().getFullYear();\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  timeDate(p5, p5.prototype);\n}\n\nexport { timeDate as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQA,CAACC,EAAE,EAAEC,EAAE,EAAC;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,EAAE,CAACC,GAAG,GAAG,YAAW;IAClB,OAAO,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAC7B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEH,EAAE,CAACI,IAAI,GAAG,YAAW;IACnB,OAAO,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,EAAE,CAACM,MAAM,GAAG,YAAW;IACrB,OAAO,IAAIJ,IAAI,CAAC,CAAC,CAACK,UAAU,CAAC,CAAC;EAChrB,IAAI,IAAI,CAACC,YAAY,KAAK,CAAC,CAAC,EAAE;MAC5B;MACA,OAAO,CAAC;IACV,CAAC,MAAM;MACL,OAAOC,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACH,YAAY;IACrD;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,EAAE,CAACa,KAAK,GAAG,YAAW;IACpB;IACA,OAAO,IAAIX,IAAI,CAAC,CAAC,CAACY,QAAQ,CAAC,CAAC,GAAG,CAAC;EAClC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEd,EAAE,CAACe,MAAM,GAAG,YAAW;IACrB,OAAO,IAAIb,IAAI,CAAC,CAAC,CAACc,UAAU,CAAC,CAAC;EAChC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhB,EAAE,CAACiB,IAAI,GAAG,YAAW;IACnB,OAAO,IAAIf,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;EACjC,CAAC;AACH;AAEA,IAAG,OAAOnB,EAAE,KAAK,WAAW,EAAC;EAC3BD,QAAQ,CAACC,EAAE,EAAEA,EAAE,CAACoB,SAAS,CAAC;AAC5B;AAEA,SAASrB,QAAQ,IAAIsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}