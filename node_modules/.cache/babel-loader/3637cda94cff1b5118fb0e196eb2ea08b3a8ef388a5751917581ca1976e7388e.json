{"ast":null,"code":"import { XML } from '../io/p5.XML.js';\n\n/**\n * @module DOM\n * @submodule DOM\n * @for p5.Element\n */\n\nclass File {\n  constructor(file, pInst) {\n    this.file = file;\n    this._pInst = pInst;\n\n    // Splitting out the file type into two components\n    // This makes determining if image or text etc simpler\n    const typeList = file.type.split('/');\n    this.type = typeList[0];\n    this.subtype = typeList[1];\n    this.name = file.name;\n    this.size = file.size;\n    this.data = undefined;\n  }\n  static _createLoader(theFile, callback) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const p5file = new File(theFile);\n      if (p5file.file.type === 'application/json') {\n        // Parse JSON and store the result in data\n        p5file.data = JSON.parse(e.target.result);\n      } else if (p5file.file.type === 'text/xml') {\n        // Parse XML, wrap it in p5.XML and store the result in data\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(e.target.result, 'text/xml');\n        p5file.data = new XML(xml.documentElement);\n      } else {\n        p5file.data = e.target.result;\n      }\n      callback(p5file);\n    };\n    return reader;\n  }\n  static _load(f, callback) {\n    // Text or data?\n    // This should likely be improved\n    if (/^text\\//.test(f.type) || f.type === 'application/json') {\n      File._createLoader(f, callback).readAsText(f);\n    } else if (!/^(video|audio)\\//.test(f.type)) {\n      File._createLoader(f, callback).readAsDataURL(f);\n    } else {\n      const file = new File(f);\n      file.data = URL.createObjectURL(f);\n      callback(file);\n    }\n  }\n}\nfunction file(p5, fn) {\n  /**\n   * A class to describe a file.\n   *\n   * `p5.File` objects are used by\n   * <a href=\"#/p5.Element/drop\">myElement.drop()</a> and\n   * created by\n   * <a href=\"#/p5/createFileInput\">createFileInput</a>.\n   *\n   * @class p5.File\n   * @param {File} file wrapped file.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Display the p5.File's info once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call handleImage() when the file image loads.\n   *   let input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if it's ready.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Use the p5.File's data once it loads.\n   * function handleImage(file) {\n   *   // Check the p5.File's type.\n   *   if (file.type === 'image') {\n   *     // Create an image using using the p5.File's data.\n   *     img = createImg(file.data, '');\n   *\n   *     // Hide the image element so it doesn't appear twice.\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  p5.File = File;\n\n  /**\n   * Underlying\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\">File</a>\n   * object. All `File` properties and methods are accessible.\n   *\n   * @for p5.File\n   * @property file\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Use the p5.File once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * as a string.\n   *\n   * For example, `'image'` and `'text'` are both MIME types.\n   *\n   * @for p5.File\n   * @property type\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayType() when the file loads.\n   *   let input = createFileInput(displayType);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its type is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displayType(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's type.\n   *   text(`This is file's type is: ${file.type}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file subtype as a string.\n   *\n   * For example, a file with an `'image'`\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * may have a subtype such as ``png`` or ``jpeg``.\n   *\n   * @property subtype\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySubtype() when the file loads.\n   *   let input = createFileInput(displaySubtype);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its subtype is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displaySubtype(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's subtype.\n   *   text(`This is file's subtype is: ${file.subtype}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file name as a string.\n   *\n   * @property name\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayName() when the file loads.\n   *   let input = createFileInput(displayName);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its name is written in black.');\n   * }\n   *\n   * // Display the p5.File's name once it loads.\n   * function displayName(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(`This is file's name is: ${file.name}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The number of bytes in the file.\n   *\n   * @property size\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySize() when the file loads.\n   *   let input = createFileInput(displaySize);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its size in bytes is written in black.');\n   * }\n   *\n   * // Display the p5.File's size in bytes once it loads.\n   * function displaySize(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's size.\n   *   text(`This is file has ${file.size} bytes.`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * A string containing the file's data.\n   *\n   * Data can be either image data, text contents, or a parsed object in the\n   * case of JSON and <a href=\"#/p5.XML\">p5.XML</a> objects.\n   *\n   * @property data\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayData() when the file loads.\n   *   let input = createFileInput(displayData);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its data is written in black.');\n   * }\n   *\n   * // Display the p5.File's data once it loads.\n   * function displayData(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's data, which looks like a random string of characters.\n   *   text(file.data, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\nif (typeof p5 !== 'undefined') {\n  file(p5, p5.prototype);\n}\nexport { File, file as default };","map":{"version":3,"names":["XML","File","constructor","file","pInst","_pInst","typeList","type","split","subtype","name","size","data","undefined","_createLoader","theFile","callback","reader","FileReader","onload","e","p5file","JSON","parse","target","result","parser","DOMParser","xml","parseFromString","documentElement","_load","f","test","readAsText","readAsDataURL","URL","createObjectURL","p5","fn","prototype","default"],"sources":["/Users/lyuchaeeun/Desktop/unsaengdong/node_modules/p5/dist/dom/p5.File.js"],"sourcesContent":["import { XML } from '../io/p5.XML.js';\n\n/**\n * @module DOM\n * @submodule DOM\n * @for p5.Element\n */\n\n\nclass File {\n  constructor(file, pInst) {\n    this.file = file;\n\n    this._pInst = pInst;\n\n    // Splitting out the file type into two components\n    // This makes determining if image or text etc simpler\n    const typeList = file.type.split('/');\n    this.type = typeList[0];\n    this.subtype = typeList[1];\n    this.name = file.name;\n    this.size = file.size;\n    this.data = undefined;\n  }\n\n\n  static _createLoader(theFile, callback) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const p5file = new File(theFile);\n      if (p5file.file.type === 'application/json') {\n        // Parse JSON and store the result in data\n        p5file.data = JSON.parse(e.target.result);\n      } else if (p5file.file.type === 'text/xml') {\n        // Parse XML, wrap it in p5.XML and store the result in data\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(e.target.result, 'text/xml');\n        p5file.data = new XML(xml.documentElement);\n      } else {\n        p5file.data = e.target.result;\n      }\n      callback(p5file);\n    };\n    return reader;\n  }\n\n  static _load(f, callback) {\n    // Text or data?\n    // This should likely be improved\n    if (/^text\\//.test(f.type) || f.type === 'application/json') {\n      File._createLoader(f, callback).readAsText(f);\n    } else if (!/^(video|audio)\\//.test(f.type)) {\n      File._createLoader(f, callback).readAsDataURL(f);\n    } else {\n      const file = new File(f);\n      file.data = URL.createObjectURL(f);\n      callback(file);\n    }\n  }\n}\n\nfunction file(p5, fn){\n  /**\n   * A class to describe a file.\n   *\n   * `p5.File` objects are used by\n   * <a href=\"#/p5.Element/drop\">myElement.drop()</a> and\n   * created by\n   * <a href=\"#/p5/createFileInput\">createFileInput</a>.\n   *\n   * @class p5.File\n   * @param {File} file wrapped file.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Display the p5.File's info once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call handleImage() when the file image loads.\n   *   let input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if it's ready.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Use the p5.File's data once it loads.\n   * function handleImage(file) {\n   *   // Check the p5.File's type.\n   *   if (file.type === 'image') {\n   *     // Create an image using using the p5.File's data.\n   *     img = createImg(file.data, '');\n   *\n   *     // Hide the image element so it doesn't appear twice.\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  p5.File = File;\n\n  /**\n   * Underlying\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\">File</a>\n   * object. All `File` properties and methods are accessible.\n   *\n   * @for p5.File\n   * @property file\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Use the p5.File once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * as a string.\n   *\n   * For example, `'image'` and `'text'` are both MIME types.\n   *\n   * @for p5.File\n   * @property type\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayType() when the file loads.\n   *   let input = createFileInput(displayType);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its type is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displayType(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's type.\n   *   text(`This is file's type is: ${file.type}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file subtype as a string.\n   *\n   * For example, a file with an `'image'`\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * may have a subtype such as ``png`` or ``jpeg``.\n   *\n   * @property subtype\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySubtype() when the file loads.\n   *   let input = createFileInput(displaySubtype);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its subtype is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displaySubtype(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's subtype.\n   *   text(`This is file's subtype is: ${file.subtype}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file name as a string.\n   *\n   * @property name\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayName() when the file loads.\n   *   let input = createFileInput(displayName);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its name is written in black.');\n   * }\n   *\n   * // Display the p5.File's name once it loads.\n   * function displayName(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(`This is file's name is: ${file.name}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The number of bytes in the file.\n   *\n   * @property size\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySize() when the file loads.\n   *   let input = createFileInput(displaySize);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its size in bytes is written in black.');\n   * }\n   *\n   * // Display the p5.File's size in bytes once it loads.\n   * function displaySize(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's size.\n   *   text(`This is file has ${file.size} bytes.`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * A string containing the file's data.\n   *\n   * Data can be either image data, text contents, or a parsed object in the\n   * case of JSON and <a href=\"#/p5.XML\">p5.XML</a> objects.\n   *\n   * @property data\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayData() when the file loads.\n   *   let input = createFileInput(displayData);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its data is written in black.');\n   * }\n   *\n   * // Display the p5.File's data once it loads.\n   * function displayData(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's data, which looks like a random string of characters.\n   *   text(file.data, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  file(p5, p5.prototype);\n}\n\nexport { File, file as default };\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,iBAAiB;;AAErC;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAI,CAAC;EACTC,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACvB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAEhB,IAAI,CAACE,MAAM,GAAGD,KAAK;;IAEnB;IACA;IACA,MAAME,QAAQ,GAAGH,IAAI,CAACI,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IACrC,IAAI,CAACD,IAAI,GAAGD,QAAQ,CAAC,CAAC,CAAC;IACvB,IAAI,CAACG,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;IAC1B,IAAI,CAACI,IAAI,GAAGP,IAAI,CAACO,IAAI;IACrB,IAAI,CAACC,IAAI,GAAGR,IAAI,CAACQ,IAAI;IACrB,IAAI,CAACC,IAAI,GAAGC,SAAS;EACvB;EAGA,OAAOC,aAAaA,CAACC,OAAO,EAAEC,QAAQ,EAAE;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,UAAUC,CAAC,EAAE;MAC3B,MAAMC,MAAM,GAAG,IAAIpB,IAAI,CAACc,OAAO,CAAC;MAChC,IAAIM,MAAM,CAAClB,IAAI,CAACI,IAAI,KAAK,kBAAkB,EAAE;QAC3C;QACAc,MAAM,CAACT,IAAI,GAAGU,IAAI,CAACC,KAAK,CAACH,CAAC,CAACI,MAAM,CAACC,MAAM,CAAC;MAC3C,CAAC,MAAM,IAAIJ,MAAM,CAAClB,IAAI,CAACI,IAAI,KAAK,UAAU,EAAE;QAC1C;QACA,MAAMmB,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACT,CAAC,CAACI,MAAM,CAACC,MAAM,EAAE,UAAU,CAAC;QAC/DJ,MAAM,CAACT,IAAI,GAAG,IAAIZ,GAAG,CAAC4B,GAAG,CAACE,eAAe,CAAC;MAC5C,CAAC,MAAM;QACLT,MAAM,CAACT,IAAI,GAAGQ,CAAC,CAACI,MAAM,CAACC,MAAM;MAC/B;MACAT,QAAQ,CAACK,MAAM,CAAC;IAClB,CAAC;IACD,OAAOJ,MAAM;EACf;EAEA,OAAOc,KAAKA,CAACC,CAAC,EAAEhB,QAAQ,EAAE;IACxB;IACA;IACA,IAAI,SAAS,CAACiB,IAAI,CAACD,CAAC,CAACzB,IAAI,CAAC,IAAIyB,CAAC,CAACzB,IAAI,KAAK,kBAAkB,EAAE;MAC3DN,IAAI,CAACa,aAAa,CAACkB,CAAC,EAAEhB,QAAQ,CAAC,CAACkB,UAAU,CAACF,CAAC,CAAC;IAC/C,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAACC,IAAI,CAACD,CAAC,CAACzB,IAAI,CAAC,EAAE;MAC3CN,IAAI,CAACa,aAAa,CAACkB,CAAC,EAAEhB,QAAQ,CAAC,CAACmB,aAAa,CAACH,CAAC,CAAC;IAClD,CAAC,MAAM;MACL,MAAM7B,IAAI,GAAG,IAAIF,IAAI,CAAC+B,CAAC,CAAC;MACxB7B,IAAI,CAACS,IAAI,GAAGwB,GAAG,CAACC,eAAe,CAACL,CAAC,CAAC;MAClChB,QAAQ,CAACb,IAAI,CAAC;IAChB;EACF;AACF;AAEA,SAASA,IAAIA,CAACmC,EAAE,EAAEC,EAAE,EAAC;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACED,EAAE,CAACrC,IAAI,GAAGA,IAAI;;EAEdqC,EAAE,KAAK,WAAW,EAAC;EAC3BnC,IAAI,CAACmC,EAAE,EAAEA,EAAE,CAACE,SAAS,CAAC;AACxB;AAEA,SAASvC,IAAI,EAAEE,IAAI,IAAIsC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}